in function;

use ymirc::utils::_;
use utils;

use std::io;

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 1 start");

    let res = utils::compileFile ("test_resources/function/test1.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test1_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/function/test1_yil.txt");

    logging::success ("Test function 1 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 2 start");

    let res = utils::compileFile ("test_resources/function/test2.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test2_out.txt");

    logging::success ("Test function 2 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 3 start");

    let res = utils::compileFile ("test_resources/function/test3.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test3_out.txt");

    logging::success ("Test function 3 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 4 start");

    let res = utils::compileFile ("test_resources/function/test4.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test4_out.txt");

    logging::success ("Test function 4 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 5 start");

    let res = utils::compileFile ("test_resources/function/test5.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test5_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/function/test5_yil.txt");

    logging::success ("Test function 5 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 6 start");

    let res = utils::compileFile ("test_resources/function/test6.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test6_out.txt");

    logging::success ("Test function 6 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 7 start");

    let res = utils::compileFile ("test_resources/function/test7.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test7_out.txt");

    logging::success ("Test function 7 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 8 start");

    let res = utils::compileFile ("test_resources/function/test8.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test8_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/function/test8_yil.txt");

    logging::success ("Test function 8 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 9 start");

    let res = utils::compileFile ("test_resources/function/test9.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test9_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/function/test9_yil.txt");

    logging::success ("Test function 9 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 10 start");

    let res = utils::compileFile ("test_resources/function/test10.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test10_out.txt");

    logging::success ("Test function 10 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 11 start");

    let res = utils::compileFile ("test_resources/function/test11.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test11_out.txt");

    logging::success ("Test function 11 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 12 start");

    let res = utils::compileFile ("test_resources/function/test12.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test12_out.txt");

    logging::success ("Test function 12 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 13 start");

    let res = utils::compileFile ("test_resources/function/test13.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test13_out.txt");

    logging::success ("Test function 13 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 14 start");

    let res = utils::compileFile ("test_resources/function/test14.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test14_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/function/test14_yil.txt");

    logging::success ("Test function 14 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 15 start");

    let res = utils::compileFile ("test_resources/function/test15.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test15_out.txt");

    logging::success ("Test function 15 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 16 start");

    let res = utils::compileFile ("test_resources/function/test16.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test16_out.txt");

    logging::success ("Test function 16 finished");
}
