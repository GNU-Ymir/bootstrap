mod function;

import ymirc::utils::_;
import utils;

import std::io;

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 1 start"s8);

    let res = utils::compileFile ("test_resources/function/test1.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test1_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/function/test1_yil.txt"s8);

    logging::success ("Test function 1 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 2 start"s8);

    let res = utils::compileFile ("test_resources/function/test2.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test2_out.txt"s8);

    logging::success ("Test function 2 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 3 start"s8);

    let res = utils::compileFile ("test_resources/function/test3.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test3_out.txt"s8);

    logging::success ("Test function 3 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 4 start"s8);

    let res = utils::compileFile ("test_resources/function/test4.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test4_out.txt"s8);

    logging::success ("Test function 4 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 5 start"s8);

    let res = utils::compileFile ("test_resources/function/test5.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test5_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/function/test5_yil.txt"s8);

    logging::success ("Test function 5 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 6 start"s8);

    let res = utils::compileFile ("test_resources/function/test6.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test6_out.txt"s8);

    logging::success ("Test function 6 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 7 start"s8);

    let res = utils::compileFile ("test_resources/function/test7.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test7_out.txt"s8);

    logging::success ("Test function 7 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 8 start"s8);

    let res = utils::compileFile ("test_resources/function/test8.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test8_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/function/test8_yil.txt"s8);

    logging::success ("Test function 8 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 9 start"s8);

    let res = utils::compileFile ("test_resources/function/test9.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test9_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/function/test9_yil.txt"s8);

    logging::success ("Test function 9 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 10 start"s8);

    let res = utils::compileFile ("test_resources/function/test10.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test10_out.txt"s8);

    logging::success ("Test function 10 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 11 start"s8);

    let res = utils::compileFile ("test_resources/function/test11.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test11_out.txt"s8);

    logging::success ("Test function 11 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 12 start"s8);

    let res = utils::compileFile ("test_resources/function/test12.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test12_out.txt"s8);

    logging::success ("Test function 12 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 13 start"s8);

    let res = utils::compileFile ("test_resources/function/test13.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/function/test13_out.txt"s8);

    logging::success ("Test function 13 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test function 14 start"s8);

    let res = utils::compileFile ("test_resources/function/test14.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/function/test14_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/function/test14_yil.txt"s8);

    logging::success ("Test function 14 finished"s8);
}
