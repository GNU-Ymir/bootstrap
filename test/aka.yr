in aka;

use ymirc::utils::_;
use utils;

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 1 start");


    let res = utils::compileFile ("test_resources/aka/test1.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test1_out.txt");

    logging::success ("Test aka 1 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 2 start");


    let res = utils::compileFile ("test_resources/aka/test2.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test2_out.txt");

    logging::success ("Test aka 2 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 3 start");


    let res = utils::compileFile ("test_resources/aka/test3.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test3_out.txt");

    logging::success ("Test aka 3 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 4 start");


    let res = utils::compileFile ("test_resources/aka/test4.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test4_out.txt");

    logging::success ("Test aka 4 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 5 start");


    let res = utils::compileFile ("test_resources/aka/test5.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test5_out.txt");

    logging::success ("Test aka 5 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 6 start");


    let res = utils::compileFile ("test_resources/aka/test6.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test6_out.txt");

    logging::success ("Test aka 6 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 7 start");


    let res = utils::compileFile ("test_resources/aka/test7.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test7_out.txt");

    logging::success ("Test aka 7 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 8 start");


    let res = utils::compileFile ("test_resources/aka/test8.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test8_out.txt");

    logging::success ("Test aka 8 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 9 start");


    let res = utils::compileFile ("test_resources/aka/test9.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test9_out.txt");

    logging::success ("Test aka 9 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 10 start");


    let res = utils::compileFile ("test_resources/aka/test10.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test10_out.txt");

    logging::success ("Test aka 10 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 11 start");


    let res = utils::compileFile ("test_resources/aka/test11.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test11_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/aka/test11_yil.txt");

    logging::success ("Test aka 11 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 12 start");


    let res = utils::compileFile ("test_resources/aka/test12.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test12_out.txt");

    logging::success ("Test aka 12 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 13 start");


    let res = utils::compileFile ("test_resources/aka/test13.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test13_out.txt");

    logging::success ("Test aka 13 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 14 start");


    let res = utils::compileFile ("test_resources/aka/test14.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test14_out.txt");

    logging::success ("Test aka 14 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 15 start");


    let res = utils::compileFile ("test_resources/aka/test15.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test15_out.txt");

    logging::success ("Test aka 15 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 16 start");


    let res = utils::compileFile ("test_resources/aka/test16.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test16_out.txt");

    logging::success ("Test aka 16 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 17 start");


    let res = utils::compileFile ("test_resources/aka/test17.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test17_out.txt");

    logging::success ("Test aka 17 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 18 start");


    let res = utils::compileFile ("test_resources/aka/test18.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test18_out.txt");

    logging::success ("Test aka 18 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 19 start");

    let res = utils::compileFile ("test_resources/aka/test19.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test19_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/aka/test19_yil.txt");

    logging::success ("Test aka 19 finished");
}
