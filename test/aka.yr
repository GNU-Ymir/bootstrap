mod aka;

import ymirc::utils::_;
import utils;


__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 1 start"s8);


    let res = utils::compileFile ("test_resources/aka/test1.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test1_out.txt"s8);

    logging::success ("Test aka 1 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 2 start"s8);


    let res = utils::compileFile ("test_resources/aka/test2.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test2_out.txt"s8);

    logging::success ("Test aka 2 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 3 start"s8);


    let res = utils::compileFile ("test_resources/aka/test3.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test3_out.txt"s8);

    logging::success ("Test aka 3 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 4 start"s8);


    let res = utils::compileFile ("test_resources/aka/test4.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test4_out.txt"s8);

    logging::success ("Test aka 4 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 5 start"s8);


    let res = utils::compileFile ("test_resources/aka/test5.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test5_out.txt"s8);

    logging::success ("Test aka 5 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 6 start"s8);


    let res = utils::compileFile ("test_resources/aka/test6.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test6_out.txt"s8);

    logging::success ("Test aka 6 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 7 start"s8);


    let res = utils::compileFile ("test_resources/aka/test7.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test7_out.txt"s8);

    logging::success ("Test aka 7 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 8 start"s8);


    let res = utils::compileFile ("test_resources/aka/test8.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test8_out.txt"s8);

    logging::success ("Test aka 8 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 9 start"s8);


    let res = utils::compileFile ("test_resources/aka/test9.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/aka/test9_out.txt"s8);

    logging::success ("Test aka 9 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test aka 10 start"s8);


    let res = utils::compileFile ("test_resources/aka/test10.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/aka/test10_out.txt"s8);

    logging::success ("Test aka 10 finished"s8);
}
