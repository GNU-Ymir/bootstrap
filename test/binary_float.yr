mod binary_float;

import ymirc::utils::_;
import utils;

import std::io;

// Test for binary operators on floats
__test {
    logging::setRelativeTime ();
    logging::info (" Test binary float 1 start"s8);

    let res = utils::compileFile ("test_resources/binary_float/test1.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_float/test1_out.txt"s8);

    logging::success (" Test binary float 1 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary float 2 start"s8);

    let res = utils::compileFile ("test_resources/binary_float/test2.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_float/test2_out.txt"s8);

    logging::success (" Test binary float 2 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary float 3 start"s8);

    let res = utils::compileFile ("test_resources/binary_float/test3.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_float/test3_out.txt"s8);

    logging::success (" Test binary float 3 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary float 4 start"s8);

    let res = utils::compileFile ("test_resources/binary_float/test4.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_float/test4_out.txt"s8);

    logging::success (" Test binary float 4 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary float 5 start"s8);

    let res = utils::compileFile ("test_resources/binary_float/test5.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/binary_float/test5_out.txt"s8);

    logging::success (" Test binary float 5 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test binary float 6 start"s8);

    let res = utils::compileFile ("test_resources/binary_float/test6.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_float/test6_out.txt"s8);

    logging::success (" Test binary float 6 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary float 7 start"s8);

    let res = utils::compileFile ("test_resources/binary_float/test7.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/binary_float/test7_out.txt"s8);

    logging::success (" Test binary float 7 finished"s8);
}
