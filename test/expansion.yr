mod expansion;

import ymirc::utils::_;
import utils;


__test {
    logging::setRelativeTime ();
    logging::info (" Test expansion 1 start"s8);

    let res = utils::compileFile ("test_resources/expansion/test1.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/expansion/test1_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/expansion/test1_yil.txt"s8);

    logging::success (" Test expansion 1 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test expansion 2 start"s8);

    let res = utils::compileFile ("test_resources/expansion/test2.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/expansion/test2_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/expansion/test2_yil.txt"s8);

    logging::success (" Test expansion 2 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test expansion 3 start"s8);

    let res = utils::compileFile ("test_resources/expansion/test3.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/expansion/test3_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/expansion/test3_yil.txt"s8);

    logging::success (" Test expansion 3 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test expansion 4 start"s8);

    let res = utils::compileFile ("test_resources/expansion/test4.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/expansion/test4_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/expansion/test4_yil.txt"s8);

    logging::success (" Test expansion 4 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test expansion 5 start"s8);

    let res = utils::compileFile ("test_resources/expansion/test5.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/expansion/test5_out.txt"s8);

    logging::success (" Test expansion 5 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test expansion 6 start"s8);

    let res = utils::compileFile ("test_resources/expansion/test6.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/expansion/test6_out.txt"s8);

    logging::success (" Test expansion 6 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test expansion 7 start"s8);

    let res = utils::compileFile ("test_resources/expansion/test7.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/expansion/test7_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/expansion/test7_yil.txt"s8);

    logging::success (" Test expansion 7 finished"s8);
}
