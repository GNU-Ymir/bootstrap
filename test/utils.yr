mod utils;

import ymirc::parser;
import ymirc::semantic::generator::base;
import ymirc::errors::_;
import ymirc::utils::_;
import ymirc::args::_;
import std::collection::vec;

import std::io, std::conv;
import std::fs::_;

def compileFile (filename : [c8])-> ([&Generator], (&ErrorMsg)?) {
    let args = YmirArguments (files-> [filename.to![c32] ()]);
    let dmut parser = Parser::new (args);

    {
        (parser:.parseAll (), ((&ErrorMsg)?)::__err__)
    } catch {
        err : &ErrorMsg => {
            return ([], err?);
        }        
    }
}


def compareResultWithFile (gens : [&Generator], filename : [c8])
    throws &AssertError, &FsError
{
    let output = with dmut f = File::open (Path::new (filename)) {
        f:.readAll ().to![c32] ()
    };
   
    let dmut stream = Formatter::new ();
    stream:.withVarIds (false);
    for i in gens {
        stream:.write (i, '\n'c8);
    }
    
    let res = removeColors (stream[].to![c32] ());
    if (res != output) {
        println (res);
        let end = (if (res.len < output.len) { res.len } else { output.len });
        let mut i = 0us;
        while i < end {
            if (res[i] != output[i]) {
                println ("[", cast!u32 (res[i]), "][", cast!u32 (output[i]), "] ");
                println ("<--  DIFF HERE");

                assert (false);
            } else print (res[i]);
            
            i += 1us;
        }

        if (i < res.len) {
            print ("\n rest err [", res [i .. $], "]");
        }
        if (i < output.len) {
            print ("\n rest expect [", output [i .. $], "]");
        }
        
        println ("<--  DIFF HERE");
        assert (false);
    }
}


def compareErrorWithFile (error : (&ErrorMsg)?, filename : [c8])
    throws &FsError, &AssertError
{
    let output = with dmut f = File::open (Path::new (filename)) {
        f:.readAll ().to![c32] ()
    };

    match error {
        Ok (err : &ErrorMsg) => {
            let dmut stream = Formatter::new ();
            stream:.withVarIds (false);
            stream:.withErrorIds (false);
            stream:.write (err, "\n");
            
            let res = removeColors (stream[].to![c32] ());
            if (res != output) {
                let end = (if (res.len < output.len) { res.len } else { output.len });
                let mut i = 0us;
                while i < end {
                    if (res[i] != output[i]) {
                        println ("[", res[i], "]\n[", output[i], "] ");
                        println ("<--  DIFF HERE");
                        assert (false);
                    } else print (res[i]);
                    
                    i += 1us;
                }

                if (i < res.len) {
                    print ("\n rest err [", res [i .. $], "]");
                }
                if (i < output.len) {
                    print ("\n rest expect [", output [i .. $], "]");
                }
                
                println ("<--  DIFF HERE");
                assert (false);
            }
        }
        _ => {
            assert (output.len == 0us, output);
        }
    }
    
}

def removeColors (txt : [c32])-> [c32] {
    let dmut res = Vec!{c32}::new ();
    let mut i = 0us;
    while i < txt.len {
        let col = isColor (txt[i..$]);
        if (col.len != 0us) {
            i += col.len;
        } else if (txt[i] != '\u{0}') {
            res:.push (txt[i]);
            i += 1us;
        } else i += 1us;
    }

    res[]
}

def isColor (current : [c32])-> [c32] {
    for i in Colors32::__members__ {
        if (current.len >= i.len) {
            if (current [0us .. i.len] == i) return i;
        }
    }

    []
}
