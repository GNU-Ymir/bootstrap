mod utils;

import ymirc::parser;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::frame;

import ymirc::syntax::node;
import ymirc::syntax::expression::literal::unit;

import ymirc::lint::node::_;
import ymirc::errors::_;
import ymirc::global::state;
import ymirc::utils::_;
import ymirc::args::_;

import std::collection::vec;

import std::io, std::conv;
import std::fs::_;
import std::time::_;
import std::args;

struct
| synt : &SyntaxNode = UnitExpr::new ()
| sem : [&Generator] = []
| exp : [&YILNode] = []
| opt : [&YILNode] = []
| err : (&ErrorMsg)? = ((&ErrorMsg)?)::__err__
 -> CompileResult;


fn compileFile (filename : [c8], withLint : bool = false, withImports : [[c32]] = [])-> CompileResult {
    ymirc::global::state::resetInstance (); // reset all global informations

    let args = YmirArguments (file-> filename.(conv::to)![c32] (),
                              noLint-> if (!withLint) { YesNo::YES } else { YesNo::NO },
                              includes-> withImports);

    let dmut parser = Parser::new (args);

    parser:.parseAll ();
    logSpentTime ();

    return CompileResult (synt-> parser.getSyntaxNode (),
                          sem-> parser.getSemGenerators (),
                          exp-> parser.getExpYILNodes (),
                          opt-> parser.getOptYILNodes ());

} catch {
    err : &ErrorMsg => {
        return CompileResult (err-> err?);
    }
}


/**
 * Returns the time spent in the three main phases of the compilation
 * @returns:
 *    - .0: the time spent in syntaxic validation
 *    - .1: the time spent in symbol validation
 * */
fn getCompileTimes ()-> (Duration, Duration) {
    let mut syntax = dur::seconds (0);
    let mut valid = dur::seconds (0);
    for _, j in timer::instance ().getSyntaxMap () {
        syntax += j;
    }

    for _, j in timer::instance ().getValidationMap () {
        valid += j;
    }

    (syntax, valid)
}

fn logSpentTime () {
    let (synt, valid) = getCompileTimes ();
    logging::info (format (" Syntax : %, Validation : %", synt.(dur::to)![c8] (), valid.(dur::to)![c8] ()));
}

fn logSpentTimeDetailed () {
    for i, j in timer::instance ().getSyntaxMap () {
        logging::info (format ("Syntax of % took %", i, j.(dur::to)![c8] ()));
    }

    for i, j in timer::instance ().getSyntaxMap () {
        logging::info (format ("Validation of % took %", i, j.(dur::to)![c8] ()));
    }
}


fn compareResultWithFile (gens : [&Generator], filename : [c8], removeWeak : bool = false)
    throws &AssertError, &FsError
{
    let output = with dmut f = File::open (Path::new (filename)) {
        f:.readAll ().(conv::to)![c32] ()
    };

    let dmut stream = Formatter::new ();
    stream:.withVarIds (false);
    stream:.forceVerbose (true);
    stream:.insertCustomFormatTag ("forDebug"s8);
    for i in gens {
        match i {
            f : &FrameGenerator => {
                if (!removeWeak || !f.isWeak ()) {
                    stream:.write (i, '\n'c8);
                }
            }
        }
    }

    {
        compareResultWithFile (stream, output);
    } catch {
        _ => {
            eprintln ("In file : ", filename);
            assert (false);
        }
    }
}

fn compareResultWithFile (yil : [&YILNode], filename : [c8], removeWeak : bool = false, onlyFrames : bool = false)
    throws &AssertError, &FsError
{
    let output = with dmut f = File::open (Path::new (filename)) {
        f:.readAll ().(conv::to)![c32] ()
    };

    let dmut stream = Formatter::new ();
    stream:.withVarIds (false);
    stream:.forceVerbose (true);
    stream:.insertCustomFormatTag ("forDebug"s8);
    for i in yil {
        let remove = if (removeWeak || onlyFrames) {
            match i {
                f : &YILFrame => { f.isWeak () && removeWeak }
                g : &YILGlobalVar => { g.isWeak () || onlyFrames }
                c : &YILConstant => { c.isWeak () || onlyFrames }
                _ => { false }
            }
        } else { false };

        if (!remove) {
            // use a new stream for each node, to reset counters
            stream:.write (format ("%", i), '\n'c8);
        }
    }

    {
        compareResultWithFile (stream, output);
    } catch {
        _ => {
            eprintln ("In file : ", filename);
            assert (false);
        }
    }
}

fn compareResultWithFile (stream : &Formatter, output : [c32])
    throws &AssertError
{
    let res = removeColors (stream[].(conv::to)![c32] ());
    if (res != output) {
        eprintln (res);
        let end = (if (res.len < output.len) { res.len } else { output.len });
        let mut i = 0us;
        let mut line = 1us;
        eprint (Colors::BLUE, line, ":  ", Colors::RESET);

        while i < end {
            if (res[i] != output[i]) {
                eprintln (Colors::RED, getUntilLineEnd (res [i .. $]), Colors::RESET, "||", Colors::YELLOW, getUntilLineEnd (output [i .. $]), Colors::RESET);
                assert (false);
            } else eprint (res[i]);

            if (res [i] == '\n') {
                line += 1us;
                eprint (Colors::BLUE, line, ":  ", Colors::RESET);
            }
            i += 1us;
        }

        if (i < res.len) {
            eprint ("\n rest err [", res [i .. $], "]");
        }
        if (i < output.len) {
            eprint ("\n rest expect [", output [i .. $], "]");
        }

        eprintln ("<--  DIFF HERE");
        assert (false);
    }
}


fn compareErrorWithFile (error : (&ErrorMsg)?, filename : [c8])
    throws &AssertError
{
    let output = with dmut f = File::open (Path::new (filename)) {
        f:.readAll ().(conv::to)![c32] ().removeColors ().trimLineEnds ()
    };

    match error {
        Ok (err : &ErrorMsg) => {
            let dmut stream = Formatter::new ();
            stream:.withVarIds (false);
            stream:.withErrorIds (false);
            stream:.forceVerbose (true);
            stream:.write (err, "\n");

            let res = conv::to![c32] (stream[]).removeColors ().trimLineEnds ();

            if (res != output) {
                eprintln (res);
                let end = (if (res.len < output.len) { res.len } else { output.len });
                let mut i = 0us;
                let mut line = 1us;
                eprint (Colors::BLUE, line, ":  ", Colors::RESET);
                while i < end {
                    if (res[i] != output[i]) {
                        eprintln (Colors::RED, getUntilLineEnd (res [i .. $]), Colors::RESET, "||", Colors::YELLOW, getUntilLineEnd (output [i .. $]), Colors::RESET);
                        eprintln ("<--  DIFF HERE");
                        assert (false);
                    } else eprint (res[i]);

                    if (res [i] == '\n') {
                        line += 1us;
                        eprint (Colors::BLUE, line, ":  ", Colors::RESET);
                    }

                    i += 1us;
                }

                if (i < res.len) {
                    eprint ("\n rest err [", res [i .. $], "]");
                }
                if (i < output.len) {
                    eprint ("\n rest expect [", output [i .. $], "]");
                }
                
                eprintln ("<--  DIFF HERE");
                assert (false);
            }
        }
        _ => {
            assert (output.len == 0us, output);
        }
    }

} catch {
    _ => {
        eprintln ("In file : ", filename);
        assert (false);
    }
}


fn ensureResultEmpty (gens : [&Generator])
    throws &AssertError
{
    if (gens.len != 0us) {
        let dmut stream = Formatter::new ();
        stream:.withVarIds (false);
        for i in gens {
            stream:.write (i, '\n'c8);
        }

        eprintln ("Result not empty : ", stream[]);
        assert (false);
    }
}

fn ensureErrorEmpty (error : (&ErrorMsg)?)
    throws &AssertError
{
    match error {
        Ok (err : &ErrorMsg) => {
            let dmut stream = Formatter::new ();
            stream:.withVarIds (false);
            stream:.withErrorIds (false);
            stream:.write (err, "\n");

            let res = conv::to![c32] (stream[]).removeColors ().trimLineEnds ();

            eprintln ("Error not empty : \n", res);
            assert (false);
        }
    }
}

fn removeColors (txt : [c32])-> [c32] {
    let dmut res = Vec!{c32}::new ();
    let mut i = 0us;
    while i < txt.len {
        let col = isColor (txt[i..$]);
        if (col.len != 0us) {
            i += col.len;
        } else if (txt[i] != '\u{0}') {
            res:.push (txt[i]);
            i += 1us;
        } else i += 1us;
    }

    res[]
}

fn isColor (current : [c32])-> [c32] {
    for i in Colors32::__members__ {
        if (current.len >= i.len) {
            if (current [0us .. i.len] == i) return i;
        }
    }

    []
}

fn trimLineEnds (txt : [c32])-> [c32] {
    let dmut res = Vec!{c32}::new ();
    let mut nb = 0us;
    for i in 0us .. txt.len {
        if (txt [i] == ' ') {
            nb += 1us;
        } else if (txt [i] == '\t') {
            nb += 4us;
        } else {
            if (txt [i] != '\n') {
                for _ in 0us .. nb {
                    res:.push (' ');
                }
            }
            nb = 0us;
            res:.push (txt [i]);
        }
    }

    res[]
}

fn getUntilLineEnd (txt : [c32])-> [c32] {
    let mut e = 0us;
    while (e < txt.len) {
        if (txt [e] == '\n') return txt [0us .. e];
        e += 1us;
    }

    txt
}
