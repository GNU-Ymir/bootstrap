in implicit_cast;

use ymirc::utils::_;
use utils;

use std::io;

// Test for implicit cast
__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 1 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test1.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/test1_out.txt");

    logging::success (" Test implicit cast 1 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 2 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test2.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/test2_out.txt");

    logging::success (" Test implicit cast 2 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 3 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test3.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/test3_out.txt");

    logging::success (" Test implicit cast 3 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 4 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test4.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/test4_out.txt");

    logging::success (" Test implicit cast 4 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 5 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test5.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/test5_out.txt");

    logging::success (" Test implicit cast 5 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 6 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test6.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/test6_out.txt");

    logging::success (" Test implicit cast 6 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 7 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test7.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/implicit_cast/test7_out.txt");

    logging::success (" Test implicit cast 7 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 8 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test8.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/test8_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/implicit_cast/test8_yil.txt");

    logging::success (" Test implicit cast 8 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 9 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test9.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/test9_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/implicit_cast/test9_yil.txt");

    logging::success (" Test implicit cast 9 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast 10 start");

    let res = utils::compileFile ("test_resources/implicit_cast/test10.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/test10_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/implicit_cast/test10_yil.txt");

    logging::success (" Test implicit cast 10 finished");
}
