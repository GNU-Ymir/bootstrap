mod templates;

import ymirc::parser;
import ymirc::errors::_;
import ymirc::utils::_;
import ymirc::args::_;
import std::io, std::conv;
import std::fs::_;

aka __TEST_1__ =
str8#{mod test1;

def foo {T of dmut U, U} () {
    let x : T = [];
    x;
}

def foo {T of const U, U} () {}

def main () {
    foo!{dmut [i32]} ();
    foo!{[i32]} ();
}
};

aka __TEST_1_OUT__ = "frame : [weak] test1::foo!{mut [mut i32], mut [mut i32]}::foo ()-> void {\n    let x : [i32] = alias ([]);\n    x;\n    <unit-value>\n}\nframe : [weak] test1::foo!{[i32], [i32]}::foo ()-> void {\n\n}\nframe : test1::main ()-> void {\n    test1::foo!{mut [mut i32], mut [mut i32]}::foo ();\n    test1::foo!{[i32], [i32]}::foo ();\n    <unit-value>\n}\n"s8;

__test {
    logging::setRelativeTime ();
    logging::info (" Test template 1 start"s8);
    
    let path = tempDirectory ().push ("test1.yr");
    with dmut f = File::create (path, write-> true) {
        f:.write (__TEST_1__);
    }

    let args = YmirArguments (files-> [path.toStr ().to![c32] ()]);
    let dmut parser = Parser::new (args);
    let gens = {
        parser:.parseAll ()
    } catch {
        err : &ErrorMsg => {
            println (format ("%", err));
            for j in err.getRecursiveTrace () {                        
                println (j);
            }
            
            assert (false);
        }        
    };

    let dmut stream = Formatter::new ();
    stream:.withVarIds (false);
    for i in gens {
        stream:.write (i, '\n'c8);
    }
    if (stream[] != __TEST_1_OUT__) {
        let res = stream[];
        println (stream[]);
        for i in 0us .. (if (res.len < __TEST_1_OUT__.len) { res.len } else { __TEST_1_OUT__.len }) {
            if (res[i] != __TEST_1_OUT__[i]) {
                break {}
            } else print (res[i]);
        }
        
        assert (false);
    }

    logging::info (" Test template 1 end"s8);
}


aka __TEST_2__ =
    str8#{mod test2;
trait Truc {}

class A {
    pub self () {}
    impl Truc;
}

def foo {T impl Truc} (a : T) {
    a;
}

def main () {
    let a = A::new ();
    foo (a);
}
};

aka __TEST_2_OUT__ = "frame : [weak] test2::foo!{&(test2::A)}::foo (a : &(test2::A))-> void {\n    a;\n    <unit-value>\n}\nframe : test2::main ()-> void {\n    let a : &(test2::A) = test2::A::self(new);\n    test2::foo!{&(test2::A)}::foo (a);\n    <unit-value>\n}\nframe : test2::A::self (mut self : mut &(mut test2::A))-> void {\n    {\n        <unit-value>\n    };\n    {\n    \n    }\n}\n"s8;

__test {
    logging::setRelativeTime ();
    logging::info (" Test template 2 start"s8);
    
    let path = tempDirectory ().push ("test2.yr");
    with dmut f = File::create (path, write-> true) {
        f:.write (__TEST_2__);
    }

    let args = YmirArguments (files-> [path.toStr ().to![c32] ()]);
    let dmut parser = Parser::new (args);
    let gens = {
        parser:.parseAll ()
    } catch {
        err : &ErrorMsg => {
            println (format ("%", err));
            for j in err.getRecursiveTrace () {                        
                println (j);
            }
            
            assert (false);
        }        
    };

    let dmut stream = Formatter::new ();
    stream:.withVarIds (false);
    for i in gens {
        stream:.write (i, '\n'c8);
    }
    if (stream[] != __TEST_2_OUT__) {
        let res = stream[];
        for i in 0us .. (if (res.len < __TEST_2_OUT__.len) { res.len } else { __TEST_2_OUT__.len }) {
            if (res[i] != __TEST_2_OUT__[i]) {
                break {}
            } else print (res[i]);
        }
        
        assert (false);
    }
    

    logging::info (" Test template 2 end"s8);
}
