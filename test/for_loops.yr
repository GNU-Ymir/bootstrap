mod for_loops;

import ymirc::utils::_;
import utils;

mod arrays {
    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 1 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test1.yr"s8);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test1_out.txt"s8);

        logging::success (" Test for loops on arrays 1 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 2 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test2.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test2_out.txt"s8);

        logging::success (" Test for loops on arrays 2 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 3 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test3.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test3_out.txt"s8);

        logging::success (" Test for loops on arrays 3 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 4 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test4.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test4_out.txt"s8);

        logging::success (" Test for loops on arrays 4 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 5 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test5.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test5_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/arrays/test5_yil.txt"s8);

        logging::success (" Test for loops on arrays 5 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 6 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test6.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test6_out.txt"s8);

        logging::success (" Test for loops on arrays 6 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 7 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test7.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test7_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/arrays/test7_yil.txt"s8);

        logging::success (" Test for loops on arrays 7 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 8 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test8.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test8_out.txt"s8);

        logging::success (" Test for loops on arrays 8 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 9 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test9.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test9_out.txt"s8);

        logging::success (" Test for loops on arrays 9 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 10 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test10.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test10_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/arrays/test10_yil.txt"s8);

        logging::success (" Test for loops on arrays 10 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 11 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test11.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test11_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/arrays/test11_yil.txt"s8);

        logging::success (" Test for loops on arrays 11 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 12 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test12.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test12_out.txt"s8);

        logging::success (" Test for loops on arrays 12 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 13 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test13.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test13_out.txt"s8);

        logging::success (" Test for loops on arrays 13 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 14 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test14.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test14_out.txt"s8);

        logging::success (" Test for loops on arrays 14 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 15 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test15.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test15_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/arrays/test15_yil.txt"s8);

        logging::success (" Test for loops on arrays 15 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 16 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test16.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test16_out.txt"s8);

        logging::success (" Test for loops on arrays 16 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on arrays 17 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/arrays/test17.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test17_out.txt"s8);

        logging::success (" Test for loops on arrays 17 finished"s8);
    }

}

/**
 * ======================================================================
 * ======================================================================
 * ==========================      SLICES     ===========================
 * ======================================================================
 * ======================================================================
 */

mod slices {

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 1 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test1.yr"s8);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test1_out.txt"s8);

        logging::success (" Test for loops on slices 1 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 2 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test2.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test2_out.txt"s8);

        logging::success (" Test for loops on slices 2 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 3 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test3.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test3_out.txt"s8);

        logging::success (" Test for loops on slices 3 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 4 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test4.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test4_out.txt"s8);

        logging::success (" Test for loops on slices 4 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 5 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test5.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test5_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/slices/test5_yil.txt"s8);

        logging::success (" Test for loops on slices 5 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 6 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test6.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test6_out.txt"s8);

        logging::success (" Test for loops on slices 6 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 7 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test7.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test7_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/slices/test7_yil.txt"s8);

        logging::success (" Test for loops on slices 7 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 8 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test8.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test8_out.txt"s8);

        logging::success (" Test for loops on slices 8 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 9 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test9.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test9_out.txt"s8);

        logging::success (" Test for loops on slices 9 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 10 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test10.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test10_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/slices/test10_yil.txt"s8);

        logging::success (" Test for loops on slices 10 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 11 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test11.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test11_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/slices/test11_yil.txt"s8);

        logging::success (" Test for loops on slices 11 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 12 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test12.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test12_out.txt"s8);

        logging::success (" Test for loops on slices 12 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 13 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test13.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test13_out.txt"s8);

        logging::success (" Test for loops on slices 13 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 14 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test14.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test14_out.txt"s8);

        logging::success (" Test for loops on slices 14 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 15 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test15.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test15_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/slices/test15_yil.txt"s8);

        logging::success (" Test for loops on slices 15 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 16 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test16.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test16_out.txt"s8);

        logging::success (" Test for loops on slices 16 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on slices 17 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/slices/test17.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test17_out.txt"s8);

        logging::success (" Test for loops on slices 17 finished"s8);
    }


}

/**
 * ======================================================================
 * ======================================================================
 * ==========================      TUPLES     ===========================
 * ======================================================================
 * ======================================================================
 */

mod tuples {

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 1 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test1.yr"s8);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/tuples/test1_out.txt"s8);

        logging::success (" Test for loops on tuples 1 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 2 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test2.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/tuples/test2_out.txt"s8);

        logging::success (" Test for loops on tuples 2 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 3 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test3.yr"s8);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/tuples/test3_out.txt"s8);

        logging::success (" Test for loops on tuples 3 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 4 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test4.yr"s8);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/tuples/test4_out.txt"s8);

        logging::success (" Test for loops on tuples 4 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 5 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test5.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/tuples/test5_out.txt"s8);

        logging::success (" Test for loops on tuples 5 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 6 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test6.yr"s8);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/tuples/test6_out.txt"s8);

        logging::success (" Test for loops on tuples 6 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 7 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test7.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/tuples/test7_out.txt"s8);

        logging::success (" Test for loops on tuples 7 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 8 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test8.yr"s8);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/tuples/test8_out.txt"s8);

        logging::success (" Test for loops on tuples 8 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 9 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test9.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/tuples/test9_out.txt"s8);

        logging::success (" Test for loops on tuples 9 finished"s8);
    }


    __test {
        logging::setRelativeTime ();
        logging::info (" Test for loops on tuples 10 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/tuples/test10.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/tuples/test10_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/tuples/test10_yil.txt"s8);

        logging::success (" Test for loops on tuples 10 finished"s8);
    }


}


mod lst_compr {
    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 1 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test1.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test1_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test1_yil.txt"s8);

        logging::success (" Test for loops on arrays 1 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 2 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test2.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test2_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test2_yil.txt"s8);

        logging::success (" Test for loops on arrays 2 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 3 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test3.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/lst_compr/test3_out.txt"s8);

        logging::success (" Test for loops on arrays 3 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 4 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test4.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test4_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test4_yil.txt"s8);

        logging::success (" Test for loops on arrays 4 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 5 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test5.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test5_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test5_yil.txt"s8);

        logging::success (" Test for loops on arrays 5 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 6 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test6.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test6_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test6_yil.txt"s8);

        logging::success (" Test for loops on arrays 6 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 7 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test7.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/lst_compr/test7_out.txt"s8);

        logging::success (" Test for loops on arrays 7 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 8 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test8.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test8_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test8_yil.txt"s8);

        logging::success (" Test for loops on arrays 8 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 9 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test9.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test9_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test9_yil.txt"s8);

        logging::success (" Test for loops on arrays 9 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 10 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test10.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test10_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test10_yil.txt"s8);

        logging::success (" Test for loops on arrays 10 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 11 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test11.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test11_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test11_yil.txt"s8);

        logging::success (" Test for loops on arrays 11 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 12 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test12.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/lst_compr/test12_out.txt"s8);

        logging::success (" Test for loops on arrays 12 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 13 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test13.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/lst_compr/test13_out.txt"s8);

        logging::success (" Test for loops on arrays 13 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 14 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test14.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test14_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test14_yil.txt"s8);

        logging::success (" Test for loops on arrays 14 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 15 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test15.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/lst_compr/test15_out.txt"s8);

        logging::success (" Test for loops on arrays 15 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test list compr 16 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/lst_compr/test16.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/lst_compr/test16_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/lst_compr/test16_yil.txt"s8);

        logging::success (" Test for loops on arrays 16 finished"s8);
    }


}

mod override {
    __test {
        logging::setRelativeTime ();
        logging::info (" Test override 1 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/override/test1.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/override/test1_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/override/test1_yil.txt"s8);

        logging::success (" Test override 1 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test override 2 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/override/test2.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/override/test2_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/override/test2_yil.txt"s8);

        logging::success (" Test override 2 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test override 3 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/override/test3.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/override/test3_out.txt"s8);

        logging::success (" Test override 3 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test override 4 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/override/test4.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/override/test4_out.txt"s8);

        logging::success (" Test override 4 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test override 5 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/override/test5.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/override/test5_out.txt"s8);

        logging::success (" Test override 5 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test override 6 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/override/test6.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/override/test6_out.txt"s8);

        logging::success (" Test override 6 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test override 7 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/override/test7.yr"s8);
        utils::ensureResultEmpty (res.sem);
        utils::compareErrorWithFile (res.err, "test_resources/for_loops/override/test7_out.txt"s8);

        logging::success (" Test override 7 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test override 8 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/override/test8.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/override/test8_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/override/test8_yil.txt"s8);

        logging::success (" Test override 8 finished"s8);
    }

    __test {
        logging::setRelativeTime ();
        logging::info (" Test override 9 start"s8);


        let res = utils::compileFile ("test_resources/for_loops/override/test9.yr"s8, withLint-> true);
        utils::ensureErrorEmpty (res.err);
        utils::compareResultWithFile (res.sem, "test_resources/for_loops/override/test9_out.txt"s8);
        utils::compareResultWithFile (res.exp, "test_resources/for_loops/override/test9_yil.txt"s8);

        logging::success (" Test override 9 finished"s8);
    }


}
