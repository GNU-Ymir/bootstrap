mod for_loops;

import ymirc::utils::_;
import utils;

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 1 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test1.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test1_out.txt"s8);

    logging::success (" Test for loops on arrays 1 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 2 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test2.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test2_out.txt"s8);

    logging::success (" Test for loops on arrays 2 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 3 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test3.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test3_out.txt"s8);

    logging::success (" Test for loops on arrays 3 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 4 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test4.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test4_out.txt"s8);

    logging::success (" Test for loops on arrays 4 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 5 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test5.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test5_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/for_loops/arrays/test5_yil.txt"s8);

    logging::success (" Test for loops on arrays 5 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 6 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test6.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test6_out.txt"s8);

    logging::success (" Test for loops on arrays 6 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 7 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test7.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test7_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/for_loops/arrays/test7_yil.txt"s8);

    logging::success (" Test for loops on arrays 7 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 8 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test8.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test8_out.txt"s8);

    logging::success (" Test for loops on arrays 8 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 9 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test9.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test9_out.txt"s8);

    logging::success (" Test for loops on arrays 9 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 10 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test10.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test10_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/for_loops/arrays/test10_yil.txt"s8);

    logging::success (" Test for loops on arrays 10 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 11 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test11.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/arrays/test11_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/for_loops/arrays/test11_yil.txt"s8);

    logging::success (" Test for loops on arrays 11 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 12 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test12.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test12_out.txt"s8);

    logging::success (" Test for loops on arrays 12 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 13 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test13.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test13_out.txt"s8);

    logging::success (" Test for loops on arrays 13 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on arrays 14 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/arrays/test14.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/arrays/test14_out.txt"s8);

    logging::success (" Test for loops on arrays 14 finished"s8);
}


/**
 * ======================================================================
 * ======================================================================
 * ==========================      SLICES     ===========================
 * ======================================================================
 * ======================================================================
 */

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 1 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test1.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test1_out.txt"s8);

    logging::success (" Test for loops on slices 1 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 2 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test2.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test2_out.txt"s8);

    logging::success (" Test for loops on slices 2 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 3 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test3.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test3_out.txt"s8);

    logging::success (" Test for loops on slices 3 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 4 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test4.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test4_out.txt"s8);

    logging::success (" Test for loops on slices 4 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 5 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test5.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test5_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/for_loops/slices/test5_yil.txt"s8);

    logging::success (" Test for loops on slices 5 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 6 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test6.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test6_out.txt"s8);

    logging::success (" Test for loops on slices 6 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 7 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test7.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test7_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/for_loops/slices/test7_yil.txt"s8);

    logging::success (" Test for loops on slices 7 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 8 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test8.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test8_out.txt"s8);

    logging::success (" Test for loops on slices 8 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 9 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test9.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test9_out.txt"s8);

    logging::success (" Test for loops on slices 9 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 10 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test10.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test10_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/for_loops/slices/test10_yil.txt"s8);

    logging::success (" Test for loops on slices 10 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 11 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test11.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/for_loops/slices/test11_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/for_loops/slices/test11_yil.txt"s8);

    logging::success (" Test for loops on slices 11 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 12 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test12.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test12_out.txt"s8);

    logging::success (" Test for loops on slices 12 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 13 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test13.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test13_out.txt"s8);

    logging::success (" Test for loops on slices 13 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test for loops on slices 14 start"s8);


    let res = utils::compileFile ("test_resources/for_loops/slices/test14.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/for_loops/slices/test14_out.txt"s8);

    logging::success (" Test for loops on slices 14 finished"s8);
}
