mod templates_implicit;

import ymirc::utils::_;
import utils;

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 1 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/recursive_pointer.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/templates/implicit/recursive_pointer_out.txt"s8);

    logging::success (" Test template implicit 1 end"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 2 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/recursive_slice.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/templates/implicit/recursive_slice_out.txt"s8);

    logging::success (" Test template implicit 2 end"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 3 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/recursive_arr_alloc.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/templates/implicit/recursive_arr_alloc_out.txt"s8);

    logging::success (" Test template implicit 3 end"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 4 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/test4.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/templates/implicit/test4_out.txt"s8);

    logging::success (" Test template implicit 4 end"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 5 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/test5.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/templates/implicit/test5_out.txt"s8);

    logging::success (" Test template implicit 4 end"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 6 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/test6.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/templates/implicit/test6_out.txt"s8);

    logging::success (" Test template implicit 4 end"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 7 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/test7.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/templates/implicit/test7_out.txt"s8);

    logging::success (" Test template implicit 7 end"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 8 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/test8.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/templates/implicit/test8_out.txt"s8);

    logging::success (" Test template implicit 8 end"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 9 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/test9.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/templates/implicit/test9_out.txt"s8);

    logging::success (" Test template implicit 9 end"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 10 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/test10.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/templates/implicit/test10_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/templates/implicit/test10_yil.txt"s8);

    logging::success (" Test template implicit 10 end"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info ("Test template implicit 11 start"s8);

    let res = utils::compileFile ("test_resources/templates/implicit/test11.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/templates/implicit/test11_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/templates/implicit/test11_yil.txt"s8);

    logging::success (" Test template implicit 11 end"s8);
}
