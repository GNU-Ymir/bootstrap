in structures;

use ymirc::utils::_;
use utils;


__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 1 start");

    let res = utils::compileFile ("test_resources/struct/test1.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/struct/test1_out.txt");

    logging::success (" Test structures 1 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 2 start");

    let res = utils::compileFile ("test_resources/struct/test2.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test2_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test2_yil.txt");

    logging::success (" Test structures 2 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 3 start");

    let res = utils::compileFile ("test_resources/struct/test3.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test3_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test3_yil.txt");

    logging::success (" Test structures 3 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 4 start");

    let res = utils::compileFile ("test_resources/struct/test4.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test4_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test4_yil.txt");

    logging::success (" Test structures 4 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 5 start");

    let res = utils::compileFile ("test_resources/struct/test5.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/struct/test5_out.txt");

    logging::success (" Test structures 5 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 6 start");

    let res = utils::compileFile ("test_resources/struct/test6.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test6_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test6_yil.txt");

    logging::success (" Test structures 6 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 7 start");

    let res = utils::compileFile ("test_resources/struct/test7.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test7_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test7_yil.txt");

    logging::success (" Test structures 7 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 8 start");

    let res = utils::compileFile ("test_resources/struct/test8.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/struct/test8_out.txt");

    logging::success (" Test structures 8 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 9 start");

    let res = utils::compileFile ("test_resources/struct/test9.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test9_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test9_yil.txt");

    logging::success (" Test structures 9 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 10 start");

    let res = utils::compileFile ("test_resources/struct/test10.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test10_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test10_yil.txt");

    logging::success (" Test structures 10 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 12 start");

    let res = utils::compileFile ("test_resources/struct/test12.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test12_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test12_yil.txt");

    logging::success (" Test structures 12 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 13 start");

    let res = utils::compileFile ("test_resources/struct/test13.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/struct/test13_out.txt");

    logging::success (" Test structures 13 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 14 start");

    let res = utils::compileFile ("test_resources/struct/test14.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/struct/test14_out.txt");

    logging::success (" Test structures 14 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 15 start");

    let res = utils::compileFile ("test_resources/struct/test15.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test15_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test15_yil.txt");

    logging::success (" Test structures 15 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 16 start");

    let res = utils::compileFile ("test_resources/struct/test16.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test16_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test16_yil.txt");

    logging::success (" Test structures 16 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 17 start");

    let res = utils::compileFile ("test_resources/struct/test17.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/struct/test17_out.txt");

    logging::success (" Test structures 17 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 18 start");

    let res = utils::compileFile ("test_resources/struct/test18.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/struct/test18_out.txt");

    logging::success (" Test structures 18 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 19 start");

    let res = utils::compileFile ("test_resources/struct/test19.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/struct/test19_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/struct/test19_yil.txt");

    logging::success (" Test structures 19 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test structures 20 start");

    let res = utils::compileFile ("test_resources/struct/test20.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/struct/test20_out.txt");

    logging::success (" Test structures 20 finished");
}
