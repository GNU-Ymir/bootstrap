mod lazyness;

import ymirc::utils::_;
import utils;


__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 1 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test1.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test1_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test1_yil.txt"s8);

    logging::success (" Test lazyness 1 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 2 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test2.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test2_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test2_yil.txt"s8);

    logging::success (" Test lazyness 2 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 3 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test3.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test3_out.txt"s8);

    logging::success (" Test lazyness 3 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 4 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test4.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test4_out.txt"s8);

    logging::success (" Test lazyness 4 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 5 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test5.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test5_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test5_yil.txt"s8);

    logging::success (" Test lazyness 5 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 6 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test6.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test6_out.txt"s8);

    logging::success (" Test lazyness 6 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 7 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test7.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test7_out.txt"s8);

    logging::success (" Test lazyness 7 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 8 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test8.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test8_out.txt"s8);

    logging::success (" Test lazyness 8 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 9 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test9.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test9_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test9_yil.txt"s8);

    logging::success (" Test lazyness 9 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 10 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test10.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test10_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test10_yil.txt"s8);

    logging::success (" Test lazyness 10 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 11 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test11.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test11_out.txt"s8);

    logging::success (" Test lazyness 11 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 12 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test12.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test12_out.txt"s8);

    logging::success (" Test lazyness 12 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 13 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test13.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test13_out.txt"s8);

    logging::success (" Test lazyness 13 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 14 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test14.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test14_out.txt"s8);

    logging::success (" Test lazyness 14 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 15 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test15.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test15_out.txt"s8);

    logging::success (" Test lazyness 15 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 16 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test16.yr"s8, withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test16_out.txt"s8);

    logging::success (" Test lazyness 16 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 17 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test17.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test17_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test17_yil.txt"s8);

    logging::success (" Test lazyness 17 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 18 start"s8);

    let res = utils::compileFile ("test_resources/lazyness/test18.yr"s8, withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test18_out.txt"s8);
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test18_yil.txt"s8);

    logging::success (" Test lazyness 18 finished"s8);
}
