in lazyness;

use ymirc::utils::_;
use utils;


__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 1 start");

    let res = utils::compileFile ("test_resources/lazyness/test1.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test1_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test1_yil.txt");

    logging::success (" Test lazyness 1 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 2 start");

    let res = utils::compileFile ("test_resources/lazyness/test2.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test2_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test2_yil.txt");

    logging::success (" Test lazyness 2 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 3 start");

    let res = utils::compileFile ("test_resources/lazyness/test3.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test3_out.txt");

    logging::success (" Test lazyness 3 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 4 start");

    let res = utils::compileFile ("test_resources/lazyness/test4.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test4_out.txt");

    logging::success (" Test lazyness 4 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 5 start");

    let res = utils::compileFile ("test_resources/lazyness/test5.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test5_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test5_yil.txt");

    logging::success (" Test lazyness 5 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 6 start");

    let res = utils::compileFile ("test_resources/lazyness/test6.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test6_out.txt");

    logging::success (" Test lazyness 6 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 7 start");

    let res = utils::compileFile ("test_resources/lazyness/test7.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test7_out.txt");

    logging::success (" Test lazyness 7 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 8 start");

    let res = utils::compileFile ("test_resources/lazyness/test8.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test8_out.txt");

    logging::success (" Test lazyness 8 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 9 start");

    let res = utils::compileFile ("test_resources/lazyness/test9.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test9_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test9_yil.txt");

    logging::success (" Test lazyness 9 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 10 start");

    let res = utils::compileFile ("test_resources/lazyness/test10.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test10_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test10_yil.txt");

    logging::success (" Test lazyness 10 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 11 start");

    let res = utils::compileFile ("test_resources/lazyness/test11.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test11_out.txt");

    logging::success (" Test lazyness 11 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 12 start");

    let res = utils::compileFile ("test_resources/lazyness/test12.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test12_out.txt");

    logging::success (" Test lazyness 12 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 13 start");

    let res = utils::compileFile ("test_resources/lazyness/test13.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test13_out.txt");

    logging::success (" Test lazyness 13 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 14 start");

    let res = utils::compileFile ("test_resources/lazyness/test14.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test14_out.txt");

    logging::success (" Test lazyness 14 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 15 start");

    let res = utils::compileFile ("test_resources/lazyness/test15.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test15_out.txt");

    logging::success (" Test lazyness 15 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 16 start");

    let res = utils::compileFile ("test_resources/lazyness/test16.yr", withLint-> true);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/lazyness/test16_out.txt");

    logging::success (" Test lazyness 16 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 17 start");

    let res = utils::compileFile ("test_resources/lazyness/test17.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test17_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test17_yil.txt");

    logging::success (" Test lazyness 17 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test lazyness 18 start");

    let res = utils::compileFile ("test_resources/lazyness/test18.yr", withLint-> true);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/lazyness/test18_out.txt");
    utils::compareResultWithFile (res.exp, "test_resources/lazyness/test18_yil.txt");

    logging::success (" Test lazyness 18 finished");
}
