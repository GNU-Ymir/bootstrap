mod implicit_cast_complex;

import ymirc::utils::_;
import utils;

import std::io;

// Test for implicit cast
__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast complex 1 start"s8);

    let res = utils::compileFile ("test_resources/implicit_cast/complex/test1.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/complex/test1_out.txt"s8);

    logging::success (" Test implicit cast complex 1 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast complex 2 start"s8);

    let res = utils::compileFile ("test_resources/implicit_cast/complex/test2.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/complex/test2_out.txt"s8);

    logging::success (" Test implicit cast complex 2 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast complex 3 start"s8);

    let res = utils::compileFile ("test_resources/implicit_cast/complex/test3.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/complex/test3_out.txt"s8);

    logging::success (" Test implicit cast complex 3 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast complex 4 start"s8);

    let res = utils::compileFile ("test_resources/implicit_cast/complex/test4.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/implicit_cast/complex/test4_out.txt"s8);

    logging::success (" Test implicit cast complex 4 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast complex 5 start"s8);

    let res = utils::compileFile ("test_resources/implicit_cast/complex/test5.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/implicit_cast/complex/test5_out.txt"s8);

    logging::success (" Test implicit cast complex 5 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test implicit cast complex 6 start"s8);

    let res = utils::compileFile ("test_resources/implicit_cast/complex/test6.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/implicit_cast/complex/test6_out.txt"s8);

    logging::success (" Test implicit cast complex 6 finished"s8);
}
