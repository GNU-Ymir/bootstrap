in binary_int;

use ymirc::utils::_;
use utils;
use std::io;

// Test for binary operators on ints
__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 1 start");

    let res = utils::compileFile ("test_resources/binary_int/test1.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test1_out.txt");

    logging::success (" Test binary int 1 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 2 start");

    let res = utils::compileFile ("test_resources/binary_int/test2.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test2_out.txt");

    logging::success (" Test binary int 2 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 3 start");

    let res = utils::compileFile ("test_resources/binary_int/test3.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test3_out.txt");

    logging::success (" Test binary int 3 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 4 start");

    let res = utils::compileFile ("test_resources/binary_int/test4.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test4_out.txt");

    logging::success (" Test binary int 4 finished");
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 5 start");

    let res = utils::compileFile ("test_resources/binary_int/test5.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/binary_int/test5_out.txt");

    logging::success (" Test binary int 5 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 6 start");

    let res = utils::compileFile ("test_resources/binary_int/test6.yr");
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test6_out.txt");

    logging::success (" Test binary int 6 finished");
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 7 start");

    let res = utils::compileFile ("test_resources/binary_int/test7.yr");
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/binary_int/test7_out.txt");

    logging::success (" Test binary int 7 finished");
}
