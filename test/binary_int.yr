mod binary_int;

import ymirc::utils::_;
import utils;

import std::io;

// Test for binary operators on ints
__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 1 start"s8);

    let res = utils::compileFile ("test_resources/binary_int/test1.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test1_out.txt"s8);

    logging::success (" Test binary int 1 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 2 start"s8);

    let res = utils::compileFile ("test_resources/binary_int/test2.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test2_out.txt"s8);

    logging::success (" Test binary int 2 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 3 start"s8);

    let res = utils::compileFile ("test_resources/binary_int/test3.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test3_out.txt"s8);

    logging::success (" Test binary int 3 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 4 start"s8);

    let res = utils::compileFile ("test_resources/binary_int/test4.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test4_out.txt"s8);

    logging::success (" Test binary int 4 finished"s8);
}

__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 5 start"s8);

    let res = utils::compileFile ("test_resources/binary_int/test5.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/binary_int/test5_out.txt"s8);

    logging::success (" Test binary int 5 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 6 start"s8);

    let res = utils::compileFile ("test_resources/binary_int/test6.yr"s8);
    utils::ensureErrorEmpty (res.err);
    utils::compareResultWithFile (res.sem, "test_resources/binary_int/test6_out.txt"s8);

    logging::success (" Test binary int 6 finished"s8);
}


__test {
    logging::setRelativeTime ();
    logging::info (" Test binary int 7 start"s8);

    let res = utils::compileFile ("test_resources/binary_int/test7.yr"s8);
    utils::ensureResultEmpty (res.sem);
    utils::compareErrorWithFile (res.err, "test_resources/binary_int/test7_out.txt"s8);

    logging::success (" Test binary int 7 finished"s8);
}
