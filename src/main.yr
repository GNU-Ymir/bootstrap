mod main;

__version GYC {
    import std::io;
    import errors::_, utils::stream;
    import syntax::declaration::module;
    import syntax::visitor;
    import std::fs::file;

    /**
     * Function called when the compilation fully failed, and nothing will be generated
     */
    extern (C) def bootstrap_fatal_error ();

    /**
     * Runtime function that enable the stack trace retreival 
     * Stack trace retreival is a slow process, that must not be enabled in release mode 
     * 
     * This function is traditionnaly called in the main function of
     * the program, but since, there is no main in this bootstrap
     * compiler, we need to call it by hand
     */
    extern (C) def _yrt_force_debug ();

    /**
     * The main function of the compiler, called by the plugin
     * This function, parse the file, validate it and generate the symbols
     * @params: 
     *    - filename: the file to compile
     */
    extern (C) def bootstrap_parse_file (filename : [c8]) {
        __version DEBUG { // the main function is not called, so we need to force the debug 
            _yrt_force_debug ();
        }

        { 
            let x = syntaxicTime (filename);
            println (format ("%", x));
        } catch {
            err : &ErrorMsg => {
                println (format ("%"s8, err));
                bootstrap_fatal_error ();
            }
            ferr : &FileError => {
                println (ferr);
                bootstrap_fatal_error ();
            }
        }    
        
    }

    /**
     * Transform the text of the file into a analyzable syntax tree
     * @info: A file is necessarily a module, so this function returns a module
     * @params: 
     *    - filename: the path of the file to read
     * @throws: 
     *   - &ErrorMsg: if there are errors inside the file
     */
    def syntaxicTime (filename : [c8])-> &Module
        throws &ErrorMsg, &FileError
    {
        SyntaxVisitor::open (filename):.read ()        
    }
} else {
    import std::io;
    import ymirc::args::_;
    import ymirc::parser;
    
    def main () {
        match parseArguments () {
            Ok (args : _) => { Parser::new (args); }
        }
    }
}
