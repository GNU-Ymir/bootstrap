mod ymirc::global::state;

import std::io, std::fs::path;
import std::collection::vec, std::collection::set;
import ymirc::utils::string;
import std::fs::sys;

static dmut __instance__ : &State = State::new ();

pub fn instance () -> dmut &State {
    alias __instance__
}

/**
 * Global state of the compilation
 */
pub class State {

    let mut _isDebug = false;

    let mut _isVerbose = false;

    let mut _isStandalone = false;

    let mut _isDumpDoc = false;

    let mut _isYmirDump = false;

    let mut _isDumpDependency = false;

    let mut _isTrusted = false;

    let mut _isUnitTest = false;

    let mut _isReflection = true;

    let mut _includePrefix = Path::new ("include/ymir/"s8);

    let mut _corePath = Path::new ("/usr/include/ymir/core"s8);

    let mut _prefixPath = Path::new ("/usr/include/ymir/"s8);

    let mut _executable = Path::new (""s8);

    let dmut _includeDirs = HashSet!(&Path)::new ();

    let dmut _versions = HashSet!([c8])::new ();

    // The size of the size type in bits
    let mut _sizeTypeSize = 64u32;

    // The size of the biggest float type in bits (assuming by fnault its f80, aligned on 16 bytes)
    let mut _floatTypeSize = 128u32;

    pub self () {
        self._includeDirs:.insert (Path::new ("/usr/include/ymir/"));
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn setExecutable (mut self, name : [c8]) {
        self._executable = Path::new (name);
        self:.setPrefix (self._executable.parent ().toStr ());
    }

    pub fn activateDebug (mut self) {
        self._isDebug = true;
    }

    pub fn isDebugActive (self)-> bool {
        self._isDebug
    }

    pub fn activateUnittest (mut self) {
        self._isUnitTest = true;
    }

    pub fn isUnittestActive (self)-> bool {
        self._isUnitTest
    }
    
    pub fn activateVerbose (mut self) {
        self._isVerbose = true;
    }

    pub fn isVerboseActive (mut self)-> bool {
        self._isVerbose
    }

    pub fn activateStandalone (mut self) {
        self._isStandalone = true;
    }

    pub fn activateDocDumping (mut self) {
        self._isDumpDoc = true;
    }

    pub fn activateDependencyDumping (mut self) {
        self._isDumpDependency = true;
    }

    pub fn activateYmirDumping (mut self) {
        self._isYmirDump = true;
    }

    pub fn desactivateReflection (mut self) {
        self._isReflection = false;
    }

    pub fn addVersion (mut self, v : [c8]) {
        self._versions:.insert (v);
    }

    pub fn addIncludeDir (mut self, dir : [c8]) {
        self._includeDirs:.insert (Path::new (dir));
    }
    
    pub fn setPrefix (mut self, prefix : [c8]) {
        let path = Path::new (prefix).push (self._includePrefix);
        if (fs::sys::isDir (path)) {
            self._prefixPath = Path::new (prefix);
            self._includeDirs:.insert (path);
            self._corePath = path.push ("core"s8);
        }
    }

    pub fn setSizeTypeSize (mut self, size : u32) {
        self._sizeTypeSize = size;
    }

    pub fn setFloatTypeSize (mut self, size : u32) {
        self._floatTypeSize = size;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true of the version is active
     */
    pub fn isVersionActive (self, v : [c8])-> bool {
        v in self._versions
    }

    /**
     * @returns: the path of the prefix of the executable (pwd of the executable)
     */
    pub fn getIncludePrefix (self)-> &Path {
        self._includePrefix
    }

    /**
     * @returns: the directory containing the core files
     */
    pub fn getCorePath (self)-> &Path {
        self._corePath
    }

    /**
     * @returns: the list of directories that are included (-I option)
     */
    pub fn getIncludeDirs (self)-> [&Path] {
        self._includeDirs[]
    }

    /**
     * @returns: true iif the standalone option is activated
     */
    pub fn isStandalone (self)-> bool {
        self._isStandalone
    }

    /**
     * @returns: true if the ymir dump option is activated (dumping intermediate representation to file)
     * */
    pub fn isYmirDumping (self)-> bool {
        self._isYmirDump
    }

    /**
     * @returns: the size in bits of the size type (pointer size)
     */
    pub fn getSizeTypeSize (self)-> u32 {
        self._sizeTypeSize
    }

    /**
     * @returns: the size in bits of the biggest float type (e.g. __float80)
     * */
    pub fn getFloatTypeSize (self)-> u32 {
        self._floatTypeSize
    }

    impl Streamable;           
    
}
