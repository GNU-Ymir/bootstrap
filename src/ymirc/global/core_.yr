mod ymirc::global::core_;

import std::fs::path;

pub enum
| ALLOC_CLASS        = "_yrt_alloc_class"s8
| ALLOC_NO_SET_SLICE = "_yrt_alloc_slice_no_set"s8
| ALLOC_SET_SLICE    = "_yrt_alloc_slice"s8
| APPEND_SLICE       = "_yrt_append_slice"s8
| BEGIN_CATCH        = "_yrt_exc_begin_catch"s8
| CALL_FPTR_AS_DG    = "_yrt_call_fptr_as_dg"s8
| CALL_LAZY          = "_yrt_call_lazy"s8
| CHECK_FUTURE       = "_yrt_check_finished_future"s8
| CMP_CLASS_OF_TYPE  = "_yrt_cmp_class_of_type"s8
| CONCAT_SLICE       = "_yrt_concat_slices"s8
| DUPLICATE_SLICE    = "_yrt_dup_slice"s8
| DUPLICATE_TUPLE    = "_yrt_dup_tuple"s8
| MAP_COPY           = "_yrt_dup_map"s8
| MAP_EMPTY          = "_yrt_map_empty"s8
| MAP_FIND           = "_yrt_map_find"s8
| MAP_INSERT         = "_yrt_map_insert"s8
| MAP_ITER_BEGIN     = "_yrt_map_iter_begin"s8
| MAP_ITER_DEL       = "_yrt_map_iter_del"s8
| MAP_ITER_END       = "_yrt_map_iter_end"s8
| MAP_ITER_KEY       = "_yrt_map_iter_key"s8
| MAP_ITER_NEXT      = "_yrt_map_iter_next"s8
| MAP_ITER_VAL       = "_yrt_map_iter_val"s8
| PANIC              = "_yrt_exc_panic"s8
| REGISTER_UNIT_TEST = "_yrt_register_unittest"s8
| RUN_MAIN_DEBUG     = "_yrt_run_main_debug"s8
| RUN_MAIN_RELEASE   = "_yrt_run_main"s8
| RUN_UNITTESTS      = "_yrt_run_unittests"s8
| SPAWN_FUTURE       = "_yrt_spawn_future"s8
| THROW_EXCEPT       = "_yrt_exc_throw"s8
| WAIT_FUTURE        = "_yrt_wait_future"s8
 -> YRuntimeFuncs;

pub enum
| BIN          = "opBinary"s8
| BIN_RIGHT    = "opBinaryRight"s8
| CMP          = "opCmp"s8
| CONTAINS     = "opContains"s8
| DOLLAR       = "opDollar"s8
| EQUALS       = "opEquals"s8
| INDEX_ASSIGN = "opIndexAssign"s8
| INDEX        = "opIndex"s8
| RANGE        = "opRange"s8
| RANGE_RIGHT  = "opRangeRight"s8
| UNARY        = "opUnary"s8
| BEGIN        = "begin"s8
| END          = "end"s8
| NEXT         = "next"s8
| GET_ITER     = "get"s8
| LEN          = "len"s8
| DCOPY        = "deepCopy"s8
 -> OpOverrideNames;

pub enum
| ARRAY          = "ARRAY"s8
| BOOL           = "BOOL"s8
| CHAR           = "CHAR"s8
| CLOSURE        = "CLOSURE"s8
| DELEGATE       = "DELEGATE"s8
| FLOAT          = "FLOAT"s8
| FPTR           = "FUNC_PTR"s8
| MAP            = "MAP"s8
| OBJECT         = "OBJECT"s8
| OPTION         = "OPTION"s8
| POINTER        = "POINTER"s8
| RANGE          = "RANGE"s8
| SIGNED_INT     = "SIGNED_INT"s8
| SLICE          = "SLICE"s8
| STRUCT         = "STRUCT"s8
| TUPLE          = "TUPLE"s8
| UNSIGNED_INT   = "UNSIGNED_INT"s8
| VOID           = "VOID"s8
 -> TypeInfoIDS;

pub enum
| EXCEPTION        = Path::new ("core/exception"s8)
| ASSERT_EXCEPTION = Path::new ("core/exception/assertion"s8)
| IO_EXCEPTION     = Path::new ("core/exception/io"s8)
| MAP_EXCEPTION    = Path::new ("core/exception/map"s8)
| OPTION_EXCEPTION = Path::new ("core/exception/option"s8)
| TYPES            = Path::new ("core/types"s8)
 -> UseCoreModules;

pub enum
| LOCK_GLOBAL    = Path::new ("core/atom/_yrt_lock_global"s8)
| UNLOCK_GLOBAL  = Path::new ("core/atom/_yrt_unlock_global"s8)
| LOCK_MONITOR   = Path::new ("core/atom/atomicMonitorEnter"s8)
| UNLOCK_MONITOR = Path::new ("core/atom/atomicMonitorExit"s8)
 -> AtomicUtils;

pub enum
| OP_CONTAINS_FUNC         = Path::new ("core/types/range/opContains"s8)
| STEP_BY_FUNC             = Path::new ("core/types/range/stepBy"s8)
| REVERSE_FUNC             = Path::new ("core/types/range/reverse"s8)
 -> RangeUtils;

pub enum
| ITERABLE_TRAIT = Path::new ("core/types/Iterable"s8)
| HASHABLE_TRAIT = Path::new ("core/types/Hashable"s8)
| COPIABLE_TRAIT = Path::new ("core/types/Copiable"s8)
 -> GlobalTraitUtils;

pub enum
| FFMOD_FUNC     = Path::new ("core/math/ffmod"s8)
| IPOW_FUNC      = Path::new ("core/math/ipow"s8)
| FIPOW_FUNC     = Path::new ("core/math/fipow"s8)
| FFPOW_FUNC     = Path::new ("core/math/ffpow"s8)
| FLOAT_CMP_FUNC = Path::new ("core/math/fcmp"s8)
 -> MathUtils;

pub enum
| HASH_KEY_FUNC = Path::new ("core/types/map/hashKey"s8)
| CMP_KEY_FUNC  = Path::new ("core/types/map/compareKeys"s8)
| REMOVE_FUNC   = Path::new ("core/types/map/removeKey"s8)
| DCOPY_FUNC    = Path::new ("core/types/map/deepCopyMap"s8)
 -> MapUtils;

pub enum
| CAST_FPTR_TO_DG = Path::new ("core/types/function/castToDG"s8)
 -> DelegateUtils;

pub enum
| EMPTY_VAL_OPTION = Path::new ("core/exception/option/EmptyValOption"s8)
| EMPTY_ERR_OPTION = Path::new ("core/exception/option/EmptyErrOption"s8)
| OPTION_ERR       = Path::new ("core/exception/option/OptionException"s8)
| MAP_ERR          = Path::new ("core/exception/map/MapException"s8)
| KEY_ERR_MAP      = Path::new ("core/exception/map/KeyErrMap"s8)
| IO_ERR           = Path::new ("core/exception/io/IOError"s8)
| ASSERT_ERR       = Path::new ("core/exception/assertion/AssertError"s8)
| EXCEPTION        = Path::new ("core/exception/Exception"s8)
 -> ExceptionUtils;

pub enum
| OP_CMP_FUNC      = Path::new ("core/types/array/opCmp"s8)
| OP_EQUALS_FUNC   = Path::new ("core/types/array/opEquals"s8)
| OP_CONTAINS_FUNC = Path::new ("core/types/array/opContains"s8)
| DCOPY_FUNC       = Path::new ("core/types/array/deepCopySlice"s8)
 -> SliceUtils;

pub enum
| TYPEINFO_TYPE  = Path::new ("core/types/info/TypeInfo"s8)
| TYPEIDS_TYPE   = Path::new ("core/types/info/TypeIDs"s8)
| FIELDINFO_TYPE = Path::new ("core/types/info/FieldInfo"s8)
 -> TypeUtils;
