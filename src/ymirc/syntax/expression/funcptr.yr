mod ymirc::syntax::expression::funcptr;

import ymirc::syntax::expression::base;
import ymirc::syntax::expression::vardecl;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * Syntaxic representation of a function pointer type
 * @verbatim: 
 * =================
 * func_ptr_type := Keys::FN Prototype
 * =================
 */
pub class @final FunctionPtrTypeExpr over Expression {

    /// The parameters of the type
    let _params : [&VarDeclExpr];

    /// The return type
    let _ret : &Expression;

    /**
     * @params: 
     *    - loc: the location of the expression
     *    - params: the types of the parameters of the function pointer
     *    - ret: the return type of the function pointer
     * @info: this class does not use FunctionProto, because the parameters are assumed to be types only, and not var decl as in a FunctionPrototype
     */
    pub self (loc : &Word, params : [&VarDeclExpr], ret : &Expression)
        with super (loc), _params = params, _ret = ret
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the list of the types of the parameters of the function pointer
     */
    pub fn getParameters (self)-> [&VarDeclExpr] {
        self._params
    }

    /**
     * @returns: the return type of the function pointer
     */
    pub fn getReturn (self)-> &Expression {
        self._ret
    }

    /**
     * @returns: true if the type is a delegate type
     * */
    pub fn isClosure (self)-> bool {
        self._loc.str () == Keys::DELEGATE
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            f : &FunctionPtrTypeExpr => {
                f._params == self._params && f._ret == self._ret
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::FUNCTION, " ("s8);
            stream:.entabing ();
            let mut j = 0u64;
            for v in self._params {
                if (j != 0u64) stream:.write (", "s8);

                if (!v.getLazyOrRefLocation ().isEof ()) stream:.write (v.getLazyOrRefLocation ().str (), ' 'c8);
                if (!v.getMutOrDmutLocation ().isEof ()) stream:.write (v.getMutOrDmutLocation ().str (), ' 'c8);

                stream:.entabing ();
                v.getType ().format (alias stream);
                stream:.detabing ();

                j += 1u64;
            }
            stream:.write (')'c8, Tokens::ARROW, ' 'c8);
            self._ret.format (alias stream);
            stream:.detabing ();            
        }
    }

}

