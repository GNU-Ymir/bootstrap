mod ymirc::syntax::expression::scopeguard;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

pub enum : [c8]
| EXIT    = Keys::EXIT
| FAILURE = Keys::FAILURE
| SUCCESS = Keys::SUCCESS
 -> ScopeGuardType;

/**
 * A scope guard, that guards the exit of a block
 * @verbatim: 
 * ===============
 * scope_guards := ScopeGuardType expression:(0)
 * ===============
 */
pub class @final ScopeGuard over Expression {

    /// The content of the guard
    let _content : &Expression;

    /// The type of scope guard
    let _type : ScopeGuardType;

    /**
     * @params: 
     *    - loc: the location of the scope guard
     *    - content: the content of the scope guard
     *    - kind: the kind of scope guard
     */
    pub self (loc : &Word, content : &Expression, kind : ScopeGuardType)
        with super (loc), _content = content, _type = kind
    {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * @returns: the content of the scope guard
     */
    pub def getContent (self)-> &Expression {
        self._content
    }

    /**
     * @returns: the kind of scope guard
     */
    pub def getKind (self)-> ScopeGuardType {
        self._type
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the scope guard inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._type, ' 'c8);
            self._content.format (alias stream);
        }
    }

}
