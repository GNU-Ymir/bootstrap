in listmap;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;


/**
 * A listmap is a map expression, surrounded by [], and containing a list of map values
 * @verbatim:
 * ===============
 * listmap_lit := Tokens::LCRO  map_element (Tokens::COMA map_element)* Tokens::RCRO
 * map_element := expression:(10) Tokens::DARROW expression:(10)
 * ===============
 */
@final
pub class ListMapExpr over Expression {

    // The location of the end of the expression
    let _end : &Word;

    // The list of keys
    let _keys : [&Expression];

    // The list of values
    let _values : [&Expression];

    /**
     * @params:
     *    - loc: the location (and type, depending on the token contained in the word), of the expression
     *    - end: the location of the closing token of the expression
     *    - params: the listmap of parameters inside the literal
     */
    pub self (loc : &Word, end : &Word, keys : [&Expression], values : [&Expression])
        with super (loc)
        , _end = end
        , _keys = keys
        , _values = values
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the closing location of the expression
     */
    pub fn getEndLocation (self)-> &Word {
        self._end
    }

    /**
     * @returns: the list of keys
     */
    pub fn getKeys (self)-> [&Expression] {
        self._keys
    }

    /**
     * @returns: the list of values
     */
    pub fn getValues (self)-> [&Expression] {
        self._values
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            l : &ListMapExpr => {
                l._end == self._end && l._keys == self._keys && l._values == self._values
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Tokens::LCRO);
            stream:.entabing ();

            for i in 0us .. self._keys.len {
                if (i != 0u64) stream:.write (", ");
                self._keys [i].format (alias stream);
                stream:.write (' ', Tokens::DARROW, ' ');
                self._values [i].format (alias stream);
            }

            stream:.detabing ();
            stream:.write (Tokens::RCRO);
        }
    }

}
