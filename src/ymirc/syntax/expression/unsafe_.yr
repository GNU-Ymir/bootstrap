in unsafe_;

use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of an unsafe expression
 */
@final
pub class UnsafeExpr over Expression {

    // The content value
    let _value : &Expression;

    /**
     * @params:
     *   - loc: the location of the atomic
     *   - value: the value that is unsafe
     */
    pub self (loc : &Word, value : &Expression)
        with super (loc), _value = value
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * @returns: the unsafe block content
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            a : &UnsafeExpr => {
                a._value == self._value
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the atomic inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::UNSAFE);
            stream:.entabing ();
            stream:.write (" {\n");
            self._value.format (alias stream);
            stream:.detabing ();
            stream:.write ("\n}");
        }
    }

}
