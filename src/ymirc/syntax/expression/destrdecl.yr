mod ymirc::syntax::expression::destrdecl;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntaxic representation of a destructuration var declaration
 * @verbatim: 
 * ==============
 * destr_decl := Keys::LET Tokens::LPAR var_decl (Tokens::COMA var_decl)* (Tokens::TDOT)? Tokens::RPAR Tokens::EQUAL expression:(0)
 * ==============
 */
pub class @final DestructVarDecl over Expression {

    /// The list of variable decls
    let _params : [&Expression];

    /// The value that is destructured
    let _value : &Expression;

    /// Is this a variadic destructuration ?
    let _isVariadic : bool;

    /**
     * @params: 
     *    - loc: the location of the declaration
     *    - params: the list of variable to declare
     *    - value: the value to destructure
     *    - isVariadic: true, if the destructuration is variadic, false otherwise
     */
    pub self (loc : &Word, params : [&Expression], value : &Expression, isVariadic : bool = false)
        with super (loc), _params = params, _value = value, _isVariadic = isVariadic
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the list of variable to declare
     */
    pub def getParameters (self) -> [&Expression] {
        self._params
    }

    /**
     * @returns: the value to destructure
     */
    pub def getValue (self)-> &Expression {
        self._value
    }

    /**
     * @returns: true, if the destructuration is variadic, false
     * otherwise     
     * @info: a variadic destructuration let the last
     * variable be a tuple, if there remains element in the value that
     * are not bound, example destructuring a tuple of arity 3, with
     * only 2 variable declaration
     */
    pub def isVariadic (self)-> bool {
        self._isVariadic
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the destructuration inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::LET, ' 'c8, Tokens::LPAR);
            stream:.entabing ();
            let mut j = 0u64;            
            for i in self._params {
                if (j != 0u64) stream:.write (", "s8);
                i.format (alias stream);
                j += 1u64;
            }
            if (self._isVariadic) stream:.write (Tokens::TDOT);
            stream:.write (Tokens::RPAR, ' 'c8, Tokens::EQUAL, ' 'c8);
            self._value.format (alias stream);
            stream:.detabing ();
        }        
    }
    
}


