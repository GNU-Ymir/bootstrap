mod ymirc::syntax::expression::decoexpr;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntaxic representation of a decorated expression
 * @verbatim: 
 * ================
 * deco_expr := (Keys::MUT | Keys::DMUT | Keys::REF | Keys::STATIC | Keys::CTE) expression:(0)
 * ================
 */
pub class @final DecoratedExpr over Expression {

    /// The list of decorators 
    let _decorators : [DecoratorWord];

    /// The content of the expression
    let _content : &Expression;

    /**
     * @params: 
     *    - loc: the location of the expression
     *    - content: the 
     */
    pub self (loc : &Word, content : &Expression, decorators : [DecoratorWord])
        with super (loc), _content = content, _decorators = decorators
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * @returns: the list of decorators 
     */
    pub def getDecorators (self)-> [DecoratorWord] {
        self._decorators
    }

    /**
     * @returns: the content expression
     */
    pub def getContent (self)-> &Expression {
        return self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty print of the expression into the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            let mut j = 0u64;
            for i in self._decorators {
                if (j != 0u64) stream:.write (' 'c8);
                stream:.write (i.deco);
                j += 1u64;
            }
            
            stream:.write (' 'c8);
            stream:.entabing ();
            self._content.format (alias stream);
            stream:.detabing ();
        }
    }
    
}

