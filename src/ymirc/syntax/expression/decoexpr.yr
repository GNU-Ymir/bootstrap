mod ymirc::syntax::expression::decoexpr;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic representation of a decorated expression
 * @verbatim:
 * ================
 * deco_expr := (Keys::MUT | Keys::DMUT | Keys::STATIC | Keys::CTE) expression:(0)
 * ================
 */
pub class @final DecoratedExpr over Expression {

    /// The decorator
    let _deco : &Word;

    /// The content of the expression
    let _content : &Expression;

    /**
     * @params:
     *    - loc: the location of the expression
     *    - content: the
     */
    pub self (loc : &Word, content : &Expression, deco : &Word)
        with super (loc)
        , _content = content
        , _deco = deco
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * @returns: the list of decorators
     */
    pub fn getDecorator (self)-> &Word {
        self._deco
    }

    /**
     * @returns: true if the decorator refers to a mut
     * */
    pub fn isMutable (self)-> bool {
        self._deco == Keys::MUTABLE
    }

    /**
     * @returns: true if the decorator refers to a dmut
     * */
    pub fn isDeeplyMutable (self)-> bool {
        self._deco == Keys::DMUTABLE
    }

    /**
     * @returns: the content expression
     */
    pub fn getContent (self)-> &Expression {
        return self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            d : &DecoratedExpr => {
                self._content == d._content && self._deco == d._deco
            }
            _ => {
                false
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty print of the expression into the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._deco.str (), ' 'c8);
            stream:.entabing ();
            self._content.format (alias stream);
            stream:.detabing ();
        }
    }

}
