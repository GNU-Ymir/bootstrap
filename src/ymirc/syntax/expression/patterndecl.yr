in patterndecl;

use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of a patternucturation var declaration
 * @verbatim:
 * ==============
 * pattern_decl := Keys::LET Tokens::LPAR var_decl (Tokens::COMA var_decl)* (Tokens::TDOT)? Tokens::RPAR Tokens::EQUAL expression:(0)
 * ==============
 */
@final
pub class PatternVarDeclExpr over Expression {

    // The pattern expression
    let _pattern : &Expression;

    // The value that is patternuctured
    let _value : &Expression;

    /**
     * @params:
     *    - loc: the location of the declaration
     *    - params: the list of variable to declare
     *    - value: the value to patternucture
     *    - isVariadic: true, if the patternucturation is variadic, false otherwise
     */
    pub self (loc : &Word, pattern : &Expression, value : &Expression)
        with super (loc), _pattern = pattern, _value = value
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the pattern expression used to deconstruct the value
     */
    pub fn getPattern (self) -> &Expression {
        self._pattern
    }

    /**
     * @returns: the value to patternucture
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            d : &PatternVarDeclExpr => {
                d._pattern == self._pattern && d._value == self._value
            }
            _ => {
                false
            }
        }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the patternucturation inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::LET, ' ');
            self._pattern.format (alias stream);
            stream:.entabing ();
            stream:.write (Tokens::EQUAL, ' ');
            self._value.format (alias stream);
            stream:.detabing ();
        }
    }

}
