mod ymirc::syntax::expression::operator::unary;

import ymirc::syntax::expression::base;
import ymirc::syntax::expression::operator::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * Syntaxic representation of a unary expression
 * @verbatim: 
 * =============
 * unary := expression:(x) Operator expression:(x)
 * =============
 */
pub class @final UnaryExpr over OperatorExpr {

    let _operand : &Expression;
    
    /**
     * @params: 
     *    - loc: the location and operator of the expression
     *    - operand: the operand operand of the unary expression
     *    - right: the right operand of the unary expression
     */
    pub self (loc : &Word, operand : &Expression)
        with super (loc), _operand = operand
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the operand part of the expression
     */
    pub fn getOperand (self)-> &Expression {
        self._operand
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            u : &UnaryExpr => {
                u._loc == self._loc && u._operand == self._operand
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the unary expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str (), '('c8);
            stream:.entabing ();
            self._operand.format (alias stream);
            stream:.detabing ();
            stream:.write (')'c8);
        }
    }

}
