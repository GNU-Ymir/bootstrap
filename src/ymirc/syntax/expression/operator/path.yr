mod ymirc::syntax::expression::operator::path;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::fs::path;
import std::io;


/**
 * Syntaxic representation of a path expression
 * @verbatim: 
 * =============
 * path_expr := Identifier Tokens::DCOLON Identifier
 * =============
 */
pub class @final PathExpr over OperatorExpr {

    /// The left operand
    let _left : &Expression;

    /// The right operand
    let _right : &Expression;

    /**
     * @params: 
     *    - loc: the location and operator of the expression
     *    - left: the left operand of the binary expression
     *    - right: the right operand of the binary expression
     */
    pub self (loc : &Word, left : &Expression, right : &Expression)
        with super (loc), _left = left, _right = right
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the left part of the expression
     */
    pub fn getLeft (self)-> &Expression {
        self._left
    }

    /**
     * @returns: the right part of the expression
     */
    pub fn getRight (self)-> &Expression {
        self._right
    }

    /**
     * @returns: a std path
     */
    pub fn toStdPath (self)-> &Path {
        let mut res = Path::new (""); 
        match self._left {
            p : &PathExpr => {
                res = res.push (p.toStdPath ());
            }
            _ => {
                res = res.push (self._left.getLoc ().str ());
            }
        }

        match self._right {
            p : &PathExpr => {
                res = res.push (p.toStdPath ());
            }
            _ => {
                res = res.push (self._right.getLoc ().str ());
            }
        }

        res
    }

    /**
     * @returns: the location of the different component of the path
     * */
    pub fn getLocs (self)-> [&Word] {
        let l = match self._left {
            p : &PathExpr => {
                p.getLocs ()
            }
            _ => {
                [self._left.getLoc ()]
            }
        };

        let r = match self._right {
            p : &PathExpr => {
                p.getLocs ()
            }
            _ => {
                [self._right.getLoc ()]
            }
        };

        l ~ r
    }

    /**
     * @returns: the location of the file part of the path
     * */
    pub fn getFileLoc (self)-> &Word {
        match self._right {
            p : &PathExpr => {
                p.getFileLoc ()
            }
            _ => { self._right.getLoc () }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            p : &PathExpr => {
                p._left == self._left && p._right == self._right
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the path expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            self._left.format (alias stream);
            stream:.write (self._loc.str ());
            self._right.format (alias stream);
        }
    }

}
