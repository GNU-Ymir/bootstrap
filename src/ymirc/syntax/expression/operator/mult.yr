mod ymirc::syntax::expression::operator::mult;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::net::packet;
import std::io;

/**
 * A mult operator is an operator with on left operand, and a list of right operands (for example call is a mult operator)
 * @verbatim: 
 * ==================
 * mult_operator :=   expression:(0) Tokens::LPAR argument*(',') Tokens::RPAR
 *                  | expression:(0) Tokens::LCRO argument*(',') Tokens::RCRO
 * ==================
 */
pub class @final MultOperatorExpr over OperatorExpr {

    /// The end of the expression
    let _end : &Word;

    /// The left operand
    let _left : &Expression;

    /// The operands inside the mult operator
    let _rights : [&Expression];

    /// True iif it can be a dot call
    let _canBeDotCall : bool;

    /**
     * @params: 
     *    - loc: the location of the operator (first '(' or '[')
     *    - end: the location of the closing token of the operator
     *    - left: the left operand
     *    - rights: the right operand
     *    - canBeDotCall: true, if this expression can be used as a dot call, false otherwise (sub part of a Dot operator)
     */        
    pub self (loc : &Word, end : &Word, left : &Expression, rights : [&Expression], canBeDotCall : bool = true)
        with super (loc), _end = end, _left = left, _rights = rights, _canBeDotCall = canBeDotCall
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the location of the closing token of the operation
     */
    pub fn getEndLocation (self)-> &Word {
        self._end
    }

    /**
     * @returns: the left operand of the expression
     */
    pub fn getLeft (self)-> &Expression {
        self._left
    }

    /**
     * @returns: the list of right operands
     */
    pub fn getRights (self)-> [&Expression] {
        self._rights
    }

    /**
     * @returns: true, if the expression can be used inside a dot call expression
     */
    pub fn canBeDotCall (self)-> bool {
        self._canBeDotCall
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            m : &MultOperatorExpr => {
                m._loc == self._loc && m._end == self._end && m._left == self._left && m._rights == self._rights && m._canBeDotCall == self._canBeDotCall
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Packable;
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            self._left.format (alias stream);
            stream:.entabing ();
            stream:.write (' 'c8, self._loc.str ());
            let mut j = 0u64;
            for i in self._rights {
                if (j != 0u64) stream:.write (", "s8);
                i.format (alias stream);
                j += 1u64;
            }
            stream:.detabing ();
            stream:.write (self._end.str ());
        }        
    }

}
