mod ymirc::syntax::expression::operator::binary;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::net::packet;
import std::io;

/**
 * Syntaxic representation of a binary expression
 * @verbatim: 
 * =============
 * binary := expression:(x) Operator expression:(x)
 * =============
 */
pub class @final BinaryExpr over OperatorExpr {

    /// The left operand
    let _left : &Expression;

    /// The right operand
    let _right : &Expression;

    /**
     * @params: 
     *    - loc: the location and operator of the expression
     *    - left: the left operand of the binary expression
     *    - right: the right operand of the binary expression
     */
    pub self (loc : &Word, left : &Expression, right : &Expression)
        with super (loc), _left = left, _right = right
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the left part of the expression
     */
    pub fn getLeft (self)-> &Expression {
        self._left
    }

    /**
     * @returns: the right part of the expression
     */
    pub fn getRight (self)-> &Expression {
        self._right
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            b : &BinaryExpr => {
                b._left == self._left && b._right == self._right && b._loc == self._loc
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Packable;
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the binary expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            self._left.format (alias stream);
            match self.getLoc ().str () {
                BinaryOperators::DOT | BinaryOperators::DOT_AND | BinaryOperators::DCOLON => 
                    stream:.write (self._loc.str ());
                _ =>
                    stream:.write (' 'c8, self._loc.str (), ' 'c8);
            }
            self._right.format (alias stream);
        }
    }
}
