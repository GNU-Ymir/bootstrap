in null_;

use ymirc::syntax::expression::{base, literal::base};

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of a null literal
 * @verbatim:
 * =================
 * null_lit := Keys::NULL
 * =================
 */
@final
pub class NullExpr over LiteralExpr {

    /**
     * @params: 
     *    - loc: the location of the literal
     */
    pub self (loc : &Word)
        with super (loc)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            NullExpr () => { true }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the literal in the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::NULL);
        }        
    }
    
}
