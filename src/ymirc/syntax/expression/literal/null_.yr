mod ymirc::syntax::expression::literal::null_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntaxic representation of a null literal
 * @verbatim:
 * =================
 * null_lit := Keys::NULL
 * =================
 */
pub class @final NullExpr over LiteralExpr {

    /**
     * @params: 
     *    - loc: the location of the literal
     */
    pub self (loc : &Word)
        with super (loc)
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            NullExpr () => { true }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the literal in the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::NULL);
        }        
    }
    
}
