mod ymirc::syntax::expression::literal::none;

import ymirc::syntax::expression::base;
import ymirc::syntax::expression::literal::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic representation of a none literal
 * @verbatim:
 * =================
 * none_lit := Keys::NONE
 * =================
 */
pub class @final NoneExpr over LiteralExpr {

    /**
     * @params:
     *    - loc: the location of the literal
     */
    pub self (loc : &Word)
        with super (loc)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            NoneExpr () => { true }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the literal in the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::NONE);
        }
    }

}
