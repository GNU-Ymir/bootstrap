in range;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;


/**
 * Syntaxic representation of a dollar literal
 * @verbatim: 
 * ===========
 * range_type := ..T
 * ===========
 */
@final
pub class RangeTypeExpr over LiteralExpr {

    // The type of the range
    let _type : &Expression;
    
    /**
     * @params: 
     *    - loc: the location of the literal
     *    - type: the type of the expression
     */
    pub self (loc : &Word, type : &Expression)
        with super (loc), _type = type
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the type of the range
     */
    pub fn getType (self)-> &Expression {
        self._type
    }        
    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            r : &RangeTypeExpr => { self._type == r._type }                
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the dollar literal inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Tokens::LPAR, Tokens::DDOT, self._type, Tokens::RPAR);
        }         
    }
        
}
