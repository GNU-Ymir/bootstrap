mod ymirc::syntax::expression::literal::string;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::net::packet;
import std::io;

/**
 * Syntaxic representation of a string literal
 * @verbatim: 
 * ================
 * string_lit := Tokens::SQUOTE any* Tokens::SQUOTE (Keys::S8 | Keys::S32)?
 * ================
 */
pub class @final StringExpr over LiteralExpr {

    /// The location of the end of the expression
    let _end : &Word;

    /// The content of the string
    let _sequence : [c8];

    /// The suffix of the literal
    let _suffix : &Word;

    /**
     * @params: 
     *   - loc: the location of the string (first quote)
     *   - end: the end of the string (last quote)
     *   - sequence: the strings forming the string literal
     *   - suffix: the suffix after the string literal (StringSuffixes::UTF8, StringSuffixes::UTF32, or eof ())
     */
    pub self (loc : &Word, end : &Word, sequence : [c8], suffix : &Word = EOF_WORD)
        with super (loc), _end = end, _sequence = sequence, _suffix = suffix
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the location of the last quote of the string literal
     */
    pub fn getEndLocation (self)-> &Word {
        self._end
    }

    /**
     * @returns: the sequence of the string literal
     */
    pub fn getSequence (self)-> [c8] {
        self._sequence
    }

    /**
     * @returns: the suffix of the string literal
     */
    pub fn getSuffix (self)-> &Word {
        self._suffix
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            s : &StringExpr => {
                s._end == self._end && s._sequence == self._sequence && self._suffix == s._suffix
            }
            _ => { false }
        }
    }    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Packable;
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting the string into the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str (), self._sequence, self._end.str (), self._suffix.str ());
        }
    }
       
}
