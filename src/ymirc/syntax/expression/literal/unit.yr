mod ymirc::syntax::expression::literal::unit;

import ymirc::syntax::expression::base;
import ymirc::syntax::expression::literal::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic reprensentation of a unit expression
 */
pub class UnitExpr over LiteralExpr {
    
    pub self (loc : &Word = EOF_WORD)
        with super (loc)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            UnitExpr () => { true }
            _ => { false }
        }
    }
        
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("<unit-expr>"s8);
        }        
    }    
}
