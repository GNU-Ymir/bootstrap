mod ymirc::syntax::expression::literal::float;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * Syntaxic representation of a float literal
 * @verbatim: 
 * ===============
 * float_lit := ([0-9] | '_')* Tokens::DOT ([0-9] | '_')* FloatSuffix
 * ===============
 */
pub class @final FloatExpr over LiteralExpr {

    /// The part before the dot
    let _prePart : &Word;

    /// The part after the dot
    let _decPart : &Word;

    // The expronential part
    let _expPart : &Word;

    /// true iif exp part is positive
    let _expPartPositive : bool = true;

    /// The suffix of the literal (f)
    let _suffix : &Word;

    /// True iif the float is written in hex notation
    let _isHex : bool = false;

    /**
     * @params: 
     *   - loc: the location and content of the literal
     *   - suffix: the suffix type of the literal
     */
    pub self (loc : &Word, prePart : &Word, decPart : &Word, suffix : &Word = EOF_WORD, exp : &Word = EOF_WORD, expPositive : bool = true, isHex : bool = false)
        with super (loc), _prePart = prePart, _decPart = decPart, _suffix = suffix, _expPart = exp, _expPartPositive = expPositive, _isHex = isHex
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the part of the literal before the decimal part
     */
    pub fn getPrePart (self)-> &Word {
        self._prePart
    }

    /**
     * @returns: the decimal part of the literal
     */
    pub fn getDecPart (self)-> &Word {
        self._decPart
    }
    
    /**
     * @returns: the suffix word of the literal
     */
    pub fn getSuffix (self)-> &Word {
        self._suffix
    }

    /**
     * @returns: the exponential part of the float literal
     * */
    pub fn getExpPart (self)-> &Word {
        self._expPart
    }

    /**
     * @returns: true if exp part is > 0
     * */
    pub fn expPartIsPositive (self)-> bool {
        self._expPartPositive
    }

    /**
     * @returns: true if the hex is written in hex format
     * */
    pub fn isHex (self)-> bool {
        self._isHex
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            f : &FloatExpr => {
                f._prePart == self._prePart && f._decPart == self._decPart && self._suffix == f._suffix
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the literal in the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (self._expPart.isEof ())
                stream:.write (self._prePart.str (), Tokens::DOT, self._decPart.str (), self._suffix.str ());
            else {
                stream:.write (self._prePart.str (), Tokens::DOT, self._decPart.str ());

                if (self._isHex) stream:.write (FloatExp::LP);
                else stream:.write (FloatExp::LE);

                if (self._expPartPositive) stream:.write (Tokens::PLUS);
                else stream:.write (Tokens::MINUS);

                stream:.write (self._expPart.str (), self._suffix.str ());
            }
        }        
    }

}
