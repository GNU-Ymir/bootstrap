mod ymirc::syntax::expression::literal::bool_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntaxic representation of a bool literal
 * @verbatim: 
 * ===========
 * bool_lit := Keys::FALSE | Keys::TRUE
 * ===========
 */
pub class @final BoolExpr over LiteralExpr {

    /**
     * @params: 
     *    - loc: the location and value of the bool literal
     */
    pub self (loc : &Word) with super (loc) {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            b : &BoolExpr => {
                b._loc == self._loc
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */    
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the bool literal inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str ());
        }         
    }   
}
