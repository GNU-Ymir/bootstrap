in fixed;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;


/**
 * Syntaxic representation of a fixed literal
 * @verbatim: 
 * ===============
 * fixed_lit := ([0-9] | '_')+ FixedSuffix
 * ===============
 */
 @final
pub class FixedExpr over LiteralExpr {

    // The suffix of the literal (i8, u64...)
    let _suffix : &Word;

    /**
     * @params: 
     *   - loc: the location and content of the literal
     *   - suffix: the suffix type of the literal
     */
    pub self (loc : &Word, suffix : &Word = EOF_WORD)
        with super (loc), _suffix = suffix
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the suffix word of the literal
     */
    pub fn getSuffix (self)-> &Word {
        self._suffix
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            f : &FixedExpr => {
                f._loc == self._loc && self._suffix == f._suffix
            }
            _ => { false }
        }
    }
    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the literal in the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str (), self._suffix.str ());
        }        
    }

}
