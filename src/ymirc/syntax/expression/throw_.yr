mod ymirc::syntax::expression::throw_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::net::packet;
import std::io;


/**
 * Syntaxic node representation of a throw expression
 * @verbatim: 
 * ==============
 * throw_expr := Keys::THROW expression:(0)
 * ==============
 */
pub class @final ThrowExpr over Expression {

    /// The value that is thrown
    let _value : &Expression;

    /**
     * @params : 
     *    - loc: the location of the throw
     *    - value: the value of the throw
     */
    pub self (loc : &Word, value : &Expression)
        with super (loc), _value = value
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the value of the throw
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &ThrowExpr => {
                t._value == self._value                    
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Packable;
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the throw
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::THROW, ' 'c8);
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.detabing ();
        }        
    }

}


