mod ymirc::syntax::expression::listmtch;

import ymirc::syntax::expression::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic representation of a list matcher expression
 * @verbatim:
 * =============
 * list_match := (ListKeys::MATCH_SOME | ListKeys::MATCH_NONE) Tokens::LPAR inner_matcher_expr Tokens::RPAR
 * =============
 */
pub class @final ListMatcherExpr over Expression {

    // The closing token
    let _end : &Word;

    // The inner operand
    let _params : [&Expression];

    // True if this matcher is variadic
    let _isVariadic : bool;

    /**
     * @params:
     *    - loc: the location and operator of the expression
     */
    pub self (loc : &Word, end : &Word, params : [&Expression], isVariadic : bool)
        with super (loc)
        , _end = end
        , _params = params
        , _isVariadic = isVariadic
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the parameters of the expression
     */
    pub fn getParameters (self)-> [&Expression] {
        self._params
    }


    pub fn getEndLoc (self)-> &Word {
        self._end
    }

    /**
     * @returns: true if the matcher is variadic
     * */
    pub fn isVariadic (self)-> bool {
        self._isVariadic
    }

    /**
     * @returns: true if this is a tuple matcher (otherwise it is an array one)
     * */
    pub fn isTuple (self)-> bool {
        self._loc == Tokens::LPAR
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            b : &ListMatcherExpr => {
                b._params == self._params && b._loc == self._loc && self._isVariadic == b._isVariadic
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the binary expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (self.isTuple ()) {
                stream:.write ('(');
            } else {
                stream:.write ('[');
            }

            for i, j in self._params {
                if (i != 0us) stream:.write (", ");
                j.format (alias stream);
            }

            if (self.isTuple () && self._params.len == 1us) stream:.write (',');
            if (self.isTuple ()) {
                stream:.write (')');
            } else {
                stream:.write (']');
            }
        }
    }
}
