mod ymirc::syntax::expression::assert_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntaxic node representation of an assertion
 * @verbatim: 
 * ==============
 * assert_expr := Keys::ASSERT param_expr_list
 * ==============
 */
pub class @final AssertExpr over Expression {
    
    /// The test of the assertion
    let _test : &Expression;

    /// The message of the assertion
    let _msg : &Expression;

    /**
     * @params : 
     *    - loc: the location of the assert
     *    - test: the test of the assertion
     *    - msg: the message to display, if the test failed
     */
    pub self (loc : &Word, test : &Expression, msg : &Expression)
        with super (loc), _test = test, _msg = msg
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the test of the assertion
     */
    pub def getTest (self)-> &Expression {
        self._test
    }

    /**
     * @preturns: the message to display if the assertion fails
     */
    pub def getMessage (self)-> &Expression {
        self._msg
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the assertion
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::ASSERT, " ("s8);
            stream:.entabing ();
            self._test.format (alias stream);
            match self._msg {
                UnitExpr () => {}
                _ => {
                    stream:.write (", "s8);
                    self._msg.format (alias stream);
                }
            }
            stream:.detabing ();
            stream:.write (")"s8);
        }        
    }
    
}
