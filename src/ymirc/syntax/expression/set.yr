in set;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * A set is a list of expression, that doesn't enter a new scope, they are used to declare multiple element on the same line, for example var declarations
 * The value of a set, is the value of the last expression
 * @info: the syntax depend on what is inside the set, there are no common syntax to declare a set
 */
@final
pub class SetExpr over Expression {

    // The content of the block
    let _content : [&Expression];

    /**
     * @params: 
     *   - loc: the location of the set
     *   - content: the list of expression contained in the set
     */
    pub self (loc : &Word, content : [&Expression])
        with super (loc), _content = content
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * @returns: the list of expression inside the set
     */
    pub fn getContent (self)-> [&Expression] {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            s : &SetExpr => {
                s._content == self._content
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the set to the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            let mut j = 0u64;
            for i in self._content {
                if (j != 0u64) stream:.write ('\n');
                i.format (alias stream);
                j += 1u64;
            }            
        }        
    }

}
