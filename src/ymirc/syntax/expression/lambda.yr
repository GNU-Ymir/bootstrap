mod ymirc::syntax::expression::lambda;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntaxic representation of a lambda value literal
 * @verbatim: 
 * ===============
 * lambda_lit := (Keys::MOVE)? Tokens::PIPE var_decl*(Tokens::COMA) Tokens::PIPE (Tokens::ARROW expression:(0))? (Tokens::DARROW)? expression:(0)
 * ===============
 */
pub class @final LambdaValueExpr over Expression {

    /// The prototype of the lambda
    let _proto : &FunctionProtoDecl;

    /// True if this is a closure lambda
    let _isClosure : bool;

    /// The content of the lambda
    let _value : &Expression;

    /**
     * @params: 
     *    - loc: the location of the lambda value
     *    - proto: the prototype of the lambda value
     *    - value: the value of the lambda 
     *    - isMove: true, if the lambda value is a closure
     */
    pub self (loc : &Word, proto : &FunctionProtoDecl, value : &Expression, isClosure : bool = false)
        with super (loc), _proto = proto, _value = value, _isClosure = isClosure
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the prototype of the lambda function
     */
    pub def getFunctionProtoDecl (self)-> &FunctionProtoDecl {
        self._proto
    }

    /**
     * @returns: the value of the lambda
     */
    pub def getValue (self)-> &Expression {
        self._value
    }
    
    /**
     * @returns: true, if the lambda value is a move closure
     */
    pub def isClosure (self)-> bool {
        self._isClosure
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the lambda into the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (self._isClosure) stream:.write (Keys::MOVE, ' 'c8);
            self._proto.format (alias stream);
            stream:.entabing ();
            stream:.write (' 'c8, Tokens::DARROW, ' 'c8);
            self._value.format (alias stream);
            stream:.detabing ();
        }
    }
    
}
