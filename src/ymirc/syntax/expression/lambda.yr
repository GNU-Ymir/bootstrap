in lambda;

use ymirc::syntax::declaration::proto;
use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of a lambda value literal
 * @verbatim: 
 * ===============
 * lambda_lit := (Keys::MOVE)? Tokens::PIPE var_decl*(Tokens::COMA) Tokens::PIPE (Tokens::ARROW expression:(0))? (Tokens::DARROW)? expression:(0)
 * ===============
 */
@final
pub class LambdaValueExpr over Expression {

    // The prototype of the lambda
    let _proto : &FunctionProtoDecl;

    // The content of the lambda
    let _value : &Expression;

    /**
     * @params: 
     *    - loc: the location of the lambda value
     *    - proto: the prototype of the lambda value
     *    - value: the value of the lambda 
     *    - isMove: true, if the lambda value is a closure
     */
    pub self (loc : &Word, proto : &FunctionProtoDecl, value : &Expression)
        with super (loc), _proto = proto, _value = value
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the prototype of the lambda function
     */
    pub fn getFunctionProtoDecl (self)-> &FunctionProtoDecl {
        self._proto
    }

    /**
     * @returns: the value of the lambda
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            l : &LambdaValueExpr => {
                self._proto == l._proto && l._value == self._value
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the lambda into the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            self._proto.format (alias stream);
            stream:.entabing ();
            stream:.write (' ', Tokens::DARROW, ' ');
            self._value.format (alias stream);
            stream:.detabing ();
        }
    }
    
}
