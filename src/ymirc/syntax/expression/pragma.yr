in pragma;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of a pragma expression
 * @verbatim: 
 * ================
 * pragma_expr := Keys::PRAGMA Tokens::NOT Identifier Tokens::LPAR argument*(',') Tokens::RPAR
 * ================
 */
@final
pub class PragmaExpr over Expression {

    // The content of the pragma
    let _params : [&Expression];

    /**
     * @params: 
     *    - loc: the location and identifier of the pragma
     *    - params: the list of arguments passed to the pragma
     */
    pub self (loc : &Word, params : [&Expression])
        with super (loc), _params = params
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the list of arguments passed to the pragma
     */
    pub fn getParameters (self)-> [&Expression] {
        self._params
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            p : &PragmaExpr => {
                p._params == self._params && p._loc == self._loc
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the pragam inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::PRAGMA, Tokens::NOT, self._loc.str (), '(');
            stream:.entabing ();
            let mut j = 0u64;
            for i in self._params {
                if (j != 0u64) stream:.write (", ");
                i.format (alias stream);
                j += 1u64;
            }
            stream:.detabing ();
            stream:.write (')');
        }
    }
    
}
