in return_;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic node representation of a return expression
 * @verbatim: 
 * ==============
 * return_expr := Keys::RETURN expression:(0)
 * ==============
 */
@final
pub class ReturnExpr over Expression {

    // The value that is returned
    let _value : &Expression;

    /**
     * @params : 
     *    - loc: the location of the return
     *    - value: the value of the return
     */
    pub self (loc : &Word, value : &Expression)
        with super (loc), _value = value
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the value of the return
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            r : &ReturnExpr => {
                r._value == self._value && r._loc == self._loc
            }
            _ => { false }            
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the return
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::RETURN, ' ');
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.detabing ();
        }        
    }
    
}
