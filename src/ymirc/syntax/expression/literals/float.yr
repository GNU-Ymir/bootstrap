mod ymirc::syntax::expression::literals::float;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;


/**
 * Syntaxic representation of a float literal
 * @verbatim: 
 * ===============
 * float_lit := ([0-9] | '_')* Tokens::DOT ([0-9] | '_')* FloatSuffix
 * ===============
 */
pub class @final Float over Literal {

    /// The part before the dot
    let _prePart : &Word;

    /// The part after the dot
    let _decPart : &Word;

    /// The suffix of the literal (f)
    let _suffix : &Word;

    /**
     * @params: 
     *   - loc: the location and content of the literal
     *   - suffix: the suffix type of the literal
     */
    pub self (loc : &Word, prePart : &Word, decPart : &Word, suffix : &Word = Word::eof ())
        with super (loc), _prePart = prePart, _decPart = decPart, _suffix = suffix
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the part of the literal before the decimal part
     */
    pub def getPrePart (self)-> &Word {
        self._prePart
    }

    /**
     * @returns: the decimal part of the literal
     */
    pub def getDecPart (self)-> &Word {
        self._decPart
    }
    
    /**
     * @returns: the suffix word of the literal
     */
    pub def getSuffix (self)-> &Word {
        self._suffix
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the literal in the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._prePart.str (), Tokens::DOT, self._decPart.str (), self._suffix.str ());
        }        
    }

}
