mod ymirc::syntax::expression::list;

import ymirc::syntax::expression::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * A list is a list of expression, surrounded by tokens, such as () or []
 * They are used for array and tuple literals, and are not equals to Sets
 * @verbatim:
 * ===============
 * list_lit :=   Tokens::LPAR argument*(Tokens::COMA) Tokens::RPAR
 *             | Tokens::LCRO argument*(Tokens::COMA) Tokens::RCRO
 * ===============
 */
pub class @final ListExpr over Expression {

    /// The location of the end of the expression
    let _end : &Word;

    /// The list of parameters
    let _params : [&Expression];

    /// True iif this is a list from an array initialization (between [])
    let _isArray : bool;


    /**
     * @params: 
     *    - loc: the location (and type, depending on the token contained in the word), of the expression
     *    - end: the location of the closing token of the expression
     *    - params: the list of parameters inside the literal
     */
    pub self (loc : &Word, end : &Word, params : [&Expression], isArray : bool = false)
        with super (loc)
        , _end = end
        , _params = params
        , _isArray = isArray
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the closing location of the expression
     */
    pub fn getEndLocation (self)-> &Word {
        self._end
    }

    /**
     * @returns: the list of parameters inside the expression
     */
    pub fn getParameters (self)-> [&Expression] {
        self._params
    }

    /**
     * @returns: True iif this is a list from an array initialization (between []), assumed to be a tuple otherwise
     */
    pub fn isArray (self)-> bool {
        self._isArray
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            l : &ListExpr => {
                l._end == self._end && l._params == self._params && l._isArray == self._isArray
            }
            _ => { false }
        }
    }    
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str ());
            stream:.entabing ();
            let mut j = 0u64;
            for i in self._params {
                if (j != 0u64) stream:.write (", "s8);
                i.format (alias stream);
                j += 1u64;
            }
            if (self._params.len == 1us && self._loc.str () == Tokens::LPAR) stream:.write (','c8);
            stream:.detabing ();
            stream:.write (self._end.str ());
        }
    }
    
}
