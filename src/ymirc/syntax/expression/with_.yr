mod ymirc::syntax::expression::with_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntaxic representation of a with loop
 * @verbatim: 
 * ===============
 * with := Keys::WITH var_decl*(',') expression:(0)
 * ===============
 */
pub class @final DisposeScopeExpr over Expression {

    /// The list of declaration
    let _vars : [&Expression];

    /// The content of the scope
    let _block : &Expression;

    /**
     * @params: 
     *    - loc: the location of the loop
     *    - vars: the list of variable declared inside the with block
     *    - block: the content of the with
     */
    pub self (loc : &Word, vars : [&Expression], block : &Expression)
        with super (loc), _vars = vars, _block = block
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the list of variable declared, and disposed in the scope
     */
    pub def getVariables (self)-> [&Expression] {
        self._vars
    }

    /**
     * @returns: the content of the scope
     */
    pub def getBlock (self)-> &Expression {
        self._block
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty withmatting of the loop inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::WITH, ' 'c8);
            let mut j = 0u64;
            stream:.entabing ();
            for i in self._vars {
                if (j != 0u64) stream:.write (", "s8);
                i.format (alias stream);
                j += 1u64;
            }
            self._block.format (alias stream);
            stream:.detabing ();   
        }        
    }

}
