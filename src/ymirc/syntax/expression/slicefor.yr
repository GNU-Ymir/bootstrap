mod ymirc::syntax::expression::slicefor;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic representation of a slice allocation
 * This allocation can be either static of dynamic (resulting an array or a slice)
 * @verbatim:
 * ===============
 * slice_alloc := Keys::LCRO expression:(0) Tokens::SEMI_COLON (Keys::NEW)? expression:(0) Tokens::RCRO
 * ===============
 */
pub class @final SliceForAllocatorExpr over Expression {

    /// The location of the 'for' keyword
    let _forLoc : &Word;

    /// The left value
    let _value : &Expression;

    /// The iteration variables
    let _decls : [&Expression];

    /// The iterated value
    let _iter : &Expression;

    /// True if the slice for creates a tuple instead of an array or a slice
    let _isTuple : bool;

    /**
     * @params:
     *    - loc: the location of the allocator
     *    - value: the value to construct at each index
     *    - decls: the variables used to iterate
     *    - iter: the value being iterated
     */
    pub self (loc : &Word, forLoc : &Word, value : &Expression, decls : [&Expression], iter : &Expression, isTuple : bool)
        with super (loc)
        , _forLoc = forLoc
        , _value = value
        , _decls = decls
        , _iter = iter
        , _isTuple = isTuple
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the location of the 'for' keyword
     * */
    pub fn getForLoc (self)-> &Word {
        self._forLoc
    }

    /**
     * @returns: the value to replicate at each index
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }

    /**
     * @returns: the vars used to iterate
     */
    pub fn getVariables (self)-> [&Expression] {
        self._decls
    }

    /**
     * @returns: the value being iterated
     * */
    pub fn getIter (self)-> &Expression {
        self._iter
    }

    /**
     * @returns: true if the slice for creates a tuple
     * */
    pub fn isTuple (self)-> bool {
        self._isTuple
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            s : &SliceForAllocatorExpr => {
                s._value == self._value && s._decls == self._decls && s._iter == self._iter
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the allocator inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Tokens::LCRO, ' 'c8);
            stream:.entabing ();
            self._value.format (alias stream);

            stream:.write (' 'c8, Keys::FOR, ' 'c8);
            for i, j in self._decls {
                if (i != 0us) stream:.write (", "s8);
                stream:.write (j);
            }
            stream:.write (' 'c8, Keys::IN, ' 'c8);
            self._iter.format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::RCRO);
        }
    }

}
