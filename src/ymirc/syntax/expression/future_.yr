in future_;

use ymirc::syntax::expression::vardecl;
use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of a function pointer type
 * @verbatim:
 * =================
 * func_ptr_type := Keys::FN Prototype
 * =================
 */
@final
pub class FutureTypeExpr over Expression {

    // The parameters of the type
    let _content : &Expression;

    /**
     * @params:
     *    - loc: the location of the expression
     *    - content: the type returned by the future
     */
    pub self (loc : &Word, content : &Expression)
        with super (loc)
        , _content = content
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the return type of the function pointer
     */
    pub fn getReturnType (self)-> &Expression {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            f : &FutureTypeExpr => {
                f._content == self._content
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::FUTURE, Tokens::ARROW, " (");
            stream:.entabing ();
            self._content.format (alias stream);
            stream:.write (')');
            stream:.detabing ();
        }
    }

}
