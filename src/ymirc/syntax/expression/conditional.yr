mod ymirc::syntax::expression::conditional;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic representation of a condition control structure (if expression)
 * @verbatim: 
 * =============
 * if_expr := Keys::IF expression:(0) expression:(0) (Keys::ELSE expression:(0))?
 * =============
 */
pub class @final ConditionalExpr over Expression {

    // true if the cond is a let cond
    let _isLet : bool;

    /// The test of the conditional
    let _test : &Expression;

    /// The content of the conditional
    let _content : &Expression;

    /// The else part of the conditional 
    let _else : &Expression;

    /**
     * @params: 
     *   - loc: the location of the expression
     *   - test: the test of the expression
     *   - content: the content of the expression
     *   - else_: the else part of the conditional
     */
    pub self (loc : &Word, test : &Expression, content : &Expression, else_ : &Expression = EmptyExpression::new (), isLet : bool = false)
        with super (loc), _test = test, _content = content, _else = else_, _isLet = isLet
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the test to validate to enter the conditional
     */
    pub fn getTest (self)-> &Expression {
        self._test
    }

    /**
     * @returns: true if the condition is a let condition
     * */
    pub fn isLet (self)-> bool {
        self._isLet
    }

    /**
     * @returns: the expression to evaluate if the condition is true
     */
    pub fn getContent (self)-> &Expression {
        self._content
    }

    /**
     * @returns: the expression to expression if the condition is false
     */
    pub fn getElse (self)-> &Expression {
        self._else
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            c : &ConditionalExpr => {
                c._test == self._test && c._content == self._content && c._else == self._else && self._isLet == c._isLet
            }
            _ => { false }
        }
    }
    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**        
         * Pretty formatting of the conditional inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::IF, ' 'c8);
            stream:.entabing ();
            self._test.format (alias stream);
            stream:.write (' 'c8);
            stream:.detabing ();
            
            self._content.format (alias stream);
            match self._else {
                UnitExpr () => {}
                _ => {
                    stream:.write (Keys::ELSE, ' 'c8);
                    self._else.format (alias stream);
                }
            }            
        }
    }
    
}
