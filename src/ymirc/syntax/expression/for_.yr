mod ymirc::syntax::expression::for_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntaxic representation of a for loop
 * @verbatim: 
 * ===============
 * for_loop := Keys::FOR var_decl*(',') Keys::IN expression:(0) expression:(0)
 * ===============
 */
pub class @final ForLoop over Expression {

    /// The list of var declarations
    let _vars : [&Expression];

    /// The iteration value
    let _iter : &Expression;

    /// The content of the loop
    let _block : &Expression;

    /**
     * @params: 
     *    - loc: the location of the loop
     *    - vars: the list of variable used to iter over iter
     *    - iter: the value iterate over
     *    - block: the block of expression value of each loop
     */
    pub self (loc : &Word, vars : [&Expression], iter : &Expression, block : &Expression)
        with super (loc), _vars = vars, _iter = iter, _block = block
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the list of variable used as iterators
     */
    pub def getVariables (self)-> [&Expression] {
        self._vars
    }

    /**
     * @returns: the expression content
     */
    pub def getBlock (self)-> &Expression {
        self._block
    }

    /**
     * @returns: the value to iterate over
     */
    pub def getValue (self)-> &Expression {
        self._iter
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the loop inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::FOR, ' 'c8);
            let mut j = 0u64;
            stream:.entabing ();
            for i in self._vars {
                if (j != 0u64) stream:.write (", "s8);
                i.format (alias stream);
                j += 1u64;
            }
            stream:.write (' 'c8, Keys::IN, ' 'c8);
            self._iter.format (alias stream);
            stream:.write (' 'c8);
            stream:.detabing ();  
            self._block.format (alias stream);             
        }        
    }

}
