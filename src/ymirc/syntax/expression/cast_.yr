mod ymirc::syntax::expression::cast_;

import ymirc::syntax::expression::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic node representation of a cast expression
 * @verbatim: 
 * ==============
 * cast_expr := Keys::CAST Tokens::NOT expression:(0) Tokens::LPAR expression:(0) Tokens::RPAR
 * ==============
 */
pub class @final CastExpr over Expression {

    /// The type of the cast 
    let _type : &Expression;

    /// The value that is casted
    let _value : &Expression;

    /**
     * @params : 
     *    - loc: the location of the cast
     *    - type: the type of the cast
     *    - value: the value of the cast
     */
    pub self (loc : &Word, type : &Expression, value : &Expression)
        with super (loc), _value = value, _type = type
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the value of the cast
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }

    /**
     * @returns: the type of the cast
     */
    pub fn getType (self)-> &Expression {
        self._type
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            c : &CastExpr => {
                c._value == self._value && c._type == self._type
            }
            _ => {
                false
            }
        }
    }
    
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the cast
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::CAST, " !("s8);
            stream:.entabing ();
            self._type.format (alias stream);
            stream:.write (")("s8);
            self._value.format (alias stream);
            stream:.write (")"s8);
            stream:.detabing ();
        }        
    }
    
}
