mod ymirc::syntax::expression::try;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;


/**
 * Syntaxic node representation of a try expression
 * @verbatim: 
 * ==============
 * try_expr := expression:(0) Tokens::INTEG
 * ==============
 */
pub class @final TryExpr over Expression {

    /// The content of the try
    let _value : &Expression;

    /**
     * @params : 
     *    - loc: the location of the try
     *    - value: the value of the try
     */
    pub self (loc : &Word, value : &Expression)
        with super (loc), _value = value
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the value of the try
     */
    pub def getValue (self)-> &Expression {
        self._value
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the try
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('('c8);
            self._value.format (alias stream);
            stream:.write (')'c8, Tokens::INTEG);
        }        
    }
    
}
