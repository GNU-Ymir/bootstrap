in try;

use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;


/**
 * Syntaxic node representation of a try expression
 * @verbatim: 
 * ==============
 * try_expr := expression:(0) Tokens::INTEG
 * ==============
 */
@final
pub class TryExpr over Expression {

    // The content of the try
    let _value : &Expression;

    /**
     * @params : 
     *    - loc: the location of the try
     *    - value: the value of the try
     */
    pub self (loc : &Word, value : &Expression)
        with super (loc), _value = value
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the value of the try
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &TryExpr => {
                t._value == self._value 
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the try
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('(');
            self._value.format (alias stream);
            stream:.write (')', Tokens::INTEG);
        }        
    }
    
}
