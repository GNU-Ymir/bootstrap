mod ymirc::syntax::expression::slice;

import ymirc::syntax::expression::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic representation of a slice allocation
 * This allocation can be either static of dynamic (resulting an array or a slice)
 * @verbatim:
 * ===============
 * slice_alloc := Keys::LCRO expression:(0) Tokens::SEMI_COLON (Keys::NEW)? expression:(0) Tokens::RCRO
 * ===============
 */
pub class @final SliceAllocatorExpr over Expression {

    /// The left value
    let _value : &Expression;

    /// The size of the allocation
    let _size : &Expression;

    /**
     * @params:
     *    - loc: the location of the allocator
     *    - value: the value (to replicate at each index)
     *    - size: the size of the allocation
     */
    pub self (loc : &Word, value : &Expression, size : &Expression)
        with super (loc), _value = value, _size = size
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value to replicate at each index
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }

    /**
     * @returns: the size of the allocation
     */
    pub fn getSize (self)-> &Expression {
        self._size
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            s : &SliceAllocatorExpr => {
                s._value == self._value && s._size == self._size
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the allocator inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Tokens::LCRO);
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.write (' 'c8, Tokens::SEMI_COLON, ' 'c8);
            self._size.format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::RCRO);
        }
    }

}
