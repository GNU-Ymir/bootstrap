mod ymirc::syntax::expression::matcher;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntaxic representation of a matcher 
 * @verbatim: 
 * ==============
 * catch_expr := Keys::CATCH Tokens::LACC (expression:(0) Tokens::DARROW expression:(0))* Tokens::RACC
 * match_expr := Keys::MATCH expression:(0) Tokens::LACC (expression:(0) Tokens::DARROW expression:(0))* Tokens::RACC
 * ==============
 */
pub class @final MatcherExpr over Expression {

    /// The content of the expression
    let _content : &Expression;

    /// The list of matchers
    let _matchers : [(&Expression, &Expression)];

    /// Is this a catch 
    let _isCatcher : bool;
    
    /**
     * @params:
     *  - loc: the location of the matcher
     *  - content: the expression on which to match
     *  - matchers: the list of matcher
     *  - isCatcher: true, if the matcher is a catcher, false otherwise
     */
    pub self (loc : &Word, content : &Expression, matchers : [(&Expression, &Expression)], isCatcher : bool = false)
        with super (loc), _content = content, _matchers = matchers, _isCatcher = isCatcher
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */    
    
    /**
     * @returns: the matchers (rule, content)
     */
    pub def getMatchers (self)-> [(&Expression, &Expression)] {
        self._matchers
    }

    /**
     * @returns: true, if the matcher is a catcher
     */
    pub def isCatcher (self)-> bool {
        self._isCatcher
    }

    /**
     * @returns: the content of the matcher
     * @info: if the matcher is a catcher, it will return the block
     */
    pub def getContent (self)-> &Expression {
        self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the matcher inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (self._isCatcher) {
                //self._content.format (alias stream);
                stream:.write (' 'c8, Keys::CATCH, " { "s8);
            } else {
                stream:.write (Keys::MATCH, ' 'c8);
                self._content.format (alias stream);
                stream:.write (" {"s8);
            }

            stream:.entabing ();
            stream:.write ("\n"s8);
            for i in self._matchers {
                (i._0).format (alias stream);
                stream:.write (' 'c8, Tokens::DARROW, ' 'c8);
                (i._1).format (alias stream);
                stream:.write ("\n"s8);
            }
            stream:.detabing ();
            stream:.write ("}");
        }

    }
    
}
