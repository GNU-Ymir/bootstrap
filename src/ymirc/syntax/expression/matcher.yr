in matcher;

use ymirc::syntax::expression::empty;
use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of a matcher 
 * @verbatim: 
 * ==============
 * catch_expr := Keys::CATCH Tokens::LACC (expression:(0) Tokens::DARROW expression:(0))* Tokens::RACC
 * match_expr := Keys::MATCH expression:(0) Tokens::LACC (expression:(0) Tokens::DARROW expression:(0))* Tokens::RACC
 * ==============
 */
@final
pub class MatcherExpr over Expression {

    // The content of the expression
    let _content : &Expression;

    // The list of matchers
    let _matchers : [(&Expression, &Expression, &Expression)];

    // Is this a catch
    let _isCatcher : bool;
    
    /**
     * @params:
     *  - loc: the location of the matcher
     *  - content: the expression on which to match
     *  - matchers: the list of matcher
     *  - isCatcher: true, if the matcher is a catcher, false otherwise
     */
    pub self (loc : &Word, content : &Expression, matchers : [(&Expression, &Expression, &Expression)], isCatcher : bool = false)
        with super (loc), _content = content, _matchers = matchers, _isCatcher = isCatcher
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */    
    
    /**
     * @returns: the matchers (rule, content)
     */
    pub fn getMatchers (self)-> [(&Expression, &Expression, &Expression)] {
        self._matchers
    }

    /**
     * @returns: true, if the matcher is a catcher
     */
    pub fn isCatcher (self)-> bool {
        self._isCatcher
    }

    /**
     * @returns: the content of the matcher
     * @info: if the matcher is a catcher, it will return the block
     */
    pub fn getContent (self)-> &Expression {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            m : &MatcherExpr => {
                if (m._matchers.len != self._matchers.len) return false;
                for i in 0us .. m._matchers.len {
                    if (m._matchers[i]._0 != self._matchers[i]._0 ||
                        m._matchers[i]._1 != self._matchers[i]._1) return false;
                }
                
                m._isCatcher == self._isCatcher && m._content == self._content
            }
            _ => { false }
        }
    }
        
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the matcher inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (self._isCatcher) {
                //self._content.format (alias stream);
                stream:.write (' ', Keys::CATCH, " { ");
            } else {
                stream:.write (Keys::MATCH, ' ');
                self._content.format (alias stream);
                stream:.write (" {");
            }

            stream:.entabing ();
            stream:.write ("\n");
            for i in self._matchers {
                (i._0).format (alias stream);
                match i._1 {
                    EmptyExpression () => {}
                    cd : _ => {
                        stream:.write (' ', Keys::IF, ' ');
                        cd.format (alias stream);
                    }
                }

                stream:.write (' ', Tokens::DARROW, ' ');
                (i._2).format (alias stream);
                stream:.write ("\n");
            }
            stream:.detabing ();
            stream:.write ("}");
        }

    }
    
}
