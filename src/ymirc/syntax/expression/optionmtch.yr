in optionmtch;

use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of a option matcher expression
 * @verbatim:
 * =============
 * option_match := (OptionKeys::MATCH_SOME | OptionKeys::MATCH_NONE) Tokens::LPAR inner_matcher_expr Tokens::RPAR
 * =============
 */
@final
pub class OptionMatcherExpr over Expression {

    // The inner operand
    let _inner : &Expression;

    /**
     * @params:
     *    - loc: the location and operator of the expression
     *    - inner: the inner matcher of the expression
     */
    pub self (loc : &Word, inner : &Expression)
        with super (loc), _inner = inner
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the inner matcher of the expression
     */
    pub fn getInner (self)-> &Expression {
        self._inner
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            b : &OptionMatcherExpr => {
                b._inner == self._inner && b._loc == self._loc
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the binary expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str (), '(');
            self._inner.format (alias stream);
            stream:.write (')');
        }
    }
}
