mod ymirc::syntax::expression::macro_::var;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * A var is used to associate a macro rule to an identifier, and reuse the result later on
 * @verbatim:
 * =================
 * macro_var_decl := Identifier Tokens::EQUAL macro_rule_expr
 * =================
 */
pub class @final MacroVarExpr over MacroRuleExpression {

    /// The content of the var
    let _content : &Expression;

    /**
     * @params: 
     *    - loc: the location (and identifier) of the macro var
     *    - content: the macro rule associated to the var
     */
    pub self (loc : &Word, content : &Expression)
        with super (loc), _content = content
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the macro rule associated to the var
     */
    pub def getContent (self)-> &Expression {
        self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            m : &MacroVarExpr => {
                m._loc == self._loc && m._content == self._content
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the macro var inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str (), Tokens::EQUAL);
            stream:.entabing ();
            self._content.format (alias stream);
            stream:.detabing ();
        }
    }

}
