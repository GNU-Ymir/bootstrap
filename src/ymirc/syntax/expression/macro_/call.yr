in call;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of a macro call expression
 * @verbatim: 
 * ==============
 * macro_call_expr :=   Identifier Tokens::MACRO_ACC (any*) Tokens::RACC 
 *                    | Identifier Tokens::MACRO_PAR (any*) Tokens::RPAR
 *                    | Identifier Tokens::MACRO_CRO (any*) Tokens::RCRO 
 * ==============
 */
@final
pub class MacroCallExpr over Expression {

    // The end of the expression
    let _end : &Word;

    // The macro that is called
    let _macro : &Expression;

    // The content of the call
    let _content : [c8];

    /**
     * @params:
     *    - loc: the location of the macro call
     *    - end: the location of the closing token of the macro call
     *    - content: the content of the macro call
     */
    pub self (loc : &Word, end : &Word, macro_ : &Expression, content : [c8])
        with super (loc), _end = end, _macro = macro_, _content = content
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the location of the closing token of the macro call
     */
    pub fn getEndLocation (self)-> &Word {
        self._end
    }

    /**
     * @returns: the value of the macro to call
     */
    pub fn getMacro (self)-> &Expression {
        self._macro
    }

    /**
     * @returns: the content of the macro call
     */
    pub fn getContent (self)-> [c8] {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            c : &MacroCallExpr => {
                c._end == self._end && c._macro == self._macro && c._content == self._content
            }
            _ => { false }
        }
    }    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the macro call
         */
        pub over format (self, dmut stream : &Formatter) {
            self._macro.format (alias stream);
            stream:.write (self._loc.str);
            stream:.entabing ();
            stream:.write (self._content);
            stream:.detabing ();
            stream:.write (self._end.str);
        }
    }

}
