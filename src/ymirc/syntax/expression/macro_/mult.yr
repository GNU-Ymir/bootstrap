mod ymirc::syntax::expression::macro_::mult;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * A macro mult is a list of macro rules used inside a macro rules, with a multiplier
 * @verbatim: 
 * =============
 * macro_mult_decl := Tokens::LPAR macro_rule_expr* Tokens::RPAR (Tokens::STAR | Tokens::ADD | Tokens::INTEG)?
 * =============
 */
pub class @final MacroMultExpr over MacroRuleExpression {

    /// The end of the expression
    let _end : &Word;

    /// The kind of multiplier
    let _mult : &Word;

    /// The content of the macro rule
    let _content : [&MacroRuleExpression];

    /**
     * @params: 
     *   - loc: the location of the multiplier
     *   - end: the closing location of the multiplier
     *   - content: the list of macro rules inside the multiplier
     *   - mult: the type of multiplier 
     */
    pub self (loc : &Word, end : &Word, content : [&MacroRuleExpression], mult : &Word = EOF_WORD)
        with super (loc), _end = end, _content = content, _mult = mult
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the closing token of the multiplier
     */
    pub fn getEndLocation (self)-> &Word {
        self._end
    }

    /**
     * @returns: the multiplier
     */
    pub fn getMultiplier (self)-> &Word {
        self._mult
    }

    /**
     * @returns: the list of expression inside the multiplier
     */
    pub fn getContent (self)-> [&MacroRuleExpression] {
        self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            m : &MacroMultExpr => {
                m._end == self._end && m._mult == self._mult && m._content == self._content
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the multiplier inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str ());
            stream:.entabing ();
            let mut j = 0u64;
            for i in self._content {
                if (j != 0u64) stream:.write (' 'c8);
                i.format (alias stream);
                j += 1u64;
            }
            stream:.detabing ();
            stream:.write (self._end.str (), self._mult.str ());
        }
    }

}
