in token;

use ymirc::syntax::expression::literal::string;
use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * A macro token is just a string literal that must be found in the macro specialization
 * @verbatim:
 * ============
 * macro_token_decl := Tokens::DQUOTE (any)* Tokens::DQUOTE
 * ============
 */
@final
pub class MacroTokenExpr over MacroRuleExpression {

    // The content of the token
    let _content : &StringExpr;

    /**
     * @params: 
     *    - loc: the location of the token
     *    - content: the content of the token
     */
    pub self (loc : &Word, content : &StringExpr)
        with super (loc), _content = content
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the token
     */
    pub fn getContent (self)-> &StringExpr {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMAPRISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            m : &MacroTokenExpr => {
                m._content == self._content
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the macro token inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            self._content.format (alias stream);
        }        
    }

}
