in ident;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * A macro ident is just a string literal that must be found in the macro specialization
 * @verbatim:
 * ============
 * macro_ident_decl := Idents::DQUOTE (any)* Idents::DQUOTE
 * ============
 */
@final
pub class MacroIdentExpr over MacroRuleExpression {

    /**
     * @params:
     *    - loc: the location of the ident
     *    - content: the content of the ident
     */
    pub self (loc : &Word)
        with super (loc)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMAPRISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            m : &MacroIdentExpr => {
                m._loc == self._loc
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the macro ident inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str);
        }
    }

}
