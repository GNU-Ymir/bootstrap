mod ymirc::syntax::expression::macro_::or;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * A macro or is used to choose between two possible macro rules
 * @verbatim : 
 * ===============
 * macro_or_decl := macro_rule_expr Tokens::PIPE macro_rule_expr
 * ===============
 */
pub class @final MacroOrExpr over MacroRuleExpression {

    /// The left operand
    let _left : &MacroRuleExpression;

    /// The right operand
    let _right : &MacroRuleExpression;

    /**
     * @params: 
     *    - loc: the location of the macro or
     *    - left: the left macro
     */
    pub self (loc : &Word, left : &MacroRuleExpression, right : &MacroRuleExpression)
        with super (loc), _left = left, _right = right
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the left operand of the or expression
     */
    pub fn getLeft (self)-> &MacroRuleExpression {
        self._left
    }

    /**
     * @returns: the right operand of the or expression
     */
    pub fn getRight (self)-> &MacroRuleExpression {
        self._right
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            m : &MacroOrExpr => {
                m._left == self._left && m._right == self._right
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            self._left.format (alias stream);
            stream:.write (' 'c8, self._loc.str (), ' 'c8);
            self._right.format (alias stream);
        }
    }

}
