mod ymirc::syntax::expression::vardecl;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * Syntaxic representation of a var declaration
 * Multiple var declaration on the same line, are splitted into a Set of var decls
 * @verbatim: 
 * ===============
 * var_decl_expr := Keys::LET (Decorator)* Identifier (Tokens::COLON expression:0)? (Tokens::EQUAL expression:0)?
 * ===============
 */
pub class @final VarDeclExpr over Expression {

    /// The name of the variable to declare
    let _name : &Word;

    /// The type of the variable
    let _type : &Expression;

    /// The value of the variable
    let _value : &Expression;

    /// The location of the word mut or dmut
    let _isMutOrDmut : &Word;

    /// The location of the word if lazy pure or ref (EOF if none of those)
    let _isLazyPureOrRef : &Word;

    /**
     * @params: 
     *    - loc: the location of the variable declaration (let keyword)
     *    - name: the identifier of the variable
     *    - value: the value part of the vardecl
     *    - type: the type part of the vardecl
     */
    pub self (loc : &Word, name : &Word, value : &Expression, type : &Expression, isMutOrDmut : &Word = EOF_WORD, isLazyPureOrRef : &Word = EOF_WORD)
        with super (loc)
        , _name = name
        , _value = value
        , _type = type
        , _isMutOrDmut = isMutOrDmut
        , _isLazyPureOrRef = isLazyPureOrRef
    {
        __version DEBUG {
        // Cannot be lazy or pure and mutable
            if (// self._isLazyPureOrRef == Keys::LAZY ||
                self._isLazyPureOrRef == Keys::PURE) && !self._isMutOrDmut.isEof () {
                __pragma!panic ();
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the name of the variable
     */
    pub fn getName (self)-> &Word {
        self._name
    }

    /**
     * @returns: the type of the variable
     */
    pub fn getType (self)-> &Expression {
        self._type
    }

    /**
     * @returns: the value of the variable
     */
    pub fn getValue (self)-> &Expression {
        self._value
    }


    /**
     * @returns: true if the variable is lazy
     * */
    pub fn isLazy (self)-> bool {
        self._isLazyPureOrRef == Keys::LAZY
    }

    /**
     * @returns: the location of the lazy keyword (if lazy)
     * */
    pub fn getLazyLocation (self)-> &Word {
        if (self._isLazyPureOrRef == Keys::LAZY) return self._isLazyPureOrRef;

        EOF_WORD
    }

    /**
     * @returns: true if the variable is pure
     * */
    pub fn isPure (self)-> bool {
        self._isLazyPureOrRef == Keys::PURE
    }

    /**
     * @returns: the location of the pure keyword (if pure)
     * */
    pub fn getPureLocation (self)-> &Word {
        if (self._isLazyPureOrRef == Keys::PURE) return self._isLazyPureOrRef;
        EOF_WORD
    }

    /**
     * @returns: true if the variable is a reference
     * */
    pub fn isRef (self)-> bool {
        self._isLazyPureOrRef == Keys::REF
    }

    /**
     * @return: the location of the ref keyword if ref
     * */
    pub fn getRefLocation (self)-> &Word {
        if (self._isLazyPureOrRef == Keys::REF) return self._isLazyPureOrRef;
        EOF_WORD
    }

    /**
     * @returns: the location of the lazy pure or ref keyword (or EOF)
     * */
    pub fn getLazyPureOrRefLocation (self)-> &Word {
        self._isLazyPureOrRef
    }

    /**
     * @returns: true if the var is deeply mutable
     * */
    pub fn isDeeplyMutable (self)-> bool {
        self._isMutOrDmut == Keys::DMUTABLE
    }

    /**
     * @returns: the location of the  dmut keyword if deeply mutable
     * */
    pub fn getDeeplyMutableLocation (self)-> &Word {
        if (self._isMutOrDmut == Keys::DMUTABLE) return self._isMutOrDmut;
        EOF_WORD
    }

    /**
     * @returns: true if the var is mutable (but not deeply)
     * */
    pub fn isMutable (self)-> bool {
        self._isMutOrDmut == Keys::MUTABLE
    }

    /**
     * @return: the location of the keyword mut if mutable (but not deeply)
     * */
    pub fn getMutableLocation (self)-> &Word {
        if (self._isMutOrDmut == Keys::MUTABLE) return self._isMutOrDmut;
        EOF_WORD
    }

    /**
     * @returs: the location to the mut or dmut keyword (or EOF)
     * */
    pub fn getMutOrDmutLocation (self)-> &Word {
        self._isMutOrDmut
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            v : &VarDeclExpr => {
                if (v._isLazyPureOrRef != self._isLazyPureOrRef) return false;
                if (v._isMutOrDmut != self._isMutOrDmut) return false;

                v._name == self._name && v._type == self._type && v._value == self._value
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the variable declaration
         */
        pub over format (self, dmut stream : &Formatter) {
            if (!self._isLazyPureOrRef.isEof ()) stream:.write (self._isLazyPureOrRef.str (), ' 'c8);
            if (!self._isMutOrDmut.isEof ()) stream:.write (self._isMutOrDmut.str (), ' 'c8);

            stream:.write (self._name.str ());
            stream:.entabing ();
            match self._type {
                EmptyExpression () => {}
                UnitExpr () => {}
                _ => {
                    stream:.write (' 'c8, Tokens::COLON, ' 'c8);
                    self._type.format (alias stream);
                }
            }

            match self._value {
                EmptyExpression () => {}
                UnitExpr () => {}
                _ => {
                    stream:.write (' 'c8, Tokens::EQUAL, ' 'c8);
                    self._value.format (alias stream);
                }
            }
            stream:.detabing ();
        }
    }

}
