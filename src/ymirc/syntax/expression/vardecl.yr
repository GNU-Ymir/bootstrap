mod ymirc::syntax::expression::vardecl;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;


/**
 * Syntaxic representation of a var declaration
 * Multiple var declaration on the same line, are splitted into a Set of var decls
 * @verbatim: 
 * ===============
 * var_decl_expr := Keys::LET (Decorator)* Identifier (Tokens::COLON expression:0)? (Tokens::EQUAL expression:0)?
 * ===============
 */
pub class @final VarDeclExpr over Expression {

    /// The name of the variable to declare
    let _name : &Word;

    /// The type of the variable
    let _type : &Expression;

    /// The value of the variable
    let _value : &Expression;

    /// The list of decorators
    let _decos : [DecoratorWord];

    /**
     * @params: 
     *    - loc: the location of the variable declaration (let keyword)
     *    - name: the identifier of the variable
     *    - value: the value part of the vardecl
     *    - type: the type part of the vardecl
     *    - decos: the list of decorators of the variable
     */
    pub self (loc : &Word, name : &Word, value : &Expression, type : &Expression, decos : [DecoratorWord] = [])
        with super (loc), _name = name, _value = value, _type = type, _decos = decos
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the name of the variable
     */
    pub def getName (self)-> &Word {
        self._name
    }

    /**
     * @returns: the type of the variable
     */
    pub def getType (self)-> &Expression {
        self._type
    }

    /**
     * @returns: the value of the variable
     */
    pub def getValue (self)-> &Expression {
        self._value
    }

    /**
     * @returns: the list of decorators
     */
    pub def getDecos (self)-> [DecoratorWord] {
        self._decos
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the variable declaration
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._name.str ());
            stream:.entabing ();
            match self._type {
                EmptyExpression () => {}
                _ => {
                    stream:.write (' 'c8, Tokens::COLON, ' 'c8);
                    self._type.format (alias stream);
                }
            }

            match self._value {
                EmptyExpression () => {}
                _ => {
                    stream:.write (' 'c8, Tokens::EQUAL, ' 'c8);
                    self._value.format (alias stream);
                }
            }
            stream:.detabing ();
        }
    }

}
