mod ymirc::syntax::expression::empty;

import ymirc::syntax::expression::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic reprensentation of a unit expression
 */
pub class EmptyExpression over Expression {

    pub self withLoc (loc : &Word)
        with super (loc)
    {}

    pub self () with super (Word::eof ()) {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            EmptyExpression () => { true }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("<empty>");
        }        
    }    
}


pub static EMPTY_EXPR = EmptyExpression::new ();
