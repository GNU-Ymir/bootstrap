in intrinsic;

use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * A named expression associate an Identifier to an expression, this is used in call arguments, matchers, etc.
 * @verbatim: 
 * ================
 * named_expr := Identifier Tokens::ARROW expression:(0)
 * ================
 */
@final
pub class IntrinsicExpr over Expression {

    // The type of intrinsic
    let _type : IntrinsicKeys;
    
    // The content of the expression
    let _content : &Expression;

    /**
     * @params: 
     *    - loc: the location and identifier of the named expression
     *    - type: the type of intrinsic
     *    - content: the content of the expression
     */
    pub self (loc : &Word, type : IntrinsicKeys, content : &Expression)
        with super (loc), _content = content, _type = type
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the type of intrinsic
     */
    pub fn getType (self)-> IntrinsicKeys {
        self._type
    }
    
    /**
     * @returns: the content of the expression
     */
    pub fn getContent (self)-> &Expression {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            i : &IntrinsicExpr => {
                i._type == self._type && i._content == self._content
            }
            _ => { false }                
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the expression inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._type, ' ');
            stream:.entabing ();
            self._content.format (alias stream);
            stream:.detabing ();
        }        
    }

}
