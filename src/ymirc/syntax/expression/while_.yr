in while_;

use ymirc::syntax::expression::empty;
use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic representation of a while loop control structure
 * @verbatim: 
 * =============
 * while_expr :=   Keys::WHILE expression:(0) expression:(0)
 *               | Keys::DO expression:(0) Keys::WHILE expression:(0)
 * =============
 */
@final
pub class WhileLoopExpr over Expression {

    // The test of the while
    let _test : &Expression;

    // The content of the loop
    let _content : &Expression;

    // True if this is a do while loop
    let _isDo : bool;

    /**
     * @params: 
     *   - loc: the location of the expression
     *   - test: the test of the expression, (if not specified the while loop is an infinite loop)
     *   - content: the content of the expression
     *   - isDo: the while loop is a do while
     */
    pub self (loc : &Word, test : &Expression = EmptyExpression::new (), content : &Expression, isDo : bool = false)
        with super (loc), _test = test, _content = content, _isDo = isDo
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the test to validate to enter the while loop
     */
    pub fn getTest (self)-> &Expression {
        self._test
    }

    /**
     * @returns: the expression to evaluate if the condition is true
     */
    pub fn getContent (self)-> &Expression {
        self._content
    }

    /**
     * @returns: true, if the loop is a do while loop
     */
    pub fn isDo (self)-> bool {
        self._isDo
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            w : &WhileLoopExpr => {
                w._test == self._test && w._content == self._content && w._isDo == self._isDo
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    
    impl Streamable;
    impl Formattable {

        /**        
         * Pretty formatting of the while inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            match self._test {
                EmptyExpression () => {
                    stream:.write (Keys::LOOP, ' ');
                    stream:.entabing ();
                    self._content.format (alias stream);
                    stream:.detabing ();
                }
                _ =>  {
                    if (self._isDo) {
                        stream:.write (Keys::DO, ' ');
                        self._content.format (alias stream);
                        stream:.write (' ', Keys::WHILE, ' ');
                        stream:.entabing ();
                        self._test.format (alias stream);
                        stream:.detabing ();
                    } else {
                        stream:.write (Keys::WHILE, ' ');
                        stream:.entabing ();
                        self._test.format (alias stream);
                        stream:.write (' ');
                        stream:.detabing ();
                        self._content.format (alias stream);
                    }
                }
            }
        }
    }
    
}
