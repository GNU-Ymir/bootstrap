mod ymirc::syntax::expression::template::checker;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;



/**
 * Template checker are used to associate a bool value to a template specialization test
 * @verbatim: 
 * ===================
 * template_checker_expr := Keys::IS Tokens::NOT template_argument_list Tokens::LPAR template_parameter*(Tokens::COMA) Tokens::RPAR
 * ===================
 */
pub class @final TemplateChecker over Expression {

    /// The list of template parameters to test
    let _params : [&Expression];

    /// The list of template deconstruction expressions
    let _rules : [&TemplateExpression];

    /**
     * @params: 
     *    - loc: the location of the template checker
     *    - params: the list of template parameters (after the Not token)
     *    - rules: the list of template rules (used to specialize the parameters)
     */
    pub self (loc : &Word, params : [&Expression], rules : [&TemplateExpression])
        with super (loc), _params = params, _rules = rules
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the list of template parameters (after the Not token)
     */
    pub def getParameters (self)-> [&Expression] {
        self._params
    }

    /**
     * @returns: the list of template rules (used to specialize the parameters)
     */
    pub def getRules (self)-> [&TemplateExpression] {
        self._rules
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */    

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the template checker inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::IS, Tokens::NOT, '('c8);
            stream:.entabing ();
            let mut j = 0u64;
            for i in self._params {
                if (j != 0u64) stream:.write (", "s8);
                i.format (alias stream);
                j += 1u64;
            }
            stream:.write (")("s8);
            j = 0u64;
            for i in self._params {
                if (j != 0u64) stream:.write (", "s8);
                i.format (alias stream);
                j += 1u64;
            }
            stream:.write (')'c8);
            stream:.detabing ();
        }
    }

}
