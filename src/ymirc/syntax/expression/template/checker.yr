in checker;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Template checker are used to associate a bool value to a template specialization test
 * @verbatim: 
 * ===================
 * template_checker_expr := Keys::IS Tokens::NOT template_argument_list Tokens::LPAR template_parameter*(Tokens::COMA) Tokens::RPAR
 * ===================
 */
@final
pub class TemplateCheckerExpr over Expression {

    // The list of template parameters to test
    let _params : [&Expression];

    // The list of template deconstruction expressions
    let _rules : [&Expression];

    /**
     * @params: 
     *    - loc: the location of the template checker
     *    - params: the list of template parameters (after the Not token)
     *    - rules: the list of template rules (used to specialize the parameters)
     */
    pub self (loc : &Word, params : [&Expression], rules : [&Expression])
        with super (loc), _params = params, _rules = rules
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the list of template parameters (after the Not token)
     */
    pub fn getParameters (self)-> [&Expression] {
        self._params
    }

    /**
     * @returns: the list of template rules (used to specialize the parameters)
     */
    pub fn getRules (self)-> [&Expression] {
        self._rules
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &TemplateCheckerExpr => {
                t._params == self._params && t._rules == self._rules
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */    

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the template checker inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::IS, Tokens::NOT, '{');
            stream:.entabing ();
            let mut j = 0u64;
            for i in self._params {
                if (j != 0u64) stream:.write (", ");
                i.format (alias stream);
                j += 1u64;
            }
            stream:.write ("}{");
            j = 0u64;
            for i in self._rules {
                if (j != 0u64) stream:.write (", ");
                i.format (alias stream);
                j += 1u64;
            }
            stream:.write ('}');
            stream:.detabing ();
        }
    }

}
