mod ymirc::syntax::expression::template::_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;

import std::io;

pub enum : [c8]
| ALIAS  = Keys::ALIAS
| CLASS  = Keys::CLASS
| STRUCT = Keys::STRUCT
| TUPLE  = "tuple"s8
 -> TemplateVarType;

pub enum : [c8]
| OF   = Keys::OF
| OVER = Keys::OVER
| IMPL = Keys::IMPL
 -> TemplateOfVarType;

/**
 * The ancestor of all kind of template expression
 */
pub class TemplateExpression over Expression {
    
    pub self (loc : &Word)
        with super (loc)
    {}

    impl Streamable;
    
}


pub import ymirc::syntax::expression::template::var;
pub import ymirc::syntax::expression::template::ofvar;
pub import ymirc::syntax::expression::template::variadic;
pub import ymirc::syntax::expression::template::checker;
pub import ymirc::syntax::expression::template::call;
