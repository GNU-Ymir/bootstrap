mod ymirc::syntax::expression::template::and;

import ymirc::syntax::expression::base;
import ymirc::syntax::expression::template::base;
import ymirc::syntax::expression::template::ofvar;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * A template of var is used to specialize a template argument
 * @verbatim:
 * ==============
 * template_of_var := Identifier (Keys::OF | Keys::OVER | Keys::IMPL) expression:(10) (Tokens::DAND Identifier (Keys::OF | Keys::OVER | Keys::IMPL) expression:(10))+
 * ==============
 */
pub class @final TemplateAndExpr over TemplateExpression {

    let _inners : [&TemplateOfVarExpr];

    /**
     * @params:
     *    - loc: the location of the and
     *    - inners: the template specialization to check
     * */
    pub self (loc : &Word, inners : [&TemplateOfVarExpr])
        with super (loc)
        , _inners = inners
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the list of specialization to apply to the identifier
     * */
    pub fn getSpecializations (self)-> [&TemplateOfVarExpr] {
        self._inners
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &TemplateAndExpr => {
                self._inners == t._inners
            }
            _ => { false }
        }
    }

        /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the expression inside the steram
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str (), ' 'c8);
            for i, j in self._inners {
                if (i != 0us) stream:.write (' ', Tokens::DAND, ' ');
                stream:.entabing ();
                j.getSpecialization ().format (alias stream);
                stream:.detabing ();
            }
        }
    }

}
