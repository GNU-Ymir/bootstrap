in var;

use std::stream;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Template var, used in template test to check that the type is aliasable, a class, a struct, etc.
 * @verbatim : 
 * ============
 * template_var := (Keys::ALIAS | Keys::CLASS | Keys::STRUCT | Keys::TUPLE) Identifier
 * ============
 */
@final
pub class TemplateVarExpr over TemplateExpression {

    // The type of the var
    let _type : TemplateVarType;
    
    /**
     * @params: 
     *   - loc: location and identifier of the template var
     *   - name: the type of variable
     */
    pub self (loc : &Word, type : TemplateVarType)
        with super (loc), _type = type
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the type of var
     */
    pub fn getKind (self)-> TemplateVarType {
        self._type
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &TemplateVarExpr => {
                t._type == self._type && self._loc == t._loc
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the alias var inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._type, ' ', self._loc.str);
        }        
    }

}
