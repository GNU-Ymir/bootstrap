mod ymirc::syntax::expression::template::ofvar;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * A template of var is used to specialize a template argument 
 * @verbatim: 
 * ==============
 * template_of_var := Identifier (Keys::OF | Keys::OVER | Keys::IMPL) expression:(0)
 * ==============
 */
pub class @final TemplateOfVarExpr over TemplateExpression {

    /// The right operand
    let _right : &Expression;

    /// The type of ofvar
    let _type : TemplateOfVarType;

    /**
     * @params: 
     *    - loc: the location and identifier of the of var
     *    - right: the specialization 
     *    - kind: the kind of of var (impl, of, over, etc.)
     */
    pub self (loc : &Word, right : &Expression, kind : TemplateOfVarType)
        with super (loc), _right = right, _type = kind
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the specialization of the var
     */
    pub fn getSpecialization (self)-> &Expression {
        return self._right
    }
    
    /**    
     * @returns: the kind of of var (impl, of, over, etc.)
     */
    pub fn getKind (self)-> TemplateOfVarType {
        self._type
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &TemplateOfVarExpr => {
                t._right == self._right && t._type == self._type
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the expression inside the steram        
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str (), ' 'c8, self._type, ' 'c8);
            stream:.entabing ();
            self._right.format (alias stream);
            stream:.detabing ();
        }        
    }
    
}
