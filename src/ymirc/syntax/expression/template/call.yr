in call;

use ymirc::syntax::expression::{base, template::base};

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;


/**
 * Syntaxic representation of a template call
 * @verbatim: 
 * ==============
 * template_call_expr := expression:(0) Tokens::NOT template_argument_list
 * ==============
 */
@final
pub class TemplateCallExpr over Expression {

    // The list of parameters of the call
    let _params : [&Expression];

    // The left operand of the call
    let _left : &Expression;

    /**
     * @params: 
     *   - loc: the location of the template call
     *   - left: the left operand of the call
     *   - params: the list of right operands of the call
     */
    pub self (loc : &Word, left : &Expression, rights : [&Expression])
        with super (loc), _left = left, _params = rights
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the left operand of the call
     */
    pub fn getLeft (self)-> &Expression {
        self._left
    }

    /**
     * @returns: the list of right operands of the call
     */
    pub fn getRights (self)-> [&Expression] {
        self._params
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &TemplateCallExpr => {
                t._left == self._left && t._params == self._params
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the template call inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            self._left.format (alias stream);
            stream:.write (Tokens::NOT, '{');
            stream:.entabing ();
            let mut j = 0u64;
            for i in self._params {
                if (j != 0u64) stream:.write (", "s8);
                i.format (alias stream);
                j += 1u64;
            }
            stream:.write ('}');
            stream:.detabing ();
        }
    }

}


