mod ymirc::syntax::expression::template::variadic;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * Syntaxic representation of a variadic template var 
 * @verbatim:
 * =================
 * template_variadic_var := Identifier (Tokens::COLON)? Tokens::TDOT
 * =================
 */
pub class @final TemplateVariadicVarExpr over TemplateExpression {

    /// True iif the expression is for a value, (a type otherwise)
    let _isValue : bool;
    
    /**
     * @params: 
     *    - loc: the location of the literal
     *    - isValue: is a variadic value (opposing to type)
     */
    pub self (loc : &Word, isValue : bool = false)
        with super (loc), _isValue = isValue
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: is a variadic value (opposing to type)
     */
    pub fn isValue (self)-> bool {
        self._isValue
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &TemplateVariadicVarExpr => {
                t._isValue == self._isValue && t._loc == self._loc
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the literal in the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str ());
            if (self._isValue)
                stream:.write (Tokens::COLON, ' 'c8);
            stream:.write (Tokens::TDOT);
        }        
    }

}
