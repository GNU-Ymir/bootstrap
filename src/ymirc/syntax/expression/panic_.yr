in panic_;

use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

/**
 * Syntaxic node representation of a panic expression
 * @verbatim:
 * ==============
 * panic_expr := Keys::PANIC
 * ==============
 */
@final
pub class PanicExpr over Expression {
    /**
     * @params :
     *    - loc: the location of the panic
     */
    pub self (loc : &Word)
        with super (loc)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            PanicExpr () => { true }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the panic
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::PANIC);
        }
    }

}
