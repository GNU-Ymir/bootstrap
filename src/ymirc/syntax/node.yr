mod ymirc::syntax::node;

import ymirc::lexing::word;
import ymirc::utils::format;

import ymirc::utils::serialize;
import std::io;


/**
 * Ancestor of all syntaxic element
 */
pub class @abstract SyntaxNode {

    /// The location of the word in the source file
    let _loc : &Word;

    /**
     * @params: 
     *  - loc: the location of the node
     */
    pub self (loc : &Word)
        with _loc = loc
    {}

    /**
     * @returns: the location of the node
     */
    pub fn getLoc (self)-> &Word {
        self._loc
    }

    /**
     * @returns: true iif the dynamic type is of self is T
     */
    pub fn isOf {T} (self) -> bool {
        match self {
            _ : T  => { true }
            _ => { false }
        }
    }


    impl Serializable;
    impl Streamable;    
    impl Formattable {
         pub over format (self, dmut _ : &Formatter) {}        
    }

    pub fn foo (self) {}
    
}
