in declaration;

pub mod ::aka_;
pub mod ::class_;
pub mod ::condblock;
pub mod ::constructor;
pub mod ::declblock;
pub mod ::destructor;
pub mod ::enum_;
pub mod ::externblock;
pub mod ::function;
pub mod ::global;
pub mod ::impl_;
pub mod ::import_;
pub mod ::macrorule;
pub mod ::macro_;
pub mod ::module;
pub mod ::protection;
pub mod ::proto;
pub mod ::template;
pub mod ::trait_;
pub mod ::unittest;
pub mod ::use_;
pub mod ::wrapper;


use ymirc::lexing::word;
use ymirc::syntax::node;
use ymirc::utils::format;
use std::stream;

/**
 * Ancestor class of all possible declaration
 */
@abstract
pub class Declaration over SyntaxNode {

    // The comments about the declaration
    let _comm : [c8];

    /**
     * @params:
     *    - loc: the location of the declaration
     *    - comm: the comments about the declaration
     */
    pub self (loc : &Word, comm : [c8])
        with super (loc),
             _comm = comm
    {}

    /**
     * @returns: the comments about the declaration
     */
    @final
    pub fn getComments (self)-> [c8] {
        self._comm
    }

    pub fn opEquals (self, o : &Declaration)-> bool;


    impl Streamable;
    impl Formattable {
        pub over format (self, dmut _ : &Formatter) {}
    }
}
