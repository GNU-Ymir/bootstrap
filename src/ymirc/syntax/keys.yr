mod ymirc::syntax::keys;

import ymirc::lexing::word;
import ymirc::lexing::tokens;

/**
 * List of keywords
 */
pub enum
| AKA          = "aka"s8
| ALIAS	       = "alias"s8
| AS           = "as"s8
| ASSERT       = "assert"s8
| ATOMIC       = "atomic"s8
| BREAK	       = "break"s8
| CAST	       = "cast"s8
| CATCH	       = "catch"s8
| CLANG        = "C"s8
| CLASS        = "class"s8
| COMPILE      = "compile"s8
| CONST	       = "const"s8
| COPY	       = "copy"s8
| CPPLANG      = "CXX"s8
| CTE          = "cte"s8
| DCOPY	       = "dcopy"s8
| DEF	       = "def"s8
| DELEGATE     = "dg"s8
| DLANG        = "D"s8
| DMUTABLE     = "dmut"s8
| DO	       = "do"s8
| DTOR         = "__dtor"s8
| ELSE	       = "else"s8
| ENUM	       = "enum"s8
| EXIT	       = "exit"s8
| EXPAND       = "expand"s8
| EXTERN       = "extern"s8
| FAILURE      = "failure"s8
| FALSE        = "false"s8
| FOR	       = "for"s8
| FUNCTION     = "fn"s8
| IF	       = "if"s8
| IMPL	       = "impl"s8
| IMPORT       = "import"s8
| IN	       = "in"s8
| IS	       = "is"s8
| LET	       = "let"s8
| LOOP	       = "loop"s8
| MACRO	       = "macro"s8 
| MAIN         = "main"s8
| MATCH	       = "match"s8
| MEMBERS      = "members"s8
| MOD	       = "mod"s8
| MOVE	       = "move"s8
| MUTABLE      = "mut"s8
| NEW	       = "new"s8
| NOT_IN       = "!in"s8
| NOT_IS       = "!is"s8
| NOT_OF       = "!of"s8
| NULL	       = "null"s8
| OF	       = "of"s8
| OVER	       = "over"s8
| PRAGMA       = "__pragma"s8
| PRIVATE      = "prv"s8
| PROTECTED    = "prot"s8
| PUBLIC       = "pub"s8
| PURE         = "pure"s8
| REF          = "ref"s8
| RETURN       = "return"s8
| SELF	       = "self"s8
| SIZEOF       = "sizeof"s8
| SKIPS        = "skips"s8
| STATIC       = "static"s8
| STRUCT       = "struct"s8
| SUCCESS      = "success"s8
| SUPER	       = "super"s8
| THROW        = "throw"s8
| THROWS       = "throws"s8
| TRAIT	       = "trait"s8
| TRUE	       = "true"s8
| TYPEID       = "typeid"s8
| TYPEINFO     = "typeinfo"s8
| TYPEOF       = "typeof"s8
| UNDER        = "_"s8
| UNITTEST     = "__test"s8
| VERSION      = "__version"s8
| WHILE	       = "while"s8
| WITH         = "with"s8
| YLANG        = "YMIR"s8
 -> Keys;


pub enum
| AKA          = Keys::AKA
| ALIAS	       = Keys::ALIAS
| ASSERT       = Keys::ASSERT
| ATOMIC       = Keys::ATOMIC
| BREAK	       = Keys::BREAK
| CAST	       = Keys::CAST
| CATCH	       = Keys::CATCH
| CLASS        = Keys::CLASS
| CONST	       = Keys::CONST
| COPY	       = Keys::COPY
| CTE          = Keys::CTE
| DCOPY	       = Keys::DCOPY
| DEF	       = Keys::DEF
| DELEGATE     = Keys::DELEGATE
| DMUTABLE     = Keys::DMUTABLE
| DO	       = Keys::DO
| ELSE	       = Keys::ELSE
| ENUM	       = Keys::ENUM
| EXPAND       = Keys::EXPAND
| EXTERN       = Keys::EXTERN
| FALSE        = Keys::FALSE
| FOR	       = Keys::FOR
| FUNCTION     = Keys::FUNCTION
| IF	       = Keys::IF
| IMPL	       = Keys::IMPL
| IMPORT       = Keys::IMPORT
| IN	       = Keys::IN
| IS	       = Keys::IS
| LET	       = Keys::LET
| LOOP	       = Keys::LOOP
| MACRO	       = Keys::MACRO
| MATCH	       = Keys::MATCH
| MOD	       = Keys::MOD
| MOVE	       = Keys::MOVE
| MUTABLE      = Keys::MUTABLE
| NULL	       = Keys::NULL
| OF           = Keys::OF
| PRAGMA       = Keys::PRAGMA
| PURE         = Keys::PURE
| REF          = Keys::REF
| RETURN       = Keys::RETURN
| SIZEOF       = Keys::SIZEOF
| STATIC       = Keys::STATIC
| STRUCT       = Keys::STRUCT
| THROW        = Keys::THROW
| THROWS       = Keys::THROWS
| TRAIT	       = Keys::TRAIT
| TRUE	       = Keys::TRUE
| TYPEOF       = Keys::TYPEOF
| UNDER        = Keys::UNDER
| UNITTEST     = Keys::UNITTEST
| VERSION      = Keys::VERSION
| WHILE	       = Keys::WHILE
| WITH         = Keys::WITH
 -> ForbiddenKeys;


pub enum
| STAR = Tokens::STAR
| PLUS = Tokens::PLUS
| INTEG = Tokens::INTEG
 -> MacroMultTokens;


pub enum
| LEVEL_0 = [Tokens::EQUAL, Tokens::DIV_AFF, Tokens::MINUS_AFF, Tokens::PLUS_AFF, Tokens::STAR_AFF, Tokens::PERCENT_AFF, Tokens::TILDE_AFF, Tokens::LEFTD_AFF, Tokens::RIGHTD_AFF]
| LEVEL_1 = [Tokens::DPIPE]
| LEVEL_2 = [Tokens::DAND]
| LEVEL_3 = [Tokens::INF, Tokens::SUP, Tokens::INF_EQUAL, Tokens::SUP_EQUAL, Tokens::NOT_EQUAL, Tokens::DEQUAL, Keys::OF, Keys::IS, Keys::IN]
| LEVEL_4 = [Tokens::TDOT, Tokens::DDOT]
| LEVEL_5 = [Tokens::LEFTD, Tokens::RIGHTD]
| LEVEL_6 = [Tokens::PIPE, Tokens::XOR, Tokens::AND]
| LEVEL_7 = [Tokens::PLUS, Tokens::TILDE, Tokens::MINUS]
| LEVEL_8 = [Tokens::STAR, Tokens::PERCENT, Tokens::DIV]
| LEVEL_9 = [Tokens::DXOR]
 -> BinaryOperatorsLevels;

pub enum : [c8]
| EQUAL = Tokens::EQUAL
| DIV_AFF = Tokens::DIV_AFF
| MINUS_AFF = Tokens::MINUS_AFF
| PLUS_AFF = Tokens::PLUS_AFF
| STAR_AFF = Tokens::STAR_AFF
| PERCENT_AFF = Tokens::PERCENT_AFF
| TILDE_AFF = Tokens::TILDE_AFF
| LEFTD_AFF = Tokens::LEFTD_AFF
| RIGHTD_AFF = Tokens::RIGHTD_AFF
| DPIPE = Tokens::DPIPE
| DAND = Tokens::DAND
| INF = Tokens::INF
| SUP = Tokens::SUP
| INF_EQUAL = Tokens::INF_EQUAL
| SUP_EQUAL = Tokens::SUP_EQUAL
| NOT_EQUAL = Tokens::NOT_EQUAL
| DEQUAL = Tokens::DEQUAL
| OF = Keys::OF
| IS = Keys::IS
| IN = Keys::IN
| NOT_OF = Keys::NOT_OF
| NOT_IS = Keys::NOT_IS
| NOT_IN = Keys::NOT_IN
| TDOT = Tokens::TDOT
| DDOT = Tokens::DDOT
| LEFTD = Tokens::LEFTD
| RIGHTD = Tokens::RIGHTD
| PIPE = Tokens::PIPE
| XOR = Tokens::XOR
| AND = Tokens::AND
| PLUS = Tokens::PLUS
| TILDE = Tokens::TILDE
| MINUS = Tokens::MINUS
| STAR = Tokens::STAR
| PERCENT = Tokens::PERCENT
| DIV = Tokens::DIV
| DXOR = Tokens::DXOR
| DOT = Tokens::DOT
| DOT_AND = Tokens::DOT_AND
| DCOLON = Tokens::DCOLON
 -> BinaryOperators;


pub enum
| MINUS = Tokens::MINUS
| AND = Tokens::AND
| STAR = Tokens::STAR
| NOT = Tokens::NOT
 -> UnaryOperators;

/**
 * The list of decorators
 */
pub enum
| REF    = Keys::REF
| MUT	 = Keys::MUTABLE
| DMUT	 = Keys::DMUTABLE
| STATIC = Keys::STATIC
| CTE	 = Keys::CTE
| PURE   = Keys::PURE
| CONST  = Keys::CONST
 -> Decorators;


pub enum
| COPY = Keys::COPY
| EXPAND = Keys::EXPAND
| TYPEOF = Keys::TYPEOF
| SIZEOF = Keys::SIZEOF
| ALIAS = Keys::ALIAS
| MOVE = Keys::MOVE
| DCOPY = Keys::DCOPY
 -> IntrinsicKeys;

/**
 * The list of known user defined attributes 
 */
pub enum : [c8]   
| ABSTRACT = "abstract"s8
| FINAL	   = "final"s8
| PACKED   = "packed"s8
| UNION    = "union"s8
 -> Attributes;        

pub struct
| loc : &Word
| attr : Attributes
 -> AttributeWord;

/**
 * A decorator with a location
 */
pub struct
| loc : &Word
| deco : Decorators
 -> DecoratorWord;

pub enum : [c8]
| EXIT    = Keys::EXIT
| FAILURE = Keys::FAILURE
| SUCCESS = Keys::SUCCESS
 -> ScopeGuardType;


pub enum : [c8]
| UTF32 = "s32"s8
| UTF8 = "s8"s8
 -> StringSuffixes;


pub enum : [c8]
| UTF8 = "c8"s8
| UTF32 = "c32"s8
 -> CharSuffixes;


pub enum
| U8 = "u8"s8
| U16 = "u16"s8
| U32 = "u32"s8
| U64 = "u64"s8
| USIZE = "us"s8
| I8 = "i8"s8
| I16 = "i16"s8
| I32 = "i32"s8
| I64 = "i64"s8
| ISIZE = "is"s8
 -> FixedSuffixes;

pub enum
| FLOAT = "f"s8
 -> FloatSuffixes;
    
pub enum
| PTR = "ptr"s8
| LEN = "len"s8
 -> SliceKeys;


pub enum
| STEP = "step"s8
| FST = "fst"s8
| SCD = "scd"s8
| CONTAIN = "contain"s8
 -> RangeKeys;


pub enum
| COMPILE = "compile"s8
| MSG     = "msg"s8
 -> PragmaKeys;

pub enum
| FUNC = "func"s8
| CLOSURE = "closure"s8
 -> DelegateKeys;
