mod ymirc::syntax::declaration::trait_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;


/**
 * Syntaxic representation of a trait 
 * @verbatim: 
 * =================
 * trait_decl := Keys::TRAIT Identifier '{' declaration* '}'
 * =================
 */
pub class @final Trait over Declaration {

    /// The declaration inside the trait
    let _decls : [&Declaration];

    /**
     * @params: 
     *   - loc: the location and identifier of the trait
     *   - comm: the comments about the trait
     *   - decls: the list of declaration inside the trait
     */
    pub self (loc : &Word, comm : [c8], decls : [&Declaration])
        with super (loc, comm), _decls = decls
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * @returns: the list of declaration inside the trait
     */
    pub def getDeclarations (self)-> [&Declaration] {
        self._decls
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the trait inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::TRAIT, ' 'c8, self._loc.str (), " {\n"s8);
            stream:.entabing ();
            for i in self._decls {
                i.format (alias stream);
                stream:.write ('\n');
            }
            stream:.detabing ();
            stream:.write ("}\n"s8);
        }
        
    }
    
}
