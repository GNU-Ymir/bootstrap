in trait_;

use ymirc::syntax::declaration::base;
use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;

/**
 * Syntaxic representation of a trait 
 * @verbatim: 
 * =================
 * trait_decl := Keys::TRAIT Identifier '{' declaration* '}'
 * =================
 */
@final
pub class TraitDecl over Declaration {

    // The declaration inside the trait
    let _decls : [&Declaration];

    /**
     * @params: 
     *   - loc: the location and identifier of the trait
     *   - comm: the comments about the trait
     *   - decls: the list of declaration inside the trait
     */
    pub self (loc : &Word, comm : [c8], decls : [&Declaration])
        with super (loc, comm), _decls = decls
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * @returns: the list of declaration inside the trait
     */
    pub fn getDeclarations (self)-> [&Declaration] {
        self._decls
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            t : &TraitDecl => {
                t._loc == self._loc && t._decls == self._decls 
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the trait inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::TRAIT, ' ', self._loc.str (), " {\n");
            stream:.entabing ();
            for i in self._decls {
                i.format (alias stream);
                stream:.write ('\n');
            }
            stream:.detabing ();
            stream:.write ("}\n");
        }
        
    }
    
}
