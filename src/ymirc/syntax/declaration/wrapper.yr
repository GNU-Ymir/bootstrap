mod ymirc::syntax::declaration::wrapper;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Declaration wrapper for an expression
 */
pub class @final ExpressionWrapperDecl over Declaration {

    /// The declaration of the global 
    let _content : &Expression;
    
    /**
     * @params: 
     *     - loc: the location of the declaration 
     *     - comm: the comments about the declaration
     *     - content: the  content
     */
    pub self (loc : &Word, comm : [c8], content : &Expression,)
        with super (loc, comm), _content = content
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * @returns: the content of the declaration
     */
    pub fn getContent (self)-> &Expression {
        self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            w : &ExpressionWrapperDecl => {
                w._content == self._content
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the declaration inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            self._content.format (alias stream);
        }
        
    }

}
