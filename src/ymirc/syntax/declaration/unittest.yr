mod ymirc::syntax::declaration::unittest;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import ymirc::utils::serialize;
import std::io;

/**
 * Syntax node encoding a unittest
 * @verbatim:
 * ==========================
 * unittest := Keys::UNITTEST expression:(0)
 * ==========================
 */
pub class UnitTestDecl over Declaration {

    /// The content of the test
    let _body : &Expression;

    /**
     * @params: 
     *   - loc: the location of the test
     *   - comm: the comments
     *   - content: the body of the test
     */
    pub self (loc : &Word, comm : [c8], content : &Expression) with
        super (loc, comm), _body = content
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the body of the test
     */
    pub fn getBody (self)-> &Expression {
        self._body
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            u : &UnitTestDecl => {
                u._body == self._body
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Serializable;
    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::UNITTEST, ' 'c8);
            self._body.format (alias stream);
        }        
    }    
    
}
