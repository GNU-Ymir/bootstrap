in externblock;

use ymirc::syntax::expression;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;

/**
 * An external block declaration
 * @verbatim : 
 * ==================
 * extern_block := Keys::EXTERN '(' Language ')' (( '{' declaration '}' )* | declaration)
 * ==================
 */
@final
pub class ExternBlockDecl over Declaration {

    // The language of the extern
    let _from : &Word;

    // The declaration block
    let _decl : &Declaration;

    // The namespace expression
    let _space : &Expression;

    /**
     * @params: 
     *   - loc: the location of the extern
     *   - comms: the comments about the extern
     *   - space: the namespace of the external declaration
     *   - decl: the declaration 
     */
    pub self (loc : &Word, comms : [c8], from : &Word, space : &Expression, decl : &Declaration)
        with super (loc, comms), _from = from, _decl = decl, _space = space
    {}

    /***
     * ==========================================================================
     * ==========================================================================
     * =========================          GETTERS        ========================
     * ==========================================================================
     * ==========================================================================
     */
    
    /**
     * @returns: the language of the external
     */
    pub fn getLanguage (self)-> &Word {
        self._from
    }

    /**
     * @returns: the namespace of the external (for C++, Dlang, Ymir, ...)
     */
    pub fn getNamespace (self)-> &Expression {
        self._space
    }

    /**
     * @returns: the declaration inside the external block
     */
    pub fn getDeclaration (self)-> &Declaration {
        self._decl
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            e : &ExternBlockDecl => {
                e._from == self._from && e._space == self._space && e._decl == self._decl
            }
            _ => { false }
        }
    }
    
    /***
     * ================================================================================
     * ================================================================================
     * =========================          MISCELLANEOUS        ========================
     * ================================================================================
     * ================================================================================
     */
    
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the extern block inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::EXTERN, ' ');
            if (!self._from.isEof ())
                stream:.write (self._from.str (), ' ');
            stream:.entabing ();
            self._decl.format (alias stream);
            stream:.detabing ();
        }        
    }
    
}
