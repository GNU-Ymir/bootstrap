mod ymirc::syntax::declaration::destructor;

import ymirc::syntax::declaration::base;
import ymirc::syntax::declaration::function;
import ymirc::syntax::declaration::proto;

import ymirc::syntax::expression::base;
import ymirc::syntax::expression::vardecl;
import ymirc::syntax::expression::empty;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * Syntaxic node representation of a destructor
 * @verbatim: 
 * ==================
 * destructor := Keys::DTOR Tokens::LPAR Keys::MUT Keys::SELF Tokens::RPAR expression:(0)
 * ==================
 */
pub class DestructorDecl over FunctionDecl {
    
    pub self (loc : &Word, comm : [c8], param : &VarDeclExpr, body : &Expression)
        with super (loc, comm, FunctionProtoDecl::new (loc, comm-> comm, [param], retType-> EmptyExpression::new ()), body)
    {}

    pub self (loc : &Word, comm : [c8], proto : &FunctionProtoDecl, body : &Expression)
        with super (loc, comm, proto, body)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            DestructorDecl () => {
                self::super.opEquals (o)
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::DTOR);
            self._proto.format (alias stream);
            stream:.write ("\n");
            self._body.format (alias stream);
            stream:.write ("\n");            
        }        
    }
    

}
