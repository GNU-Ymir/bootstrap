mod ymirc::syntax::declaration::_;

import ymirc::lexing::word;
import ymirc::syntax::node;
import ymirc::utils::format;

import std::io;

/**
 * Ancestor class of all possible declaration 
 */
pub class @abstract Declaration over SyntaxNode {
    
    /// The comments about the declaration
    let _comm : [c8];

    /**
     * @params: 
     *    - loc: the location of the declaration
     *    - comm: the comments about the declaration
     */
    pub self (loc : &Word, comm : [c8])
        with super (loc),
             _comm = comm
    {}

    /**
     * @returns: the comments about the declaration
     */
    pub fn @final getComments (self)-> [c8] {
        self._comm
    }
    
    pub fn opEquals (self, o : &Declaration)-> bool;
    
    impl Streamable;    
    impl Formattable {
        pub over format (self, dmut _ : &Formatter) {}        
    }
}

pub import ymirc::syntax::declaration::aka_;
pub import ymirc::syntax::declaration::class_;
pub import ymirc::syntax::declaration::condblock;
pub import ymirc::syntax::declaration::constructor;
pub import ymirc::syntax::declaration::declblock;
pub import ymirc::syntax::declaration::enum_;
pub import ymirc::syntax::declaration::externblock;
pub import ymirc::syntax::declaration::proto;
pub import ymirc::syntax::declaration::function;
pub import ymirc::syntax::declaration::global;
pub import ymirc::syntax::declaration::impl_;
pub import ymirc::syntax::declaration::import_;
pub import ymirc::syntax::declaration::macrorule;
pub import ymirc::syntax::declaration::macro_;
pub import ymirc::syntax::declaration::module;
pub import ymirc::syntax::declaration::struct_;
pub import ymirc::syntax::declaration::template;
pub import ymirc::syntax::declaration::trait_;
pub import ymirc::syntax::declaration::wrapper;
pub import ymirc::syntax::declaration::destructor;
pub import ymirc::syntax::declaration::unittest;
pub import ymirc::syntax::declaration::protection;
pub import ymirc::syntax::declaration::use_;
