in proto;

use ymirc::syntax::{expression, expression::{vardecl, empty}};

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;

/**
 * A prototype is a list of parameters, and return type
 * They are used by functions, constructors, lambdas...
 * @verbatim: 
 * ===============
 * prototype :=   '(' (var_decl (',' var_decl)*)? ')' ('->' expression:(0))?
                | '|' (var_decl (',' var_decl)*)? '|' ('->' expression:(0))?
 * ===============
 */
@final
pub class FunctionProtoDecl over Declaration {

    // The list of parameters of the prototype
    let _parameters : [&VarDeclExpr];

    // The return type of the prototype
    let _retType : &Expression;

    // Is this a variadic prototype (C-style)
    let _isVariadic : bool;

    // True iif, this is a lambda prototype
    let _forLambda : bool;

    /**
     * @params: 
     *    - loc: the location of the prototype
     *    - comm: the comments about the prototype (generally empty)
     *    - params: the list of parameters of the prototype
     *    - retType: the return type of the prototype
     *    - isVariadic: for extern (C) functions, when they are variadic (such as printf)
     */
    pub self (loc : &Word, comm : [c8] = "", params : [&VarDeclExpr], retType : &Expression, isVariadic : bool = false, forLambda : bool = false)
        with super (loc, comm), _parameters = params, _retType = retType, _isVariadic = isVariadic, _forLambda = forLambda
    {}

    
    /***
     * ==========================================================================
     * ==========================================================================
     * =========================          GETTERS        ========================
     * ==========================================================================
     * ==========================================================================
     */


    /**
     * @returns: the list of parameters
     */
    pub fn getParameters (self)-> [&VarDeclExpr] {
        self._parameters
    }

    /**
     * @returns: the return type
     */
    pub fn getRetType (self)-> &Expression {
        self._retType
    }

    /**
     * @returns: true, iif the prototype is an extern (C) variadic prototype (printf prototype for example)
     */
    pub fn isVariadic (self)-> bool {
        self._isVariadic
    }

    /**
     * @returns: true, iif the prototype is a lambda prototype
     */
    pub fn isForLambda (self)-> bool {
        self._forLambda
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            p : &FunctionProtoDecl => {
                p._parameters == self._parameters && p._retType == self._retType && p._isVariadic == self._isVariadic && p._forLambda && self._forLambda
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the prototype inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (!self._forLambda) stream:.write (Tokens::LPAR);
            else stream:.write (Tokens::PIPE);
            
            stream:.entabing ();
            let mut j = 0u64;
            for i in self._parameters {
                if (j != 0u64) stream:.write (", ");
                i.format (alias stream);
                j += 1u64;
            }
            
            if (self._isVariadic) {
                if (j != 0u64) stream:.write (", ");
                stream:.write (Tokens::TDOT);
            }

            if (!self._forLambda) stream:.write (Tokens::RPAR);
            else stream:.write (Tokens::PIPE);

            match self._retType {
                EmptyExpression () => {}
                _ => {
                    stream:.write (Tokens::ARROW, " ");
                    self._retType.format (alias stream);
                }
            }
            stream:.write (" ");
            stream:.detabing ();
        }
        
    }
    
}
