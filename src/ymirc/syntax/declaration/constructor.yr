mod ymirc::syntax::declaration::constructor;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic node representation of a constructor
 * @verbatim: 
 * ===============
 * constructor := Keys::SELF (Identifier)? prototype (((Keys::SUPER call_params_list), (Keys::SELF call_params_list), Identifier '=' expression:(0))*',')? (Keys::THROWS expression:(0)*',')? expression:(0)
 * ===============
 */
pub class @final ConstructorDecl over Declaration {

    /// The prototype of the constructor
    let _proto : &FunctionProtoDecl;

    /// The parameters passed to the super constructor (or self, in case of redirection)
    let _superParams : [&Expression];

    /// The template parameters used to call the super ctor
    let _superTemplateParams : &Expression;

    /// The list of field construction
    let _construction : [(&Word, &Expression)];

    /// The body of the constructor
    let _body : &Expression;

    /// Set to a valid location if the constructor is a redirection (eof otherwise)
    let _explicitCstrsCall : &Word;

    /// has a name if the ancestor call is renamed
    let _renameCstrCall : &Word;

    /// the name of the constructor
    let _rename : &Word;

    /// The list of attributes of the constructor
    let _attributes : [AttributeWord];

    /// The list of throwers of the constructor
    let _throwers : [&Expression];

    /// The location of the throws keyword
    let _throwerLoc : &Word;

    /**
     * @params: 
     *    - loc: the location of the constructor (Keys::SELF)
     *    - comms: the comments about the constructor
     *    - rename: the name of the constructor
     *    - proto: the prototype
     *    - superParams: the parameters to pass to the constructor of the ancestor class
     *    - fields: the construction of the fields
     *    - body: the body of the constructor
     *    - explicitCstrsCall: the location of the construction redirection
     *    - attributes: the list of attributes of the constructor
     *    - throwers: the list of throwers of the constructor
     */
    pub self (loc : &Word, comms : [c8], rename : &Word = EOF_WORD, proto : &FunctionProtoDecl,
              superParams : [&Expression] = [], superTemplateParams : &Expression = EmptyExpression::new (),
              fields : [(&Word, &Expression)] = [], body : &Expression,
              explicitCstrsCall : &Word = EOF_WORD, explicitSuperName : &Word = EOF_WORD,
              attributes : [AttributeWord] = [], throwers : [&Expression] = [], throwerLoc : &Word = EOF_WORD)
        with super (loc, comms)
        , _rename = rename
        , _proto = proto
        , _superParams = superParams
        , _superTemplateParams = superTemplateParams
        , _construction = fields
        , _body = body
        , _renameCstrCall = explicitSuperName
        , _explicitCstrsCall = explicitCstrsCall
        , _attributes = attributes
        , _throwers = throwers
        , _throwerLoc = throwerLoc
    {}


    /***
     * ==========================================================================
     * ==========================================================================
     * =========================          GETTERS        ========================
     * ==========================================================================
     * ==========================================================================
     */
    
    /**
     * @returns: the prototype of the constructor
     */
    pub fn getFunctionProtoDecl (self)-> &FunctionProtoDecl {
        self._proto
    }

    /**
     * @returns: the list of parameters to pass to the super constructor
     */
    pub fn getSuperParams (self)-> [&Expression] {
        self._superParams
    }

    /**
     * @returns: the list of template parameters used to call the super ctor
     * */
    pub fn getSuperTemplateParams (self)-> &Expression {
        self._superTemplateParams
    }

    /**
     * @returns: the list of field constructors
     */
    pub fn getFieldConstructors (self) -> [(&Word, &Expression)] {
        self._construction
    }

    /**
     * @returns: the body of the constructor
     */
    pub fn getBody (self)-> &Expression {
        self._body
    }

    /**
     * @returns: the location of the constructor redirection
     */
    pub fn getExplicitCstrsCall (self)-> &Word {
        self._explicitCstrsCall
    }

    pub fn getExplicitSuperName (self)-> &Word {
        self._renameCstrCall
    }

    /**
     * @returns: the name of the constructor (if renamed)
     */
    pub fn getRename (self)-> &Word {
        self._rename
    }

    /**
     * @returns: the list of attributes of the constructor
     */
    pub fn getAttributes (self)-> [AttributeWord] {
        self._attributes
    }

    /**
     * @returns: the list of throwers of the constructor
     */
    pub fn getThrowers (self)-> [&Expression] {
        self._throwers
    }

    /**
     * @returns: the location of the throws keyword
     */
    pub fn getThrowerLoc (self)-> &Word {
        self._throwerLoc
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================         COMPARISON           =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            c : &ConstructorDecl => {
                if (c._construction.len != self._construction.len) return false;
                for i in 0us .. c._construction.len {
                    if (c._construction[i]._0 != self._construction[i]._0 ||
                        c._construction[i]._1 != self._construction[i]._1) return false;
                }

                if (c._attributes.len != self._attributes.len) return false;
                for i in 0us .. c._attributes.len {
                    if (c._attributes [i].attr != self._attributes[i].attr) return false;
                }
                
                c._proto == self._proto &&
                    c._superParams == self._superParams &&
                    c._body == self._body &&
                    c._explicitCstrsCall == self._explicitCstrsCall &&
                    c._rename == self._rename &&
                    c._throwers == self._throwers
            }
            _ => { false }
        }
    }

    /***
     * ================================================================================
     * ================================================================================
     * =========================          MISCELLANEOUS        ========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the constructor into the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::SELF, ' 'c8);
            if (self._attributes.len != 0u64) {
                stream:.write (Tokens::AT, '{'c8);
                let mut j = 0u64;
                for i in self._attributes {
                    if (j != 0u64) stream:.write (','c8);
                    stream:.write (i);
                    j += 1u64;
                }
                stream:.write ("} "s8);
            }

            if (!self._rename.isEof ()) {
                stream:.write (self._rename.str (), ' 'c8);
            }

            stream:.entabing ();
            self._proto.format (alias stream);
            if (self._superParams.len != 0u64 || self._construction.len != 0u64) {
                stream:.write (Keys::WITH, '\n'c8);
            }
            if (self._superParams.len != 0u64) {
                if (!self._explicitCstrsCall.isEof ()) stream:.write (self._explicitCstrsCall.str (), " ("s8);
                let mut j = 0u64;
                for i in self._superParams {
                    if (j != 0u64) stream:.write (", "s8);
                    i.format (alias stream);
                    j += 1u64;
                }
                stream:.write (")"s8);
                if (self._construction.len != 0u64) stream:.write (",\n"s8);
            }
            
            let mut j = 0u64;
            for i in self._construction {
                if (j != 0u64) stream:.write (",\n"s8);
                stream:.write ((i._0).str (), " = "s8);
                (i._1).format (alias stream);
                j += 1u64;
            }
            
            if (self._throwers.len != 0u64) {
                stream:.write ('\n'c8, Keys::THROWS);
                j = 0u64;
                for i in self._throwers {
                    if (j != 0u64) stream:.write (", "s8);
                    i.format (alias stream);
                    j += 1u64;
                }
            }

            stream:.detabing ();
            if (self._superParams.len != 0u64 || self._construction.len != 0u64) {
                stream:.write ('\n'c8);
            }
            self._body.format (alias stream);
            stream:.write ('\n'c8);
        }

    }

}
