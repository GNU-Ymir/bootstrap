mod ymirc::syntax::declaration::aka_;

import ymirc::syntax::declaration::base;
import ymirc::syntax::expression::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * A global aka declaration 
 * @verbatim: 
 * ===============
 * aka_decl := Keys::AKA Identifier expression:(0) (Tokens::SEMI_COLON)?
 * ===============
 */
pub class @final AkaDecl over Declaration {

    /// The content of the aka
    let _content : &Expression;

    /// True if this aka defines a value, false if it defines a type
    let _isValue : bool = false;

    let _tokDecl : &Word;

    /**
     * @params: 
     *    - loc: the identifier of the aka
     *    - content: the value of the aka
     */
    pub self (loc : &Word, comm : [c8], content : &Expression, tokDecl : &Word)
        with super (loc, comm)
        , _content = content
        , _isValue = (tokDecl == Tokens::EQUAL)
        , _tokDecl = tokDecl
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * The content of the aka
     */
    pub fn getContent (self)-> &Expression {
        self._content
    }

    /**
     * true iif the declaration defines a value, false if it defines a type
     * */
    pub fn isValue (self)-> bool {
        self._isValue
    }

    /**
     * The token '=' or ':' token used to introduce the associated expression
     * */
    pub fn getTokDecl (self)-> &Word {
        self._tokDecl
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            a : &AkaDecl => {
                a._content == self._content && a._loc == self._loc && a._isValue == self._isValue
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the aka, in the stream
         * @example: 
         * ============
         * let loc = Word::new ("ident"s8, ""s8, ""s8, line-> 1u64, col-> 1u64, 0u64, 0u64);
         * let x = Aka::new (loc, comm-> "comments"s8, Unit::new (loc));
         * assert (format ("%"s8, x) == "aka ident {};"s8);
         * ============
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::AKA, ' 'c8, self._loc.str (), ' 'c8);
            if (self._isValue) stream:.write (Tokens::EQUAL, ' 'c8);
            else stream:.write (Tokens::COLON, ' 'c8);

            self._content.format (alias stream);
            stream:.write (Tokens::SEMI_COLON, '\n'c8);
        }
    }
}
