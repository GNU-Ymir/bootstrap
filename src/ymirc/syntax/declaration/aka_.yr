in aka_;

use ymirc::syntax::declaration::base;
use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;

use std::stream;

/**
 * A global aka declaration 
 * @verbatim: 
 * ===============
 * aka_decl := Keys::AKA Identifier expression:(0) (Tokens::SEMI_COLON)?
 * ===============
 */
@final
pub class AkaDecl over Declaration {

    // The content of the aka
    let _content : &Expression;

    // True if this aka defines a value, false if it defines a type
    let _isValue : bool = false;

    // The location of the def keyword
    let _tokDecl : &Word;

    /**
     * @params: 
     *    - loc: the identifier of the aka
     *    - content: the value of the aka
     */
    pub self (loc : &Word, comm : [c8], content : &Expression, tokDecl : &Word)
        with super (loc, comm)
        , _content = content
        , _isValue = (tokDecl == Tokens::EQUAL)
        , _tokDecl = tokDecl
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * The content of the aka
     */
    pub fn getContent (self)-> &Expression {
        self._content
    }

    /**
     * true iif the declaration defines a value, false if it defines a type
     * */
    pub fn isValue (self)-> bool {
        self._isValue
    }

    /**
     * The token '=' or ':' token used to introduce the associated expression
     * */
    pub fn getTokDecl (self)-> &Word {
        self._tokDecl
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            a : &AkaDecl => {
                a._content == self._content && a._loc == self._loc && a._isValue == self._isValue
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::AKA, ' ', self._loc.str (), ' ');
            if (self._isValue) stream:.write (Tokens::EQUAL, ' ');
            else stream:.write (Tokens::COLON, ' ');

            self._content.format (alias stream);
            stream:.write (Tokens::SEMI_COLON, '\n');
        }
    }
}
