mod ymirc::syntax::declaration::impl_;

import ymirc::syntax::declaration::base;
import ymirc::syntax::expression::base;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * Syntaxic representation of an impl declaration
 * @verbatim:
 * ==============
 * impl_decl := Keys::IMPL expression:(0) ('{' declaration* '}')? (Tokens::SEMI_COLON)?
 * ==============
 */
pub class @final ImplDecl over Declaration {

    /// The trait that is implemented
    let _trait : &Expression;

    /// The content of the implementation
    let _content : [&Declaration];

    /**
     * @params: 
     *   - loc: the location of the impl
     *   - comm: the comments about the impl
     *   - trait_: the trait that will be implemented
     *   - content: the list of declaration inside the impl
     */
    pub self (loc : &Word, comm : [c8], trait_ : &Expression, content : [&Declaration] = [])
        with super (loc, comm), _trait = trait_, _content = content
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the trait that is implemented
     */
    pub fn getTrait (self)-> &Expression {
        self._trait
    }

    /**
     * @returns: the list of overriden declarations
     */
    pub fn getDeclarations (self)-> [&Declaration] {
        self._content
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            i : &ImplDecl => {
                i._trait == self._trait && i._content == self._content
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::IMPL, ' 'c8);
            self._trait.format (alias stream);
            if (self._content.len != 0u64) {
                stream:.write (" {\n"s8);
                stream:.entabing ();
                for i in self._content {
                    i.format (alias stream);
                }
                stream:.detabing ();
                stream:.write ("}\n"s8);
                stream:.write ('\n'c8);
            } else stream:.write (";\n"s8);
        }
    }
    
}
