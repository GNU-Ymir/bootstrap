mod ymirc::syntax::declaration::import_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;


/**
 * Syntaxic representation of an importation
 * @verbatim: 
 * ===============
 * import_decl := Keys::IMPORT Path
 * ===============
 */
pub class @final ImportDecl over Declaration {

    /// The name of the module that is imported
    let _module : &Expression;

    /// The as symbol
    let _as : &Word;
    
    /**
     * @params: 
     *    - loc: the location of the importation
     *    - com: the comments about the importation
     *    - module: the path of the module to import
     */
    pub self (loc : &Word, com : [c8], module : &Expression, as_ : &Word = EOF_WORD)
        with super (loc, com), _module = module, _as = as_
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * @returns: the path of the module to import
     */
    pub def getModulePath (self)-> &Expression {
        self._module
    }

    /**
     * The renaming of the path
     */
    pub def getAs (self)-> &Word {
        self._as
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            i : &ImportDecl => {
                i._module == self._module && i._as == self._as
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the declaration inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::IMPORT, ' 'c8);
            self._module.format (alias stream);
            if (!self._as.isEof ()) {
                stream:.write (" ", Keys::AKA, " ", self._as.str ());
            }
            
            stream:.write (Tokens::SEMI_COLON, '\n'c8);
        }
        
    }

}
