in declblock;

use ymirc::syntax::declaration::protection;
use ymirc::syntax::expression;

use ymirc::syntax::keys;
use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

/**
 * A protection block declaration 
 * @verbatim: 
 * ====================
 * decl_block := (Keys::PRIVATE | Keys::PUBLIC | Keys::PROTECTED) (('{' declaration* '}') | declaration)
 * ====================
 */
@final
pub class BlockDecl over Declaration {
    
    // The list of declaration inside the block
    let _content : [&Declaration];

    // The protection of the declaration inside the block
    let _prot : Protection;

    // True iif the protection does not apply, and parent protection is used
    let _isSet : bool = false;

    /**
     * @params: 
     *   - loc: the location of the block (basically the keyword Keys::PUBLIC, Keys::PRIVATE or Keys::PROTECTED)
     *   - comm: the comments above the decl block
     *   - decls: the list of declaration inside the decl block
     *   - protection: the protection to apply on the declarations
     *   - isSet: just a set of declaration, meaning protection block has no meaning here
     */
    pub self (loc : &Word, comm : [c8], decls : [&Declaration], protection : Protection = Protection::PRIVATE, isSet : bool = false)
        with super (loc, comm), _content = decls, _prot = protection, _isSet = isSet
    {}

    /**
     * Create an empty declaration block containing no declaration
     */
    pub self empty ()
        with super (EOF_WORD, ""), _content = [], _prot = Protection::PRIVATE, _isSet = false
    {}

    
    /***
     * ============================================================================
     * ============================================================================
     * =========================          GETTERS        ==========================
     * ============================================================================
     * ============================================================================
     */
    
    /**
     * @returns: the list of declaration inside the block
     */
    pub fn getDeclarations (self)-> [&Declaration] {
        self._content
    }

    /**
     * @returns: the protection of the decl block
     */
    pub fn getProtection (self)-> Protection {
        self._prot
    }

    /**
     * @returns: true iif parent block protection applies
     * */
    pub fn isSet (self)-> bool {
        self._isSet
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            d : &BlockDecl => {
                d._content == self._content && d._prot == self._prot
            }
            _ => { false }
        }
    }
    
    /***
     * ==================================================================================
     * ==================================================================================
     * =========================          MISCELLANEOUS        ==========================
     * ==================================================================================
     * ==================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the decl block, in the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            match self._prot {
                Protection::PUBLIC => {
                    stream:.write (Keys::PUBLIC);
                }
                Protection::PROTECTED => {
                    stream:.write (Keys::PROTECTED);
                }
                _ => {
                    stream:.write (Keys::PRIVATE);
                }
            }
            
            if (self._content.len != 1us) {
                stream:.entabing ();
                stream:.write (" {\n");
            } else stream:.write (' ');

            for i in self._content {
                i.format (alias stream);
            }
            
            if (self._content.len != 1us) {
                stream:.detabing ();
                stream:.write ("}\n");
            }
        }
        
    }

}
