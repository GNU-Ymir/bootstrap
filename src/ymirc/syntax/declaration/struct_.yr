mod ymirc::syntax::declaration::struct_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;


/**
 * Syntaxic representation of a structure
 * @verbatim: 
 * =================
 * struct_decl := Keys::STRUCT Attributes (Tokens::PIPE var_decl)* Tokens::ARROW Identifier (Tokens::SEMI_COLON)?
 * =================
 */
pub class @final StructDecl over Declaration {

    /// The list of field of the struct
    let _fields : [&Expression];

    /// The custom attributes of the struct
    let _attributes : [AttributeWord];

    /// The comments about the fields
    let _fieldComms : [[c8]];

    /**
     * @params: 
     *   - loc: the location of the struct (and identifier)
     *   - comm: the comments about the structure
     *   - fields: the list of fields
     *   - attributes: the attributes (union, packed, ...)
     *   - fieldComms: the list of comments about the fields
     */
    pub self (loc : &Word, comm : [c8], fields : [&Expression], attributes : [AttributeWord] = [], fieldComms : [[c8]] = [])
        with super (loc, comm), _fields = fields, _attributes = attributes, _fieldComms = fieldComms
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the list of fields
     */
    pub fn getFields (self)-> [&Expression] {
        self._fields
    }

    /**
     * @returns: the list of attributes
     */
    pub fn getAttributes (self)-> [AttributeWord] {
        self._attributes
    }

    /**
     * @returns: the list of comments about the fields
     */
    pub fn getFieldComments (self)-> [[c8]] {
        self._fieldComms
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            s : &StructDecl => {
                if ( s._attributes.len != self._attributes.len) return false;
                for i in 0us .. s._attributes.len {
                    if (s._attributes [i].attr != self._attributes[i].attr) return false;
                }
                
                s._loc == self._loc && s._fields == self._fields
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting the structure inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::STRUCT, "\n"s8);
            for i in self._fields {
                stream:.write (Tokens::PIPE, ' 'c8);
                stream:.entabing ();
                i.format (alias stream);
                stream:.detabing ();
                stream:.write ("\n");
            }
            stream:.write (Tokens::ARROW, ' 'c8, self._loc.str (), Tokens::SEMI_COLON, '\n'c8);
        }
    }
    
}
