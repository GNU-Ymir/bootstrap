in enum_;

use ymirc::syntax::{expression, expression::{vardecl, empty}};

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;

/**
 * Syntaxic node representation of an enum declaration
 * @verbatim: 
 * ================
 * enum_decl := Keys::ENUM (Tokens::COLON expression:(10) (Tokens::PIPE Identifier Tokens::EQUAL expression:(0))* Tokens::ARROW Identifier (Tokens::SEMI_COLON)?
 * ================
 */
@final
pub class  EnumDecl over Declaration {

    // The list of values defined in the enumeration
    let _values : [&VarDeclExpr];

    // The type of the enumeration
    let _type : &Expression;

    // The list of comments of the values
    let _fieldComms : [[c8]];

    /**
     * @params: 
     *    - loc: the location of the enumeration
     *    - comm: the comments about the enum
     *    - type: the type of the enumeration
     *    - values: the values contained in the enum
     *    - fieldComms: the comments about the field of the enum
     */
    pub self (loc : &Word, comm : [c8], type : &Expression = EMPTY_EXPR, values : [&VarDeclExpr], fieldComms : [[c8]] = [])
        with super (loc, comm), _type = type, _values = values, _fieldComms = fieldComms
    {}


    /***
     * ============================================================================
     * ============================================================================
     * =========================          GETTERS        ==========================
     * ============================================================================
     * ============================================================================
     */
    
    /**
     * @returns: the list of values of the enumeration
     */
    pub fn getValues (self)-> [&VarDeclExpr] {
        self._values
    }

    /**
     * @returns: the type of the enumeration
     */
    pub fn getType (self)-> &Expression {
        self._type
    }

    /**
     * @returns: the list of comments about the field values
     */
    pub fn getFieldComms (self)-> [[c8]] {
        self._fieldComms
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            e : &EnumDecl => {
                e._values == self._values && e._type == self._type && e._loc == self._loc
            }
            _ => { false }
        }
    }
    
    /***
     * ==================================================================================
     * ==================================================================================
     * =========================          MISCELLANEOUS        ==========================
     * ==================================================================================
     * ==================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the enum inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::ENUM);
            match self._type {
                EmptyExpression () => {}
                _ => {
                    stream:.write (" : ");
                    self._type.format (alias stream);
                }
            }
            
            stream:.write ("\n");
            for i in self._values {
                stream:.write (Tokens::PIPE, ' ');
                stream:.entabing ();
                i.format (alias stream);
                stream:.detabing ();
                stream:.write ("\n");
            }
            
            stream:.write (' ', Tokens::ARROW, ' ', self._loc.str, Tokens::SEMI_COLON, '\n');
        }

        
    }
    
}

