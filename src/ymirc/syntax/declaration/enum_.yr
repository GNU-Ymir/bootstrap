mod ymirc::syntax::declaration::enum_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;


/**
 * Syntaxic node representation of an enum declaration
 * @verbatim: 
 * ================
 * enum_decl := Keys::ENUM (Tokens::COLON expression:(10) (Tokens::PIPE Identifier Tokens::EQUAL expression:(0))* Tokens::ARROW Identifier (Tokens::SEMI_COLON)?
 * ================
 */
pub class @final Enum over Declaration {

    /// The list of values defined in the enumeration
    let _values : [&Expression];

    /// The type of the enumeration
    let _type : &Expression;

    /// The list of comments of the values
    let _fieldComms : [[c8]];

    /**
     * @params: 
     *    - loc: the location of the enumeration
     *    - comm: the comments about the enum
     *    - type: the type of the enumeration
     *    - values: the values contained in the enum
     *    - fieldComms: the comments about the field of the enum
     */
    pub self (loc : &Word, comm : [c8], type : &Expression = EmptyExpression::new (), values : [&Expression], fieldComms : [[c8]] = [])
        with super (loc, comm), _type = type, _values = values, _fieldComms = fieldComms
    {}


    /***
     * ============================================================================
     * ============================================================================
     * =========================          GETTERS        ==========================
     * ============================================================================
     * ============================================================================
     */
    
    /**
     * @returns: the list of values of the enumeration
     */
    pub def getValues (self)-> [&Expression] {
        self._values
    }

    /**
     * @returns: the type of the enumeration
     */
    pub def getType (self)-> &Expression {
        self._type
    }

    /**
     * @returns: the list of comments about the field values
     */
    pub def getFieldComms (self)-> [[c8]] {
        self._fieldComms
    }

    /***
     * ==================================================================================
     * ==================================================================================
     * =========================          MISCELLANEOUS        ==========================
     * ==================================================================================
     * ==================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the enum inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::ENUM);
            match self._type {
                Unit () => {}
                _ => {
                    stream:.write (" : "s8);
                    self._type.format (alias stream);
                }
            }

            stream:.write ('\n'c8);
            for i in self._values {
                stream:.write (Tokens::PIPE);
                stream:.entabing ();
                i.format (alias stream);
                stream:.detabing ();
                stream:.write ('\n'c8);
            }
            
            stream:.write (Tokens::ARROW, ' 'c8, self._loc.str (), Tokens::SEMI_COLON, '\n'c8);            
        }

        
    }
    
}

