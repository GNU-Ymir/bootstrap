in macro_;

use ymirc::syntax::expression;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;

/**
 * Macro definition
 * @verbatim:
 * =================
 * macro_decl := Keys::MACRO Identifier '{' (macro_rule | macro_constructor)* '}'
 * =================
 */
@final
pub class MacroDecl over Declaration {

    // The content of the macro
    let _content : [&Declaration];

    /**
     * @params: 
     *   - loc: the location of the macro
     *   - com: the comments about the macro
     *   - content: the list of macro rules and constructors
     */
    pub self (loc : &Word, com : [c8], content : [&Declaration])
        with super (loc, com), _content = content
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the list of rules declared inside the macro 
     */
    pub fn getDeclarations (self)-> [&Declaration] {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            m : &MacroDecl => {
                m._loc == self._loc && m._content == self._content
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the macro inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::MACRO, ' 'c8, self._loc.str, " {\n");
            stream:.entabing ();
            for i in self._content {
                i.format (alias stream);
            }
            stream:.detabing ();
        }
        
    }
    
}
