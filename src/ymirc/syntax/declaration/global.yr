mod ymirc::syntax::declaration::global;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;


import std::io;

/**
 * Syntaxic node representation of a global declaration (or a field)
 * @verbatim: 
 * ==================
 * global := (Keys::LAZY | Keys::LET) var_decl (Tokens::SEMI_COLON)?
 * field := Keys::LET var_decl (Tokens::SEMI_COLON)?
 * ==================
 */
pub class @final GlobalDecl over Declaration {

    /// The declaration of the global 
    let _decl : &Expression;

    /// Is this global a field ?
    let _isField : bool;

    /// Was declared with the keyword static, otherwise lazy or let
    let _isStatic : bool;

    /**
     * @params: 
     *     - loc: the location of the declaration (not necessarily the name)
     *     - comm: the comments about the declaration
     *     - content: the var declaration content
     *     - isField: true if the declaration refers to a field
     */
    pub self (loc : &Word, comm : [c8], content : &Expression, isField : bool = false, isStatic : bool = false)
        with super (loc, comm), _decl = content, _isField = isField, _isStatic = isStatic
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * @returns: the content (var decl) of the declaration
     */
    pub fn getContent (self)-> &Expression {
        self._decl
    }

    /**
     * @returns: true, iif the global declaration is a field declaration (generally inside class)
     */
    pub fn isField (self)-> bool {
        self._isField
    }

    /**
     * @returns: true, iif the global var was declared with the keyword 'static'
     * */
    pub fn isStatic (self)-> bool {
        self._isStatic
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            g : &GlobalDecl => {
                g._loc == self._loc && g._decl == self._decl && self._isField == g._isField && self._isStatic == g._isStatic
            }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the declaration inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (self._isStatic) {
                stream:.write (Keys::STATIC, ' 'c8);
            } else if (self._isField) {
                stream:.write (Keys::LET, ' 'c8);
            } else {
                stream:.write (Keys::LAZY, ' 'c8);
            }

            stream:.entabing ();
            self._decl.format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::SEMI_COLON, "\n\n"s8);            
        }
        
    }

}
