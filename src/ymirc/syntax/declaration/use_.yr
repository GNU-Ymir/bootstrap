in use_;

use ymirc::syntax::declaration::base;
use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;

/**
 * Syntaxic representation of an importation
 * @verbatim:
 * ===============
 * import_decl := Keys::IMPORT Path
 * ===============
 */
@final
pub class UseDecl over Declaration {

    // The name of the module that is imported
    let _module : &Expression;

    /**
     * @params:
     *    - loc: the location of the importation
     *    - com: the comments about the importation
     *    - module: the path of the module to import
     */
    pub self (loc : &Word, com : [c8], module : &Expression)
        with super (loc, com), _module = module
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * @returns: the path of the module to import
     */
    pub fn getModulePath (self)-> &Expression {
        self._module
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            i : &UseDecl => {
                i._module == self._module
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the declaration inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::USE, ' ');
            self._module.format (alias stream);
            stream:.write (Tokens::SEMI_COLON);
        }

    }

}
