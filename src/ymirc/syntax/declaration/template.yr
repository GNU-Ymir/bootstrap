mod ymirc::syntax::declaration::template;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

pub enum : [c8]
| TEMPLATE = "template"s8
 -> TemplateKeys;

/**
 * Syntaxic representation of a template declaration
 * The syntax of a template depend on the content of the template
 * But a template has always a list of parameters, and a sub declaration, and sometimes a test
 */
pub class @abstract TemplateDecl over Declaration {

    /// The test expression if any
    let _test : &Expression;

    /// The list of template parameters
    let _parameters : [&Expression];

    /// The content of the template
    let _content : &Declaration;

    /**
     * @params: 
     *    - loc: the location of the template
     *    - comm: the comments about the template
     *    - params: the list of template parameters
     *    - test: the test of the template
     *    - content: the inner declaration of the template
     */
    pub self (loc : &Word, comm : [c8], params : [&Expression], test : &Expression = EmptyExpression::new (), content : &Declaration)
        with super (loc, comm), _parameters = params, _test = test, _content = content
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the test of the template
     */
    pub fn getTest (self)-> &Expression {
        self._test
    }

    /**
     * @returns: the list of parameters of the template declaration
     */
    pub fn getParameters (self)-> [&Expression] {
        self._parameters
    }

    /**
     * @returns: the content of the template (inner declaration to validate when template specialization is done)
     */
    pub fn getContent (self)-> &Declaration {
        self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            t : &TemplateDecl => {
                t._test == self._test && t._parameters == self._parameters && t._content == self._content
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */
    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the template inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (TemplateKeys::TEMPLATE, ' 'c8, self._loc.str (), " {"s8);
            stream:.entabing ();
            let mut j = 0u64;
            for i in self._parameters {
                if (j != 0u64) stream:.write (", "s8);
                i.format (alias stream);
                j += 1u64;
            }
            
            stream:.write ("} "s8);
            match self._test {
                EmptyExpression () => {}
                _ => {
                    stream:.write (Keys::IF, ' 'c8);
                    self._test.format (alias stream);
                }
            }
            stream:.write (" {\n"s8);
            self._content.format (alias stream);
            stream:.detabing ();
            stream:.write ("\n}\n"s8);            
        }
    }
    
}
