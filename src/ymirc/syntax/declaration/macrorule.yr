in macrorule;

use ymirc::syntax::{expression, expression::macro_::mult};

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;

/**
 * Macro rule and constructor
 * @verbatim:
 * =============
 * macro_constructor := Keys::SELF macro_rule_expression (MacroKeys::SKIPS '(' expression:(0)*('|') ')')? '{' any* '}'
 * macro_rule := Keys::FN Identifier macro_rule_expression (MacroKeys::SKIPS '(' expression:(0)*('|') ')')? '{' any* '}'
 * =============
 */
@final
pub class MacroRuleDecl over Declaration {

    // The expression of the rule
    let _rule : &MacroMultExpr;

    // The location of the content
    let _contentLoc : &Word;

    // The content of the rule
    let _content : [c8];

    // The list of tokens to skip
    let _skips : [&Expression];

    // Is this rule a constructor
    let _isConstuctor : bool;

    /**
     * @params: 
     *    - loc: the location of the rule
     *    - comm: the comments about the rule
     *    - contentLoc: the location of the content of the rule
     *    - content: the content of the rule
     *    - rule: the rule of the rule
     *    - skips: the list of element to skip
     */
    pub self (loc : &Word, comm : [c8], contentLoc : &Word, content : [c8], rule : &MacroMultExpr, skips : [&Expression] = [], isConstructor : bool = false)
        with super (loc, comm), _contentLoc = contentLoc, _content = content, _rule = rule, _skips = skips, _isConstuctor = isConstructor
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * @returns: true, if the rule is a constructor
     */
    pub fn isConstructor (self)-> bool {
        self._isConstuctor
    }
    
    /**
     * @returns: the rule of the rule
     */
    pub fn getRule (self)-> &MacroMultExpr {
        self._rule
    }

    /**
     * @returns: the location of the content of the rule
     */
    pub fn getContentLoc (self)-> &Word {
        self._contentLoc
    }

    /**
     * @returns: the content of the rule
     */
    pub fn getContent (self)-> [c8] {
        self._content
    }

    /**
     * @returns: the list of element that must be skipped 
     */
    pub fn getSkips (self)-> [&Expression] {
        self._skips
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            m : &MacroRuleDecl => {
                m._loc == self._loc && m._isConstuctor == self._isConstuctor && m._content == self._content && m._skips == self._skips
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the rule inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (self._isConstuctor) stream:.write (Keys::SELF, ' ');
            else stream:.write (Keys::FUNCTION, ' ', self._loc.str (), ' ');
            self._rule.format (alias stream);
            if (self._skips.len != 0u64) {
                stream:.write (MacroKeys::SKIPS, " (");
                let mut j = 0u64;
                for i in self._skips {
                    if (j != 0u64) stream:.write (' ', Tokens::PIPE, ' ');
                    i.format (alias stream);
                    j += 1u64;
                }
                stream:.write (')');
            }
            stream:.write (self._content);
            stream:.write ('\n');
        }
        
    }
    
}
