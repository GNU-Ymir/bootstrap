in condblock;

use ymirc::syntax::declaration::{base, declblock};
use ymirc::syntax::expression::base;

use ymirc::syntax::keys;
use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

/**
 * A conditionnal block of declaration 
 * @verbatim: 
 * ====================
 * cond_block := Keys::IF expression:(0) (('{' declaration* '}') | declaration) (Keys::ELSE declaration)?
 * ====================
 */
@final
pub class CondBlockDecl over Declaration {

    // The list of declaration inside the block
    let _content : [&Declaration];

    // The protection of the declaration inside the block
    let _test : &Expression;

    // The declaration to use in case if the test does not pass
    let _else : &Declaration;
    
    /**
     * @params: 
     *   - loc: the location of the block (basically the keyword Keys::PUBLIC, Keys::PRIVATE or Keys::PROTECTED)
     *   - comm: the comments above the decl block
     *   - decls: the list of declaration inside the decl block
    
     */
    pub self (loc : &Word, comm : [c8], decls : [&Declaration], test : &Expression, else_ : &Declaration = BlockDecl::new (EOF_WORD, "", []))
        with super (loc, comm), _content = decls, _test = test, _else = else_
    {}



    /***
     * ==========================================================================
     * ==========================================================================
     * =========================          GETTERS        ========================
     * ==========================================================================
     * ==========================================================================
     */
    
    /**
     * @returns: the list of declaration inside the block
     */
    pub fn getDeclarations (self)-> [&Declaration] {
        self._content
    }

    /**
     * @returns: the test of the cond block
     */
    pub fn getTest (self)-> &Expression {
        self._test
    }

    pub fn getElse (self)-> &Declaration {
        self._else
    }    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            c : &CondBlockDecl => {
                c._content == self._content && c._test == self._test && c._else == self._else
            }
            _ => { false }
        }
    }
    
    /***
     * ================================================================================
     * ================================================================================
     * =========================          MISCELLANEOUS        ========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the decl block, in the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::IF, ' ');
            stream:.entabing ();
            self._test.format (alias stream);
            stream:.detabing ();
            
            stream:.write ("{\n\t");
            stream:.entabing ();
            for i in self._content {
                i.format (alias stream);
            }
            stream:.detabing ();
            stream:.write ("}\n");

            stream:.write (Keys::ELSE, "{\n");
            stream:.entabing ();
            self._else.format (alias stream);
            stream:.detabing ();
            stream:.write ("}\n");
        }
        
    }    

}
