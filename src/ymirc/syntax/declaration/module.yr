in module;

use ymirc::syntax::declaration::declblock;
use ymirc::syntax::expression;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;

/**
 * A module declaration 
 * @verbatim: 
 * ============
 * global_mod := 'mod' Path (';')? declaration*
 * local_mod := 'mod' Identifier '{' declaration* '}'
 * ============
 */
@final
pub class ModuleDecl over Declaration {

    // The path of the module
    let _path : &Word;

    // The list of declaration inside the module
    let _decls : &BlockDecl;

    // True iif the module is global
    let _isGlobal : bool;

    /**
     * @params: 
     *   - loc: the location of the module
     *   - comm: the comments about the module
     *   - decls: the declarations inside the module
     *   - isGlobal: true, if this module is global
     */
    pub self (loc : &Word, path : &Word, comm : [c8], decls : &BlockDecl, isGlobal : bool = true)
        with super (loc, comm), _path = path, _decls = decls, _isGlobal = isGlobal
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: true, if the module is global
     */
    pub fn isGlobal (self)-> bool {
        self._isGlobal
    }

    /**
     * @returns: the block containing the declaration of the module
     */
    pub fn getBlockDecl (self)-> &BlockDecl {
        self._decls
    }
    
    /**
     * @returns: the list of declaration inside the module (<=> self.getBlockDecl ().getDeclarations ())
     */
    pub fn getDeclarations (self)-> [&Declaration] {
        self._decls.getDeclarations ()
    }

    /**
     * @returns: the path of the module
     */
    pub fn getPath (self)-> &Word {
        self._path
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Declaration)-> bool {
        match o {
            m : &ModuleDecl => {
                m._isGlobal == self._isGlobal && m._path == self._path && m._decls == self._decls
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */    

    
    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the module inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (self._isGlobal) {
                if (!self._path.isEof ()) {
                    stream:.write (Keys::IN, ' ', self._path.str);
                }

                stream:.write (Tokens::SEMI_COLON, '\n');
                for i in self._decls.getDeclarations () {
                    i.format (alias stream);
                    stream:.write ('\n');
                }
            } else {
                if (!self._path.isEof ()) {
                    stream:.write (Keys::MOD, ' ', self._path.str);
                }

                stream:.write ("{\n");
                stream:.entabing ();
                for i in self._decls.getDeclarations () {
                    i.format (alias stream);
                    stream:.write ('\n');
                }
                stream:.detabing ();
            }
        }
        
    }
    
}
