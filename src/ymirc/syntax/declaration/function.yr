mod ymirc::syntax::declaration::function;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::syntax::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;

/**
 * Syntax node encoding a function declaration
 * @verbatim: 
 * ================
 * function_decl := (Keys::DEF | Keys::OVER) Identifier prototype (Keys::THROWS expression:(0) (',' expression:(0))*)? expression:(0) 
 * ================
 */
pub class FunctionDecl over Declaration {

    /// The prototype of the function
    let _proto : &FunctionProtoDecl;

    /// The body of the function
    let _body : &Expression;

    /// The custom attributes of the function
    let _attributes : [AttributeWord];

    /// The throwers of the function
    let _throwers : [&Expression];

    /// The location of the throws word
    let _throwerLoc : &Word;

    /// True iif the function is marked as override
    let _isOver : bool;

    /**
     * @params: 
     *    - loc: the identifier of the function
     *    - proto: the prototype of the function
     *    - body: the body of the function
     *    - attrs: the attributes of the function (final, ...)
     *    - throwers: the list of throwers
     *    - isOver: the function is override declaration
     */
    pub self (loc : &Word, comm : [c8], proto : &FunctionProtoDecl, body : &Expression, attrs : [AttributeWord] = [], throwers : [&Expression] = [], throwerLoc : &Word = EOF_WORD, isOver : bool = false)
        with super (loc, comm), _proto = proto, _body = body, _attributes = attrs, _throwers = throwers, _isOver = isOver, _throwerLoc = throwerLoc
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the prototype of the function
     */
    pub def getFunctionProto (self)-> &FunctionProtoDecl {
        self._proto
    }

    /**
     * @returns: the body of the function
     */
    pub def getBody (self)-> &Expression {
        self._body
    }

    /**
     * @returns: the list of attributes 
     */
    pub def getAttributes (self)-> [AttributeWord] {
        self._attributes
    }

    /**
     * @returns: the list of throwers of the function
     */
    pub def getThrowers (self)-> [&Expression] {
        self._throwers
    }

    /**
     * @returns: the location of the throws keyword
     */
    pub def getThrowerLoc (self)-> &Word {
        self._throwerLoc
    }
    
    /**
     * @returns: true, if the function is declared as override, false otherwise
     */
    pub def isOver (self)-> bool {
        self._isOver
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        /**
         * Pretty formatting of the function inside the stream
         */
        pub over format (self, dmut stream : &Formatter) {
            if (self._isOver) { stream:.write (Keys::OVER, " "); }
            else { stream:.write (Keys::DEF, " "); }
            if (self._attributes.len != 0u64) {
                stream:.write (Tokens::AT, '{'c8);
                let mut j = 0u64;
                for i in self._attributes {
                    if (j != 0u64) stream:.write (','c8);
                    stream:.write (i);
                    j += 1u64;
                }
                stream:.write ("} "s8);
            }
            stream:.write (self._loc.str (), ' 'c8);
            stream:.entabing ();
            self._proto.format (alias stream);
            if (self._throwers.len != 0u64) {
                stream:.write ('\n'c8, Keys::THROWS, ' 'c8);
                let mut j = 0u64;
                for i in self._throwers {
                    if (j != 0u64) stream:.write (", "s8);
                    i.format (alias stream);
                    j += 1u64;
                }
                stream:.write ('\n'c8);
            }
            stream:.detabing ();
            self._body.format (alias stream);
            stream:.write ('\n'c8);
        }
        
    }
    
}
