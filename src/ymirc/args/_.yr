mod ymirc::args::_;
import std::args, std::env;
import std::io;

pub struct
| includes : [[c32]] = []
| libs : [[c32]] = []
| file : [c32]
| help : YesNo = YesNo::NO
| fversion : [[c32]] = []
| debug : YesNo = YesNo::NO
| noSem : YesNo = YesNo::NO
| noOpt : YesNo = YesNo::NO
| noLint : YesNo = YesNo::NO
 -> YmirArguments;

/**
 * Parse the command line options, to create the YmirArgument struct
 * @returns: the parsed arguments
 */
pub fn parseArguments () -> YmirArguments? {
    let x = ArgumentParser!{YmirArguments}::new ()
        :.positional!"file" (comments-> "root file of the package to compile")
        :.info!"help" (short-> "h", comments-> "print this help and exit", isHelp-> true)
        :.info!"includes" (short-> "I", comments-> "add include path")
        :.info!"fversion" (comments-> "add a version")
        :.info!"noSem" (comments-> "do not validate the syntax tree")
        :.info!"noOpt" (comments-> "do not optimize the semantic tree")
        :.info!"noLint" (comments-> "do no generate Ymir Intermediate Language")
        :.info!"debug" (short-> "g", comments-> "produce debugging information")
        :.info!"libs" (short-> "l", comments-> "add library link")
        ;
    {        
        let args = x.parse (env::args ());
        return args?;
    } catch {
        err : &ArgumentError => {
            println (x.simpleUsage (cmd-> "ymirc"));
            println (x.diagnosis (err));
            return (YmirArguments?)::__err__;            
        }
        _ : &HelpRequired => {
            println (x.usage (cmd-> "ymirc"));
            return (YmirArguments?)::__err__;
        }   
    }
}
