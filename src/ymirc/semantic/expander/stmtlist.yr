mod ymirc::semantic::expander::stmtlist;

import std::collection::vec;
import ymirc::semantic::generator::_;

import ymirc::utils::format;


pub class @final StmtList {

    let dmut _list = Vec!{&Value}::new ();

    let dmut _decls = Vec!{&Value}::new ();

    pub self () {}

    pub fn append (mut self, v : &StmtList) {
        for il in v[] {
            self:.append (il);
        }
    }

    pub fn append (mut self, v : &Value) {
        match v {
            var : &VarDeclValue => {
                self._decls:.push (var);
            }
            _ => {
                self._list:.push (v);
            }
        }
    }

    pub fn opIndex (self)-> [&Value] {
        self._decls[] ~ self._list[]
    }

    pub fn len (self)-> usize {
        self._list.len () + self._decls.len ()
    }

}
