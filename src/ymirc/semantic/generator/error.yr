mod ymirc::semantic::generator::error;

import ymirc::semantic::generator::base;
import ymirc::errors::message;
import ymirc::utils::format;
import ymirc::lexing::word;
import std::io;

/**
 * Error generator are generator used to store the error message and avoid multiple validation
 * For example, class validation can generate an error, that needs to be stored to avoid revalidating the same class that would result in the same error
 */
pub class @final ErrorGenerator over Generator {

    /// The message contained in the generator
    let _msg : &ErrorMsg;

    /**
     * @params: 
     *   - loc: the location of the error 
     *   - msg: the message contained in the error
     */
    pub self (loc : &Word, msg : &ErrorMsg) with super (loc), _msg = msg {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, _ : &Generator)-> bool {
        false
    }    

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the message of the error
     */
    pub fn getErrorMessage (self)-> &ErrorMsg {
        self._msg
    }
    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("<error-generator>");
        }
    }
    

}
