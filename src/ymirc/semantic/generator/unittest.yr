in unittest;

use ymirc::semantic::generator::{type, value};
use ymirc::semantic::validator::template::mapper;
use ymirc::semantic::symbol::path;

use ymirc::utils::format;
use ymirc::lexing::word;
use std::stream;


/**
 * A unittest is a function that can be sent to the back end for final transformation and final code generation
 */
@final
pub class UnitTestGenerator over Generator {

    // The name of the unit test
    let _name : &SymbolPath;

    // The body of the unittest
    let _value : &Value;

    pub self (loc : &Word, name : &SymbolPath, value : &Value)
        with super (loc)
        , _name = name
        , _value = value
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            u : &UnitTestGenerator => {
                return u._name.toStr () == self._name.toStr ();
            }
        }

        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =============================        GETTERS         ===========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> &Value {
        self._value
    }

    pub fn getName (self)-> &SymbolPath {
        self._name
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("unittest : ");
            stream:.write (' ', self._name.toStr (), ' ');
            self._value.format (alias stream);
        }
    }




}
