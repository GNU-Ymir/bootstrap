in globvar;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;

use ymirc::semantic::generator::{type, value, value::literal::unit};
use ymirc::semantic::validator::template::mapper;
use ymirc::semantic::symbol::path;
use std::stream;


/**
 * A var decl is a variable declared in a function
 */
@final
pub class GlobalVarGenerator over Generator {

    // The name of the global variable
    let _name : &SymbolPath;

    // The external language of the global var (if external)
    let _externLang : [c8];

    // True if the generated symbol is weak
    let _isWeak : bool;

    // The type of the variable declared (self.getType () always return Void)
    let _type : &Type;

    // The value of the variable
    let _value : &Value;

    // True if the variable is declared mutable
    let _isMutable : bool;

    // True if the variable is lazy
    let _isLazy : bool;

    // True if the variable is thread local
    let _isThreadLocal : bool;

    /**
     * @params:
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - isMutable: true iif the variable is declared mutable
     */
    pub self (loc : &Word, name : &SymbolPath, externLang : [c8] = "", isWeak : bool = false, type : &Type, value : &Value, isMutable : bool, isLazy : bool, isThreadLocal : bool)
        with super (loc)
        , _name = name
        , _value = value
        , _isMutable = isMutable
        , _type = type
        , _isLazy = isLazy
        , _externLang = externLang
        , _isWeak = isWeak
        , _isThreadLocal = isThreadLocal
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &GlobalVarGenerator => {
                if (self._isWeak != p._isWeak) return false;
                if (self._externLang != p._externLang) return false;
                if (self._name.toStr () != p._name.toStr ()) return false;
                if (self._isThreadLocal != p._isThreadLocal) return false;

                if (self._value != p._value) return false;
                if (self._type != p._type) return false;
                if (self._isLazy != p._isLazy) return false;
                if (self._isMutable != p._isMutable) return false;


                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the global variable
     * */
    pub fn getName (self)-> &SymbolPath {
        self._name
    }

    /**
     * @returns: the external language in which the variable was actually declared
     * */
    pub fn getExternalLang (self)-> [c8] {
        self._externLang
    }

    /**
     * @returns: true iif generates a weak symbol
     * */
    pub fn isWeak (self)-> bool {
        self._isWeak
    }

    /**
     * @returns: the value of the var decl
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the type of the variable that was declared
     * */
    pub fn getType (self)-> &Type {
        self._type
    }

    /**
     * @returns: true if the var is declared mutable
     */
    pub fn isMutable (self)-> bool {
        self._isMutable
    }

    /**
     * @returns: true iif the var is lazy
     * */
    pub fn isLazy (self)-> bool {
        self._isLazy
    }

    /**
     * @returns: true iif the var is thread local
     * */
    pub fn isThreadLocal (self)-> bool {
        self._isThreadLocal
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("var : ");
            if (self._isWeak) {
                stream:.write ("[weak]");
            }

            if (self._externLang != "") { stream:.write ("from [", self._externLang, "] "); }

            if (self._isLazy) stream:.write (Keys::LAZY, ' ');
            if (self._isMutable) stream:.write (Keys::MUTABLE, ' ');

            stream:.write (self._name.toStr ());
            if (self._isThreadLocal) stream:.write ("@tl");
            stream:.write (" ");

            stream:.entabing ();
            stream:.write (" : ", self._type);
            match self._value {
                UnitValue () => {}
                _ => {
                    stream:.write (" = ");
                    stream:.write (self._value);
                }
            }

            stream:.detabing ();
        }
    }

}
