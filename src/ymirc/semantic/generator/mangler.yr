mod ymirc::semantic::generator::mangler;

import ymirc::semantic::generator::_;
import ymirc::utils::format;
import ymirc::syntax::keys;

import ymirc::semantic::validator::template::mapper;
import ymirc::semantic::symbol::base;
import ymirc::semantic::symbol::path;

import std::stream;
import std::collection::vec;
import std::algorithm::searching;
import std::io;

enum
| PREFIX        = "_Y"s8
| FUNCTION      = "F"s8
| CTOR          = "CT"s8
| DTOR          = "DT"s8
| METHOD        = "MT"s8
| TEST          = "T"s8
| FUNCTION_RET  = "Z"s8
| VAR           = "V"s8
| CST           = "CST"s8
| VTABLE        = "VT"s8
| TYPEINFO      = "TI"s8
 -> YmirMangleCsts;

/**
 * Class used to mangle names into uniq symbol names
 * */
pub class Mangler {

    /**
     * Create an empty mangler
     * */
    pub self () {}

    /**
     * @params:
     *     - gen: the generator to mangle
     * */
    pub fn mangle (self, gen : &Generator)-> [c8] {
        match gen {
            fr : &FrameGenerator  => { self.mangleFrame (fr) }
            u : &UnitTestGenerator => { self.mangleUnitTest (u) }
            p : &PrototypeValue   => { self.manglePrototype (p) }
            t : &Type             => { self.mangleType (t) }
            _ => {
                __pragma!panic ();
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ============================          VALUES          ==========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Mangle a value (mainly for template parameters)
     * */
    fn mangleValue (self, value : &Value)-> [c8] {
        match value {
            i : &IntValue => {
                let v = format ("%", i);
                format ("i%_%", v.len, v)
            }
            f : &FloatValue => {
                let v = format ("%", f);
                format ("f%_%", v.len, v)
            }
            s : &StringValue => {
                self.mangleString (s)
            }
            c : &CharValue => {
                let v = format ("%", c);
                format ("c%_%", v.len, v)
            }
            b : &BoolValue => {
                if (b.isTrue ()) {
                    "b1"s8
                } else {
                    "b0"s8
                }
            }
            t : &TupleValue => {
                let dmut stream = StringStream::new ();
                for i in t.getValues () {
                    let mgl = self.mangleValue (i);
                    stream:.write (mgl.len, mgl);
                }

                format ("t%%", stream[].len, stream[])
            }
            n : &NameFuncPtrValue => {
                let name = self.manglePrototype (n.getPrototype ());
                format ("TP%_%", name.len, name)
            }
            _ => {
                println (format ("%", value), " ", value::typeinfo.name);
                __pragma!panic ();
            }
        }
    }

    /**
     * Mangle a string value
     * */
    fn mangleString (self, s : &StringValue)-> [c8] {
        let dmut stream = StringStream::new ();
        let recoded = convertStringSliceValue (s.getLoc (), s);
        let utf8 = recoded.getValue ().utf8;
        if (utf8.len <= 10us) {
            stream:.write (format ("s%", utf8.len));
            for i in utf8 {
                stream:.write (i);
            }
            stream[]
        } else {
            import std::hash;
            let h = hash (utf8);
            for i in 0us .. 5us {
                stream:.write (utf8 [i]);
            }
            stream:.write (h);
            for i in utf8.len - 5us .. utf8.len {
                stream:.write (utf8 [i]);
            }
            format ("s%%", stream[].len, stream[])
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ============================          TYPES          ===========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Mangle a type
     * @params:
     *    - type: the type to mangle
     * */
    pub fn mangleType (self, type : &Type, fatherMut : bool = false)-> [c8] {
        let inner = match type {
            c : &ClassPtrType   => { self.mangleClassPtrT (c) }
            e : &EnumType       => { self.mangleEnumT (e) }
            s : &StructType     => { self.mangleStructT (s) }
            b : &BoolType       => { self.mangleBoolT (b) }
            c : &CharType       => { self.mangleCharT (c) }
            f : &FloatType      => { self.mangleFloatT (f) }
            i : &IntType        => { self.mangleIntT (i) }
            arr : &ArrayType    => { self.mangleArrayT (arr) }
            p : &PointerType    => { self.manglePointerT (p) }
            r : &RangeType      => { self.mangleRangeT (r) }
            sl : &SliceType     => { self.mangleSliceT (sl) }
            tu : &TupleType     => { self.mangleTupleT (tu) }
            v : &VoidType       => { self.mangleVoidT (v) }
            c : &ClassRefType   => { self.mangleClassRefT (c) }
            t : &TraitRefType   => { self.mangleTraitRefT (t) }
            d : &DelegateType   => { self.mangleDelegateT (d) }
            f : &FuncPtrType    => { self.mangleFuncPtrT (f) }
            o : &OptionType     => { self.mangleOptionT (o) }
            _ : &NoneType       => { return ""s8; }
            _                   => __pragma!panic ();
        };

        if (fatherMut && type.isMutable ()) {
            format ("x%", inner)
        } else {
            inner
        }
    }

    /**
     * Mangle a class ptr type
     * */
    fn mangleClassPtrT (self, cptr : &ClassPtrType)-> [c8] {
        let res = self.mangleType (cptr.getInner (), fatherMut-> cptr.isMutable ());
        format ("P%%", res.len, res)
    }

    /**
     * Mangle an enumeration type
     * */
    fn mangleEnumT (self, en : &EnumType)-> [c8] {
        self.manglePath (en.getSymbol ().getPath ())
    }

    /**
     * Mangle a structure type
     * */
    fn mangleStructT (self, str : &StructType)-> [c8] {
        self.manglePath (str.getSymbol ().getPath ())
    }

    /**
     * Mangle a bool type
     * */
    fn mangleBoolT (self, _ : &BoolType)-> [c8] {
        "b"s8
    }

    /**
     * Mangle a char type
     * */
    fn mangleCharT (self, c : &CharType)-> [c8] {
        format ("c%", c.getSize ())
    }

    /**
     * Mangle a float type
     * */
    fn mangleFloatT (self, f : &FloatType)-> [c8] {
        if (f.getSize () == 0us) {
            return NativeTypes::REAL;
        }
        format ("f%", f.getSize ())
    }

    /**
     * Mangle an int type
     * */
    fn mangleIntT (self, i : &IntType)-> [c8] {
        if (i.getSize () == 0u16) {
            if i.isSigned () {
                "isize"s8
            } else {
                "usize"s8
            }
        } else {
            if i.isSigned () {
                format ("i%", i.getSize ())
            } else {
                format ("u%", i.getSize ())
            }
        }
    }

    /**
     * Mangle an array type
     * */
    fn mangleArrayT (self, a : &ArrayType)-> [c8] {
        let inner = self.mangleType (a.getInners ()[0]);
        format ("A%_%%", a.getLen (), inner.len, inner)
    }

    /**
     * Mangle a pointer type
     * */
    fn manglePointerT (self, p : &PointerType)-> [c8] {
        let inner = self.mangleType (p.getInners ()[0]);
        format ("P%%", inner.len, inner)
    }

    /**
     * Mangle a range type
     * */
    fn mangleRangeT (self, rng : &RangeType)-> [c8] {
        let inner = self.mangleType (rng.getInners ()[0]);
        format ("R%%", inner.len, inner)
    }

    /**
     * Mangle a slice type
     * */
    fn mangleSliceT (self, slc : &SliceType)-> [c8] {
        let inner = self.mangleType (slc.getInners ()[0]);
        format ("S%%", inner.len, inner)
    }

    /**
     * Mangle an option type
     * */
    fn mangleOptionT (self, o : &OptionType)-> [c8] {
        let inner = self.mangleType (o.getInners ()[0]);
        format ("O%%", inner.len, inner)
    }

    /**
     * Mangle a tuple type
     * */
    fn mangleTupleT (self, tu : &TupleType)-> [c8] {
        let dmut stream = StringStream::new ();
        for i in tu.getInners () {
            let mgl = self.mangleType (i);
            stream:.write (mgl.len, mgl);
        }

        format ("T%%", stream[].len, stream[])
    }

    /**
     * Mangle a void type
     * */
    fn mangleVoidT (self, _ : &VoidType)-> [c8] {
        "v"s8
    }

    /**
     * Mangle a class ref type
     * */
    fn mangleClassRefT (self, cl : &ClassRefType)-> [c8] {
        self.manglePath (cl.getSymbol ().getPath ())
    }

    /**
     * Mangle the name of the vtable of a class ref
     * */
    pub fn mangleVtable (self, cl : &ClassRefType)-> [c8] {
        format ("%%%", YmirMangleCsts::PREFIX, self.mangleClassRefT (cl), YmirMangleCsts::VTABLE)
    }

    /**
     * @returns: the mangled name of the typeinfo of a class
     * */
    pub fn mangleTypeInfo (self, cl : &ClassRefType)-> [c8] {
        format ("%%%", YmirMangleCsts::PREFIX, self.mangleClassRefT (cl), YmirMangleCsts::TYPEINFO)
    }

    /**
     * Mangle a trait ref type
     * */
    fn mangleTraitRefT (self, tr : &TraitRefType)-> [c8] {
        self.manglePath (tr.getSymbol ().getPath ())
    }

    /**
     * Mangle a delegate type
     * */
    fn mangleDelegateT (self, dl : &DelegateType)-> [c8] {
        let dmut stream = StringStream::new ();
        let mgl = self.mangleType (dl.getRetType ());
        stream:.write (mgl.len, mgl);

        for i, t in dl.getParameters () {
            let mgl_ = if (dl.getReferences ()[i]) {
                format ("R%", self.mangleType (t, fatherMut-> true))
            } else if (dl.getLazys () [i]) {
                format ("L%", self.mangleType (t, fatherMut-> true))
            } else {
                self.mangleType (t)
            };

            stream:.write (mgl_.len, mgl_);
        }

        format ("DG%%", stream[].len, stream[])
    }

    /**
     * Mangle a function pointer type
     * */
    fn mangleFuncPtrT (self, fptr : &FuncPtrType)-> [c8] {
        let dmut stream = StringStream::new ();
        let mgl = self.mangleType (fptr.getRetType ());
        stream:.write (mgl.len, mgl);

        for i, t in fptr.getParameters () {
            let mgl_ = if (fptr.getReferences ()[i]) {
                format ("R%", self.mangleType (t, fatherMut-> true))
            } else if (fptr.getLazys () [i]) {
                format ("L%", self.mangleType (t, fatherMut-> true))
            } else {
                self.mangleType (t)
            };

            stream:.write (mgl_.len, mgl_);
        }

        format ("FP%%", stream[].len, stream[])
    }


    /*!
     * ================================================================================
     * ================================================================================
     * ===========================          GLOBALS          ==========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Mangle a prototype value
     * */
    pub fn manglePrototype (self, proto : &PrototypeValue)-> [c8] {
        let fnName = match proto {
            m : &MethodPrototypeValue => {
                return self.mangleMethodPrototype (m);
            }
            n : &NamePrototypeValue => {
                self.manglePath (n.getName ())
            }
            _ => {
                let path = match proto.getTemplateMapper () {
                    Ok (tmps : _) => { proto.getSymbol ().getPath ().withTemplates (tmps?) }
                    _ => { proto.getSymbol ().getPath () }
                };

                self.manglePath (path)
            }
        };

        if (proto.getSymbol ().getExternalLanguage () == Keys::CLANG) {
            return proto.getSymbol ().getPath ().asStdPath ().file ();
        }

        let dmut stream = StringStream::new ();
        stream:.write (YmirMangleCsts::PREFIX,
                       fnName,
                       YmirMangleCsts::FUNCTION);

        for p in proto.getParameters () {
            match p {
                pv : &ProtoVarValue => {
                    let t = if (pv.isReference ()) {
                        format ("R%", self.mangleType (pv.getType (), fatherMut-> true))
                    } else if (pv.isLazy ()) {
                        format ("L%", self.mangleType (pv.getType (), fatherMut-> true))
                    } else {
                        self.mangleType (pv.getType ())
                    }
                    stream:.write (t);
                }
                _ => __pragma!panic ();
            }
        }

        stream:.write (YmirMangleCsts::FUNCTION_RET, self.mangleType (proto.getRetType ()));
        stream[]
    }

    /**
     * Mangle a method prototype value
     * */
    fn mangleMethodPrototype (self, proto : &MethodPrototypeValue)-> [c8] {
        let dmut stream = StringStream::new ();

        let path = match proto.getTemplateMapper () {
            Ok (tmps : _) => { proto.getSymbol ().getPath ().withTemplates (tmps?) }
            _ => { proto.getSymbol ().getPath () }
        };

        let fnName = match proto {
            // c : &CtorPrototypeValue => {
            //     if (c.getRename () != ""s8) {
            //         self.manglePath (path.withFile (c.getRename ()))
            //     } else {
            //         self.manglePath (path)
            //     }
            // }
            _ => {
                self.manglePath (path)
            }
        };

        let prefix = match proto {
            CtorPrototypeValue () => { YmirMangleCsts::CTOR }
            DtorPrototypeValue () => { YmirMangleCsts::DTOR }
            _ => { YmirMangleCsts::METHOD }
        }

        stream:.write (YmirMangleCsts::PREFIX,
                       fnName,
                       prefix);

        let res = if (proto.isMutable ()) {
            self.mangleType (proto.getClassRef ().clone (1u32), fatherMut-> true)
        } else {
            self.mangleType (proto.getClassRef ())
        };

        stream:.write (format ("P%%", res.len, res));

        for p in proto.getParameters () {
            match p {
                pv : &ProtoVarValue => {
                    let t = if (pv.isReference ()) {
                        format ("R%", self.mangleType (pv.getType (), fatherMut-> true))
                    } else if (pv.isLazy ()) {
                        format ("L%", self.mangleType (pv.getType (), fatherMut-> true))
                    } else {
                        self.mangleType (pv.getType ())
                    }
                    stream:.write (t);
                }
                _ => __pragma!panic ();
            }
        }

        stream:.write (YmirMangleCsts::FUNCTION_RET, self.mangleType (proto.getRetType ()));
        stream[]
    }

    /**
     * Mangle the name of a frame generator
     * @params:
     *     - frame: the frame to mangle
     * */
    pub fn mangleFrame (self, frame : &FrameGenerator)-> [c8] {
        if (frame.getExternalLang () == Keys::CLANG) {
            return frame.getName ().asStdPath ().file ();
        }

        let prefix = match frame.getKind () {
            FrameKind::METHOD => { YmirMangleCsts::METHOD }
            FrameKind::CTOR => { YmirMangleCsts::CTOR }
            FrameKind::DTOR => { YmirMangleCsts::DTOR }
            _ => { YmirMangleCsts::FUNCTION }
        };

        let dmut stream = StringStream::new ();
        stream:.write (YmirMangleCsts::PREFIX,
                       self.manglePath (frame.getName ()),
                       prefix);

        for p in frame.getParameters () {
            match p {
                pv : &ProtoVarValue => {
                    let t = if (pv.isReference ()) {
                        format ("R%", self.mangleType (pv.getType (), fatherMut-> true))
                    } else if (pv.isLazy ()) {
                        format ("L%", self.mangleType (pv.getType (), fatherMut-> true))
                    } else {
                        self.mangleType (pv.getType ())
                    }
                    stream:.write (t);
                }
                _ => __pragma!panic ();
            }
        }

        stream:.write (YmirMangleCsts::FUNCTION_RET, self.mangleType (frame.getReturnType ()));
        stream[]
    }

    /**
     * Mangle the name of a global variable generator
     * @params:
     *     - gv: the global var to mangle
     * */
    pub fn mangleGlobalVar (self, gv : &GlobalVarGenerator)-> [c8] {
        if (gv.getExternalLang () == Keys::CLANG) {
            return gv.getName ().asStdPath ().file ();
        }

        let dmut stream = StringStream::new ();
        stream:.write (YmirMangleCsts::PREFIX,
                       self.manglePath (gv.getName ()),
                       YmirMangleCsts::VAR);

        stream[]
    }

    /**
     * Mangle the name of a unit test
     * @params:
     *    - u : the unit test to mangle
     * */
    pub fn mangleUnitTest (self, u : &UnitTestGenerator)-> [c8] {
        let dmut stream = StringStream::new ();
        stream:.write (YmirMangleCsts::PREFIX,
                       self.manglePath (u.getName ()),
                       YmirMangleCsts::TEST);

        stream[]
    }


    /**
     * Mangle a path
     * */
    pub fn manglePath (self, path : &SymbolPath)-> [c8] {
        let dmut buf = StringStream::new ();
        let templates = path.templates ();
        for i, f in path.parts () {
            buf:.write (f.len, f);
            match templates [i] {
                Ok (tmp : _) => {
                    buf:.write (self.mangleTemplates (tmp));
                }
            }
        }

        buf[]
    }

    /**
     * Mangle a template mapper
     * */
    fn mangleTemplates (self, templates : &TemplateMapper)-> [c8] {
        let dmut stream = StringStream::new ();
        let tmps = templates.getMapping ();
        for name in templates.getNameOrder () {
            match tmps.find (name) {
                Ok (expr : &ValueWrapperExpr) => {
                    stream:.write (format ("N%", self.mangleValue (expr.getValue ())));
                }
                Ok (expr : &TypeWrapperExpr) => {
                    let mutability = if (name in templates.getMutables ()) {
                        "m"s8
                    } else if (name in templates.getDeeplyMutables ()) {
                        "dm"s8
                    } else { ""s8 };

                    stream:.write (format ("N%%", mutability, self.mangleType (expr.getType ())));
                }
                Ok (exprs : &TypeListWrapperExpr) => {
                    let mutability = if (name in templates.getMutables ()) {
                        "m"s8
                    } else if (name in templates.getDeeplyMutables ()) {
                        "dm"s8
                    } else { ""s8 };

                    let dmut innerStream = StringStream::new ();
                    for e in exprs.getTypes () {
                        innerStream:.write (format ("N%", self.mangleType (e)));
                    }
                    stream:.write (format ("L%N%%", innerStream[].len, mutability, innerStream[]));
                }
                x : _ => {
                    println (x);
                    __pragma!panic ();
                }
            }
        }

        stream[]
    }

}
