mod ymirc::semantic::generator::mangler;

import ymirc::semantic::generator::_;
import ymirc::utils::format;
import ymirc::syntax::keys;

import ymirc::semantic::validator::template::mapper;

import std::stream;
import std::io;
import std::fs::path;

enum
| PREFIX        = "_Y"s8
| FUNCTION      = "F"s8
| TEST          = "T"s8
| FUNCTION_RET  = "Z"s8
| VAR           = "V"s8
| CST           = "CST"s8
| VTABLE        = "VT"s8
| TYPEINFO      = "TI"s8
 -> YmirMangleCsts;

/**
 * Class used to mangle names into uniq symbol names
 * */
pub class Mangler {

    /**
     * Create an empty mangler
     * */
    pub self () {}

    /**
     * @params:
     *     - gen: the generator to mangle
     * */
    pub def mangle (self, gen : &Generator)-> [c8] {
        match gen {
            fr : &FrameGenerator  => { self.mangleFrame (fr) }
            p : &PrototypeValue   => { self.manglePrototype (p) }
            t : &Type             => { self.mangleType (t) }
            _ => {
                __pragma!panic ();
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * ============================          VALUES          ==========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Mangle a value (mainly for template parameters)
     * */
    def mangleValue (self, value : &Value)-> [c8] {
        value;
        __pragma!panic ();
    }

    /**
     * ================================================================================
     * ================================================================================
     * ============================          TYPES          ===========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Mangle a type
     * @params:
     *    - type: the type to mangle
     * */
    pub def mangleType (self, type : &Type, fatherMut : bool = false)-> [c8] {
        let inner = match type {
            c : &ClassPtrType   => { self.mangleClassPtrT (c) }
            e : &EnumType       => { self.mangleEnumT (e) }
            s : &StructType     => { self.mangleStructT (s) }
            b : &BoolType       => { self.mangleBoolT (b) }
            c : &CharType       => { self.mangleCharT (c) }
            f : &FloatType      => { self.mangleFloatT (f) }
            i : &IntType        => { self.mangleIntT (i) }
            arr : &ArrayType    => { self.mangleArrayT (arr) }
            p : &PointerType    => { self.manglePointerT (p) }
            r : &RangeType      => { self.mangleRangeT (r) }
            sl : &SliceType     => { self.mangleSliceT (sl) }
            tu : &TupleType     => { self.mangleTupleT (tu) }
            v : &VoidType       => { self.mangleVoidT (v) }
            c : &ClassRefType   => { self.mangleClassRefT (c) }
            t : &TraitRefType   => { self.mangleTraitRefT (t) }
            d : &DelegateType   => { self.mangleDelegateT (d) }
            f : &FuncPtrType    => { self.mangleFuncPtrT (f) }
            _ : &NoneType       => { return ""s8; }
            _                   => __pragma!panic ();
        };

        if (fatherMut && type.isMutable ()) {
            format ("x%", inner)
        } else {
            inner
        }
    }

    /**
     * Mangle a class ptr type
     * */
    def mangleClassPtrT (self, cptr : &ClassPtrType)-> [c8] {
        let res = self.mangleType (cptr.getInner (), fatherMut-> cptr.isMutable ());
        format ("P%%", res.len, res)
    }

    /**
     * Mangle an enumeration type
     * */
    def mangleEnumT (self, en : &EnumType)-> [c8] {
        self.manglePath (en.getSymbol ().getPath ())
    }

    /**
     * Mangle a structure type
     * */
    def mangleStructT (self, str : &StructType)-> [c8] {
        self.manglePath (str.getSymbol ().getPath ())
    }

    /**
     * Mangle a bool type
     * */
    def mangleBoolT (self, _ : &BoolType)-> [c8] {
        "b"s8
    }

    /**
     * Mangle a char type
     * */
    def mangleCharT (self, c : &CharType)-> [c8] {
        format ("c%", c.getSize ())
    }

    /**
     * Mangle a float type
     * */
    def mangleFloatT (self, f : &FloatType)-> [c8] {
        if (f.getSize () == 0us) {
            return NativeTypes::REAL;
        }
        format ("f%", f.getSize ())
    }

    /**
     * Mangle an int type
     * */
    def mangleIntT (self, i : &IntType)-> [c8] {
        if (i.getSize () == 0u16) {
            if i.isSigned () {
                "isize"s8
            } else {
                "usize"s8
            }
        } else {
            if i.isSigned () {
                format ("i%", i.getSize ())
            } else {
                format ("u%", i.getSize ())
            }
        }
    }

    /**
     * Mangle an array type
     * */
    def mangleArrayT (self, a : &ArrayType)-> [c8] {
        format ("A%%", a.getSize (), self.mangleType (a.getInners ()[0]))
    }

    /**
     * Mangle a pointer type
     * */
    def manglePointerT (self, p : &PointerType)-> [c8] {
        let inner = self.mangleType (p.getInners ()[0]);
        format ("P%%", inner.len, inner)
    }

    /**
     * Mangle a range type
     * */
    def mangleRangeT (self, rng : &RangeType)-> [c8] {
        let inner = self.mangleType (rng.getInners ()[0]);
        format ("R%%", inner.len, inner)
    }

    /**
     * Mangle a slice type
     * */
    def mangleSliceT (self, slc : &SliceType)-> [c8] {
        format ("S%", self.mangleType (slc.getInners ()[0]))
    }

    /**
     * Mangle a tuple type
     * */
    def mangleTupleT (self, tu : &TupleType)-> [c8] {
        let dmut stream = StringStream::new ();
        for i in tu.getInners () {
            let mgl = self.mangleType (i);
            stream:.write (mgl.len, mgl);
        }

        format ("T%", stream[].len, stream[])
    }

    /**
     * Mangle a void type
     * */
    def mangleVoidT (self, _ : &VoidType)-> [c8] {
        "v"s8
    }

    /**
     * Mangle a class ref type
     * */
    def mangleClassRefT (self, cl : &ClassRefType)-> [c8] {
        self.manglePath (cl.getSymbol ().getPath ())
    }

    /**
     * Mangle a trait ref type
     * */
    def mangleTraitRefT (self, tr : &TraitRefType)-> [c8] {
        self.manglePath (tr.getSymbol ().getPath ())
    }

    /**
     * Mangle a delegate type
     * */
    def mangleDelegateT (self, dl : &DelegateType)-> [c8] {
        let dmut stream = StringStream::new ();
        let mgl = self.mangleType (dl.getRetType ());
        stream:.write (mgl.len, mgl);

        for i, t in dl.getParameters () {
            let mgl_ = if (dl.getReferences ()[i]) {
                format ("R%", self.mangleType (t))
            } else {
                self.mangleType (t)
            };

            stream:.write (mgl_.len, mgl_);
        }

        format ("DG%%", stream[].len, stream[])
    }

    /**
     * Mangle a function pointer type
     * */
    def mangleFuncPtrT (self, fptr : &FuncPtrType)-> [c8] {
        let dmut stream = StringStream::new ();
        let mgl = self.mangleType (fptr.getRetType ());
        stream:.write (mgl.len, mgl);

        for i, t in fptr.getParameters () {
            let mgl_ = if (fptr.getReferences ()[i]) {
                format ("R%", self.mangleType (t))
            } else {
                self.mangleType (t)
            };

            stream:.write (mgl_.len, mgl_);
        }

        format ("FP%%", stream[].len, stream[])
    }


    /**
     * ================================================================================
     * ================================================================================
     * ===========================          GLOBALS          ==========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Mangle a prototype value
     * */
    pub def manglePrototype (self, proto : &PrototypeValue)-> [c8] {
        if (proto.getSymbol ().getExternalLanguage () == Keys::CLANG) {
            return proto.getSymbol ().getPath ().file ();
        }

        let dmut stream = StringStream::new ();
        stream:.write (YmirMangleCsts::PREFIX,
                       self.manglePath (proto.getSymbol ().getPath (), templates-> proto.getTemplateMapper (), fromProto-> true),
                       YmirMangleCsts::FUNCTION);

        for p in proto.getParameters () {
            match p {
                pv : &ProtoVarValue => {
                    let t = if (pv.isReference ()) {
                        format ("R%", self.mangleType (pv.getType ()))
                    } else {
                        self.mangleType (pv.getType ())
                    }
                    stream:.write (t);
                }
                _ => __pragma!panic ();
            }
        }

        stream:.write (YmirMangleCsts::FUNCTION_RET, self.mangleType (proto.getRetType ()));
        stream[]
    }

    /**
     * Mangle the name of a frame generator
     * @params:
     *     - frame: the frame to mangle
     * */
    pub def mangleFrame (self, frame : &FrameGenerator)-> [c8] {
        if (frame.getExternalLang () == Keys::CLANG) {
            return frame.getName ().file ();
        }

        let dmut stream = StringStream::new ();
        stream:.write (YmirMangleCsts::PREFIX,
                       self.manglePath (frame.getName (), templates-> frame.getTemplateMapper ()),
                       YmirMangleCsts::FUNCTION);

        for p in frame.getParameters () {
            match p {
                pv : &ProtoVarValue => {
                    let t = if (pv.isReference ()) {
                        format ("R%", self.mangleType (pv.getType ()))
                    } else {
                        self.mangleType (pv.getType ())
                    }
                    stream:.write (t);
                }
                _ => __pragma!panic ();
            }
        }

        stream:.write (YmirMangleCsts::FUNCTION_RET, self.mangleType (frame.getReturnType ()));
        stream[]
    }

    /**
     * Mangle a path
     * */
    pub def manglePath (self, path : &Path, templates : (&TemplateMapper)? = ((&TemplateMapper)?)::_err_, fromProto : bool = false)-> [c8] {
        let dmut buf = StringStream::new ();
        match templates {
            Err () => {
                for f in path.parts () {
                    buf:.write (f.len, f);
                }
            }

            Ok (tmps : _) => {
                let parts = path.parts ();
                for i in 0us .. parts.len {
                    if (fromProto || i != (parts.len - 2us)) {
                        buf:.write (parts [i].len, parts [i]);
                    }
                }

                buf:.write (self.mangleTemplates (tmps));
            }
        }

        buf[]
    }

    /**
     * Mangle a template mapper
     * */
    def mangleTemplates (self, templates : &TemplateMapper)-> [c8] {
        let dmut stream = StringStream::new ();
        let tmps = templates.getMapping ();
        for name in templates.getNameOrder () {
            match tmps.find (name) {
                Ok (expr : &ValueWrapperExpr) => {
                    stream:.write (format ("N%", self.mangleValue (expr.getContent ())));
                }
                Ok (expr : &TypeWrapperExpr) => {
                    let mutability = if (name in templates.getMutables ()) {
                        "m"s8
                    } else if (name in templates.getDeeplyMutables ()) {
                        "dm"s8
                    } else { ""s8 };

                    stream:.write (format ("N%%", mutability, self.mangleType (expr.getContent ())));
                }
                Ok (exprs : &TypeListWrapperExpr) => {
                    let mutability = if (name in templates.getMutables ()) {
                        "m"s8
                    } else if (name in templates.getDeeplyMutables ()) {
                        "dm"s8
                    } else { ""s8 };

                    let dmut innerStream = StringStream::new ();
                    for e in exprs.getInners () {
                        innerStream:.write (format ("N%", self.mangleType (e)));
                    }
                    stream:.write (format ("L%N%%", innerStream[].len, mutability, innerStream[]));
                }
                x : _ => {
                    println (x);
                    __pragma!panic ();
                }
            }
        }

        stream[]
    }

}
