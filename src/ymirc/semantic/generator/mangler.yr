in mangler;

use ymirc::semantic::generator::_;
use ymirc::utils::format;
use ymirc::syntax::keys;

use ymirc::semantic::validator::template::mapper;
use ymirc::semantic::{symbol, symbol::path};

use std::stream;
use std::algorithm::searching;

enum
| PREFIX        = "_Y"
| FUNCTION      = "F"
| CTOR          = "CT"
| DTOR          = "DT"
| METHOD        = "MT"
| TEST          = "T"
| FUNCTION_RET  = "Z"
| VAR           = "V"
| VTABLE        = "VT"
| MAPINFO       = "MI"
| TYPEINFO      = "TI"
 -> YmirMangleCsts;

/**
 * Class used to mangle names into uniq symbol names
 * */
pub record Mangler {

    /**
     * Create an empty mangler
     * */
    pub self () {}

    /**
     * @params:
     *     - gen: the generator to mangle
     * */
    pub fn mangle (self, gen : &Generator)-> [c8] {
        match gen {
            fr : &FrameGenerator  => { self.mangleFrame (fr) }
            u : &UnitTestGenerator => { self.mangleUnitTest (u) }
            p : &PrototypeValue   => { self.manglePrototype (p) }
            t : &Type             => { self.mangleType (t, fatherMut-> true) }
            _ => {
                panic;
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          VALUES          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle a value (mainly for template parameters)
     * */
    fn mangleValue (self, value : &Value)-> [c8] {
        match value {
            i : &IntValue => {
                let v = format ("%", i);
                format ("i%_%", v.len, v)
            }
            f : &FloatValue => {
                let v = format ("%", f);
                format ("f%_%", v.len, v)
            }
            s : &StringValue => {
                self.mangleString (s)
            }
            c : &CharValue => {
                let v = format ("%", c);
                format ("c%_%", v.len, v)
            }
            b : &BoolValue => {
                if (b.isTrue ()) {
                    "b1"
                } else {
                    "b0"
                }
            }
            t : &TupleValue => {
                let dmut stream = copy StringStream ();
                for i in t.getValues () {
                    let mgl = self.mangleValue (i);
                    stream:.write (mgl.len, mgl);
                }

                format ("t%%", stream[].len, stream[])
            }
            n : &ProtoFuncPtrValue => {
                let name = self.manglePrototype (n.getPrototype ());
                format ("TP%_%", name.len, name)
            }
            _ => {
                println (format ("%", value), " ", value::typeinfo.name);
                panic;
            }
        }
    }

    /**
     * Mangle a string value
     * */
    fn mangleString (self, s : &StringValue)-> [c8] {
        let dmut stream = copy StringStream ();
        let recoded = convertStringSliceValue (s.getLoc (), s);
        let utf8 = recoded.getValue ().utf8;
        if (utf8.len <= 10us) {
            stream:.write (format ("s%", utf8.len));
            for i in utf8 {
                stream:.write (i);
            }
            stream[]
        } else {
            use core::types::hash;

            let h = __hash (utf8);
            for i in 0us .. 5us {
                stream:.write (utf8 [i]);
            }
            stream:.write (h);
            for i in utf8.len - 5us .. utf8.len {
                stream:.write (utf8 [i]);
            }
            format ("s%%", stream[].len, stream[])
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          TYPES          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle a type
     * @params:
     *    - type: the type to mangle
     * */
    pub fn mangleType (self, type : &Type, fatherMut : bool)-> [c8] {
        let inner = match type {
            // Scalar
            b : &BoolType       => { self.mangleBoolT (b) }
            c : &CharType       => { self.mangleCharT (c) }
            f : &FloatType      => { self.mangleFloatT (f) }
            i : &IntType        => { self.mangleIntT (i) }
            v : &VoidType       => { self.mangleVoidT (v) }

            // Compound
            c : &ClassPtrType   => { self.mangleClassPtrT (c, fatherMut && type.isMutable ()) }
            a : &ArrayType      => { self.mangleArrayT (a, fatherMut && type.isMutable ()) }
            p : &PointerType    => { self.manglePointerT (p, fatherMut && type.isMutable ()) }
            r : &RangeType      => { self.mangleRangeT (r, fatherMut && type.isMutable ()) }
            s : &SliceType      => { self.mangleSliceT (s, fatherMut && type.isMutable ()) }
            t : &TupleType      => { self.mangleTupleT (t, fatherMut && type.isMutable ()) }
            o : &OptionType     => { self.mangleOptionT (o, fatherMut && type.isMutable ()) }
            m : &MapType        => { self.mangleMapT (m, fatherMut && type.isMutable ()) }

            // Custom
            e : &EnumType       => { self.mangleEnumT (e) }
            t : &TraitRefType   => { self.mangleTraitRefT (t) }
            d : &DelegateType   => { self.mangleDelegateT (d) }
            f : &FuncPtrType    => { self.mangleFuncPtrT (f) }
            _ : &NoneType       => { return ""; }
            _                   => panic;
        };

        if (fatherMut && type.isMutable ()) {
            format ("x%", inner)
        } else {
            inner
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          CUSTOM TYPES          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle an enumeration type
     * */
    fn mangleEnumT (self, en : &EnumType)-> [c8] {
        self.manglePath (en.getSymbol ().getPath ())
    }

    /**
     * Mangle a trait ref type
     * */
    fn mangleTraitRefT (self, tr : &TraitRefType)-> [c8] {
        self.manglePath (tr.getSymbol ().getPath ())
    }

    /**
     * Mangle a function pointer type
     * */
    fn mangleFuncPtrT (self, fptr : &FuncPtrType)-> [c8] {
        let dmut stream = copy StringStream ();
        let mgl = self.mangleType (fptr.getRetType (), fatherMut-> true);
        stream:.write (mgl.len, mgl);

        for i, t in fptr.getParameters () {
            let mgl_ = if (fptr.getReferences ()[i]) {
                format ("R%", self.mangleType (t, fatherMut-> true))
            } else if (fptr.getLazys () [i]) {
                format ("L%", self.mangleType (t, fatherMut-> true))
            } else {
                self.mangleType (t, fatherMut-> true)
            };

            stream:.write (mgl_.len, mgl_);
        }

        format ("FP%%", stream[].len, stream[])
    }

    /**
     * Mangle a delegate type
     * */
    fn mangleDelegateT (self, dl : &DelegateType)-> [c8] {
        let dmut stream = copy StringStream ();
        let mgl = self.mangleType (dl.getRetType (), fatherMut-> true);
        stream:.write (mgl.len, mgl);

        for i, t in dl.getParameters () {
            let mgl_ = if (dl.getReferences ()[i]) {
                format ("R%", self.mangleType (t, fatherMut-> true))
            } else if (dl.getLazys () [i]) {
                format ("L%", self.mangleType (t, fatherMut-> true))
            } else {
                self.mangleType (t, fatherMut-> true)
            };

            stream:.write (mgl_.len, mgl_);
        }

        format ("DG%%", stream[].len, stream[])
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          SCALAR TYPES          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle a bool type
     * */
    fn mangleBoolT (self, _ : &BoolType)-> [c8] {
        "b"
    }

    /**
     * Mangle a char type
     * */
    fn mangleCharT (self, c : &CharType)-> [c8] {
        format ("c%", c.getSize ())
    }

    /**
     * Mangle a float type
     * */
    fn mangleFloatT (self, f : &FloatType)-> [c8] {
        if (f.getSize () == 0us) {
            return NativeTypes::REAL;
        }
        format ("f%", f.getSize ())
    }

    /**
     * Mangle an int type
     * */
    fn mangleIntT (self, i : &IntType)-> [c8] {
        if (i.getSize () == 0u16) {
            if i.isSigned () {
                "isize"
            } else {
                "usize"
            }
        } else {
            if i.isSigned () {
                format ("i%", i.getSize ())
            } else {
                format ("u%", i.getSize ())
            }
        }
    }

    /**
     * Mangle a void type
     * */
    fn mangleVoidT (self, _ : &VoidType)-> [c8] {
        "v"
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          COMPOUND TYPES          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle an array type
     * */
    fn mangleArrayT (self, a : &ArrayType, isMutable : bool)-> [c8] {
        let inner = self.mangleType (a.getInners ()[0], fatherMut-> isMutable);
        format ("A%_%%", a.getLen (), inner.len, inner)
    }

    /**
     * Mangle a pointer type
     * */
    fn manglePointerT (self, p : &PointerType, isMutable : bool)-> [c8] {
        let inner = self.mangleType (p.getInners ()[0], fatherMut-> isMutable);
        format ("P%%", inner.len, inner)
    }

    /**
     * Mangle a range type
     * */
    fn mangleRangeT (self, rng : &RangeType, isMutable : bool)-> [c8] {
        let inner = self.mangleType (rng.getInners ()[0], fatherMut-> isMutable);
        format ("R%%", inner.len, inner)
    }


    /**
     * Mangle a class ptr type
     * */
    fn mangleClassPtrT (self, cptr : &ClassPtrType, isMutable : bool)-> [c8] {
        let path = self.manglePath (cptr.getSymbol ().getPath ());
        if (cptr.getSymbol ().isStruct ()) {
            format ("%%", path.len, path)
        } else {
            let res = if (cptr.isDeeplyMutable () && isMutable) { format ("x%", path) } else { path };
            format ("P%%", res.len, res)
        }
    }

    /**
     * Mangle a slice type
     * */
    fn mangleSliceT (self, slc : &SliceType, isMutable : bool)-> [c8] {
        let inner = self.mangleType (slc.getInners ()[0], fatherMut-> isMutable);
        format ("S%%", inner.len, inner)
    }

    /**
     * Mangle an option type
     * */
    fn mangleOptionT (self, o : &OptionType, isMutable : bool)-> [c8] {
        let inner = self.mangleType (o.getInners ()[0], fatherMut-> isMutable);
        format ("O%%", inner.len, inner)
    }

    /**
     * Mangle a tuple type
     * */
    fn mangleTupleT (self, tu : &TupleType, isMutable : bool)-> [c8] {
        let dmut stream = copy StringStream ();
        for i in tu.getInners () {
            let mgl = self.mangleType (i, fatherMut-> isMutable);
            stream:.write (mgl.len, mgl);
        }

        format ("T%%", stream[].len, stream[])
    }

    /**
     * Mangle a map type
     * */
    fn mangleMapT (self, m : &MapType, isMutable : bool)-> [c8] {
        let inner = format ("%_%", self.mangleType (m.getInners ()[0], fatherMut-> isMutable),
                            self.mangleType (m.getInners ()[1], fatherMut-> isMutable));

        format ("MP%%", inner.len, inner)
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          VTABLE/TYINFO          ==================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle the name of the vtable of a class ref
     * */
    pub fn mangleVtable (self, cl : &ClassRefType)-> [c8] {
        format ("%%%", YmirMangleCsts::PREFIX, self.manglePath (cl.getSymbol ().getPath ()), YmirMangleCsts::VTABLE)
    }

    /**
     * Mangle the name of the map info of a map type
     * */
    pub fn mangleMapInfo (self, m : &MapType)-> [c8] {
        format ("%%%",
                YmirMangleCsts::PREFIX,
                self.mangleType (m, fatherMut-> false),
                YmirMangleCsts::MAPINFO)
    }

    /**
     * @returns: the mangled name of the typeinfo of a class
     * */
    pub fn mangleTypeInfo (self, cl : &ClassRefType)-> [c8] {
        format ("%%%", YmirMangleCsts::PREFIX, self.manglePath (cl.getSymbol ().getPath ()), YmirMangleCsts::TYPEINFO)
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          PROTOTYPES          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle a prototype value
     * */
    pub fn manglePrototype (self, proto : &PrototypeValue)-> [c8] {
        let fnName = match proto {
            m : &MethodPrototypeValue => {
                return self.mangleMethodPrototype (m);
            }
            n : &NamePrototypeValue => {
                self.manglePath (n.getName ())
            }
            _ => {
                let path = match proto.getTemplateMapper () {
                    Ok (tmps : _) => { proto.getSymbol ().getPath ().withTemplates (tmps?) }
                    _ => { proto.getSymbol ().getPath () }
                };

                self.manglePath (path)
            }
        };

        if (proto.getSymbol ().getExternalLanguage () == Keys::CLANG) {
            return proto.getSymbol ().getPath ().asStdPath ().file ();
        }

        let dmut stream = copy StringStream ();
        stream:.write (YmirMangleCsts::PREFIX,
                       fnName,
                       YmirMangleCsts::FUNCTION);

        for pv in proto.getParameters () {
            let t = if (pv.isReference ()) {
                format ("R%", self.mangleType (pv.getType (), fatherMut-> true))
            } else if (pv.isLazy ()) {
                format ("L%", self.mangleType (pv.getType (), fatherMut-> true))
            } else {
                self.mangleType (pv.getType (), fatherMut-> true)
            }
            stream:.write (t);
        }

        stream:.write (YmirMangleCsts::FUNCTION_RET, self.mangleType (proto.getRetType (), fatherMut-> true));
        stream[]
    }

    /**
     * Mangle a method prototype value
     * */
    fn mangleMethodPrototype (self, proto : &MethodPrototypeValue)-> [c8] {
        let dmut stream = copy StringStream ();

        let path = match proto.getTemplateMapper () {
            Ok (tmps : _) => { proto.getSymbol ().getPath ().withTemplates (tmps?) }
            _ => { proto.getSymbol ().getPath () }
        };

        let fnName = self.manglePath (path);
        let prefix = match proto {
            CtorPrototypeValue () => { YmirMangleCsts::CTOR }
            DtorPrototypeValue () => { YmirMangleCsts::DTOR }
            _ => { YmirMangleCsts::METHOD }
        }

        stream:.write (YmirMangleCsts::PREFIX,
                       fnName,
                       prefix);

        let clPath = self.manglePath (proto.getClassRef ().getSymbol ().getPath ());
        if (proto.getClassRef ().isStruct ()) {
            if (proto.isMutable ()) {
                stream:.write (format ("Rx%%", clPath.len, clPath));
            } else {
                stream:.write (format ("R%%", clPath.len, clPath));
            }
        } else {
            if (proto.isMutable ()) {
                stream:.write (format ("xP%x%", clPath.len + 1us, clPath));
            } else {
                stream:.write (format ("P%%", clPath.len, clPath));
            };
        }


        for pv in proto.getParameters () {
            let t = if (pv.isReference ()) {
                format ("R%", self.mangleType (pv.getType (), fatherMut-> true))
            } else if (pv.isLazy ()) {
                format ("L%", self.mangleType (pv.getType (), fatherMut-> true))
            } else {
                self.mangleType (pv.getType (), fatherMut-> true)
            }
            stream:.write (t);
        }

        stream:.write (YmirMangleCsts::FUNCTION_RET, self.mangleType (proto.getRetType (), fatherMut-> true));
        stream[]
    }

    /**
     * Mangle the name of a frame generator
     * @params:
     *     - frame: the frame to mangle
     * */
    pub fn mangleFrame (self, frame : &FrameGenerator)-> [c8] {
        if (frame.getExternalLang () == Keys::CLANG) {
            return frame.getName ().asStdPath ().file ();
        }

        let prefix = match frame.getKind () {
            FrameKind::METHOD => { YmirMangleCsts::METHOD }
            FrameKind::CTOR => { YmirMangleCsts::CTOR }
            FrameKind::DTOR => { YmirMangleCsts::DTOR }
            _ => { YmirMangleCsts::FUNCTION }
        };

        let dmut stream = copy StringStream ();
        stream:.write (YmirMangleCsts::PREFIX,
                       self.manglePath (frame.getName ()),
                       prefix);

        for pv in frame.getParameters () {
            let t = if (pv.isReference ()) {
                format ("R%", self.mangleType (pv.getType (), fatherMut-> true))
            } else if (pv.isLazy ()) {
                format ("L%", self.mangleType (pv.getType (), fatherMut-> true))
            } else {
                self.mangleType (pv.getType (), fatherMut-> true)
            }
            stream:.write (t);
        }

        stream:.write (YmirMangleCsts::FUNCTION_RET, self.mangleType (frame.getReturnType (), fatherMut-> true));
        stream[]
    }

    /**
     * Mangle the name of a unit test
     * @params:
     *    - u : the unit test to mangle
     * */
    pub fn mangleUnitTest (self, u : &UnitTestGenerator)-> [c8] {
        let dmut stream = copy StringStream ();
        stream:.write (YmirMangleCsts::PREFIX,
                       self.manglePath (u.getName ()),
                       YmirMangleCsts::TEST);

        stream[]
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =============================          GLOBAL VARS AND CONSTS          =============================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle the name of a global variable generator
     * @params:
     *     - gv: the global var to mangle
     * */
    pub fn mangleGlobalVar (self, gv : &GlobalVarGenerator)-> [c8] {
        if (gv.getExternalLang () == Keys::CLANG) {
            return gv.getName ().asStdPath ().file ();
        }

        let dmut stream = copy StringStream ();
        stream:.write (YmirMangleCsts::PREFIX,
                       self.manglePath (gv.getName ()),
                       YmirMangleCsts::VAR);

        stream[]
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          PATH          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle a path
     * */
    pub fn manglePath (self, path : &SymbolPath)-> [c8] {
        let dmut buf = copy StringStream ();
        let templates = path.templates ();
        for i, f in path.parts () {
            buf:.write (f.len, f);
            match templates [i] {
                Ok (tmp : _) => {
                    buf:.write (self.mangleTemplates (tmp));
                }
            }
        }

        buf[]
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==============================          TEMPLATE PARAMETERS          ===============================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Mangle a template mapper
     * */
    fn mangleTemplates (self, templates : &TemplateMapper)-> [c8] {
        let dmut stream = copy StringStream ();
        let tmps = templates.getMapping ();
        for name in templates.getNameOrder () {
            match tmps.find (name) {
                Ok (expr : &ValueWrapperExpr) => {
                    stream:.write (format ("N%", self.mangleValue (expr.getValue ())));
                }
                Ok (expr : &TypeWrapperExpr) => {
                    let mutability = if (name in templates.getMutables ()) {
                        "m"
                    } else if (name in templates.getDeeplyMutables ()) {
                        "dm"
                    } else { "" };

                    stream:.write (format ("N%%", mutability, self.mangleType (expr.getType (), fatherMut-> true)));
                }
                Ok (exprs : &TypeListWrapperExpr) => {
                    let mutability = if (name in templates.getMutables ()) {
                        "m"
                    } else if (name in templates.getDeeplyMutables ()) {
                        "dm"
                    } else { "" };

                    let dmut innerStream = copy StringStream ();
                    for e in exprs.getTypes () {
                        innerStream:.write (format ("N%", self.mangleType (e, fatherMut-> true)));
                    }
                    stream:.write (format ("L%N%%", innerStream[].len, mutability, innerStream[]));
                }
                x : _ => {
                    println (x);
                    panic;
                }
            }
        }

        stream[]
    }

}
