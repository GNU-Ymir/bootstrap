in native;

pub mod ::compound;
pub mod ::scalar;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

pub enum
| BOOL  = "bool"
| C16   = "c16"
| C32   = "c32"
| C8    = "c8"
| DG    = "dg"
| ERROR = "error"
| F32   = "f32"
| F64   = "f64"
| F80   = "f80"
| FN    = "fn"
| I16   = "i16"
| I32   = "i32"
| I64   = "i64"
| I8    = "i8"
| ISIZE = "isize"
| NONE  = "none"
| REAL  = "fsize"
| U16   = "u16"
| U32   = "u32"
| U64   = "u64"
| U8    = "u8"
| USIZE = "usize"
| VOID  = "void"
 -> NativeTypes;


/**
 * A native type is a type that is defined by the language itself
 */
@abstract
pub class NativeType over Type {

    pub self (loc : &Word, isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
    {}

    impl Streamable;
    impl Formattable;
}
