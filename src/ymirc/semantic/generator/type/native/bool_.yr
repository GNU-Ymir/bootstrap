mod ymirc::semantic::generator::type::native::bool_;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

/**
 * Bool type
 */
pub class BoolType over NativeType {
    
    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, isMutable : bool = false) with super (loc, isMutable-> isMutable) {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            BoolType () => { true }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, isMutable : bool)-> &Type {
        BoolType::new (self._loc, isMutable-> isMutable)
    }
    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (NativeTypes::BOOL);
        }                
    }
    
}
