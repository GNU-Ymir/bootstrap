in compound;

pub mod ::array;
pub mod ::future_;
pub mod ::map;
pub mod ::option;
pub mod ::pointer;
pub mod ::range;
pub mod ::slice;
pub mod ::tuple;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;

/**
 * A native type is a type that is defined by the language itself
 */
@abstract
pub class CompoundType over NativeType {

    // The sub types of the type
    let _inners : [&Type];

    pub self (loc : &Word, inners : [&Type], isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _inners = inners
    {}

    /*!
        * ================================================================================
        * ================================================================================
        * =========================           GETTERS            =========================
        * ================================================================================
        * ================================================================================
        */

    /**
     * @returns: the inner type of the compound type
     */
    pub fn getInners (self)-> [&Type] {
        self._inners
    }

    /**
     * @returns: the location of the field that generate implicit alias
     */
    pub fn getExplicitAliasFieldLoc (self)-> (&Type, &Word) {
        (self, self._loc)
    }

    pub over isAddressable (self)-> bool {
        for i in self._inners {
            if !i.isAddressable () return false;
        }

        true
    }

    impl Streamable;
    impl Formattable;

}
