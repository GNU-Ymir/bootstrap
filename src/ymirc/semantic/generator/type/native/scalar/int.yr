mod ymirc::semantic::generator::type::native::scalar::int;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::base;
import ymirc::semantic::generator::type::native::scalar::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::utils::format;
import ymirc::syntax::keys;

import std::io;

/**
 * Int type
 */
pub class IntType over ScalarType {

    /// The size of the int in bits
    let _size : u16;

    /// True iif the int has a bit for sign
    let _signed : bool;
    
    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, size : u16 = 32u16, signed : bool = true, isMutable : bool = false)
        with super (loc, isMutable-> isMutable), _size = size, _signed = signed
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            x : &IntType => { x._size == self._size && x._signed == self._signed }
            _ => { false }
        }
    }
    
    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the size of the int in bits
     */
    pub fn getSize (self)-> u16 {
        self._size
    }

    /**
     * @returns: true iif the type is signed
     */
    pub fn isSigned (self)-> bool {
        self._signed
    } 

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        if (self._isMutable && mutLevel != 0u32) {
            self
        } else {
            IntType::new (self._loc, size-> self._size, signed-> self._signed, isMutable-> (mutLevel != 0u32))
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            if self._signed {
                match self._size {
                    8u32 => stream:.write (NativeTypes::I8);
                    16u32 => stream:.write (NativeTypes::I16);
                    32u32 => stream:.write (NativeTypes::I32);
                    64u32 => stream:.write (NativeTypes::I64);
                    _ => stream:.write (NativeTypes::ISIZE);
                }
            } else {
                match self._size {
                    8u32 => stream:.write (NativeTypes::U8);
                    16u32 => stream:.write (NativeTypes::U16);
                    32u32 => stream:.write (NativeTypes::U32);
                    64u32 => stream:.write (NativeTypes::U64);
                    _ => stream:.write (NativeTypes::USIZE);
                }
            };
        }                
    }
    
}
