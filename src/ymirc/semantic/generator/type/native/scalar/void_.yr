mod ymirc::semantic::generator::type::native::scalar::void_;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::base;
import ymirc::semantic::generator::type::native::scalar::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::utils::format;
import ymirc::syntax::keys;

import std::io;


pub static VOID_TYPE = VoidType::new (loc-> Word::eof ());


/**
 * Void type
 */
pub class VoidType over ScalarType {

    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word) with super (loc) {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            VoidType () => { true }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : u32)-> &Type {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (NativeTypes::VOID);
        }                
    }
    
}
