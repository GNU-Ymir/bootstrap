in fptr;

use ymirc::lexing::word;
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

/**
 * FuncPtr type
 */
@final
pub class FuncPtrType over ScalarType {

    // The list of parameters that are references
    let _references : [bool];

    // The list of parameters that are lazy
    let _lazys : [bool];
    
    // The parameters of the function pointer
    let _parameters : [&Type];

    // The return type of the function pointer
    let _retType : &Type;
        
    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, references : [bool], lazys : [bool], parameters : [&Type], retType : &Type, isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _references = references
        , _lazys = lazys
        , _parameters = parameters
        , _retType = retType
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &FuncPtrType => {
                if (self._parameters.len != p._parameters.len) return false;
                if (self._retType != p._retType) return false;
                for i in 0us .. self._parameters.len {
                    if (self._parameters [i] != p._parameters [i]) return false;
                    if (!self._parameters [i].sameMutability (p._parameters [i])) return false;
                }

                if (self._references != p._references) return false;
                if (self._lazys != p._lazys) return false;

                true
            }
            _ => { false }
        }
    }


    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        if (borrowed) {
            if (self._isMutable && !o._isMutable) return 1u32;
        }

        0u32
    }

    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        if (borrowed) {
            return 2u32;
        }

        1u32
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, level : u32)-> &Type {
        return copy FuncPtrType (self._loc, self._references, self._lazys, self._parameters, self._retType, isMutable-> (level != 0u32));
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * @returns: the parameters that are references (one value per type)
     */
    pub fn getReferences (self)-> [bool] {
        self._references
    }

    /**
     * @returns: the parameters that are lazy (one value per type)
     * */
    pub fn getLazys (self)-> [bool] {
        self._lazys
    }
    
    /**
     * @returns: the parameters of the function pointer
     */
    pub fn getParameters (self)-> [&Type] {
        self._parameters
    }

    /**
     * @returns: the return type of the function pointer
     */
    pub fn getRetType (self)-> &Type {
        self._retType
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' ');
            stream:.write (NativeTypes::FN, " ("s8);
            for i, j in self._parameters {
                if (i != 0us) stream:.write (", "s8);
                if (self._references [i]) stream:.write (Keys::REF, ' ');
                else if (self._lazys [i]) stream:.write (Keys::LAZY, ' ');

                j.format (alias stream);
            }
            stream:.write (")-> "s8);
            self._retType.format (alias stream);
        }                
    }
    
}
