in char;

use ymirc::lexing::word;
use ymirc::utils::format;
use ymirc::syntax::keys;

use std::stream;

/**
 * Char type
 */
@final
pub class CharType over ScalarType {

    // The size of the char in bits
    let _size : u16;
    
    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, size : u16 = 8u16, isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _size = size
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            x : &CharType => { x._size == self._size }
            _ => { false }
        }
    }


    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the size of the char in bits
     */
    pub fn getSize (self)-> u16 {
        self._size
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        if (self._isMutable && mutLevel != 0u32) {
            self
        } else {
            CharType::new (self._loc, size-> self._size, isMutable-> (mutLevel != 0u32))
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' ');
            if self._size == 8u16 {
                stream:.write (NativeTypes::C8);
            } else if (self._size == 16u16) {
                stream:.write (NativeTypes::C16);
            } else
                stream:.write (NativeTypes::C32);
        }                
    }
    
}
