mod ymirc::semantic::generator::type::native::base;

import ymirc::semantic::generator::type::base;
import ymirc::lexing::word;
import ymirc::utils::format;
import std::io;
import std::net::packet;

pub enum
| BOOL  = "bool"s8
| C16  = "c16"s8
| C32  = "c32"s8
| C8   = "c8"s8
| DG    = "dg"s8
| ERROR = "error"s8
| F32   = "f32"s8
| F64   = "f64"s8
| F80   = "f80"s8
| FN    = "fn"s8
| I16   = "i16"s8
| I32   = "i32"s8
| I64   = "i64"s8
| I8   = "i8"s8
| ISIZE = "isize"s8
| NONE = "none"s8
| REAL  = "fsize"s8
| U16   = "u16"s8
| U32   = "u32"s8
| U64   = "u64"s8
| U8   = "u8"s8
| USIZE = "usize"s8
| VOID = "void"s8
 -> NativeTypes;


/**
 * A native type is a type that is defined by the language itself
 */
pub class @abstract NativeType over Type {

    pub self (loc : &Word, isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
    {}

    pub over toDeeplyMutable (self)-> &Type {
        self.clone (1u32)
    }

    impl Streamable;
    impl Formattable;
}
