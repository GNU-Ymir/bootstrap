mod ymirc::semantic::generator::type::native::delegate;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

/**
 * Delegate type
 */
pub class DelegateType over NativeType {

    /// The parameters of the function pointer
    let _parameters : [&Type];

    /// The return type of the function pointer
    let _retType : &Type;
        
    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, parameters : [&Type], retType : &Type) with super (loc, isMutable-> false), _parameters = parameters, _retType = retType {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &DelegateType => {
                if (self._parameters.len != p._parameters.len) return false;
                if (self._retType != p._retType) return false;
                for i in 0us .. self._parameters.len {
                    if (self._parameters [i] != p._parameters [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : bool)-> &Type {
        self
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the parameters of the function pointer
     */
    pub def getParameters (self)-> [&Type] {
        self._parameters
    }

    /**
     * @returns: the return type of the function pointer
     */
    pub def getRetType (self)-> &Type {
        self._retType
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {            
            stream:.write (NativeTypes::FN, '('c8);
            for i, j in self._parameters {
                if (i != 0us) stream:.write (", "s8);
                j.format (alias stream);
            }
            stream:.write (")-> "s8);
            self._retType.format (alias stream);
        }                
    }
    
}
