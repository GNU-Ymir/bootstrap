mod ymirc::semantic::generator::type::native::compound::slice;

import ymirc::semantic::generator::type::native::compound::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::type::native::scalar::void_;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;
import ymirc::syntax::keys;

import std::io;

import ymirc::errors::message;
import ymirc::semantic::validator::errors;


/**
 * Slice type
 */
pub class SliceType over CompoundType {

    // generally empty, but written if cte
    let _size : &Value;

    /**
     * @params: 
     *    - loc: the location of the type
     *    - inner: the inner type of the slice
     */
    pub self (loc : &Word, inner : &Type, isMutable : bool = false, withSize : &Value = UNIT_VALUE)
        with super (loc, inners-> [inner], isMutable-> isMutable)
        , _size = withSize

        throws &ErrorMsg
    {
        if inner.isMovable () {
            throw ErrorMsg::fatal (loc, end-> inner.getLoc (), format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE, inner),
                                   notes-> [ErrorMsg::note (loc, format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE_NOTE), oneLine-> true)]);
        }
    }

    /*!
     * =============================================================================
     * =============================================================================
     * =========================          GETTERS          =========================
     * =============================================================================
     * =============================================================================
     */

    /**
     * @returns: the size of the slice if cte (UNIT_VALUE otherwise)
     * @info: generally not cte, or created from string value, it does not survive copy of the type
     * */
    pub fn getSize (self)-> &Value {
        self._size
    }


    pub over isDeeplyMutable (self)-> bool {
        if (!self._isMutable) {
            false
        } else {
            self._inners [0].isDeeplyMutable ()
        }
    }

    pub over needExplicitAlias (self)-> bool {
        if (!self._isMutable) {
            false // [T] no change of borrow
        } else {
            self._inners [0]._isMutable // if mut [mut T], borrow can change, but if mut [T] then it cannot
        }
    }

    pub over borrowDatas (self)-> bool {
        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &SliceType => {
                self._inners [0us] == s._inners [0us]            
            }           
            _ => { false }
        }        
    }
        
    pub over isCompatible (self, o : &Type)-> bool {
        match o {
            s : &SliceType => {
                match s._inners [0us] {
                    VoidType () => { true }
                    i : _ => {
                        self._inners [0us].isCompatible (i)
                    }
                }
            }
            _ => { false }
        }
    }

    pub over mutabilityFit (self, o : &Type, borrowed : bool)-> bool {
        match o {
            s : &SliceType => {
                if (!s._isMutable) return true;
                match (self._inners [0], s._inners [0]) {  // [] => anything, anything => [] is always ok
                    (VoidType (), VoidType ()) => return true;
                }

                if (borrowed && !self._isMutable) return false;
                return self._inners [0].mutabilityFit (s._inners [0], borrowed-> true);
            }
            _ => __pragma!panic ();
        }
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        match o {
            s : &SliceType => {
                if (!self._isMutable) return 0u32; // there are not mut, so no change possible
                let inner = self._inners [0].mutabilityDistance (s._inners[0], borrowed-> true);

                if (borrowed && !s._isMutable) { 1u32 + inner } // self.inner is mut, but not in other so there is a change
                else { inner } // other inner is also mut, so no change observed in this specific slice, but maybe in inner T
            }
            _ => __pragma!panic ();
        }
    }

    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        let inner = self._inners [0].maxMutabilityDistance (borrowed-> true);
        if (borrowed) {
            1u32 + inner
        } else {
            inner
        }
    }

    pub over sameMutability (self, o : &Type)-> bool {
        match o {
            s : &SliceType => {
                if (self._isMutable != o._isMutable) return false;
                return self._inners [0us].sameMutability (s._inners [0us]);
            }
        }

        __pragma!panic ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        let innerLevel = if (mutLevel >= 1u32) { mutLevel - 1u32 } else { 0u32 };

        {
            SliceType::new (self._loc, self._inners [0us].clone (innerLevel), isMutable-> (mutLevel != 0u32))
        } catch {
            _ => __pragma!panic ();
        }
    }

    pub over clone (self, pattern : &Type)-> &Type {
        match pattern {
            s : &SliceType => {
                let inner = self._inners [0].clone (s._inners [0]);
                {
                    SliceType::new (self._loc, inner, isMutable-> s._isMutable)
                } catch {
                    _ => __pragma!panic ();
                }
            }
            _ => __pragma!panic ();
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        {
            SliceType::new (self._loc, self._inners [0us].toDeeplyMutable (), isMutable-> true)
        } catch {
            _ => __pragma!panic ();
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (Tokens::LCRO);
            self._inners [0us].format (alias stream);
            stream:.write (Tokens::RCRO);
        }                
    }
    
}
