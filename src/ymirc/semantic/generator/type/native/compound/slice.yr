mod ymirc::semantic::generator::type::native::compound::slice;

import ymirc::semantic::generator::type::native::compound::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::void_;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;
import ymirc::syntax::keys;

import std::io;


/**
 * Slice type
 */
pub class SliceType over CompoundType {

    /**
     * @params: 
     *    - loc: the location of the type
     *    - inner: the inner type of the slice
     */
    pub self (loc : &Word, inner : &Type, isMutable : bool = false) with super (loc, inners-> [inner], isMutable-> isMutable) {
        self._mutabilityLevel = if (isMutable) {
            1u32 + inner._mutabilityLevel
        } else { 0u32 };

        self._needExplicitAlias = true;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &SliceType => {
                self._inners [0us] == s._inners [0us]            
            }           
            _ => { false }
        }        
    }
        
    pub over isCompatible (self, o : &Type)-> bool {
        match o {
            s : &SliceType => {
                match s._inners [0us] {
                    VoidType () => { true }
                    i : _ => {
                        self._inners [0us].isCompatible (i)
                    }
                }
            }
            _ => { false }
        }
    }

    pub over borrowDatas (self)-> bool {
        true
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        let innerLevel = if (mutLevel >= 1u32) { mutLevel - 1u32 } else { 0u32 };

        SliceType::new (self._loc, self._inners [0us].clone (innerLevel), isMutable-> (mutLevel != 0u32))
    }

    prot over clone (self, isMutable : bool, inners : [&Type])-> &Type {
        SliceType::new (self._loc, inners [0us], isMutable-> isMutable)
}

    pub over toDeeplyMutable (self)-> &Type {
        SliceType::new (self._loc, self._inners [0us].toDeeplyMutable (), isMutable-> true)
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (Tokens::LCRO);
            self._inners [0us].format (alias stream);
            stream:.write (Tokens::RCRO);
        }                
    }
    
}
