mod ymirc::semantic::generator::type::native::compound::array;

import ymirc::semantic::generator::type::native::compound::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::literal::int;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;
import ymirc::syntax::keys;

import std::io;


/**
 * Array type, unlike slice arrays have a cte size
 */
pub class ArrayType over CompoundType {

    /// The size of the array
    let _len : usize;
    
    /**
     * @params: 
     *    - loc: the location of the type
     *    - inner: the inner type of the array
     *    - size: the size of the array
     */
    pub self (loc : &Word, inner : &Type, len : usize, isMutable : bool = false)
        with super (loc, inners-> [inner], isMutable-> isMutable)
        , _len = len
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
 */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &ArrayType => {
                if (self._len != s._len) return false;
                if (self._inners [0us] != s._inners [0us]) return false;

                true
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        match o {
            s : &ArrayType => {
                if (self._len != s._len) return false;
                if (!self._inners [0us].isCompatible (s._inners [0us])) return false;

                true
            }
            _ => {
                false
            }
        }
    }

    pub over mutabilityFit (self, o : &Type, borrowed : bool)-> bool {
        match o {
            a : &ArrayType => {
                if (!a._isMutable) return true;
                if (borrowed && !self._isMutable) return false;

                return self._inners [0us].mutabilityFit (a._inners [0us], borrowed-> borrowed);
            }
            _ => __pragma!panic ();
        }
    } 

    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        match o {
            a : &ArrayType => {
                if (!self._isMutable) return 0u32;
                let inner = self._inners [0us].mutabilityDistance (a._inners [0us], borrowed-> borrowed);
                if (borrowed && !a._isMutable) {
                    1u32 + inner
                } else {
                    inner
                }
            }
            _ => {
                eprintln (o);
                __pragma!panic ();
            }
        }
    }

    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        let inner = self._inners [0us].maxMutabilityDistance (borrowed-> borrowed);
        if (borrowed) {
            1u32 + inner
        } else {
            inner
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
 */

    /**
     * @returns: the size of the array
     */
    pub fn getLen (self)-> usize {
        self._len
    }

    pub over isDeeplyMutable (self)-> bool {
        if (!self._isMutable) {
            false
        } else {
            self._inners [0].isDeeplyMutable ()
        }
    }

    pub over needExplicitAlias (self)-> bool {
        if (!self._isMutable) {
            false
        } else {
            self._inners [0us].needExplicitAlias ()
        }
    }

    pub over borrowDatas (self)-> bool {
        self._inners [0us].borrowDatas ()
    }

    pub over sameMutability (self, o : &Type)-> bool {
        match o {
            a : &ArrayType => {
                if (self._isMutable != o._isMutable) return false;
                return self._inners [0us].sameMutability (a._inners [0us]);
            }
        }

        __pragma!panic ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
 */

    pub over clone (self, mutLevel : u32)-> &Type {
        let innerLevel = if (mutLevel >= 1u32) { mutLevel - 1u32 } else { 0u32 };
        ArrayType::new (self._loc, self._inners [0us].clone (innerLevel), self._len, isMutable-> (mutLevel != 0u32))
    }

    pub over clone (self, pattern : &Type)-> &Type {
        match pattern {
            a : &ArrayType => {
                let inner = self._inners [0us].clone (a._inners [0us]);
                ArrayType::new (self._loc, inner, self._len, isMutable-> a._isMutable)
            }
            _ => __pragma!panic ();
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        ArrayType::new (self._loc, self._inners [0us].toDeeplyMutable (), self._len, isMutable-> true)
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
 */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (Tokens::LCRO);
            stream:.entabing ();
            self._inners [0us].format (alias stream);
            stream:.write (" ; "s8);
            stream:.write (self._len, "us"s8);
            stream:.detabing ();
            stream:.write (Tokens::RCRO);
        }                
    }
    
}
