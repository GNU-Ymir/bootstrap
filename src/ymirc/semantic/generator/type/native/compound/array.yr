mod ymirc::semantic::generator::type::native::compound::array;

import ymirc::semantic::generator::type::native::compound::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::literal::int;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;


/**
 * Array type, unlike slice arrays have a cte size
 */
pub class ArrayType over CompoundType {

    /// The size of the array
    let _size : &IntValue;
    
    /**
     * @params: 
     *    - loc: the location of the type
     *    - inner: the inner type of the array
     *    - size: the size of the array
     */
    pub self (loc : &Word, inner : &Type, size : &IntValue, isMutable : bool = false) with super (loc, inners-> [inner], isMutable-> isMutable), _size = size {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &ArrayType => { self._inners [0us] == s._inners [0us] }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the size of the array
     */
    pub def getSize (self)-> &IntValue {
        self._size
    }
    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, isMutable : bool)-> &Type {
        ArrayType::new (self._loc, self._inners [0us].clone (false), self._size, isMutable-> isMutable)
    }


    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Tokens::LCRO);
            stream:.entabing ();
            self._inners [0us].format (alias stream);
            stream:.write (" ; "s8);
            self._size.format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::RCRO);
        }                
    }
    
}
