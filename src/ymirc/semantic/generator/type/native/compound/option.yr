mod ymirc::semantic::generator::type::native::compound::option;

import ymirc::semantic::generator::type::native::compound::base;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::type::native::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;
import ymirc::syntax::keys;

import std::io;

/**
 * Option type
 */
pub class OptionType over CompoundType {

    /**
     * @params:
     *    - loc: the location of the type
     *    - inner: the inner type in the option
     * */
    pub self (loc : &Word, inner : &Type, isMutable : bool = false)
        with super (loc, inners-> [inner], isMutable-> isMutable)
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    pub over isDeeplyMutable (self)-> bool {
        if (!self._isMutable) {
            false
        } else {
            self._inners [0us].isDeeplyMutable ()
        }
    }

    pub over needExplicitAlias (self)-> bool {
        if (!self._isMutable) {
            false
        } else {
            self._inners [0us].needExplicitAlias ()
        }
    }

    pub over borrowDatas (self)-> bool {
        self._inners [0us].borrowDatas ()
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &OptionType => { self._inners [0us] == s._inners [0us] }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        match o {
            s : &OptionType => { self._inners [0us].isCompatible (s._inners [0us]) }
            _ => { false }
        }
    }


    pub over mutabilityFit (self, o : &Type, borrowed : bool)-> bool {
        match o {
            s : &OptionType => {
                if (!s._isMutable) return true;
                match (s._inners [0], self._inners [0]) { // none => anything, anything => none is always ok
                    (NoneType (), NoneType ()) => { return true; }
                }

                if (borrowed && !self._isMutable) return false;
                return self._inners [0us].mutabilityFit (s._inners [0us], borrowed-> borrowed);
            }
            _ => { __pragma!panic (); }
        }
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        match o {
            a : &OptionType => {
                if (!self._isMutable) return 0u32;

                let inner = self._inners [0us].mutabilityDistance (a._inners [0us], borrowed-> borrowed);
                if (borrowed && !a._isMutable) {
                    1u32 + inner
                } else { inner }
            }
            _ => __pragma!panic ();
        }
    }

    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        let inner = self._inners [0us].maxMutabilityDistance (borrowed-> borrowed);
        if (borrowed) {
            1u32 + inner
        } else {
            inner
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        let innerLevel = if (mutLevel >= 1u32) {
            mutLevel - 1u32
        } else { 0u32 };

        OptionType::new (self._loc, self._inners [0us].clone (innerLevel), isMutable-> (mutLevel != 0u32))
    }

    pub over clone (self, pattern : &Type)-> &Type {
        match pattern {
            a : &OptionType => {
                let inner = self._inners [0us].clone (a._inners [0us]);

                OptionType::new (self._loc, inner, isMutable-> pattern._isMutable)
            }
            _ => __pragma!panic ();
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        OptionType::new (self._loc, self._inners [0us].toDeeplyMutable (), isMutable-> true)
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (Tokens::LPAR);
            stream:.entabing ();
            self._inners [0us].format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::RPAR, Tokens::INTEG);
        }
    }


}
