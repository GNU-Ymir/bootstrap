in tuple;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;
use ymirc::errors::message;
use ymirc::semantic::validator::errors;

/**
 * Tuple type
 */
@final
pub class TupleType over CompoundType {

    /**
     * @params: 
     *    - loc: the location of the type
     *    - inner: the inner type of the tuple
     */
    pub self (loc : &Word, inners : [&Type], isMutable : bool = false)
        with super (loc, inners-> inners, isMutable-> isMutable)
        throws ErrorMsg
    {
        for inner in inners {
            if inner.isMovable () {
                throw copy ErrorMsg::fatal (loc, end-> inner.getLoc (), format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE, inner),
                                            notes-> copy [copy ErrorMsg::note (loc, format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE_NOTE), oneLine-> true)]);
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ===========================          GETTERS          ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over isDeeplyMutable (self)-> bool {
        if (!self._isMutable) return false;
        for i in self._inners {
            if (!i.isDeeplyMutable ()) return false;
        }

        true
    }

    pub over needExplicitAlias (self)-> bool {
        if (!self._isMutable) return false;

        for i in self._inners {
            if (i.needExplicitAlias ()) return true;
        }

        false
    }

    pub over borrowDatas (self)-> bool {
        for s in self._inners {
            if s.borrowDatas () { return true; }
        }

        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &TupleType => { self._inners == s._inners }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        match o {
            s : &TupleType => {
                if (self._inners.len != s._inners.len) return false;
                for i in 0us .. self._inners.len {
                    if (!self._inners [i].isCompatible (s._inners [i])) return false;
                }

                true
            }
            _ => {
                false
            }
        }
    }

    pub over mutabilityFit (self, o : &Type, borrowed : bool)-> bool {
        match o {
            t : &TupleType => {
                if (self._inners.len != t._inners.len) panic;
                if (!t._isMutable) return true; // other is const, even if it borrows it is always ok
                if (borrowed && !self._isMutable) return false;

                for i in 0us .. self._inners.len {
                    if (!self._inners [i].mutabilityFit (t._inners [i], borrowed-> borrowed)) return false;
                }

                true
            }
            _ => panic;
        }
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        match o {
            t : &TupleType => {
                if (self._inners.len != t._inners.len) panic;
                let mut sum = 0u32;
                if (borrowed && !t._isMutable) sum = 1u32;

                for i in 0us .. self._inners.len {
                    sum += self._inners [i].mutabilityDistance (t._inners [i], borrowed-> borrowed);
                }

                sum
            }
            _ => panic;
        }
    }


    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        let mut sum = 0u32;
        if (borrowed) sum += 1u32;
        for i in self._inners {
            sum += i.maxMutabilityDistance (borrowed-> borrowed);
        }

        sum
    }

    pub over sameMutability (self, o : &Type)-> bool {
        match o {
            t : &TupleType => {
                if (self._isMutable != o._isMutable) return false;
                for i in 0us .. self._inners.len {
                    if (!self._inners [i].sameMutability (t._inners [i])) return false;
                }

                return true;
            }
        }

        panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        let innerLevel = if (mutLevel >= 1u32) { mutLevel - 1u32 } else { 0u32 };

        let res : [&Type] = copy [i.clone (innerLevel) for i in self._inners];

        {
            copy TupleType (self._loc, res, isMutable-> (mutLevel != 0u32))
        } catch {
            _ => panic;
        }
    }

    pub over clone (self, pattern : &Type)-> &Type {
        match pattern {
            t : &TupleType => {
                if (self._inners.len != t._inners.len) panic;
                let res = copy [self._inners [i].clone (t._inners [i]) for i in 0 .. self._inners.len];

                {
                    copy TupleType (self._loc, res, isMutable-> t._isMutable)
                } catch {
                    _ => panic;
                }
            }
            _ => panic;
        }
    }

    pub over cloneMutableTilBorrow (self)-> &Type {
        let inners = copy [i.cloneMutableTilBorrow () for i in self._inners];

        {
            copy TupleType (self._loc, inners, isMutable-> true)
        } catch {
            _ => panic;
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        let res = copy [i.toDeeplyMutable () for i in self._inners];

        {
            copy TupleType (self._loc, res, isMutable-> true)
        } catch {
            _ => panic;
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Tokens::LPAR);
            for i, j in self._inners {
                if (i != 0us) stream:.write (", ");
                j.format (alias stream);
            }
            if (self._inners.len == 1us) stream:.write (",");
            stream:.write (Tokens::RPAR);
        }                
    }
    
}
