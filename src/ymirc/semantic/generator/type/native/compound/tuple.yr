mod ymirc::semantic::generator::type::native::compound::tuple;

import ymirc::semantic::generator::type::native::compound::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::collection::vec;
import std::io;


/**
 * Tuple type
 */
pub class TupleType over CompoundType {

    /**
     * @params: 
     *    - loc: the location of the type
     *    - inner: the inner type of the tuple
     */
    pub self (loc : &Word, inners : [&Type], isMutable : bool = false) with super (loc, inners-> inners, isMutable-> isMutable) {
        self._mutabilityLevel = if (isMutable) {
            let mut deep = u32::max;
            let mut need = false;
            for i in inners {
                if (i._mutabilityLevel < deep) deep = i._mutabilityLevel;
                if (i._needExplicitAlias) need = true;
            }
            
            self._needExplicitAlias = need;
            1u32 + deep
        } else { 0u32 };        
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &TupleType => { self._inners == s._inners }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        match o {
            s : &TupleType => {
                if (self._inners.len != s._inners.len) return false;
                for i in 0us .. self._inners.len {
                    if (!self._inners [i].isCompatible (s._inners [i])) return false;
                }

                true
            }
            _ => {
                false
            }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        let innerLevel = if (mutLevel >= 1u32) { mutLevel - 1u32 } else { 0u32 };

        let dmut res = Vec!{&Type}::new ();
        for i in self._inners {
            res:.push (i.clone (innerLevel));
        }
        
        TupleType::new (self._loc, res[], isMutable-> (mutLevel != 0u32))
    }

    prot over clone (self, isMutable : bool, inners : [&Type])-> &Type {
        TupleType::new (self._loc, inners, isMutable-> isMutable)
    }

    pub over toDeeplyMutable (self)-> &Type {
        let dmut res = Vec!{&Type}::new ();
        for i in self._inners {
            res:.push (i.toDeeplyMutable ());
        }
        
        TupleType::new (self._loc, res[], isMutable-> true)
    }


    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Tokens::LPAR);
            for i, j in self._inners {
                if (i != 0us) stream:.write (", "s8);
                j.format (alias stream);
            }
            if (self._inners.len == 1us) stream:.write (","s8);
            stream:.write (Tokens::RPAR);
        }                
    }
    
}
