mod ymirc::semantic::generator::type::native::compound::pointer;

import ymirc::semantic::generator::type::native::compound::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;

import std::io;


/**
 * Pointer type
 */
pub class PointerType over CompoundType {

    /**
     * @params: 
     *    - loc: the location of the type
     *    - inner: the inner type of the pointer
     */
    pub self (loc : &Word, inner : &Type) with super (loc, inners-> [inner]) {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &PointerType => { self._inners [0us] == s._inners [0us] }
            _ => { false }
        }
    }

    

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Tokens::AND, Tokens::LPAR);
            self._inners [0us].format (alias stream);
            stream:.write (Tokens::RPAR);
        }                
    }
    
}
