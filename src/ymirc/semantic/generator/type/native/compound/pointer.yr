mod ymirc::semantic::generator::type::native::compound::pointer;

import ymirc::semantic::generator::type::native::compound::base;
import ymirc::semantic::generator::type::native::base;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;
import ymirc::syntax::keys;

import std::io;


/**
 * Pointer type
 */
pub class PointerType over CompoundType {

    /**
     * @params: 
     *    - loc: the location of the type
     *    - inner: the inner type of the pointer
     */
    pub self (loc : &Word, inner : &Type, isMutable : bool = false)
        with super (loc, inners-> [inner], isMutable-> isMutable)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    pub over isDeeplyMutable (self)-> bool {
        if (!self._isMutable) { false }
        else {
            self._inners [0us].isDeeplyMutable ()
        }
    }

    pub over needExplicitAlias (self)-> bool {
        if (!self._isMutable) { false } // *(T) does not mut on inner value
        else {
            self._inners [0us]._isMutable // mut *(mut T), borrow can change
        }
    }

    pub over borrowDatas (self)-> bool {
        true
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &PointerType => { self._inners [0us] == s._inners [0us] }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        match o {
            s : &PointerType => { self._inners [0us].isCompatible (s._inners [0us]) }
            _ => { false }
        }
    }

    pub over mutabilityFit (self, o : &Type, borrowed : bool)-> bool {
        match o {
            s : &PointerType => {
                if (!s._isMutable) return true;
                match (self._inners [0], s._inners [0]) { // null => anything, anything => null is always ok
                    (NoneType (), NoneType ()) => return true;
                }

                if (borrowed && !self._isMutable) return false;
                return self._inners [0us].mutabilityFit (s._inners [0us], borrowed-> true); // other is mut *(mut T), we need to check mutability of T
            }
            _ => __pragma!panic ();
        }
    }


    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        match o {
            s : &PointerType => {
                if (!self._isMutable) return 0u32; // mut *T => anything = 0u32
                let mut inner = self._inners [0us].mutabilityDistance (s._inners [0us], borrowed-> true); // mut *(mut T) => need to have mut T => other.inner [0]

                if (borrowed && !s._isMutable) inner += 1u32;

                inner
            }
            _ => __pragma!panic ();
        }
    }

    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        let inner = self._inners [0us].maxMutabilityDistance (borrowed-> true);
        if (borrowed) {
            1u32 + inner
        } else {
            inner
        }
    }

    pub over sameMutability (self, o : &Type)-> bool {
        match o {
            s : &PointerType => {
                if (self._isMutable != o._isMutable) return false;
                return self._inners [0].sameMutability (s._inners [0us]);
            }
        }

        __pragma!panic ();
    }

    pub over cloneMutableTilBorrow (self)-> &Type {
        self.clone (1u32)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        let innerLevel = if (mutLevel >= 1u32) { mutLevel - 1u32 } else { 0u32 };

        PointerType::new (self._loc, self._inners [0us].clone (innerLevel), isMutable-> (mutLevel != 0u32))
    }

    pub over clone (self, pattern : &Type)-> &Type {
        match pattern {
            s : &PointerType => {
                let inner = self._inners [0us].clone (s._inners [0]);
                PointerType::new (self._loc, inner, isMutable-> s._isMutable)
            }
            _ => __pragma!panic ();
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        PointerType::new (self._loc, self._inners [0us].toDeeplyMutable (), isMutable-> true)
    }
    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (Tokens::STAR);
            if (self._inners [0].isOf!{&NativeType} () && !self._inners [0].isOf!{&CompoundType} () && !self._inners [0].isMutable ()) {
                self._inners [0us].format (alias stream);
            } else {
                stream:.write (Tokens::LPAR);
                if (self._inners [0].isOf!{&NoneType} ()) {
                    stream:.write ("void"s8);
                } else {
                    self._inners [0us].format (alias stream);
                }
                stream:.write (Tokens::RPAR);
            }
        }                
    }
    
}
