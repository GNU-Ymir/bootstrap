in range;

use ymirc::semantic::generator::type::native::scalar::int;
use ymirc::semantic::generator::value::literal::int;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::errors::message;
use ymirc::semantic::validator::errors;


/**
 * Range type
 */
@final
pub class RangeType over CompoundType {
    
    /**
     * @params: 
     *    - loc: the location of the type
     *    - inner: the inner type of the array
     */
    pub self (loc : &Word, inner : &IntType, stepType : &IntType, isMutable : bool)
        with super (loc, inners-> copy [inner.clone (mutLevel-> (if (isMutable) { 1u32 } else { 0u32 })),
                                   stepType.clone (mutLevel-> (if (isMutable) { 1u32 } else { 0u32 }))],
                    isMutable-> isMutable)
        throws ErrorMsg
    {
        if inner.isMovable () {
            throw copy ErrorMsg::fatal (loc, end-> inner.getLoc (), format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE, inner),
                                        notes-> copy [copy ErrorMsg::note (loc, format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE_NOTE), oneLine-> true)]);
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over isDeeplyMutable (self)-> bool {
        self._isMutable && self._inners [0]._isMutable
    }

    pub over needExplicitAlias (self)-> bool {
        false
    }

    pub over borrowDatas (self)-> bool {
        false
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &RangeType => { self._inners [0us] == s._inners [0us] }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        match o {
            s : &RangeType => { self._inners [0us].isCompatible (s._inners [0us]) }
            _ => { false }
        }
    }

    pub over mutabilityFit (self, o : &Type, borrowed : bool)-> bool {
        if (borrowed) {
            if (!self._isMutable && o._isMutable) return false;
        }

        true
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        if (borrowed) {
            if (self._isMutable && !o._isMutable) return 1u32;
        }

        0u32
    }

    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        if (borrowed) {
            return 1u32;
        }

        0u32
    }

    pub over sameMutability (self, o : &Type)-> bool {
        match o {
            s : &RangeType => {
                if (self._isMutable != o._isMutable) return false;
                return self._inners [0us].sameMutability (s._inners [0us]);
            }
        }

        panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        let innerLevel = if (mutLevel >= 1u32) {
            mutLevel - 1u32
        } else { 0u32 };

        let inner = self._inners [0].clone (innerLevel).asOf!{&IntType} ();
        let step = self._inners [1].clone (innerLevel).asOf!{&IntType} ();

        {
            copy RangeType (self.getLoc (), inner, step, isMutable-> (mutLevel != 0u32))
        } catch {
            _ => panic;
        }
    }

    pub over clone (self, pattern : &Type)-> &Type {
        match pattern {
            r : &RangeType => {
                let inner = self._inners [0].clone (r._inners [0]).asOf!{&IntType} ();
                let step = self._inners [1].clone (r._inners [1]).asOf!{&IntType} ();

                {
                    copy RangeType (self._loc, inner, step, isMutable-> r._isMutable)
                } catch {
                    _ => panic;
                }
            }
            _ => panic;
        }
    }

    pub over cloneMutableTilBorrow (self)-> &Type {
        self.toDeeplyMutable ()
    }

    pub over toDeeplyMutable (self)-> &Type {
        let inner = self.getInners ()[0].toDeeplyMutable ().asOf!{&IntType} ();
        let step = self.getInners ()[1].toDeeplyMutable ().asOf!{&IntType} ();

        {
            copy RangeType (self.getLoc (), inner, step, isMutable-> true)
        } catch {
            _ => panic;
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' ');
            stream:.write ("(.."s8);
            self._inners [0us].format (alias stream);
            stream:.write (")"s8);
        }                
    }
    
}
