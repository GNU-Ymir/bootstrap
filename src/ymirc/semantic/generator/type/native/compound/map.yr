in map;

use ymirc::semantic::generator::type::native::scalar::void_;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;

use std::stream;

use ymirc::errors::message;
use ymirc::semantic::validator::errors;


/**
 * Map type
 */
@final
pub class MapType over CompoundType {

    /**
     * @params:
     *    - loc: the location of the type
     *    - inner: the inner type of the map
     */
    pub self (loc : &Word, key : &Type, value : &Type, isMutable : bool = false)
        with super (loc, inners-> copy [key, value], isMutable-> isMutable)

        throws ErrorMsg
    {
        if key.isMovable () {
            throw copy ErrorMsg::fatal (loc, end-> key.getLoc (), format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE, key),
                                        notes-> copy [copy ErrorMsg::note (loc, format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE_NOTE), oneLine-> true)]);
        }

        if value.isMovable () {
            throw copy ErrorMsg::fatal (loc, end-> value.getLoc (), format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE, value),
                                        notes-> copy [copy ErrorMsg::note (loc, format (ValidateErrorMessage::CONTAIN_MOVABLE_TYPE_NOTE), oneLine-> true)]);
        }
    }

    /*!
     * =============================================================================
     * =============================================================================
     * =========================          GETTERS          =========================
     * =============================================================================
     * =============================================================================
     */

    pub over isDeeplyMutable (self)-> bool {
        if (!self._isMutable) {
            false
        } else {
            self._inners [1].isDeeplyMutable ()
        }
    }

    pub over needExplicitAlias (self)-> bool {
        if (!self._isMutable) {
            false // [K=> V] no change of borrow
        } else {
            self._inners [1]._isMutable // if mut [K=> mut V], borrow can change, but if mut [K=> V] then it cannot
        }
    }

    pub over borrowDatas (self)-> bool {
        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &MapType => {
                self._inners [0us] == s._inners [0us]
                    && self._inners [1us] == s._inners [1us]
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }

    pub over mutabilityFit (self, o : &Type, borrowed : bool)-> bool {
        match o {
            s : &MapType => {
                if (!s._isMutable) return true;
                if (borrowed && !self._isMutable) return false;
                if (!self._inners [1].mutabilityFit (s._inners [1], borrowed-> true)) return false;

                return true;
            }
            _ => panic;
        }
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        match o {
            s : &MapType => {
                if (!self._isMutable) return 0u32; // there are not mut, so no change possible
                let value = self._inners [1].mutabilityDistance (s._inners[1], borrowed-> true);

                if (borrowed && !s._isMutable) { 1u32 + value } // self.inner is mut, but not in other so there is a change
                else { value } // other inner is also mut, so no change observed in this specific map, but maybe in inner T
            }
            _ => panic;
        }
    }

    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        let value = self._inners [1].maxMutabilityDistance (borrowed-> true);
        if (borrowed) {
            1u32 + value
        } else {
            value
        }
    }

    pub over sameMutability (self, o : &Type)-> bool {
        match o {
            s : &MapType => {
                if (self._isMutable != o._isMutable) return false;
                if (!self._inners [1us].sameMutability (s._inners [1us])) return false;

                return true;
            }
        }

        panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        let innerLevel = if (mutLevel >= 1u32) { mutLevel - 1u32 } else { 0u32 };

        {
            copy MapType (self._loc,
                          self._inners [0us],
                          self._inners [1us].clone (innerLevel),
                          isMutable-> (mutLevel != 0u32))
        } catch {
            _ => panic;
        }
    }

    pub over clone (self, pattern : &Type)-> &Type {
        match pattern {
            s : &MapType => {
                let value = self._inners [1].clone (s._inners [1]);
                {
                    copy MapType (self._loc,
                                  self._inners [0],
                                  value,
                                  isMutable-> s._isMutable)
                } catch {
                    _ => panic;
                }
            }
            _ => panic;
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        {
            copy MapType (self._loc,
                          self._inners [0us],
                          self._inners [1us].toDeeplyMutable (),
                          isMutable-> true)
        } catch {
            _ => panic;
        }
    }

    pub over cloneMutableTilBorrow (self)-> &Type {
        self.clone (1u32)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' ');
            stream:.write (Tokens::LCRO);
            self._inners [0us].format (alias stream);
            stream:.write (' ', Tokens::DARROW, ' ');
            self._inners [1us].format (alias stream);
            stream:.write (Tokens::RCRO);
        }
    }

}
