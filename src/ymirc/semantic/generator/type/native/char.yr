mod ymirc::semantic::generator::type::native::char;

import ymirc::semantic::generator::type::native::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

/**
 * Char type
 */
pub class CharType over NativeType {

    /// The size of the char in bits
    let _size : u16;
    
    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, size : u16 = 8u16) with super (loc), _size = size {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            x : &CharType => { x._size == self._size }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the size of the char in bits
     */
    pub def getSize (self)-> u16 {
        self._size
    }    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if self._size == 8u16 {
                stream:.write (NativeTypes::C8);
            } else
                stream:.write (NativeTypes::C32);
        }                
    }
    
}
