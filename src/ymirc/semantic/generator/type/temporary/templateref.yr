mod ymirc::semantic::generator::type::temporary::templateref;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::symbol::template;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;


/**
 * A module reference is a variable refering to a module symbol
 */
pub class TemplateRefType over TemporaryType {

    /// The location of the module
    let _declLoc : &Word;

    /// The symbol
    let _sym : &TemplateSymbol;
    
    
    /**
     * @params: 
     *   - loc: the location of the reference
     *   - sym: the module symbol
     */
    pub self (loc : &Word, sym : &TemplateSymbol)
        with super (loc), _declLoc = sym.getLoc (), _sym = sym
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &TemplateRefType => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the module symbol that is refered to
     */
    pub def getSymbol (self)-> &TemplateSymbol {
        self._sym
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : bool)-> &Type {
        self
    }

    pub over toDeeplyMutable (self)-> &Type {
        self
    }
        
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            let content = self._sym.getContent ();
            stream:.write (self._sym.getPath ().toStr (sep-> "::"s8), content.getParameters ());
        }        
    }
    
}



