mod ymirc::semantic::generator::type::temporary::structref;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::utils::format;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::vardecl;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::symbol::struct_;

import std::io;
import std::collection::vec;

/**
 * StructRef type
 */
pub class StructRefType over TemporaryType {

    /// The structure defining the struct
    let _sym : &StructSymbol;

    /// The fields of the structure
    let _fields : [&Value] = [];

    /// The size in bytes of the struct
    let _size : usize = 0us;

    /**
     *
     */
    pub self (loc : &Word, sym : &StructSymbol, isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _sym = sym
    {}

    /**
     * Create a type from an old one, but with other fields
     * @warning: fields of 'old' are ignored
     * @params:
     *   - old: the struct to copy
     *   - fields: the fields of the struct
     * */
    pub self withFields (old : &StructRefType, fields : [&Value])
        with super (old.getLoc (), isMutable-> old.isMutable ())
        , _sym = old._sym
        , _fields = fields
        , _size = old._size
    {}

    /**
     * Create a type from an old one, but with another size
     * @warning: size of 'old' is ignored
     * @params:
     *    - old: the struct to copy
     *    - size: the size of the struct in bytes
     * */
    pub self withSize (old : &StructRefType, size : usize)
        with super (old.getLoc (), isMutable-> old.isMutable ())
        , _sym = old._sym
        , _fields = old._fields
        , _size = size
    {}

    /**
     * Construct a struct type defining all fields
     * */
    self full (loc : &Word, sym : &StructSymbol, fields : [&Value], isMutable : bool, size : usize)
        with super (loc, isMutable-> isMutable)
        , _sym = sym
        , _fields = fields
        , _size = size
    {}




    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            StructRefType () => { true }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : u32)-> &Type {
        self
    }

    pub fn getSymbol (self)-> &StructSymbol {
        self._sym
    }

    /**
     * @returns: the field of the structure
     * */
    pub fn getFields (self)-> [&Value] {
        self._fields
    }

    /**
     * @params:
     *    - name: the name of the field
     * @returns: the type of a field
     * */
    pub fn getFieldType (self, name : [c8])-> &Type {
        for f in self._fields match f {
            v : &VarDeclValue => {
                if (f.getLoc ().str () == name) return v.getVarType ();
            }
        }

        NONE_TYPE
    }

    /**
     * @params:
     *    - name: the name of the field
     * @returns: the index of a field (self.getFields ().len if not found)
     * */
    pub fn getFieldType (self, name : [c8])-> usize {
        for i, f in self._fields match f {
            v : &VarDeclValue => {
                if (v.getLoc ().str () == name) return i;
            }
        }

        self._fields.len
    }


    /**
     * @returns: the name of the fields
     * */
    pub fn getFieldNames (self)-> [[c8]] {
        let dmut names = Vec!{[c8]}::new ();
        for f in self._fields match f {
            v : &VarDeclValue => {
                names:.push (v.getLoc ().str ());
            }
        }

        names[]
    }

    pub over needExplicitAlias (self)-> bool {
        if (!self._isMutable) return false;
        for s in self._fields match s {
            v : &VarDeclValue => {
                if v.getVarType ().needExplicitAlias () {
                    return true;
                }
            }
        }

        false
    }

    pub over borrowDatas (self)-> bool {
        for s in self._fields match s {
            v : &VarDeclValue => {
                if v.getVarType ().borrowDatas () {
                    return true;
                }
            }
        }

        return false;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._sym.getPath ().toStr ());
        }
    }

}
