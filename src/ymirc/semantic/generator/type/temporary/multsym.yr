mod ymirc::semantic::generator::type::temporary::multsym;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

pub static MULT_SYM_TYPE = MultSymType::new (Word::eof (), []);

/**
 * MultSym type 
 */
pub class MultSymType over TemporaryType {

    /// The content of the multsym
    let _types : [&Type];

    /// The string to print for pretty error formatting
    let _prettyStr : [c8];
    
    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, types : [&Type], prettyStr : [c8] = ""s8)
        with super (loc, isMutable-> false), _types = types, _prettyStr = prettyStr
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &MultSymType => {
                if (p._types.len != self._types.len) return false;
                for i in 0us .. self._types.len {
                    if (p._types [i] != self._types [i]) return false;
                }

                true

            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : bool)-> &Type {
        self
    }

    pub over toDeeplyMutable (self)-> &Type {
        self
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            match self._prettyStr {
                ""s8 =>
                    stream:.write ("<multsym-type>"s8);
                _ =>
                    stream:.write (self._prettyStr);
            };
        }                
    }
    
}
