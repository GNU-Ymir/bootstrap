mod ymirc::semantic::generator::type::temporary::expandtype;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

pub static EXPAND_TYPE = ExpandType::new (Word::eof ());

/**
 * Expand type 
 */
pub class ExpandType over TemporaryType {

    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word) with super (loc, isMutable-> false) {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            ExpandType () => { true }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : bool)-> &Type {
        self
    }

    pub over toDeeplyMutable (self)-> &Type {
        self
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("<expand-type>"s8);
        }                
    }
    
}
