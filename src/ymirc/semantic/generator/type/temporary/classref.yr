in classref;

use ymirc::lexing::word;

use ymirc::semantic::generator::value;
use ymirc::semantic::generator::type::{custom::classptr,
                                       temporary::traitref};

use ymirc::semantic::generator::value::{vardecl,
                                        template::_,
                                        construct::typeinfo,
                                        literal::unit,
                                        prototypes::{ctorproto, methodproto}};

use ymirc::semantic::symbol::class_;
use ymirc::semantic::validator::template::mapper;
use ymirc::syntax::keys;

use std::stream;
use ymirc::utils::format;

/**
 * Methods have inherit protections, so there is a special enumeration for that
 */    
pub enum
| PRV_PARENT = 0u8
| PRV	     = 1u8
| PROT	     = 2u8
| PUB	     = 3u8
 -> MethodProtection;

/**
 * A class ref type is the inner type of a classptr type
 */
@final
pub class ClassRefType over TemporaryType {

    // The classrefure defining the classref
    let _sym : &ClassSymbol;

    // The ancestor of the class
    let mut _ancestor : (&ClassRefType)? = none;

    // The list of fields of the class (only local fields declared in the class def, not in ancestor)
    let mut _localFields : [&VarDeclValue] = [];

    // True iif ctors have been validated (even with no value)
    let mut _hasCtors = false;

    // The list of constructors of the class
    let mut _ctors : [&MethodPrototypeValue] = [];

    // The protection of the constructors
    let mut _ctorProts : [MethodProtection] = [];

    // The template constructors of the class
    let mut _templateCtors : [&TemplateRefCtorValue] = [];

    // The protection of the template ctors
    let mut _templateCtorProts : [MethodProtection] = [];

    // The list of traits implemented by the class
    let mut _impls : [&TraitRefType] = [];

    // local and ancestor trait implementations
    let mut _allImpls : [&TraitRefType] = [];
    
    // The list of prototypes of the vtable
    let mut _vtable : [&MethodPrototypeValue] = [];

    // The prototype of the destructor
    let mut _dtor : &Value = UNIT_VALUE;

    // The protection of the methods (@assert self._methodProts.len == self._vtable.len)
    let mut _methodProts : [MethodProtection] = [];

    // The typeinfo of the class
    let mut _typeinfo : &Value = UNIT_VALUE;

    // The list of template methods
    let mut _templateMeths : [&TemplateRefMethodValue] = [];

    // The list of protection of the template methods
    let mut _templateProts : [MethodProtection] = [];

    /**
     * @params:
     *   - loc: the location of the class definition
     *   - sym: the class symbol (validated or semi validated)
     *   - ancestor: the ancestor type of the class (can be NoneType)
     *   - isMutable: true iif the type is mutable
     */
    pub self (loc : &Word, sym : &ClassSymbol)
        with super (loc, isMutable-> false)
        , _sym = sym
    {}

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          SETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn setAncestor (mut self, ancestor : &ClassRefType) {
        self._ancestor = ancestor?;
    }

    /**
     * @params:
     *    - ti: the new typeinfo to set
     * */
    pub fn setTypeInfo (mut self, ti : &TypeInfoValue) {
        self._typeinfo = ti;
    }

    /**
     * @params:
     *    - old: the old type to copy
     *    - fields: the list of fields
     */
    pub fn setFields (mut self, localFields : [&VarDeclValue]) {
        self._localFields = localFields;
    }

    /**
     * @params: 
     *    - vtable: the list of method prototype of the class
     *    - methodProtections: the protection of the methods 
     *    - dtor: the prototype of the destructor of the class
     *    - impls: the list of local implementations (not by ancestors)
     *    - allImpls: the list of implementations (including from ancestors)
     */
    pub fn setVtable (mut self, vtable : [&MethodPrototypeValue], methodProtections : [MethodProtection], impls : [&TraitRefType], allImpls : [&TraitRefType], templateMeths : [&TemplateRefMethodValue], templateProts : [MethodProtection]) {
        self._vtable = vtable;
        self._methodProts = methodProtections;
        self._impls = impls;
        self._allImpls = allImpls;
        self._templateMeths = templateMeths;
        self._templateProts = templateProts;
    }

    /**
     * @params:
     *   - dtor: the class destructor
     * */
    pub fn setDtor (mut self, dtor : &Value) {
        self._dtor = dtor;
    }

    /**
     * @params:
     *   - ctors: the list of constructors
     *   - ctorProts: the protection of the constructors
     */
    pub fn setCtors (mut self, ctors : [&MethodPrototypeValue], ctorProts : [MethodProtection]) {
        self._ctors = ctors;
        self._ctorProts = ctorProts;
        self._hasCtors = true;
    }

    /**
     * @params:
     *   - ctors: the list of constructors
     *   - ctorProts: the protection of the constructors
     */
    pub fn setTemplateCtors (mut self, ctors : [&TemplateRefCtorValue], ctorProts : [MethodProtection]) {
        self._templateCtors = ctors;
        self._templateCtorProts = ctorProts;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ClassRefType => {
                self._sym is p._sym
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @info: In any case, does not clone the inner part of the class, so this operation is lightweight
     */
    pub over clone (self, _ : u32)-> &Type {
        self
    }

    /**
     * Create a ClassPtrType containing a clone of self as inner
     * @params: 
     *    - isMutable: true iif the classptrtype is mutable
     *    - isInnerMutable: true iif the classreftype is mutable 
     * @returns: a classptrtype
     * @example: 
     * ==============================
     * let x : &ClassRefType = ...;
     * let y = x.createInstance (true, true); // mut &(mut)
     * let z = x.createInstance (true, false); // mut &()
     * let w = x.createInstance (false, true); // &(), invalid but we don't really care, just don't take that into account
     * ==============================
     */
    pub fn createInstance (self, loc : &Word = EOF_WORD, isMutable : bool, isInnerMutable : bool)-> &ClassPtrType {
        copy ClassPtrType (if (loc.isEof ()) { self._loc } else { loc }
                           , self._sym
                           , isMutable-> isMutable
                           , innerMutable-> isInnerMutable)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the ancestor of the class if any, NoneType otherwise
     */
    pub fn getAncestor (self)-> (&ClassRefType)? {
        self._ancestor
    }

    /**
     * @returns: true iif the class has an ancestor
     * */
    pub fn hasAncestor (self)-> bool {
        self._ancestor.hasValue
    }

    /**
     * @returns: the reference to the class symbol 
     */
    pub fn getSymbol (self)-> &ClassSymbol {
        self._sym
    }

    /**
     * @returns: the list of fields of the class type (validated fields)
     */
    pub fn getFields (self)-> [&VarDeclValue] {
        match self._ancestor {
            Ok (cl) => {
                return cl.getFields () ~ self._localFields;
            }
        }

        self._localFields
    }

    /**
     * @returns: the list of field that are declared by the class, not by an ancestor
     */
    pub fn getLocalFields (self)-> [&VarDeclValue] {
        self._localFields
    }

    /**
     * @returns: the destructor prototype of the class 
     */
    pub fn getDestructor (self)-> &Value {
        self._dtor
    }

    /**
     * @returns: the list of prototype of the class
     */
    pub fn getCtors (self)-> [&MethodPrototypeValue] {
        self._ctors
    }

    /**
     * @returns: true iif the classref has been set its constructors
     * */
    pub fn hasCtors (self)-> bool {
        self._hasCtors
    }

    /**
     * @returns: the list of protection of the class
     */
    pub fn getCtorProtections (self)-> [MethodProtection] {
        self._ctorProts
    }

    /**
     * @returns: the list of template constructors
     * */
    pub fn getTemplateCtors (self)-> [&TemplateRefCtorValue] {
        self._templateCtors
    }

    /**
     * @returns: the protections of the template ctors
     * */
    pub fn getTemplateCtorProtections (self)-> [MethodProtection] {
        self._templateCtorProts
    }

    /**
     * @returns: the list of method prototype declared in the vtable
     */
    pub fn getVtable (self)-> [&MethodPrototypeValue] {
        self._vtable
    }

    /**
     * @returns: the list of protections of the methods declared in the vtable
     */
    pub fn getVtableProtections (self)-> [MethodProtection] {
        self._methodProts
    }

    /**
     * @returns: the list of methods that are declared as templates
     * */
    pub fn getTemplateMethods (self)-> [&TemplateRefMethodValue] {
        self._templateMeths
    }

    /**
     * @returns: the list of the protections of the methods that are declared as templates
     * */
    pub fn getTemplateMethodProtections (self)-> [MethodProtection] {
        self._templateProts
    }

    /**
     * @returns: the list of traits implemented by the class directly (not by ancestors)
     */
    pub fn getImplTraits (self)-> [&TraitRefType] {
        self._impls
    }

    /**
     * @returns: the list of traits implemented by the class and by its ancestors
     */
    pub fn getAllImplTraits (self)-> [&TraitRefType] {
        self._allImpls
    }

    /**
     * @returns: the typeinfo of the class
     * */
    pub fn getTypeInfo (self)-> &Value {
        self._typeinfo
    }

    /**
     * @returns: the list of templates used to specialize the class
     * */
    pub fn getTemplateMapper (self)-> (TemplateMapper)? {
        self._sym.getTemplateMapper ()
    }

    /**
     * @returns: true iif the class is referencing a struct type
     * */
    pub fn isStruct (self)-> bool {
        self._sym.isStruct ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._sym.getPath ().toStr ());
        }                
    }


}
