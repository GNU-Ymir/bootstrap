mod ymirc::semantic::generator::type::temporary::classref;

import ymirc::semantic::generator::type::temporary::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::none;
import ymirc::semantic::generator::value::methodproto;
import ymirc::semantic::symbol::class_;
import ymirc::syntax::keys;
import ymirc::lexing::word;

import std::io;
import ymirc::utils::format;

/**
 * Methods have inherit protections, so there is a special enumeration for that
 */    
pub enum
| PRV_PARENT = 0u8
| PRV	     = 1u8
| PROT	     = 2u8
| PUB	     = 3u8
 -> MethodProtection;

/**
 * A class ref type is the inner type of a classptr type
 */
pub class @abstract ClassRefType over TemporaryType {

    /// The classrefure defining the classref
    let _sym : &ClassSymbol;

    /// The ancestor of the class
    let _ancestor : &Type;

    /// The list of fields of the class ref type, (merge of ancestor and local fields)
    let _fields : [&Value] = [];

    /// The list of fields of the class (only local fields declared in the class def, not in ancestor)
    let _localFields : [&Value] = [];

    /// The list of prototypes of the vtable
    let _vtable : [&MethodPrototypeValue] = [];

    /// The prototype of the destructor
    let _dtor : &Value = NoneValue::new ();

    /// The protection of the methods (@assert self._methodProts.len == self._vtable.len)
    let _methodProts : [MethodProtection] = [];

    /// The list of constructors of the class
    let _ctors : [&MethodPrototypeValue] = [];

    /// The protection of the constructors
    let _ctorProts : [MethodProtection] = [];
    
    /**
     * @params:
     *   - loc: the location of the class definition
     *   - sym: the class symbol (validated or semi validated)
     *   - ancestor: the ancestor type of the class (can be NoneType)
     *   - isMutable: true iif the type is mutable
     */
    pub self (loc : &Word, sym : &ClassSymbol, ancestor : &Type, isMutable : bool = false)
        with super (loc, isMutable-> isMutable), _sym = sym, _ancestor = ancestor
    {}

    /**
     * Create a new type from an old one, but other fields
     * @warning: fields of 'old' are ignored
     * @params:
     *    - old: the old type to copy
     *    - fields: the list of fields
     */
    pub self withField (old : &ClassRefType, fields : [&Value], localFields : [&Value])
        with super (old._loc, isMutable-> old._isMutable), _sym = old._sym, _ancestor = old._ancestor, _fields = fields, _localFields = localFields, _dtor = old._dtor, _vtable = old._vtable, _methodProts = old._methodProts, _ctors = old._ctors, _ctorProts = old._ctorProts
    {}

    /**
     * Create a new type from an old one, but with another vtable
     * @warning: vtable and dtor of 'old' are ignored
     * @params: 
     *    - vtable: the list of method prototype of the class
     *    - methodProtections: the protection of the methods 
     *    - dtor: the prototype of the destructor of the class
     */
    pub self withVtable (old : &ClassRefType, vtable : [&MethodPrototypeValue], methodProtections : [MethodProtection], dtor : &Value)
        with super (old._loc, isMutable-> old._isMutable), _sym = old._sym, _ancestor = old._ancestor, _fields = old._fields, _localFields = old._localFields, _vtable = vtable, _dtor = dtor, _methodProts = methodProtections, _ctors = old._ctors, _ctorProts = old._ctorProts
    {}


    /**
     * Create a new type from an old on but with another constructors
     * @warning: ctors of 'old' are ignored
     * @params:
     *   - ctors: the list of constructors
     *   - ctorProts: the protection of the constructors
     */
    pub self withCtors (old : &ClassRefType, ctors : [&MethodPrototypeValue], ctorProts : [MethodProtection])
        with super (old._loc, isMutable-> old._isMutable), _sym = old._sym, _ancestor = old._ancestor, _fields = old._fields, _localFields = old._localFields, _vtable = old._vtable, _dtor = old._dtor, _methodProts = old._methodProts, _ctors = ctors, _ctorProts = ctorProts
    {}

    /**
     * Constructor that set all fields
     */
    prv self full (loc : &Word, sym : &ClassSymbol, ancestor : &Type, isMutable : bool, fields : [&Value], localFields : [&Value], vtable : [&MethodPrototypeValue], methodProtections : [MethodProtection], dtor : &Value, ctors : [&MethodPrototypeValue], ctorProts : [MethodProtection])
        with super (loc, isMutable-> isMutable), _sym = sym, _ancestor = ancestor, _fields = fields, _localFields = localFields, _vtable = vtable, _methodProts = methodProtections, _dtor = dtor, _ctors = ctors, _ctorProts = ctorProts
    {}    

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ClassRefType => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @warning: clone iif isMutable != self.isMutable ()
     * @assert (self.clone () is self || isMutable != self.isMutable ())
     * @info: In any case, does not clone the inner part of the class, so this operation is lightweight
     */
    pub over clone (self, isMutable : bool)-> &Type {
        if (self._isMutable != isMutable) {
            ClassRefType::full (self._loc, isMutable-> isMutable, self._sym, self._ancestor.clone (isMutable-> isMutable), self._fields, self._localFields, self._vtable, self._methodProts, self._dtor, self._ctors, self._ctorProts)
        } else {
            self
        }
    }    

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the ancestor of the class if any, NoneType otherwise
     */
    pub def getAncestor (self)-> &Type {
        self._ancestor
    }    

    /**
     * @returns: the reference to the class symbol 
     */
    pub def getSymbol (self)-> &ClassSymbol {
        self._sym
    }

    /**
     * @returns: the list of fields of the class type (validated fields)
     */
    pub def getFields (self)-> [&Value] {
        self._fields
    }

    /**
     * @returns: the list of field that are declared by the class, not by an ancestor
     */
    pub def getLocalFields (self)-> [&Value] {
        self._localFields
    }

    /**
     * @returns: the list of method prototype declared in the vtable
     */
    pub def getVtable (self)-> [&MethodPrototypeValue] {
        self._vtable
    }

    /**
     * @returns: the list of protections of the methods declared in the vtable
     */
    pub def getVtableProtections (self)-> [MethodProtection] {
        self._methodProts
    }        

    /**
     * @returns: the destructor prototype of the class 
     */
    pub def getDestructor (self)-> &Value {
        self._dtor
    }

    /**
     * @returns: the list of prototype of the class
     */
    pub def getCtors (self)-> [&MethodPrototypeValue] {
        self._ctors
    }

    /**
     * @returns: the list of protection of the class
     */
    pub def getCtorProtections (self)-> [MethodProtection] {
        self._ctorProts
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (self._sym.getPath ().toStr (sep-> "::"s8));
        }                
    }

        
}
