in mapiterator;

use ymirc::semantic::generator::value;
use ymirc::semantic::generator::type::native::compound::map;

use ymirc::syntax::keys;
use ymirc::lexing::word;
use ymirc::utils::format;

use std::stream;

/**
 * A trait ref type is the type used to refer to a trait symbol
 * it is not a usable type, meaning that a variable cannot be of type Trait
 */
@final
pub class MapIteratorType over TemporaryType {

    // The mapiteratorure defining the mapiterator
    let _mp : &MapType;

    /**
     * @params:
     *   - loc: the location of the class definition
     *   - mp: the map type being iterated
     */
    pub self (loc : &Word, mp : &MapType)
        with super (loc, isMutable-> false), _mp = mp
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &MapIteratorType => {
                self._mp is p._mp
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @warning: isMutable is ignored, trait ref are always immutable
     */
    pub over clone (self, _ : u32)-> &Type {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the map type of the iterator
     * */
    pub fn getMapType (self)-> &MapType {
        self._mp
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("#_iterator!{", self._mp, "}");
        }
    }


}
