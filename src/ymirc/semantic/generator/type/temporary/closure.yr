in closure;

use ymirc::semantic::generator::type::native::scalar::none_;
use ymirc::semantic::generator::value;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

/**
 * Expand type 
 */
@final
pub class ClosureType over TemporaryType {

    // The inner type of the closure
    let _innerTypes : [&Type];

    // The inner names of the closure
    let _innerNames : [[c8]];

    // The enclosed values
    let _innerValues : [&Value];
    
    // The uniq id of the variable creating the closure value (parameter)
    let _refId : usize;

    // The symbols that are enclosed
    let _closureSymbols : [[[c8] => &Value]] = [];

    // The list of used symbpls
    let dmut _used : [[[c8] => ()]] = [];
        
    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, innerTypes : [&Type], innerNames : [[c8]], innerValues : [&Value], refId : usize, symbols : [[[c8] => &Value]], dmut used : [[[c8] => ()]])
        with super (loc, isMutable-> false)
        ,_innerNames = innerNames
        ,_innerTypes = innerTypes
        ,_innerValues = innerValues
        ,_refId = refId
        ,_closureSymbols = symbols
        ,_used = alias used
    {}

    pub self empty (loc : &Word, refId : usize)
        with super (loc, isMutable-> false)
        , _innerNames = []
        , _innerTypes = []
        , _innerValues = []
        , _refId = refId
        , _closureSymbols = []
        , _used = []
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the list of inner types
     */
    pub fn getInnerTypes (self)-> [&Type] {
        self._innerTypes
    }

    /**
     * @returns: the name of the enclosed values
     */
    pub fn getInnerNames (self)-> [[c8]] {
        self._innerNames
    }

    /**
     * The enclosed values
     */
    pub fn getInnerValues (self)-> [&Value] {
        self._innerValues
    }
    
    /**
     * @params: 
     *   - name: the name of the field to search
     * @returns: the type of the field (NONE_TYPE if not found)
     */
    pub fn getField (self, name : [c8])-> (&Type, usize) {
        for i in 0us .. self._innerNames.len {
            if (self._innerNames [i] == name) return (self._innerTypes [i], i);
        }

        (NONE_TYPE, 0us)
    }
    
    /**
     * @returns: the index of the frame scope that is enclosed (cf:
     */
    pub fn getClosureSymbols (self)-> [[[c8] => &Value]] {
        self._closureSymbols
    }

    /**
     * @returns: the list of used symbols in the enclosed scopes
     */
    pub fn getClosureUsed (mut self)-> dmut [[[c8] => ()]] {
        alias self._used
    }

    /**
     * @returns: the uniq id of the closure for the varref creation
     */
    pub fn getRefId (self)-> usize {
        self._refId
    }
        
    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */    

    pub over opEquals (self, _ : &Generator)-> bool {
        false
    }

    pub over isCompatible (self, _ : &Type)-> bool {
        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : u32)-> &Type {
        self
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('{');
            for i, j in self._innerTypes {
                if (i != 0us) stream:.write (", ");
                stream:.write (self._innerNames [i], " : ", j);
            }
            stream:.write ('}');
        }                
    }
    
}
