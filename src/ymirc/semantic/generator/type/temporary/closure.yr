mod ymirc::semantic::generator::type::temporary::closure;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::type::temporary::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::value::base;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;
import std::collection::map;
import std::collection::set;

/**
 * Expand type 
 */
pub class ClosureType over TemporaryType {

    /// The inner type of the closure
    let _innerTypes : [&Type];

    /// The inner names of the closure
    let _innerNames : [[c8]];

    /// The uniq id of the variable creating the closure value (parameter)
    let _refId : usize;

    /// The symbols that are enclosed
    let _closureSymbols : &Vec!{dmut &HashMap!{[c8], &Value}};

    /// The list of used symbpls
    let dmut _used : &Vec!{dmut &HashSet!{[c8]}};
        
    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, innerTypes : [&Type], innerNames : [[c8]], refId : usize, symbols : &Vec!{dmut &HashMap!{[c8], &Value}}, dmut used : &Vec!{dmut &HashSet!{[c8]}})
        with super (loc, isMutable-> false),
    _innerNames = innerNames,
    _innerTypes = innerTypes,
    _refId = refId,
    _closureSymbols = symbols,
    _used = alias used
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the list of inner types
     */
    pub def getInnerTypes (self)-> [&Type] {
        self._innerTypes
    }

    /**
     * 
     */
    pub def getInnerNames (self)-> [[c8]] {
        self._innerNames
    }

    /**
     * @params: 
     *   - name: the name of the field to search
     * @returns: the type of the field (NONE_TYPE if not found)
     */
    pub def getField (self, name : [c8])-> &Type {
        for i in 0us .. self._innerNames.len {
            if (self._innerNames [i] == name) return self._innerTypes [i];
        }

        NONE_TYPE
    }
    
    /**
     * @returns: the index of the frame scope that is enclosed (cf:
     */
    pub def getClosureSymbols (self)-> &Vec!{dmut &HashMap!{[c8], &Value}} {
        self._closureSymbols
    }

    /**
     * @returns: the list of used symbols in the enclosed scopes
     */
    pub def getClosureUsed (mut self)-> dmut &Vec!{dmut &HashSet!{[c8]}} {
        alias self._used
    }

    /**
     * @returns: the uniq id of the closure for the varref creation
     */
    pub def getRefId (self)-> usize {
        self._refId
    }
        
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */    

    pub over opEquals (self, _ : &Generator)-> bool {
        false
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : bool)-> &Type {
        self
    }

    pub over toDeeplyMutable (self)-> &Type {
        self
    }

    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('{'c8);
            for i, j in self._innerTypes {
                if (i != 0us) stream:.write (", "s8);
                stream:.write (self._innerNames [i], " : "s8, j);
            }
            stream:.write ('}'c8);
        }                
    }
    
}
