in lambda;

use ymirc::semantic::generator::type::native::scalar::none_;
use ymirc::lexing::word;
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

/**
 * Lambda type 
 */
@final
pub class LambdaType over TemporaryType {

    // The types of the parameters (might be None)
    let _params : [&Type];

    // The type of the return type (might be None)
    let _retType : &Type;

    /**
     * @params: 
     *    - loc: the location of the type
     */
    pub self (loc : &Word, params : [&Type], retType : &Type, isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _params = params
        , _retType = retType
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * ===========================          GETTERS          ==========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getParameters (self)-> [&Type] {
        self._params
    }

    pub fn getRetType (self)-> &Type {
        self._retType
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            l : &LambdaType => {
                if (self._retType != l._retType) return false;
                if (self._params != l._params) return false;
                true

            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : u32)-> &Type {
        self
    }

    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' ');
            stream:.write ("Î» (");
            for i, j in self._params {
                if (i != 0us) stream:.write (", ");
                if (!j.isOf!{&NoneType}()) { stream:.write (j); }
                else stream:.write ("_");
            }
            stream:.write (")-> ");
            if (self._retType.isOf!{&NoneType} ()) stream:.write ("_");
            else stream:.write (self._retType);
        }                
    }
    
}
