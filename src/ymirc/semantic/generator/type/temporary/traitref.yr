in traitref;

use ymirc::semantic::validator::template::mapper;
use ymirc::semantic::symbol::trait_;

use ymirc::syntax::keys;
use ymirc::lexing::word;
use std::stream;
use ymirc::utils::format;


/**
 * A trait ref type is the type used to refer to a trait symbol 
 * it is not a usable type, meaning that a variable cannot be of type Trait
 */
@final
pub class TraitRefType over TemporaryType {

    // The traitrefure defining the traitref
    let _sym : &TraitSymbol;
    
    /**
     * @params:
     *   - loc: the location of the class definition
     *   - sym: the trait symbol 
     */
    pub self (loc : &Word, sym : &TraitSymbol)
        with super (loc, isMutable-> false), _sym = sym
    {}

    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &TraitRefType => {
                self._sym is p._sym
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @warning: isMutable is ignored, trait ref are always immutable
     */
    pub over clone (self, _ : u32)-> &Type {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the reference to the class symbol 
     */
    pub fn getSymbol (self)-> &TraitSymbol {
        self._sym
    }

    /**
     * @returns: the list of template used to specialize the trait
     */
    pub fn getTemplateMapper (self)-> (TemplateMapper)? {
        self._sym.getTemplateMapper ()
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._sym.getPath ().toStr ());
        }                
    }

        
}
