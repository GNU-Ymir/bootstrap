mod ymirc::semantic::generator::type::custom::struct_;

import ymirc::semantic::generator::type::custom::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::symbol::struct_;
import ymirc::syntax::keys;
import ymirc::lexing::word;

import std::io;
import ymirc::utils::format;

/**
 */
pub class @abstract StructType over CustomType {

    /// The structure defining the struct
    let _sym : &StructSymbol;
       
    /**
     * 
     */
    pub self (loc : &Word, sym : &StructSymbol, isMutable : bool = false)
        with super (loc, isMutable-> isMutable), _sym = sym
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &StructType => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }


    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, isMutable : bool)-> &Type {
        StructType::new (self._loc, isMutable-> isMutable, self._sym)
    }

    pub over toDeeplyMutable (self)-> &Type {
        if (self._isMutable) {
            self
        } else {
            self.clone (isMutable-> true)
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =======================             GETTERS             ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the symbol referenced by the type
     * */
    pub def getSymbol (self)-> &StructSymbol {
        self._sym
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (self._sym);
        }                
    }

        
}
