mod ymirc::semantic::generator::type::custom::struct_;

import ymirc::semantic::generator::type::custom::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::structref;


import ymirc::semantic::symbol::struct_;
import ymirc::syntax::keys;
import ymirc::lexing::word;

import std::io;
import ymirc::utils::format;
import std::collection::vec;



pub class StructType over CustomType {

    /// The structure defining the struct
    let _sym : &StructSymbol;

    /**
     *
     */
    pub self (loc : &Word, sym : &StructSymbol, isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _sym = sym
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &StructType => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }


    pub over mutabilityFit (self, o : &Type, borrowed : bool)-> bool {
        if (borrowed) {
            if (!self._isMutable && o._isMutable) return false;
        }

        true
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        if (borrowed) {
            if (self._isMutable && !o._isMutable) return 1u32;
        }

        0u32
    }

    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        if (borrowed) {
            return 1u32;
        }

        0u32
    }

    pub over sameMutability (self, o : &Type)-> bool {
        self._isMutable == o._isMutable
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        if (self._isMutable && mutLevel != 0u32) {
            self
        } else {
            StructType::new (self._loc, isMutable-> mutLevel != 0u32, self._sym)
        }
    }

    pub over clone (self, pattern : &Type)-> &Type {
        if (self._isMutable && pattern._isMutable) {
            self
        } else if (!self._isMutable && !pattern._isMutable) {
            self
        } else {
            StructType::new (self._loc, isMutable-> pattern._isMutable, self._sym)
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        if (self._isMutable) {
            self
        } else {
            StructType::new (self._loc, isMutable-> true, self._sym)
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =======================             GETTERS             ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the symbol referenced by the type
     * */
    pub fn getSymbol (self)-> &StructSymbol {
        self._sym
    }

    pub fn getStructRef (self)-> &StructRefType {
        match self._sym.getStructRef () {
            s : &StructRefType => return s;
            _ => __pragma!panic ();
        }
    }

    pub over needExplicitAlias (self)-> bool {
        match self._sym.getStructRef () {
            s : &StructRefType => return s.needExplicitAlias ();
        }

        false
    }

    pub over isDeeplyMutable (self)-> bool {
        self._isMutable
    }

    pub over borrowDatas (self)-> bool {
        match self._sym.getStructRef () {
            s : &StructRefType => return s.borrowDatas ();
        }

        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (self._sym.getPath ().toStr ());

            // if (stream.hasCustomFormatTag ("withParams"s8)) {
            //     stream:.entabing ();
            //     stream:.write (" ("s8);
            //     for i, j in self._fields {
            //         if (i != 0us) stream:.write (", "s8);
            //         j.format (alias stream);
            //     }
            //     stream:.write (")"s8);
            //     stream:.detabing ();
            // }
        }                
    }

        
}
