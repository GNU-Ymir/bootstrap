mod ymirc::semantic::generator::type::custom::struct_;

import ymirc::semantic::generator::type::custom::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::symbol::struct_;
import ymirc::syntax::keys;
import ymirc::lexing::word;

import std::io;
import ymirc::utils::format;

/**
 */
pub class @abstract StructType over CustomType {

    /// The structure defining the struct
    let _sym : &StructSymbol;


    /// The fields of the structure
    let _fields : [&Value] = [];

    /// The size in bytes of the struct
    let _size : usize = 0us;

    /**
     * 
     */
    pub self (loc : &Word, sym : &StructSymbol, isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _sym = sym
    {}

    /**
     * Create a type from an old one, but with other fields
     * @warning: fields of 'old' are ignored
     * @params:
     *   - old: the struct to copy
     *   - fields: the fields of the struct
     * */
    pub self withFields (old : &StructType, fields : [&Value])
        with super (old.getLoc (), isMutable-> old.isMutable ())
        , _sym = old._sym
        , _fields = fields
        , _size = old._size
    {}

    /**
     * Create a type from an old one, but with another size
     * @warning: size of 'old' is ignored
     * @params:
     *    - old: the struct to copy
     *    - size: the size of the struct in bytes
     * */
    pub self withSize (old : &StructType, size : usize)
        with super (old.getLoc (), isMutable-> old.isMutable ())
        , _sym = old._sym
        , _fields = old._fields
        , _size = size
    {}

    /**
     * Construct a struct type defining all fields
     * */
    self full (loc : &Word, sym : &StructSymbol, fields : [&Value], isMutable : bool, size : usize)
        with super (loc, isMutable-> isMutable)
        , _sym = sym
        , _fields = fields
        , _size = size
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &StructType => {
                self._sym == p._sym && self._fields == p._fields
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        if (self._isMutable && mutLevel != 0u32) {
            self
        } else {
            StructType::full (self._loc, isMutable-> mutLevel != 0u32, self._sym, self._fields, self._size)
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        self.clone (1u32)
    }

    /**
     * ================================================================================
     * ================================================================================
     * =======================             GETTERS             ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the symbol referenced by the type
     * */
    pub fn getSymbol (self)-> &StructSymbol {
        self._sym
    }

    /**
     * @returns: the field of the structure
     * */
    pub fn getFields (self)-> [&Value] {
        self._fields
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (self._sym.getPath ().toStr (sep-> "::"s8));

            if (stream.hasCustomFormatTag ("withParams"s8)) {
                stream:.entabing ();
                stream:.write (" ("s8);
                for i, j in self._fields {
                    if (i != 0us) stream:.write (", "s8);
                    j.format (alias stream);
                }
                stream:.write (")"s8);
                stream:.detabing ();
            }
        }                
    }

        
}
