in classptr;

use ymirc::semantic::generator::{error,
                                 type::temporary::classref,
                                 value::vardecl};

use ymirc::errors::message;
use ymirc::utils::format;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::semantic::symbol::class_;

use std::stream;


/**
 * A class ptr type is the type that can be used (&A), instead of just (A) (assuming A is a class)
 */
@final
pub class ClassPtrType over CustomType {

    // The content of the class ptr
    let _sym : &ClassSymbol;

    // True if the inner part is also mutable
    let _innerMutable : bool;

    // True if the type is created from a structure symbol
    let _isStruct : bool;

    // True if the structs need to be moved when copied
    let _isMovable : bool;

    /**
     * 
     */
    pub self (loc : &Word, type : &ClassSymbol, isMutable : bool = false, innerMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _sym = type
        , _innerMutable = ((innerMutable || type.isStruct ()) && isMutable)
        , _isStruct = type.isStruct ()
        , _isMovable = type.isMovable ()
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over isDeeplyMutable (self)-> bool {
        self._isMutable && self._innerMutable
    }

    pub over needExplicitAlias (self)-> bool {
        if (self._isStruct) {
            if (self._isMutable && !self._isMovable) { // records
                for i in self.getInner ().getFields () match i {
                    v : &VarDeclValue => {
                        if v.getVarType ().needExplicitAlias () return true;
                    }
                }
            } catch { _ => {} } // error generator in the symbol

            // entities are never aliased
            false
        } else {
            self._isMutable && self._innerMutable
        }
    }

    pub over borrowDatas (self)-> bool {
        if (self._isStruct) {
            if (!self._isMovable) { // record
                for i in self.getInner ().getFields () match i {
                    v : &VarDeclValue => {
                        if v.getVarType ().borrowDatas () return true;
                    }
                }
            } catch { _ => {} } // error generator in the symbol

            // entities can borrow values but we don't care, they are the only ones
            false
        } else {
            true
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ClassPtrType => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }

    pub over mutabilityFit (self, o : &Type, borrowed : bool = false)-> bool {
        match o {
            p : &ClassPtrType => {
                if (self._isStruct) {
                    if (!p._isMutable) return true;
                    if (!self._isMutable) {
                        if (borrowed) { return false; }
                        else {
                            {
                                for i in self.getInner ().getFields () match i {
                                    v : &VarDeclValue => {
                                        if v.getVarType ().needExplicitAlias () return false;
                                    }
                                }
                            } catch { _ => {} }
                        }
                    }

                    true
                } else {
                    if (!p._isMutable) return true;
                    if (borrowed && !self._isMutable) return false;
                    if (!self._innerMutable && p._innerMutable) return false;

                    true
                }
            }
            _ => panic;
        }
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool = false)-> u32 {
        match o {
            p : &ClassPtrType => {
                if (self._isStruct) {
                    if (!self._isMutable) return 0u32;
                    if (!p._isMutable && (borrowed || self.borrowDatas ())) return 1u32;

                    0u32
                } else {
                    if (!self._isMutable) return 0u32;
                    let inner = if (self._innerMutable && !p._innerMutable) { 1u32 } else { 0u32 };

                    if (borrowed && !p._isMutable) { 1u32 + inner }
                    else {
                        inner
                    }
                }
            }
            _ => panic;
        }
    }

    pub over maxMutabilityDistance (self, borrowed : bool = false)-> u32 {
        if (borrowed) {
            if (self._isStruct) 1u32
            else 2u32
        } else {
            if (self._isStruct && !self.borrowDatas ()) 0u32
            else 1u32
        }
    }


    pub over sameMutability (self, o : &Type)-> bool {
        match o {
            p : &ClassPtrType => {
                if (self._isStruct) return (self._isMutable == p._isMutable);
                else {
                    return self._isMutable == p._isMutable && self._innerMutable == p._innerMutable;
                }
            }
        }

        panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Clone the class type
     * @params:
     *   - mutLevel: 1 = mut, 2 = dmut
     */
    pub over clone (self, mutLevel : u32)-> &Type {
        let innerMutable = if (mutLevel > 1u32) { true } else { false };
        copy ClassPtrType (self._loc,
                           self._sym,
                           isMutable-> (mutLevel != 0u32),
                           innerMutable-> innerMutable)
    }

    pub over clone (self, pattern : &Type)-> &Type {
        match pattern {
            p : &ClassPtrType => {
                return copy ClassPtrType (self._loc,
                                          self._sym,
                                          isMutable-> p._isMutable,
                                          innerMutable-> p._innerMutable);
            }
            _ => panic;
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        if (self._isMutable && self._innerMutable) {
            self
        } else {
            copy ClassPtrType (self._loc,
                               self._sym,
                               isMutable-> true,
                               innerMutable-> true)
        }
    }

    pub over cloneMutableTilBorrow (self)-> &Type {
        self.clone (1u32)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the class type contained in the ptr
     */
    pub fn getInner (self)-> &ClassRefType
        throws ErrorMsg
    {
        match self._sym.getClassRef () {
            c : &ClassRefType => return c;
            err : &ErrorGenerator => {
                throw err.getErrorMessage ();
            }
            _ => panic;
        }
    }

    /**
     * @returns: the symbol referenced by the type
     * */
    pub fn getSymbol (self)-> &ClassSymbol {
        self._sym
    }

    /**
     * @returns: true iif the class object is a struct
     * */
    pub fn isStruct (self)-> bool {
        self._isStruct
    }

    /**
     * @returns: true iif the class is a struct, and need to be moved when copied
     * */
    pub over isMovable (self)-> bool {
        self._isMovable
    }

    pub over isAddressable (self)-> bool {
        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' ');

            if (self._isStruct) {
                stream:.write (self._sym.getPath ().toStr ());
            } else {
                stream:.write (Tokens::AND, '(');
                if (self._innerMutable) stream:.write (Decorators::MUT, ' ');
                stream:.write (self._sym.getPath ().toStr ());
                stream:.write (')');
            }
        }                
    }


}
