mod ymirc::semantic::generator::type::custom::classptr;

import ymirc::semantic::generator::type::custom::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::custom::classref;
import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;

import std::io;
import ymirc::utils::format;

/**
 * A class ptr type is the type that can be used (&A), instead of just (A) (assuming A is a class)
 */
pub class @abstract ClassPtrType over CustomType {

    /// The content of the class ptr
    let _inner : &ClassRefType;

    /// True if the type was created from a self::super, or things like that
    let _isProxy : bool;
       
    /**
     * 
     */
    pub self (loc : &Word, type : &ClassRefType, isProxy : bool = false, isMutable : bool = false)
        with super (loc, isMutable-> isMutable), _inner = type, _isProxy = isProxy
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ClassPtrType => {
                self._inner == p._inner
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, isMutable : bool)-> &Type {
        ClassPtrType::new (self._loc, isMutable-> isMutable, isProxy-> self._isProxy, self._inner)
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the class type contained in the ptr
     */
    pub def getInner (self)-> &ClassRefType {
        self._inner
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (Tokens::AND, '('c8);
            stream:.entabing ();
            stream:.write (self._inner);
            stream:.detabing ();
            stream:.write (')'c8);
        }                
    }

        
}
