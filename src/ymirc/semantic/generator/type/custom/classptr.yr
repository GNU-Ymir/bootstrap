mod ymirc::semantic::generator::type::custom::classptr;

import ymirc::semantic::generator::type::custom::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::classref;
import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;

import ymirc::semantic::symbol::class_;

import std::io;
import ymirc::utils::format;

/**
 * A class ptr type is the type that can be used (&A), instead of just (A) (assuming A is a class)
 */
pub class ClassPtrType over CustomType {

    /// The content of the class ptr
    let _sym : &ClassSymbol;

    /// True if the inner part is also mutable
    let _innerMutable : bool;

    /// True if the type was created from a self::super, or things like that
    let _isProxy : bool;

    /**
     * 
     */
    pub self (loc : &Word, type : &ClassSymbol, isProxy : bool = false, isMutable : bool = false, innerMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _sym = type
        , _isProxy = isProxy
        , _innerMutable = (innerMutable && isMutable)
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over isDeeplyMutable (self)-> bool {
        self._isMutable && self._innerMutable
    }

    pub over needExplicitAlias (self)-> bool {
        self.isDeeplyMutable ()
    }

    pub over borrowDatas (self)-> bool {
        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ClassPtrType => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }

    pub over mutabilityFit (self, o : &Type, borrowed : bool = false)-> bool {
        match o {
            p : &ClassPtrType => {
                if (!p._isMutable) return true;
                if (borrowed && !self._isMutable) return false;
                if (!self._innerMutable && p._innerMutable) return false;

                true
            }
            _ => __pragma!panic ();
        }
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool = false)-> u32 {
        match o {
            p : &ClassPtrType => {
                if (!self._isMutable) return 0u32;
                let inner = if (self._innerMutable && !p._innerMutable) { 1u32 } else { 0u32 };

                if (borrowed && !p._isMutable) { 1u32 + inner }
                else {
                    inner
                }
            }
            _ => __pragma!panic ();
        }
    }

    pub over maxMutabilityDistance (self, borrowed : bool = false)-> u32 {
        if (borrowed) {
            2u32
        } else {
            1u32
        }
    }


    pub over sameMutability (self, o : &Type)-> bool {
        match o {
            p : &ClassPtrType => {
                return self._isMutable == p._isMutable && self._innerMutable == p._innerMutable;
            }
        }

        __pragma!panic ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Clone the class type
     * @params:
     *   - mutLevel: 1 = mut, 2 = dmut
     */
    pub over clone (self, mutLevel : u32)-> &Type {
        let innerMutable = if (mutLevel > 1u32) { true } else { false };
        ClassPtrType::new (self._loc,
                           self._sym,
                           isProxy-> self._isProxy,
                           isMutable-> (mutLevel != 0u32),
                           innerMutable-> innerMutable)
    }

    pub over clone (self, pattern : &Type)-> &Type {
        match pattern {
            p : &ClassPtrType => {
                return ClassPtrType::new (self._loc,
                                          self._sym,
                                          isProxy-> self._isProxy,
                                          isMutable-> p._isMutable,
                                          innerMutable-> p._innerMutable);
            }
            _ => __pragma!panic ();
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        if (self._isMutable && self._innerMutable) {
            self
        } else {
            ClassPtrType::new (self._loc,
                               self._sym,
                               isProxy-> self._isProxy,
                               isMutable-> true,
                               innerMutable-> true)
        }
    }

    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the class type contained in the ptr
     */
    pub fn getInner (self)-> &ClassRefType {
        match self._sym.getClassRef () {
            c : &ClassRefType => return c;
            _ => __pragma!panic ();
        }
    }

    /**
     * @returns: the symbol referenced by the type
     * */
    pub fn getSymbol (self)-> &ClassSymbol {
        self._sym
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);

            stream:.write (Tokens::AND, '('c8);
            stream:.entabing ();
            if (self._innerMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (self._sym.getPath ().toStr ());
            stream:.detabing ();
            stream:.write (')'c8);
        }                
    }


}
