mod ymirc::semantic::generator::type::custom::enum_;

import ymirc::semantic::generator::type::custom::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::symbol::enum_;
import ymirc::syntax::keys;
import ymirc::lexing::word;

import std::io;
import ymirc::utils::format;

/**
 */
pub class EnumType over CustomType {

    /// The enumure defining the enum
    let _sym : &EnumSymbol;

    /// The proxy type (type contained inside the enum)
    let _proxy : &Type;
    
    /**
     * 
     */
    pub self (loc : &Word, sym : &EnumSymbol, proxy : &Type, isMutable : bool = false)
        with super (loc, isMutable-> isMutable)
        , _sym = sym
        , _proxy = if (isMutable) { proxy.clone (1u32) } else { proxy.clone (0u32) }
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the symbol referenced by this type
     */
    pub fn getSymbol (self)-> &EnumSymbol {
        self._sym
    }
    
    /**
     * @returns: the inner type of the enumeration
     */
    pub fn getProxy (self)-> &Type {
        self._proxy
    }

    pub over borrowDatas (self)-> bool {
        false
    }

    pub over needExplicitAlias (self)-> bool {
        false
    }

    pub over isDeeplyMutable (self)-> bool {
        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &EnumType => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    pub over isCompatible (self, o : &Type)-> bool {
        self == o
    }

    pub over mutabilityFit (self, o : &Type, borrowed : bool)-> bool {
        if (borrowed) {
            if (!self._isMutable && o._isMutable) return false;
        }

        true
    }

    pub over mutabilityDistance (self, o : &Type, borrowed : bool)-> u32 {
        if (borrowed) {
            if (self._isMutable && !o._isMutable) return 1u32;
        }

        0u32
    }

    pub over maxMutabilityDistance (self, borrowed : bool)-> u32 {
        if (borrowed) 1u32
        else 0u32
    }

    pub over sameMutability (self, o : &Type)-> bool {
        self._isMutable == o._isMutable
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, mutLevel : u32)-> &Type {
        if (self._isMutable && mutLevel != 0u32) {
            self
        } else {
            EnumType::new (self._loc, self._sym, self._proxy.clone (mutLevel), isMutable-> (mutLevel != 0u32))
        }
    }

    pub over clone (self, o : &Type)-> &Type {
        if (o._isMutable && !self._isMutable) {
            self.clone (1u32)
        } else if (!o._isMutable && self._isMutable) {
            self.clone (0u32)
        } else {
            self
        }
    }

    pub over toDeeplyMutable (self)-> &Type {
        if (self._isMutable) self
        else {
            self.clone (1u32)
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (self._sym.getPath ().toStr ());
        }                
    }

        
}
