mod ymirc::semantic::generator::type::custom::enum_;

import ymirc::semantic::generator::type::custom::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::symbol::enum_;
import ymirc::syntax::keys;
import ymirc::lexing::word;

import std::io;
import ymirc::utils::format;

/**
 */
pub class @abstract EnumType over CustomType {

    /// The enumure defining the enum
    let _sym : &EnumSymbol;

    /// The proxy type (type contained inside the enum)
    let _proxy : &Type;
    
    /**
     * 
     */
    pub self (loc : &Word, sym : &EnumSymbol, proxy : &Type)
        with super (loc, isMutable-> false), _sym = sym, _proxy = proxy
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */
    
    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &EnumType => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self, _ : bool)-> &Type {
        self
    }

    pub over toDeeplyMutable (self)-> &Type {
        self
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Decorators::MUT, ' 'c8);
            stream:.write (self._sym);
        }                
    }

        
}
