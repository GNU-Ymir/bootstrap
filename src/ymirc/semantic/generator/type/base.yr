mod ymirc::semantic::generator::type::base;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::base;

/**
 * Ancestor of all kind of types
 */
pub class @abstract Type over Generator {

    /// True iif the type is mutable
    let _isMutable : bool;

    /**
     * @params: 
     *    - loc: the location of the type
     *    - isMutable: true iif the type is mutable
     */
    pub self (loc : &Word, isMutable : bool = false)
        with super (loc), _isMutable = isMutable
    {}
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true iif the type if mutable
     */
    pub fn @final isMutable (self)-> bool {
        self._isMutable
    }

    /**
     * @returns: true if the type and all inner types are mutable
     * */
    pub fn isDeeplyMutable (self)-> bool;

    /**
     * @returns: true iif the type needs an explicit alias for memory borrowing
     */
    pub fn needExplicitAlias (self)-> bool;

    /**
     * @returns: true iif the type borrows datas
     * @info: unlike needExplicitAlias, does not care about mutability of the borrowed data
     * */
    pub fn borrowDatas (self)-> bool;

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Clone the type, applying a mutability level
     * */
    pub fn clone (self, mutLevel : u32)-> &Type;

    /**
     * Clone the type, applying the mutability pattern of 'pattern'
     * @example:
     * =====
     * // with a = mut [mut [mut i32]]
     * // with b = [f32]
     * b.clone (pattern-> a); // mut [mut f32]
     * =====
     * */
    pub fn clone (self, pattern : &Type)-> &Type;

    /**
     * Clone the type into a deeply mutable version
     */
    pub fn toDeeplyMutable (self)-> &Type;

    /**
     * Clone a type putting everything that can be put to mutable to mutable as long as it does not change mutability of borrowed data
     * */
    pub fn cloneMutableTilBorrow (self)-> &Type;

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           COMPARISON            ======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true if other is compatible to self
     * @warning: 
     * not necessarily commutative (e.g. slice => ([i32].isCompatible ([void]) && ![void].isCompatible ([i32])))
     * To have something commutative, use opEquals. Every types that are equals are compatible, but not the contrary
     */
    pub fn isCompatible (self, other : &Type)-> bool;

    /**
     * @returns: true if this type can be transfered into the other type without making currently const borrowed data mutable
     * @warning: this does not ensure that the value was no explicitely aliased
     * */
    pub fn mutabilityFit (self, other : &Type, borrowed : bool = false)-> bool;

    /**
     * Computes the number of borrowed values that were mutable, that are becoming const when fit self into other
     * @returns: the distance in mutability between two types
     * */
    pub fn mutabilityDistance (self, other : &Type, borrowed : bool = false)-> u32;

    /**
     * @returns: the number of mutable borrowed that are mutable
     * */
    pub fn maxMutabilityDistance (self, borrowed : bool = false)-> u32;

    /**
     * @returns: true if both type have exactly the same mutability
     * */
    pub fn sameMutability (self, o : &Type)-> bool;

    /**
     * @returns: true if the values contained within the types needs to be moved in an affectation
     * */
    pub fn isMovable (self)-> bool {
        false
    }

    /**
     * @returns: true if the type can be used to describe a value
     * */
    pub fn isAddressable (self)-> bool;

    /*!
     * ================================================================================
     * ================================================================================
     * ========================           MISCELLANEOUS            ====================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable;
    
}
