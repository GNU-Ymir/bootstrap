mod ymirc::semantic::generator::type::base;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::base;

/**
 * Ancestor of all kind of types
 */
pub class @abstract Type over Generator {

    /// True iif the type is mutable
    let _isMutble : bool;

    /// True if it is a reference
    let _isRef : bool = false;

    /// True iif the type needs an implicit alias
    let _needImplicitAlias : bool = false;
    
    /**
     * @params: 
     *    - loc: the location of the type
     *    - isMutable: true iif the type is mutable
     */
    pub self (loc : &Word, isMutable : bool = false)
        with super (loc), _isMutble = isMutable
    {}

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true iif the type if mutable
     */
    pub def @final isMutable (self)-> bool {
        self._isMutble
    }

    /**
     * @returns: true iif the type is a ref type
     */
    pub def @final isRef (self)-> bool {
        self._isRef
    }

    /**
     * @returns: true iif the type needs an implicit alias for memory borrowing
     */
    pub def @final needImplicitAlias (self)-> bool {
        self._needImplicitAlias
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CLONING            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Clone the type
     * @params: 
     *   - isMutable: true if the copy returns a mutable type
     */
    pub def clone (self, isMutable : bool)-> &Type;
    
}
