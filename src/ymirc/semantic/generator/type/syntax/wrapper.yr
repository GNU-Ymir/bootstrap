mod ymirc::semantic::generator::type::syntax::wrapper;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::syntax::expression::_;

/**
 * The type wrapper expression is a convinient expression that is used for syntax rewritting
 * It contains a semantic type, that is directly returned when validated
 * This class is used to put semantic elements inside syntax trees 
 */
pub class TypeWrapperExpr over Expression {

    /// The content of the wrapper    
    let _content : &Type;

    /// If set to true, then the mutability of the inner type is left unchanged when validated
    let _asIs : bool;

    pub self (loc : &Word, content : &Type, asIs : bool = false)
        with super (loc)
        , _content = content
        , _asIs = asIs
    {}
        
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the type contained inside the wrapper
     */
    pub fn getType (self)-> &Type {
        self._content
    }

    /**
     * @returns: true if the mutability of the inner type should be left unchanged during validation
     * */
    pub fn asIs (self)-> bool {
        self._asIs
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &TypeWrapperExpr => {
                t._content == self._content
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            self._content.format (alias stream);
        }        
    }
        
}
