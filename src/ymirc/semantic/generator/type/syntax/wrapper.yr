mod ymirc::semantic::generator::type::syntax::wrapper;

import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::base;
import ymirc::semantic::generator::base;
import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::syntax::expression::_;

/**
 * The type wrapper expression is a convinient expression that is used for syntax rewritting
 * It contains a semantic type, that is directly returned when validated
 * This class is used to put semantic elements inside syntax trees 
 */
pub class TypeWrapperExpr over Expression {

    /// The content of the wrapper    
    let _content : &Type;

    pub self (loc : &Word, content : &Type)
        with super (loc), _content = content
    {}
        
    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the type contained inside the wrapper
     */
    pub def getContent (self)-> &Type {
        self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("SYNTAX_TYPE{");
            stream:.entabing ();
            self._content.format (alias stream);
            stream:.detabing ();
            stream:.write ("}");
        }        
    }
        
}
