in list;

use ymirc::lexing::{word, tokens};
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;
use ymirc::syntax::expression::base;

/**
 * The type wrapper expression is a convinient expression that is used for syntax rewritting
 * It contains a semantic type, that is directly returned when validated
 * This class is used to put semantic elements inside syntax trees 
 */
@final
pub class TypeListWrapperExpr over Expression {

    // The inners of the wrapper
    let _inners : [&Type];

    pub self (loc : &Word, inners : [&Type])
        with super (loc)
        , _inners = inners
    {}
        
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the type contained inside the wrapper
     */
    pub fn getTypes (self)-> [&Type] {
        self._inners
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            t : &TypeListWrapperExpr => {
                t._inners == self._inners
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Tokens::LPAR);
            for i, j in self._inners {
                if (i != 0us) stream:.write (", ");
                j.format (alias stream);
            }
            if (self._inners.len == 1us) stream:.write (",");
            stream:.write (',', Tokens::TDOT, Tokens::RPAR);
        }        
    }
        
}
