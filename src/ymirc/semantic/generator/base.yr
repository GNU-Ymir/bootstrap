mod ymirc::semantic::generator::base;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::_;

static mut __ID__ = 0us;

/**
 * @returns: a uniq identifier
 */
pub fn generateUniqID ()-> usize {
    __ID__ += 1us;
    __ID__
}

/**
 * Element that can be sent to the back for final transformation
 * 
 */
pub class @abstract Generator {

    /// The location of the generator
    let _loc : &Word;

    /// The uniq id of the generator
    let _uniqId : usize;

    /**
     * @params: 
     *   - loc: the location of the generator
     */
    pub self (loc : &Word) with _loc = loc, _uniqId = generateUniqID () {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the location of the generator
     */
    pub fn @final getLoc (self)-> &Word {
        self._loc
    }

    /**
     * @returns: the uniq id of the generator
     */
    pub fn getUniqId (self)-> usize {
        self._uniqId
    }
   

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two generators
     * @returns: true, iif the two generators are strictly identical
     */
    pub fn opEquals (self, o : &Generator)-> bool;


    /**
     * @returns: true iif the dynamic type of self is T
     */
    pub fn isOf {T} (self) -> bool {
        match self {
            _ : T  => { true }
            _ => { false }
        }
    }

    /**
     * @returns: a generator of type T iif the dynamic type of self is T, panic otherwise
     */
    pub fn asOf {T} (self) -> T {
        match self {
            x : T  => { x }
            _ => {
                __pragma!panic ();
            }
        }
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable;
    
}

