mod ymirc::semantic::generator::const_;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::array;
import ymirc::semantic::validator::template::mapper;
import ymirc::semantic::symbol::path;

import ymirc::utils::format;
import ymirc::lexing::word;
import std::fs::path;
import std::io;


/**
 * A constant generator that can be sent to the backend for final code generation
 * A constant is put in the text, and only contains cte values
 */
pub class @final ConstGenerator over Generator {

    // The name of the global constant
    let _name : &SymbolPath;

    // The content of the global constant
    let _value : &Value;

    // True iif the const is weak (in symbol linking)
    let _isWeak : bool;

    pub self (loc : &Word, name : &SymbolPath, value : &Value, isWeak : bool = false)
        with super (loc)
        , _name = name
        , _value = value
        , _isWeak = isWeak
    {}


/**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            f : &ConstGenerator => {
                if (self._isWeak != f._isWeak) return false;
                if (self._name != f._name) return false;
                if (self._value != f._value) return false;
                true
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =============================        GETTERS         ===========================
     * ================================================================================
     * ================================================================================
     */


    pub fn getName (self)-> &SymbolPath {
        self._name
    }

    pub fn getValue (self)-> &Value {
        self._value
    }

    pub fn isWeak (self)-> bool {
        self._isWeak
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("global :"s8);
            if (self._isWeak) { stream:.write (" [weak]"s8); }
            stream:.write (' 'c8, self._name.toStr (), " = "s8);
            match self._value {
                a : &ArrayValue => {
                    stream:.write ("["s8);
                    stream:.entabing ();
                    if (a.getValues ().len != 0us) stream:.write ("\n"s8);
                    for i, pi in a.getValues () {
                        if (i != 0us) { stream:.write (",\n"s8); }
                        stream:.write (pi);
                    }
                    stream:.detabing ();
                    if (a.getValues ().len != 0us) stream:.write ("\n"s8);
                    stream:.write ("]"s8);
                }
                o : _ => {
                    stream:.entabing ();
                    o.format (alias stream);
                    stream:.detabing ();
                }
            }
        }
    }


    

}
