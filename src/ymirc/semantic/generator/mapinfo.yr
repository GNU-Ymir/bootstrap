mod ymirc::semantic::generator::mapinfo;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::proto;
import ymirc::semantic::generator::type::native::compound::map;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;

import std::fs::path;
import std::io;


/**
 * A constant generator that can be sent to the backend for final code generation
 * A constant is put in the text, and only contains cte values
 */
pub class @final MapInfoGenerator over Generator {

    // The map type of the map info
    let _mp : &MapType;

    // The comparison function
    let _cmpFunc : &PrototypeValue;

    // The hash function
    let _hashFunc : &PrototypeValue;

    pub self (loc : &Word, map : &MapType, cmpFunc : &PrototypeValue, hashFunc : &PrototypeValue)
        with super (loc)
        , _mp = map
        , _cmpFunc = cmpFunc
        , _hashFunc = hashFunc
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            f : &MapInfoGenerator => {
                if (self._mp != f._mp) return false;
                if (self._cmpFunc != f._cmpFunc) return false;
                if (self._hashFunc != f._hashFunc) return false;
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =============================        GETTERS         ===========================
     * ================================================================================
     * ================================================================================
     */


    pub fn getMapType (self)-> &MapType {
        self._mp
    }

    pub fn getCmpFunc (self)-> &PrototypeValue {
        self._cmpFunc
    }

    pub fn getHashFunc (self)-> &PrototypeValue {
        self._hashFunc
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("map_info : "s8, self._mp);
        }
    }




}
