mod ymirc::semantic::generator::value::literal::int;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::type::native::scalar::int;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;

import ymirc::utils::bigint;

/**
 */
pub class IntValue over LiteralValue {

    /// The value
    let _value : &BigInt;
    
    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &IntType, val : usize) with super (loc, type), _value = BigInt::new (val) {}


    pub self (loc : &Word, type : &IntType, val : &BigInt) with super (loc, type), _value = val {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the value
     */
    pub fn getValue (self)-> &BigInt {
        self._value
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &IntValue => { s._type == self._type && self._value == s._value }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            match self._type {
                f : &IntType => {
                    match (f.isSigned (), f.getSize ()) {
                        (true, 8u16) => { stream:.write (self._value, "i8"s8); }
                        (true, 16u16) => { stream:.write (self._value, "i16"s8); }
                        (true, 64u16) => { stream:.write (self._value, "i64"s8); }
                        (true, 0u16) => { stream:.write (self._value, "is"s8); }
                        (false, 8u16) => { stream:.write (self._value, "u8"s8); }
                        (false, 16u16) => { stream:.write (self._value, "u16"s8); }
                        (false, 32u16) => { stream:.write (self._value, "u32"s8); }
                        (false, 64u16) => { stream:.write (self._value, "u64"s8); }
                        (false, 0u16) => { stream:.write (self._value, "us"s8); }
                        _ => { stream:.write (self._value); }
                    }
                }
            }
        }        
    }        
}


/**
 * Create a IntValue from a usize
 */
pub fn makeIntValue (loc : &Word, value : usize, size : u16 = 0u16, signed : bool = false)-> &IntValue {
    IntValue::new (loc, IntType::new (loc, size-> size, signed-> signed), BigInt::new (value))
}


/**
 * Create a IntValue from a isize
 */
pub fn makeIntValue (loc : &Word, value : isize, size : u16 = 0u16, signed : bool = true)-> &IntValue {
    IntValue::new (loc, IntType::new (loc, size-> size, signed-> signed), BigInt::new (value))
}

/**
 * Create a IntValue from a usize
 */
pub fn makeIntValue (value : usize, size : u16 = 0u16, signed : bool = false)-> &IntValue {
    IntValue::new (Word::eof (), IntType::new (Word::eof (), size-> size, signed-> signed), BigInt::new (value))
}


/**
 * Create a IntValue from a isize
 */
pub fn makeIntValue (value : isize, size : u16 = 0u16, signed : bool = true)-> &IntValue {
    IntValue::new (Word::eof (), IntType::new (Word::eof (), size-> size, signed-> signed), BigInt::new (value))
}

/**
 * Create a IntValue from another one, forcing the type casting
 */
pub fn makeIntCastValue (loc : &Word, nType : &IntType, value : &IntValue)-> &IntValue {
    let oldT = value.getType ().asOf!{&IntType} ();
    let old = match (oldT.isSigned (), oldT.getSize ()) {
        (true, 8u16) => { cast!usize (value.getValue ().toT!{i8} ()) }
        (false, 8u16) => { cast!usize (value.getValue ().toT!{u8} ()) }
        (true, 16u16) => { cast!usize (value.getValue ().toT!{i16} ()) }
        (false, 16u16) => { cast!usize (value.getValue ().toT!{u16} ()) }
        (true, 32u16) => { cast!usize (value.getValue ().toT!{i32} ()) }
        (false, 32u16) => { cast!usize (value.getValue ().toT!{u32} ()) }
        (true, 64u16) => { cast!usize (value.getValue ().toT!{i64} ()) }
        (false, 64u16) => { cast!usize (value.getValue ().toT!{u64} ()) }
        (true, _) => { cast!usize (value.getValue ().toT!{isize} ()) }
        _ => { cast!usize (value.getValue ().toT!{usize} ()) }
    };

    if (nType.isSigned ()) {
        makeIntValue (loc, size-> nType.getSize (), signed-> true, cast!isize (old))
    } else {
        makeIntValue (loc, size-> nType.getSize (), signed-> false, old)
    }
}
