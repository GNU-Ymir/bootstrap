in array;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type::native::compound::{array, pointer};

/**
 * Array value that encode literal arrays (or slice, depending on the type)
 */
@final
pub class ArrayValue over LiteralValue {

    // The inner values
    let _inners : [&Value];

    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &ArrayType, inners : [&Value], isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _inners = inners
    {
        let mut throwers : [mut (&Word, &Type)] = [];
        for i in self._inners {
            throwers ~= i.getThrowers ();
        }

        self._throwers = throwers;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the array
     */
    pub fn getValues (self)-> [&Value] {
        self._inners
    }

    /**
     * @returns: the size of the array
     */
    pub fn getLen (self)-> usize {
        self._inners.len
    }

    pub over isFullLiteral (self)-> bool {
        for i in self._inners {
            if !i.isFullLiteral () return false;
        }

        true
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            s : &ArrayValue => {
                if (s._inners.len != self._inners.len) return false;
                for i in 0us .. self._inners.len {
                    if (s._inners [i] != self._inners [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        if let a : &ArrayType = self._type {
            let inners = copy [i.clone () for i in self._inners];
            copy ArrayValue (self._loc,
                             a,
                             inners,
                             isReduced-> self._isReduced)
        } else panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('[');
            stream:.entabing ();
            for j, i in self._inners {
                if (j != 0us) stream:.write (", ");
                i.format (alias stream);
            }
            stream:.detabing ();
            stream:.write (']');
        }        
    }        
}
