mod ymirc::semantic::generator::value::literal::arrayalloc;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::type::native::compound::slice;
import ymirc::semantic::generator::type::native::compound::array;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;

/**
 * Array allocation is a array replication (depending on the type it is on the stack or on the heap)
 */
pub class ArrayAllocValue over LiteralValue {

    /// The inner values
    let _value : &Value;

    /// The len of the allocation
    let _len : &Value;

    // True if dynamic (on the heap)
    let _dyn : bool;

    /**
     * Create a new value
     */
    pub self dyn (loc : &Word, type : &SliceType, value : &Value, len : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _len = len
        , _dyn = true
    {}

    pub self stat (loc : &Word, type : &ArrayType, value : &Value, len : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _len = len
        , _dyn = false
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value that is replicated in the array
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the size of the allocation 
     */
    pub fn getLen (self)-> &Value {
        self._len
    }

    /**
     * @returns: true if this is a dynamic allocation
     * */
    pub fn isDynamic (self)-> bool {
        self._dyn
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &ArrayAllocValue => {
                if (s._type != self._type)  return false;
                if (s._value != self._value) return false;
                if (s._len != self._len) return false;

                true
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        self._dyn || self._value.needUniqness ()
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('['c8);
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.write (" ; "s8);
            if (self._dyn) stream:.write (Keys::NEW, ' 'c8);

            self._len.format (alias stream);
            stream:.detabing ();
            stream:.write (']'c8);
        }        
    }        
}
