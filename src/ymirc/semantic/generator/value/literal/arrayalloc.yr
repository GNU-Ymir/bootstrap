in arrayalloc;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type::native::compound::{pointer, slice, array};

/**
 * Array allocation is a array replication (depending on the type it is on the stack or on the heap)
 */
@final
pub class ArrayAllocValue over LiteralValue {

    // The inner values
    let _value : &Value;

    // The len of the allocation
    let _len : &Value;

    // True if dynamic (on the heap)
    let _dyn : bool;

    /**
     * Create a new value
     */
    pub self dyn (loc : &Word, type : &SliceType, value : &Value, len : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _len = len
        , _dyn = true
    {
        self._throwers = value.getThrowers () ~ len.getThrowers ();
    }

    pub self stat (loc : &Word, type : &ArrayType, value : &Value, len : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _len = len
        , _dyn = false
    {
        self._throwers = value.getThrowers () ~ len.getThrowers ();
    }

    self full (loc : &Word, type : &Type, value : &Value, len : &Value, dyn : bool, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _len = len
        , _dyn = dyn
    {
        self._throwers = value.getThrowers () ~ len.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value that is replicated in the array
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the size of the allocation 
     */
    pub fn getLen (self)-> &Value {
        self._len
    }

    /**
     * @returns: true if this is a dynamic allocation
     * */
    pub fn isDynamic (self)-> bool {
        self._dyn
    }

    pub over isFullLiteral (self)-> bool {
        if (self._dyn) return false;
        self._value.isFullLiteral ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            s : &ArrayAllocValue => {
                if (s._value != self._value) return false;
                if (s._len != self._len) return false;

                true
            }
            _ => { false }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        copy ArrayAllocValue (self._loc, self._type,
                              self._value.clone (),
                              self._len.clone (),
                              dyn-> self._dyn,
                              isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('[');
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.write (" ; ");
            if (self._dyn) stream:.write (Keys::NEW, ' ');

            self._len.format (alias stream);
            stream:.detabing ();
            stream:.write (']');
        }        
    }        
}
