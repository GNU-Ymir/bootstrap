mod ymirc::semantic::generator::value::literal::unit;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::scalar::void_;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::base;


/**
 * A unit value is an empty value that does nothing
 */
pub class UnitValue over LiteralValue {

    /**
     * Create a new empty value
     */
    pub self withLoc (loc : &Word) with super (loc, VoidType::new (loc)) {}
    pub self () with super (Word::eof (), VoidType::new (Word::eof ())) {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            UnitValue () => { true }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("<unit-value>"s8);
        }        
    }        
}

pub static UNIT_VALUE = UnitValue::new ();
