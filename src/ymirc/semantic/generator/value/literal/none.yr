mod ymirc::semantic::generator::value::literal::none;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::option;
import ymirc::semantic::generator::type::native::void_;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::base;

/**
 * A none value is an empty value reprensenting an unset option value
 */
pub class NoneValue over LiteralValue {

    pub self (loc : &Word, type : &OptionType)
        with super (loc, type)
    {}

    pub self (loc : &Word)
        with super (loc, OptionType::new (Word::eof (), VOID_TYPE))
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            NoneValue () => { true }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::NONE);
        }        
    }        
}
