mod ymirc::semantic::generator::value::literal::char;

import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;
import ymirc::utils::format;
import ymirc::utils::bigint;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::type::native::scalar::char;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::validator::utf;


pub struct @union
| utf8 : u8
| utf16 : u16
| utf32 : u32
 -> CharValueContent;


pub class CharValue over LiteralValue {

    /// The value
    let _value : CharValueContent;


    pub self (loc : &Word, type : &CharType, value : &BigInt)
        with super (loc, type)
        , _value = match type.getSize () {
            8u16 => { CharValueContent (utf8-> value.toT!{u8} ()) }
            16u16 => { CharValueContent (utf16-> value.toT!{u16} ()) }
            _ => { CharValueContent (utf32-> value.toT!{u32} ()) }
        }
    {}

    pub self (loc : &Word, type : &CharType, value : CharValueContent)
        with super (loc, type), _value = value
    {}

    pub self (loc : &Word, type : &CharType, value : u8)
        with super (loc, type), _value = CharValueContent (utf8-> value)
    {}

    pub self (loc : &Word, type : &CharType, value : u16)
        with super (loc, type), _value = CharValueContent (utf16-> value)
    {}

    pub self (loc : &Word, type : &CharType, value : u32)
        with super (loc, type), _value = CharValueContent (utf32-> value)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the char
     */
    pub fn getValue (self)-> CharValueContent {
        self._value
    }

    /**
     * @returns: the value as a BigInt
     * */
    pub fn getValueAsInt (self)-> &BigInt {
        match self.getEncodingSize () {
            8u16 => { BigInt::new (cast!usize (self._value.utf8)) }
            16u16 => { BigInt::new (cast!usize (self._value.utf16)) }
            _ => { BigInt::new (cast!usize (self._value.utf32)) }
        }
    }

    /**
     * @returns: the size of the encoding used by the char value
     * */
    pub fn getEncodingSize (self)-> u16 {
        self._type.asOf!{&CharType}().getSize ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &CharValue => {
                s._type == self._type && self._value == s._value
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            let utfV = utf::instance ();

            match self._type.asOf!{&CharType} ().getSize () {
                8u16 => {
                    stream:.write (Tokens::SQUOTE, utfV.unescape (utfV.decode ([self._value.utf8 ; 1])), Tokens::SQUOTE);
                    stream:.write (CharSuffixes::UTF8);
                }
                16u16 => {
                    stream:.write (Tokens::SQUOTE, utfV.unescape (utfV.decode ([self._value.utf16 ; 1])), Tokens::SQUOTE);
                    stream:.write (CharSuffixes::UTF16);
                }
                _ => {
                    stream:.write (Tokens::SQUOTE, utfV.unescape (utfV.decode ([self._value.utf32 ; 1])), Tokens::SQUOTE);
                    stream:.write (CharSuffixes::UTF32);
                }
            };
        }
    }        
}


/**
 * Create a FloatValue from a f64
 */
pub fn makeCharValue (loc : &Word, c : u32, size : u16 = 0u16)-> &CharValue {
    match size {
        8u16 => {
            CharValue::new (loc, CharType::new (loc, size-> size), cast!u8 (c))
        }
        16u16 => {
            CharValue::new (loc, CharType::new (loc, size-> size), cast!u16 (c))
        }
        _ => {
            CharValue::new (loc, CharType::new (loc, size-> size), c)
        }
    }
}
