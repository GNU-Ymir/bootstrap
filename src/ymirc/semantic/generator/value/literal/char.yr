in char;

use ymirc::lexing::{word, tokens};
use ymirc::syntax::keys;
use ymirc::utils::{format, bigint};
use std::stream;

use ymirc::semantic::generator::type::native::{compound::pointer,
                                               scalar::char};

use ymirc::semantic::validator::utf;

pub record CharValueContent {
    pub let utf8 : u8 = 0;
    pub let utf16 : u16 = 0;
    pub let utf32 : u32 = 0;

    pub self (utf8 : u8)
        with utf8 = utf8 {}

    pub self (utf16 : u16)
        with utf16 = utf16 {}

    pub self (utf32 : u32)
        with utf32 = utf32 {}

    pub fn opEquals (self, o : CharValueContent)-> bool {
        if self.utf8 != o.utf8 return false;
        if self.utf16 != o.utf16 return false;
        if self.utf32 != o.utf32 return false;

        true
    }
}

@final
pub class CharValue over LiteralValue {

    // The value
    let _value : CharValueContent;

    pub self (loc : &Word, type : &CharType, value : &BigInt)
        with super (loc, type)
        , _value = match type.getSize () {
            8u16 => { CharValueContent (utf8-> value.toT!{u8} ()) }
            16u16 => { CharValueContent (utf16-> value.toT!{u16} ()) }
            _ => { CharValueContent (utf32-> value.toT!{u32} ()) }
        }
    {}

    pub self (loc : &Word, type : &CharType, value : CharValueContent)
        with super (loc, type), _value = value
    {}

    pub self (loc : &Word, type : &CharType, value : u8)
        with super (loc, type), _value = CharValueContent (utf8-> value)
    {}

    pub self (loc : &Word, type : &CharType, value : u16)
        with super (loc, type), _value = CharValueContent (utf16-> value)
    {}

    pub self (loc : &Word, type : &CharType, value : u32)
        with super (loc, type), _value = CharValueContent (utf32-> value)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the char
     */
    pub fn getValue (self)-> CharValueContent {
        self._value
    }

    /**
     * @returns: the value as a BigInt
     * */
    pub fn getValueAsInt (self)-> &BigInt {
        match self.getEncodingSize () {
            8u16 => { copy BigInt (cast!usize (self._value.utf8)) }
            16u16 => { copy BigInt (cast!usize (self._value.utf16)) }
            _ => { copy BigInt (cast!usize (self._value.utf32)) }
        }
    }

    /**
     * @returns: the size of the encoding used by the char value
     * */
    pub fn getEncodingSize (self)-> u16 {
        if let c : &CharType = self._type {
            return c.getSize ();
        }

        panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            s : &CharValue => {
                self._value == s._value
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            let utfV = utf::instance ();

            match self.getEncodingSize () {
                8u16 => {
                    stream:.write (Tokens::SQUOTE, utfV.unescape (utfV.decode (copy [self._value.utf8])), Tokens::SQUOTE);
                    stream:.write (CharSuffixes::UTF8);
                }
                16u16 => {
                    stream:.write (Tokens::SQUOTE, utfV.unescape (utfV.decode (copy [self._value.utf16])), Tokens::SQUOTE);
                    stream:.write (CharSuffixes::UTF16);
                }
                _ => {
                    stream:.write (Tokens::SQUOTE, utfV.unescape (utfV.decode (copy [self._value.utf32])), Tokens::SQUOTE);
                    stream:.write (CharSuffixes::UTF32);
                }
            };
        }
    }        
}


/**
 * Create a FloatValue from a f64
 */
pub fn makeCharValue (loc : &Word, c : u32, size : u16 = 0u16)-> &CharValue {
    match size {
        8u16 => {
            copy CharValue (loc, copy CharType (loc, size-> size), cast!u8 (c))
        }
        16u16 => {
            copy CharValue (loc, copy CharType (loc, size-> size), cast!u16 (c))
        }
        _ => {
            copy CharValue (loc, copy CharType (loc, size-> size), c)
        }
    }
}
