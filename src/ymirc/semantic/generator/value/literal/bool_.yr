mod ymirc::semantic::generator::value::literal::bool_;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::bool_;

/**
 * A unit value is an empty value that does nothing
 */
pub class BoolValue over LiteralValue {

    /// The value of the bool
    let _isTrue : bool;
    
    /**
     * Create a new empty value
     */
    pub self (loc : &Word, isTrue : bool) with super (loc, BoolType::new (loc)), _isTrue = isTrue {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true iif the value is true
     */
    pub def isTrue (self)-> bool {
        self._isTrue
    }
        
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            BoolValue () => { true }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isTrue)
                stream:.write (Keys::TRUE);
            else stream:.write (Keys::FALSE);
        }        
    }        
}
