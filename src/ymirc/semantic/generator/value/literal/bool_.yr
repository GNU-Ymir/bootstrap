in bool_;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type::native::scalar::bool_;

pub lazy FALSE_BOOL_VALUE = copy BoolValue (EOF_WORD, false);
pub lazy TRUE_BOOL_VALUE  = copy BoolValue (EOF_WORD, true);

@final
pub class BoolValue over LiteralValue {

    // The value of the bool
    let _isTrue : bool;

    /**
     */
    pub self (loc : &Word, b : &BoolType, isTrue : bool)
        with super (loc, b)
        , _isTrue = isTrue
    {}

    /**
     */
    pub self (loc : &Word, isTrue : bool)
        with super (loc, BoolType::new (loc))
        , _isTrue = isTrue
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true iif the value is true
     */
    pub fn isTrue (self)-> bool {
        self._isTrue
    }
        
    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            b : &BoolValue => { self._isTrue == b._isTrue }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isTrue)
                stream:.write (Keys::TRUE);
            else stream:.write (Keys::FALSE);
        }        
    }        
}
