mod ymirc::semantic::generator::value::literal::tuple;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;

/**
 * Tuple value that encode literal tuples 
 */
pub class TupleValue over LiteralValue {

    /// The inner values
    let _inners : [&Value];

    
    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &Type, inners : [&Value])
        with super (loc, type), _inners = inners
    {
        self._isLvalue = true;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the tuple
     */
    pub fn getInners (self)-> [&Value] {
        self._inners
    }

    /**
     * @returns: the size of the tuple
     */
    pub fn getArity (self)-> usize {
        self._inners.len
    }
    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &TupleValue => {
                if (s._type != self._type)  return false;
                if (s._inners.len != self._inners.len) return false;
                for i in 0us .. self._inners.len {
                    if (s._inners [i] != self._inners [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        for i in self._inners {
            if i.needUniqness () { return true; }
        }
        false
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('('c8);
            stream:.entabing ();
            for j, i in self._inners {
                if (j != 0us) stream:.write (", "s8);
                i.format (alias stream);
            }
            if (self._inners.len == 1us) stream:.write (','c8);
            stream:.detabing ();
            stream:.write (')'c8);
        }        
    }        
}
