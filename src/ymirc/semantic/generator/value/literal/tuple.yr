mod ymirc::semantic::generator::value::literal::tuple;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::type::native::compound::tuple;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;

/**
 * Tuple value that encode literal tuples 
 */
pub class TupleValue over LiteralValue {

    /// The inner values
    let _inners : [&Value];

    // The name of the fields (.len can be < _inners.len)
    let _fieldNames : [[c8]];
    
    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &TupleType, inners : [&Value], fieldNames : [[c8]] = [], isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _inners = inners
        , _fieldNames = fieldNames
    {
        let dmut throwers = Vec!{(&Word, &Type)}::new ();
        for i in self._inners {
            for j in i.getThrowers () { throwers:.push (j); }
        }

        self._throwers = throwers [];
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the tuple
     */
    pub fn getValues (self)-> [&Value] {
        self._inners
    }

    /**
     * @returns: the size of the tuple
     */
    pub fn getArity (self)-> usize {
        self._inners.len
    }

    /**
     * @returns: the names of the fields associated to the values
     * @warning: .len can be lower than getArity ()
     * */
    pub fn getFieldNames (self)-> [[c8]] {
        self._fieldNames
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        let dmut vals = Vec!{&Value}::new ();
        for i in self._inners {
            vals:.push (i.clone ());
        }

        TupleValue::new (self._loc, self._type, vals[], fieldNames-> self._fieldNames, isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &TupleValue => {
                if (s._type != self._type)  return false;
                if (s._inners.len != self._inners.len) return false;
                for i in 0us .. self._inners.len {
                    if (s._inners [i] != self._inners [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        for i in self._inners {
            if i.needUniqness () { return true; }
        }
        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('('c8);
            stream:.entabing ();
            for j, i in self._inners {
                if (j != 0us) stream:.write (", "s8);
                if (self._fieldNames.len > j) {
                    stream:.write (self._fieldNames [j], "-> "s8);
                }
                i.format (alias stream);
            }
            if (self._inners.len == 1us) stream:.write (','c8);
            stream:.detabing ();
            stream:.write (')'c8);
        }        
    }        
}
