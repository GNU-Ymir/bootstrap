mod ymirc::semantic::generator::value::literal::null_;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::type::native::void_;
import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;

/**
 */
pub class NullValue over LiteralValue {

    /**
     * Create a new empty value
     */
    pub self (loc : &Word, type : &PointerType)
        with super (loc, type)
    {}

    /**
     * Create a new empty value
     */
    pub self (loc : &Word) with super (loc, PointerType::new (loc, NoneType::new (loc))) {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &NullValue => { s._type == self._type }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::NULL);
        }        
    }        
}
