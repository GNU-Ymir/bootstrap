in null_;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type::native::{scalar::none_,
                                               compound::pointer};


pub lazy NULL_VALUE = copy NullValue (EOF_WORD);

@final
pub class NullValue over LiteralValue {

    pub self (loc : &Word, type : &PointerType)
        with super (loc, type)
    {}

    pub self (loc : &Word)
        with super (loc, copy PointerType (loc, copy NoneType (loc, isMutable-> true), isMutable-> true))
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            NullValue () => { true }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::NULL);
        }        
    }        
}
