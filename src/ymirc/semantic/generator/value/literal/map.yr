mod ymirc::semantic::generator::value::literal::map;

import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::type::native::compound::map;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;

pub class MapValue over LiteralValue {

    // The keys of the map
    let _keys : [&Value];

    // The values associated to the keys
    let _values : [&Value];

    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &MapType, keys : [&Value], values : [&Value], isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _keys = keys
        , _values = values
    {
        let dmut throwers = Vec!{(&Word, &Type)}::new ();
        for i in self._keys {
            for j in i.getThrowers () { throwers:.push (j); }
        }

        for i in self._values {
            for j in i.getThrowers () { throwers:.push (j); }
        }

        self._throwers = throwers [];
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the keys of the map
     */
    pub fn getKeys (self)-> [&Value] {
        self._keys
    }

    /**
     * @returns: the values of the map
     */
    pub fn getValues (self)-> [&Value] {
        self._values
    }

    /**
     * @returns: the size of the map literal
     */
    pub fn getLen (self)-> usize {
        self._keys.len
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        let dmut vals = Vec!{&Value}::new ();
        let dmut keys = Vec!{&Value}::new ();
        for i in self._values {
            vals:.push (i.clone ());
        }

        for i in self._keys {
            keys:.push (i.clone ());
        }

        MapValue::new (self._loc, self._type.asOf!{&MapType} (), keys[], vals[], isReduced-> self._isReduced)
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &MapValue => {
                if (s._type != self._type)  return false;
                if (s._keys.len != self._keys.len) return false;
                if (s._values.len != self._values.len) return false;
                for i in 0us .. self._keys.len {
                    if (s._keys [i] != self._keys [i]) return false;
                }

                for i in 0us .. self._values.len {
                    if (s._values [i] != self._values [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('['c8);
            stream:.entabing ();
            for j, i in self._keys {
                if (j != 0us) stream:.write (", "s8);
                i.format (alias stream);
                stream:.write (Tokens::DARROW, " ");
                self._values [j].format (alias stream);
            }
            stream:.detabing ();
            stream:.write (']'c8);
        }
    }
}
