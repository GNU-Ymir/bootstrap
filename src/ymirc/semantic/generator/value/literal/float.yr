mod ymirc::semantic::generator::value::literal::float;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::type::native::float;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;

/**
 * Float value
 */
pub class FloatValue over LiteralValue {

    /// The float value iif the type is f32
    let _f : f32;

    /// The float value iif the type is f64
    let _d : f64;

    
    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &Type, f : f32 = 0.f, d : f64 = 0.0) with super (loc, type), _f = f, _d = d {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &FloatValue => { s._type == self._type && self._f == s._f && self._d == s._d }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            match self._type {
                f : &FloatType => {
                    if (f.getSize () == 32u16) { stream:.write (self._f, 'f'c8); }
                    else { stream:.write (self._d); }
                }
            }
        }        
    }        
}
