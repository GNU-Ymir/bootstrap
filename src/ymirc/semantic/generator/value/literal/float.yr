mod ymirc::semantic::generator::value::literal::float;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::type::native::float;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;

import ymirc::utils::bigfloat;

/**
 * Float value
 */
pub class FloatValue over LiteralValue {

    /// The float value iif the type is f32
    let _f : &BigFloat;

    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &Type, f : f32) with super (loc, type), _f = BigFloat::new (f) {}

    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &Type, f : f64) with super (loc, type), _f = BigFloat::new (f) {}

    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &Type, f : &BigFloat) with super (loc, type), _f = f {}

    /**
     * ================================================================================
     * ================================================================================
     * ============================          GETTERS          =========================
     * ================================================================================
     * ================================================================================
     */

    pub def getValue (self)-> &BigFloat {
        self._f
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &FloatValue => { s._type == self._type && self._f == s._f }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._f);
            match self._type.asOf!{&FloatType}().getSize () {
                32u16 => { stream:.write (FloatSuffixes::F32); }
                64u16 => { stream:.write (FloatSuffixes::F64); }
                80u16 => { stream:.write (FloatSuffixes::F80); }
                _ => { stream:.write (FloatSuffixes::REAL); }
            }
        }        
    }        
}


/**
 * Create a FloatValue from a f64
 */
pub def floatValue (loc : &Word, d : f64 = 0.0, size : u16)-> &FloatValue {
    FloatValue::new (loc, FloatType::new (loc, size-> size), BigFloat::new (d))
}
