in float;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::{format, bigfloat};
use std::stream;

use ymirc::semantic::generator::type::native::scalar::float;

/**
 * Float value
 */
@final
pub class FloatValue over LiteralValue {

    // The float value iif the type is f32
    let _f : &BigFloat;

    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &FloatType, f : f32)
        with super (loc, type)
        , _f = BigFloat::new (f)
    {}

    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &FloatType, f : f64)
        with super (loc, type)
        , _f = BigFloat::new (f)
    {}

    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &FloatType, f : &BigFloat)
        with super (loc, type)
        , _f = f
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * ============================          GETTERS          =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> &BigFloat {
        self._f
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            s : &FloatValue => { self._f == s._f }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._f);
            if let f : &FloatType = self._type {
                match f.getSize () {
                    32u16 => { stream:.write (FloatSuffixes::F32); }
                    64u16 => { stream:.write (FloatSuffixes::F64); }
                    80u16 => { stream:.write (FloatSuffixes::F80); }
                    _ => { stream:.write (FloatSuffixes::REAL); }
                }
            } else panic;
        }        
    }        
}


/**
 * Create a FloatValue from a f64
 */
pub fn makeFloatValue (loc : &Word, d : f64, size : u16 = 0u16)-> &FloatValue {
    copy FloatValue (loc, copy FloatType (loc, size-> size), copy BigFloat (d))
}
<
