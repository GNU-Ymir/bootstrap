in struct_init;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type::custom::classptr;

@final
pub class StructInitValue over LiteralValue {

    // The inner values
    let _inners : [&Value];

    // The name of the fields (.len can be < _inners.len)
    let _fieldNames : [[c8]];

    /**
     * Create a new value
     */
    pub self (loc : &Word, type : &ClassPtrType, inners : [&Value], fieldNames : [[c8]], isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _inners = inners
        , _fieldNames = fieldNames
    {
        __version DEBUG {
            if (!type.isStruct ()) panic;
        }

        let mut throwers : [mut (&Word, &Type)] = [];
        for i in self._inners {
            throwers ~= i.getThrowers ();
        }

        self._throwers = throwers;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the tuple
     */
    pub fn getValues (self)-> [&Value] {
        self._inners
    }

    /**
     * @returns: the size of the tuple
     */
    pub fn getArity (self)-> usize {
        self._inners.len
    }

    /**
     * @returns: the names of the fields associated to the values
     * @warning: .len can be lower than getArity ()
     * */
    pub fn getFieldNames (self)-> [[c8]] {
        self._fieldNames
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            s : &StructInitValue => {
                if (s._inners.len != self._inners.len) return false;
                for i in 0us .. self._inners.len {
                    if (s._inners [i] != self._inners [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        for i in self._inners {
            if !i.isFullLiteral () return false;
        }

        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        let mut inners : [mut &Value] = [i.clone () for i in self._inners];

        if let t : &ClassPtrType = self._type {
            copy StructInitValue (self._loc, t,
                                  inners,
                                  fieldNames-> self._fieldNames,
                                  isReduced-> self._isReduced)
        } else panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('(');
            stream:.entabing ();
            for j, i in self._inners {
                if (j != 0us) stream:.write (", ");
                if (self._fieldNames.len > j) {
                    stream:.write (self._fieldNames [j], "-> ");
                }
                i.format (alias stream);
            }
            if (self._inners.len == 1us) stream:.write (',');
            stream:.detabing ();
            stream:.write (')');
        }
    }
}
