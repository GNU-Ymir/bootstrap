mod ymirc::semantic::generator::value::scope::loop_;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::literal::none;


/**
 */
pub class LoopValue over ScopeValue {

    /// The test of the condition
    let _test : &Value;

    /// The content if the test is respected
    let _content : &Value;

    /// True if it is a do while loop
    let _isDo : bool;
    
    /**
     * @params: 
     *   - loc: the location of the variable
     *   - type: the type of the loop
     *   - test: the test of the loop
     *   - content: the content of the loop if the test pass
     *   - isDo: true iif the loop is a do while
     */
    pub self (loc : &Word, type : &Type, test : &Value, content : &Value, isDo : bool)
        with super (loc, type), _test = test, _content = content, _isDo = isDo
    {
        self._throwers = self._test.getThrowers () ~ self._content.getThrowers ();
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the test of the condition
     */    
    pub def getTest (self)-> &Value {
        self._test
    }

    /**
     * @returns: the value to evaluate if the test is true
     */
    pub def getContent (self)-> &Value {
        self._content
    }

    /**
     * @returns: true iif the loop is a do while
     */
    pub def isDo (self)-> bool {
        self._isDo
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &LoopValue => {
                if (p._type != self._type) return false;
                if (self._test != p._test) return false;
                if (self._content != p._content) return false;
                
                true
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isDo) {
                stream:.write ("do "s8);
                self._content.format (alias stream);
                stream:.write (" while "s8, self._test, ';'c8);
            } else {
                match self._test {
                    NoneValue () => {
                        stream:.write ("loop "s8);
                    }
                    _ => {
                        stream:.write ("while "s8, self._test, ' 'c8);
                    }
                }
                
                self._content.format (alias stream);                
            }
        }        
    }
    
}



