in block;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;
use ymirc::semantic::generator::type;
use ymirc::semantic::generator::value::literal::unit;

/**
 * A block is a list of values
 */
@final
pub class BlockValue over ScopeValue {

    // The content of th block
    let _values : [&Value];

    // True if the final value is not the value of the block
    let _noValue : bool = false;

    // True iif the block is not a new scope
    let _isSet : bool;
    
    /**
     * @params: 
     *    - loc: the location of the block
     *    - type: the type of the block
     *    - values: the content of the block
     */
    pub self (loc : &Word, type : &Type, values : [&Value], breakLoc : &Word, returnLoc : &Word, isSet : bool = false, noValue : bool = false, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _values = values
        , _isSet = isSet
        , _noValue = noValue
    {
        self._breakLoc = breakLoc;
        self._returnLoc = returnLoc;

        let mut th : [mut (&Word, &Type)] = [];
        for i in values {
            th ~= i.getThrowers ();
        }

        self._throwers = th;
        if (self._isSet && self._values.len != 0us) {
            self._isLvalue = self._values [$ - 1us].isLvalue ();
        }
    }

    /**
     * @params:
     *    - loc: the location of the block
     *    - type: the type of the block
     *    - values: the values in the block
     *    - isSet: if the block is a set
     *    - noValue: if the block does not produce a value
     * */
    pub self (loc : &Word, type : &Type, values : [&Value], isSet : bool = false, noValue : bool = false)
        with super (loc, type, isReduced-> false)
        , _values = values
        , _isSet = isSet
        , _noValue = noValue
    {

        let dmut th = Vec!{(&Word, &Type)}::new ();
        for i in values {
            for j in i.getThrowers () {
                th:.push (j);
            }

            if (i.isReturner ()) self._returnLoc = i.getReturnerLoc ();
            if (i.isBreaker ()) self._returnLoc = i.getReturnerLoc ();
        }

        self._throwers = th[];
        if (self._isSet && self._values.len != 0us) {
            self._isLvalue = self._values [$ - 1us].isLvalue ();
        }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the list of values contained in the block
     */
    pub fn getValues (self)-> [&Value] {
        self._values
    }

    /**
     * @returns: true iif the block is just a set (does not enter a new scope)
     */
    pub fn isSet (self)-> bool {
        self._isSet
    }

    /**
     * @returns: true if the last value is not the value of the block
     * */
    pub fn noValue (self)-> bool {
        self._noValue
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &BlockValue => {
                if (p._values.len != self._values.len) return false;
                for i in 0us .. self._values.len {
                    if (self._values [i] != p._values [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        for i in self._values {
            if (!i.isFullLiteral ()) return false;
        }

        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        let result = copy [i.clone () for i in self._values];

        copy BlockValue (self._loc, self._type,
                         result,
                         breakLoc-> self._breakLoc,
                         returnLoc-> self._returnLoc,
                         isSet-> self._isSet,
                         noValue-> self._noValue,
                         isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                if (!self._isSet) {
                    stream:.write (Tokens::LACC, '\n');
                } else stream:.write ('#', Tokens::LACC, '\n');
                stream:.entabing ();

                for i in 0us .. self._values.len {
                    if (i != 0us) stream:.write (Tokens::SEMI_COLON, '\n');
                    self._values [i].format (alias stream);
                }

                if (self._noValue && self._values.len != 0us) {
                    stream:.write (Tokens::SEMI_COLON);
                }

                if (self._values.len == 0us) {
                    stream:.write (UNIT_VALUE);
                }

                stream:.detabing ();
                if (!self._isSet) {
                    stream:.write ('\n', Tokens::RACC);
                } else { stream:.write ('\n', '#', Tokens::RACC); }
            }
        }        
    }
    
}



