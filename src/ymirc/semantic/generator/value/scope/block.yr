mod ymirc::semantic::generator::value::scope::block;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;


/**
 * A block is a list of values
 */
pub class BlockValue over ScopeValue {

    /// The content of th block
    let _values : [&Value];

    // True if the final value is not the value of the block
    let _noValue : bool = false;

    /// True iif the block is not a new scope
    let _isSet : bool;
    
    /**
     * @params: 
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - isMutable: true iif the variable is declared mutable
     *    - isSelf: true iif the variable is self
     */
    pub self (loc : &Word, type : &Type, values : [&Value], breakLoc : &Word = EOF_WORD, returnLoc : &Word = EOF_WORD, isSet : bool = false, noValue : bool = false, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _values = values
        , _isSet = isSet
        , _noValue = noValue
    {
        self._breakLoc = breakLoc;
        self._returnLoc = returnLoc;
        
        let dmut th = Vec!{(&Word, &Type)}::new ();
        for i in values {
            for j in i.getThrowers () {
                th:.push (j);
            }
        }
        
        self._throwers = th[];        
        if (self._isSet && self._values.len != 0us) {
            self._isLvalue = self._values [$ - 1us].isLvalue ();
        }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the list of values contained in the block
     */
    pub fn getValues (self)-> [&Value] {
        self._values
    }

    /**
     * @returns: true iif the block is just a set (does not enter a new scope)
     */
    pub fn isSet (self)-> bool {
        self._isSet
    }

    /**
     * @returns: true if the last value is not the value of the block
     * */
    pub fn noValue (self)-> bool {
        self._noValue
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        let dmut vals = Vec!{&Value}::new ();
        for i in self._values {
            vals:.push (i.clone ());
        }

        BlockValue::new (self._loc, self._type, vals[], breakLoc-> self._breakLoc, returnLoc-> self._returnLoc, isSet-> self._isSet, noValue-> self._noValue, isReduced-> self._isReduced)
    }

    
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &BlockValue => {
                if (p._type != self._type) return false;
                if (p._values.len != self._values.len) return false;
                for i in 0us .. self._values.len {
                    if (self._values [i] != p._values [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }


    pub over needUniqness (self)-> bool {
        for v in self._values {
            if (v.needUniqness ()) { return true; }
        }
        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                if (!self._isSet) {
                    stream:.write (Tokens::LACC, '\n'c8);
                } else stream:.write ('#'c8, Tokens::LACC, '\n'c8);
                stream:.entabing ();

                for i in 0us .. self._values.len {
                    if (i != 0us) stream:.write (Tokens::SEMI_COLON, '\n'c8);
                    self._values [i].format (alias stream);
                }

                if (self._noValue && self._values.len != 0us) {
                    stream:.write (Tokens::SEMI_COLON);
                }

                if (self._values.len == 0us) {
                    stream:.write (UNIT_VALUE);
                }

                stream:.detabing ();
                if (!self._isSet) {
                    stream:.write ('\n'c8, Tokens::RACC);
                } else { stream:.write ('\n'c8, '#'c8, Tokens::RACC); }
            }
        }        
    }
    
}



