mod ymirc::semantic::generator::value::scope::goto;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::void_;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::literal::none;


/**
 * A goto expression
 * Generally generated during expansion, to expand conditionals, and loops
 * It is attached to a label, and jumps to it unconditionnaly
 * */
pub class GotoValue over ScopeValue {

    // The uniq id of the label value
    let _label : usize;

    // The name of the label where to jump
    let _labelName : [c8];

    /**
     * @params:
     *    - loc: the location of the goto
     *    - label: the uniq id of the label to which to jump
     *    - labelName: (for debug purpose) the name of the label to jump to
     * */
    pub self (loc : &Word, label : usize, labelName : [c8])
        with super (loc, VOID_TYPE)
        , _label = label
        , _labelName = labelName
    {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the uniq id of the label to jump to
     * */
    pub fn getLabel (self)-> usize {
        self._label
    }

    /**
     * @returns: the name of the label to jump to
     * */
    pub fn getLabelName (self)-> [c8] {
        self._labelName
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &GotoValue => {
                self._label == p._label
            }
            _ => { false }
        }
    }


    pub over needUniqness (self)-> bool {
        false
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("goto "s8, self._labelName, '('c8, self._label, ')');
        }
    }

}
