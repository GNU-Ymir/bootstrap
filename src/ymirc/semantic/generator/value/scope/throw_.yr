mod ymirc::semantic::generator::value::scope::throw_;


import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::void_;


/**
 * Throw statement
 */
pub class ThrowValue over Value {

    /// The value thrown
    let _value : &Value;

    /**
     * @params: 
     *   - value: the value returned by the throw
     */
    pub self (loc : &Word, value : &Value, isReduced : bool = false)
        with super (loc, VoidType::new (loc), isReduced-> isReduced)
        , _value = value
    {
        self._throwers = [(loc, value.getType ())];
        self._returnLoc = loc;
    }    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value returned by the throw
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            b : &ThrowValue => {
                self._value == b._value
            }
            _ => false
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        ThrowValue::new (self._loc, self._value.clone (), isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::THROW, " ");
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.detabing ();                
        }        

    }   
    
    
}

