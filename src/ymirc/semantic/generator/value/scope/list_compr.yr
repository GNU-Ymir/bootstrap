in list_compr;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;
use ymirc::semantic::generator::type;
use ymirc::semantic::generator::value::literal::unit;

@final
pub class ListComprValue over ScopeValue {

    let _bl : &BlockValue;

    pub self (loc : &Word, type : &Type, bl : &BlockValue, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _bl = bl
    {
        self._breakLoc = self._bl.getBreakerLoc ();
        self._returnLoc = self._bl.getReturnerLoc ();
        self._throwers = self._bl.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the list comprehension
     * */
    pub fn getContent (self)-> &BlockValue {
        self._bl
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &ListComprValue => {
                self._bl == p._bl
            }
            _ => false
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._bl.isFullLiteral ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        if let b : &BlockValue = self._bl.clone () {
            copy ListComprValue (self._loc,
                                 self._type,
                                 b,
                                 isReduced-> self._isReduced)
        } else panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            self._bl.format (alias stream);
        }
    }

}
