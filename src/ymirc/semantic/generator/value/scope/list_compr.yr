mod ymirc::semantic::generator::value::scope::list_compr;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::value::scope::block;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;


pub class ListComprValue over ScopeValue {

    let _bl : &BlockValue;

    pub self (loc : &Word, type : &Type, bl : &BlockValue, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _bl = bl
    {
        self._breakLoc = self._bl.getBreakerLoc ();
        self._returnLoc = self._bl.getReturnerLoc ();
        self._throwers = self._bl.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the list comprehension
     * */
    pub fn getContent (self)-> &BlockValue {
        self._bl
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        ListComprValue::new (self._loc, self._type, self._bl.clone ().asOf!{&BlockValue} (), isReduced-> self._isReduced)
    }



    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ListComprValue => {
                self._bl == p._bl
            }
            _ => false
        }
    }


    pub over needUniqness (self)-> bool {
        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            self._bl.format (alias stream);
        }
    }

}
