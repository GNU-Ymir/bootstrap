in panic_;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::semantic::generator::{type, type::native::scalar::void_};
use ymirc::semantic::generator::value::literal::unit;

/**
 * Panic statement
 */
@final
pub class PanicValue over Value {

    /**
     * @params:
     *   - value: the value returned by the panic
     */
    pub self (loc : &Word)
        with super (loc, VOID_TYPE, isReduced-> true)
    {
        self._returnLoc = loc;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            PanicValue () => true
            _ => false
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::PANIC);
        }
    }


}
