mod ymirc::semantic::generator::value::scope::tryfin;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;

pub class TryFinallyValue over ScopeValue {

    // The content of the try part
    let _tryBl : &Value;

    // The content of the finally part
    let _finally : &Value;

    // true iif the try part can throw an exception
    let _canThrow : bool;

    // The declaration of the variable to set to true, if the try succeeds
    let _failVar : &Value;

    pub self (loc : &Word, type : &Type, tryP : &Value, finP : &Value, failVar : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _failVar = failVar
        , _tryBl = tryP
        , _finally = finP
        , _canThrow = (tryP.getThrowers ().len != 0us)
    {
        self._breakLoc = self._tryBl._breakLoc;
        self._returnLoc = self._tryBl._returnLoc;
        self._throwers = self._tryBl.getThrowers ();

        // finally part cannot break, or return, nor can it throw exceptions
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the try part of the try finally block
     * */
    pub fn getTryPart (self)-> &Value {
        self._tryBl
    }

    /**
     * @returns: the finally part of the try finally block
     * */
    pub fn getFinallyPart (self)-> &Value {
        self._finally
    }

    /**
     * @returns: true if the try part can throw an exception
     * */
    pub fn canTryThrow (self)-> bool {
        self._canThrow
    }

    /**
     * @returns: the variable that is check in case of failure/success scope guards
     * */
    pub fn getFailVar (self)-> &Value {
        self._failVar
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &TryFinallyValue => {
                if (p._type != self._type) return false;
                if (p._tryBl != self._tryBl) return false;
                if (p._finally != self._finally) return false;
                if (p._failVar != self._failVar) return false;

                true
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write ("try {\n");
                stream:.entabing ();
                if (!self._failVar.isOf!{&UnitValue} ()) {
                    self._failVar.format (alias stream);
                    stream:.write ("\n");
                }

                self._tryBl.format (alias stream);
                stream:.detabing ();
                stream:.write ("\n} finally {\n");
                stream:.entabing ();
                self._finally.format (alias stream);
                stream:.detabing ();
                stream:.write ("\n}");
            }
        }
    }


}
