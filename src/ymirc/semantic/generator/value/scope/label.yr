mod ymirc::semantic::generator::value::scope::label;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::void_;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::literal::none;


/**
 * A goto expression
 * Generally generated during expansion, to expand conditionals, and loops
 * It is attached to a label, and jumps to it unconditionnaly
 * */
pub class LabelValue over ScopeValue {

    // The name of the label (for debug purpose only)
    let _name : [c8];

    /**
     * @params:
     *    - loc: the location of the label
     *    - name: the name of the label (for debug purpose)
     * */
    pub self (loc : &Word, name : [c8])
        with super (loc, VOID_TYPE)
        , _name = name
    {}

        /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the label
     * */
    pub fn getName (self)-> [c8] {
        self._name
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        return self._uniqId == o._uniqId;
    }


    pub over needUniqness (self)-> bool {
        false
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("label "s8, self._name, '('c8, self._uniqId, ')');
        }
    }




}
