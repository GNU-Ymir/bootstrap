in trycatch;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;
use ymirc::semantic::generator::type;
use ymirc::semantic::generator::value::literal::unit;

@final
pub class TryCatchValue over ScopeValue {

    // The content of the try part
    let _tryBl : &Value;

    // The content of the catcher part
    let _catchP : &Value;

    // true iif the try part can throw an exception
    let _canThrow : bool;

    // The declaration of the variable that will catchP the thrown error
    let _catchVar : &Value;

    pub self (loc : &Word, type : &Type, tryP : &Value, catchP : &Value, catchVar : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _catchVar = catchVar
        , _tryBl = tryP
        , _catchP = catchP
        , _canThrow = (tryP.getThrowers ().len != 0us)
    {
        // throwers from try part are caught by the catcP
        self._throwers = self._catchP.getThrowers ();

        // return iif try and catch are returner
        if (self._tryBl.isReturner () && self._catchP.isReturner ()) {
            self._returnLoc = self._tryBl.getReturnerLoc ();
        }

        // breaker iif try and catch are breaker
        if (self._tryBl.isBreaker () && self._catchP.isBreaker ()) {
            self._breakLoc = self._tryBl.getBreakerLoc ();
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the try part of the try catchP block
     * */
    pub fn getTryPart (self)-> &Value {
        self._tryBl
    }

    /**
     * @returns: the catchP part of the try catchP block
     * */
    pub fn getCatchPart (self)-> &Value {
        self._catchP
    }

    /**
     * @returns: the variable that is check in case of catchure/success scope guards
     * */
    pub fn getCatchVar (self)-> &Value {
        self._catchVar
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &TryCatchValue => {
                if (p._tryBl != self._tryBl) return false;
                if (p._catchP != self._catchP) return false;
                if (p._catchVar != self._catchVar) return false;

                true
            }
            _ => { false }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        copy TryCatchValue (self._loc, self._type,
                            self._tryBl.clone (),
                            self._catchP.clone (),
                            self._catchVar.clone (),
                            isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.tags.forParams) {
                stream:.write ("_");
            } else {
                stream:.write ("try {\n");
                stream:.entabing ();
                self._tryBl.format (alias stream);
                stream:.detabing ();

                stream:.write ("\n} catch {\n");
                stream:.entabing ();
                self._catchVar.format (alias stream);
                stream:.write ("\n");
                self._catchP.format (alias stream);
                stream:.detabing ();
                stream:.write ("\n}");
            }
        }
    }


}
