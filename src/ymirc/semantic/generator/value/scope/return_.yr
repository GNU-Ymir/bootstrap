in return_;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::semantic::generator::{type, type::native::scalar::void_};
use ymirc::semantic::generator::value::literal::unit;


/**
 * Return statement
 */
@final
pub class ReturnValue over Value {

    // The value returned by the return
    let _value : &Value;

    /**
     * @params: 
     *   - value: the value returned by the return
     */
    pub self (loc : &Word, value : &Value, isReduced : bool = false)
        with super (loc, VOID_TYPE, isReduced-> isReduced)
        , _value = value
    {
        self._returnLoc = loc;
        self._throwers = self._value.getThrowers ();
    }    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value returned by the return
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            b : &ReturnValue => {
                self._value == b._value
            }
            _ => false
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        copy ReturnValue (self._loc, self._value.clone (), isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::RETURN, " ");
            match self._value {
                UnitValue () => { stream:.write ("{}"); }
                _ => {
                    self._value.format (alias stream);
                }
            }
        }        

    }   
    
    
}

