mod ymirc::semantic::generator::value::scope::condition;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::literal::unit;


/**
 */
pub class ConditionalValue over ScopeValue {

    /// The test of the condition
    let _test : &Value;

    /// The content if the test is respected
    let _content : &Value;

    /// The content otherwise
    let _else : &Value;

    /// True if the conditional always leads to a value
    let _isComplete : bool;
    
    /**
     * @params: 
     *   - loc: the location of the variable
     *   - type: the type of the variable
     *   - test: the test of the condition
     *   - content: the content if the test pass
     *   - elsev: the content if the test does not pass
     *   - isComplete: true iif all branches of the condition lead to a value
     */
    pub self (loc : &Word, type : &Type, test : &Value, content : &Value, elsev : &Value, isComplete : bool = false, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _test = test
        , _content = content
        , _else = elsev
        , _isComplete = isComplete
    {
        self._throwers = self._test.getThrowers () ~ self._content.getThrowers () ~ self._else.getThrowers ();
        if (!content._returnLoc.isEof () && !elsev._returnLoc.isEof ()) {
            self._returnLoc = content._returnLoc;
        } else if (!content._returnLoc.isEof () && elsev.isOf!{&UnitValue} () && isComplete) {
            self._returnLoc = content._returnLoc;
        }

        if (!content._breakLoc.isEof () && !elsev._breakLoc.isEof ()) {
            self._breakLoc = content._breakLoc;
        } else if (!content._breakLoc.isEof () && elsev.isOf!{&UnitValue} () && isComplete) {
            self._breakLoc = content._breakLoc;
        }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the test of the condition
     */    
    pub fn getTest (self)-> &Value {
        self._test
    }

    /**
     * @returns: the value to evaluate if the test is true
     */
    pub fn getValue (self)-> &Value {
        self._content
    }

    /**
     * @returns: the value to evaluate if the test is false
     */
    pub fn getElse (self)-> &Value {
        self._else
    }

    /**
     * @returns: true iif every branches of the condition leads to a value
     */
    pub fn isComplete (self)-> bool {
        self._isComplete
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        ConditionalValue::new (self._loc, self._type, self._test.clone (), self._content.clone (), self._else.clone (), isComplete-> self._isComplete, isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ConditionalValue => {
                if (p._type != self._type) return false;
                if (self._isComplete != p._isComplete) return false;
                if (self._test != p._test) return false;
                if (self._content != p._content) return false;
                if (self._else != p._else) return false;
                
                true
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        if (self._test.needUniqness ()) { return true; }
        if (self._content.needUniqness ()) { return true; }
        if (self._else.needUniqness ()) { return true; }
        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write ("if "s8, self._test, ' 'c8);
                self._content.format (alias stream);
                match self._else {
                    UnitValue () => {}
                    _ => {
                        stream:.write (" else "s8, self._else);
                    }
                }
            }
        }        
    }
    
}



