mod ymirc::semantic::generator::value::scope::condjmp;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::void_;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::literal::none;


/**
 * A goto expression
 * Generally generated during expansion, to expand conditionals, and loops
 * It is attached to two labels, and jumps to them conditionnaly
 * */
pub class CondJmpValue over ScopeValue {

    // The condition to meet
    let _cond : &Value;

    // The uniq id of the label value
    let _labelThen : usize;

    // The name of the label where to jump
    let _labelThenName : [c8];

    // The uniq id of the label value
    let _labelElse : usize;

    // The name of the label where to jump
    let _labelElseName : [c8];

    /**
     * @params:
     *    - loc: the location of the goto
     *    - label: the uniq id of the label to which to jump
     *    - labelName: (for debug purpose) the name of the label to jump to
     * */
    pub self (loc : &Word, cond : &Value, labelThen : usize, labelThenName : [c8], labelElse : usize, labelElseName : [c8])
        with super (loc, VOID_TYPE)
        , _cond = cond
        , _labelThen = labelThen
        , _labelThenName = labelThenName
        , _labelElse = labelElse
        , _labelElseName = labelElseName
    {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the condition to meet
     * */
    pub fn getCond (self)-> &Value {
        self._cond
    }

    /**
     * @returns: the uniq id of the label to jump to if the condition is met
     * */
    pub fn getLabelThen (self)-> usize {
        self._labelThen
    }

    /**
     * @returns: the name of the label to jump to if the condition is met
     * */
    pub fn getLabelThenName (self)-> [c8] {
        self._labelThenName
    }

    /**
     * @returns: the uniq id of the label to jump to if the condition is not met
     * */
    pub fn getLabelElse (self)-> usize {
        self._labelElse
    }

    /**
     * @returns: the name of the label to jump to if the condition is not met
     * */
    pub fn getLabelElseName (self)-> [c8] {
        self._labelElseName
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &CondJmpValue => {
                self._labelThen == p._labelThen && self._labelElse == p._labelElse && self._cond == p._cond
            }
            _ => { false }
        }
    }


    pub over needUniqness (self)-> bool {
        false
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("if "s8, self._cond);
            stream:.write (" goto ", self._labelThenName, '('c8, self._labelThen, ')');
            stream:.write (" else ", self._labelElseName, '('c8, self._labelElse, ')');
        }

    }


}
