mod ymirc::semantic::generator::value::base;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::_;
import ymirc::semantic::generator::type::base;

/**
 * Ancestor of all kind of values
 */
pub class @abstract Value over Generator {

    /// The type of the value
    let _type : &Type;

    /// The list of types that can be thrown by the value
    let mut _throwers : [&Type] = [];

    /// true iif the value call a return in every branch
    let mut _isReturner : bool = false;

    /// true iif the value call a break in every branch
    let mut _isBreaker : bool = false;
    
    /**
     * @params: 
     *    - loc: the location of the value
     */
    pub self (loc : &Word, type : &Type) with super (loc), _type = type {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the type of the value
     */
    pub def getType (self)-> &Type {
        self._type
    }

    /**
     * @returns: the list of types that can be thrown by the value
     */
    pub def getThrowers (self)-> [&Type] {
        self._throwers
    }

    /**
     * @returns: true iif the value call a return in every branch
     */
    pub def isReturner (self)-> bool {
        self._isReturner
    }

    /**
     * @breaks: true iif the value call a break in every branch
     */
    pub def isBreaker (self)-> bool {
        self._isBreaker
    }
    
    
}

