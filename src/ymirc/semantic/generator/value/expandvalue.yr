in expandvalue;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

use ymirc::lexing::tokens;
use ymirc::syntax::keys;

use ymirc::semantic::generator::{type,
                                 type::native::scalar::none_,
                                 value::literal::unit};

/**
 * A expand is a list of values
 */
@final
pub class ExpandValue over Value {

    // The content of the expand
    let _values : [&Value];
    
    
    /**
     * @params: 
     * @params: 
     *   - loc: the location of the expand
     *   - values: the list of values contained in the expand
     */
    pub self (loc : &Word, values : [&Value])
        with super (loc, NONE_TYPE, isReduced-> true)
        , _values = values
    {        
        let mut th : [mut (&Word, &Type)] = [];
        for i in values {
            th ~= i.getThrowers ();

            if (i.isBreaker ()) self._breakLoc = i.getBreakerLoc ();
            if (i.isReturner ()) self._returnLoc = i.getReturnerLoc ();
        }
        
        self._throwers = th;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValues (self)-> [&Value] {
        self._values
    }            
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &ExpandValue => {
                if (p._values.len != self._values.len) return false;
                for i in 0us .. self._values.len {
                    if (self._values [i] != p._values [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        for i in self._values {
            if !i.isFullLiteral () return false;
        }

        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the expand
     */
    pub fn getInnerValues (self)-> [&Value] {
        self._values
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        let result = copy [i.clone () for i in self._values];
        copy ExpandValue (self._loc, result)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::EXPAND, ' ', Tokens::LPAR);
            stream:.entabing ();
            for i in 0us .. self._values.len {
                if (i != 0us) stream:.write (", "s8);
                self._values [i].format (alias stream);
            }
            stream:.detabing ();
            stream:.write (Tokens::RPAR);
        }        
    }
    
}



