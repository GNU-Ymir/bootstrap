mod ymirc::semantic::generator::value::expandvalue;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::expandtype;


/**
 * A expand is a list of values
 */
pub class ExpandValue over Value {

    /// The content of the expand
    let _values : [&Value];
    
    
    /**
     * @params: 
     * @params: 
     *   - loc: the location of the expand
     *   - values: the list of values contained in the expand
     */
    pub self (loc : &Word, values : [&Value])
        with super (loc, EXPAND_TYPE), _values = values
    {        
        let dmut th = Vec!{(&Word, &Type)}::new ();
        for i in values {
            for j in i.getThrowers () {
                th:.push (j);
            }
        }
        
        self._throwers = th[];
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValues (self)-> [&Value] {
        self._values
    }            
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ExpandValue => {
                if (p._values.len != self._values.len) return false;
                for i in 0us .. self._values.len {
                    if (self._values [i] != p._values [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the expand
     */
    pub fn getInnerValues (self)-> [&Value] {
        self._values
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::EXPAND, ' 'c8, Tokens::LPAR);
            stream:.entabing ();
            for i in 0us .. self._values.len {
                if (i != 0us) stream:.write (", "s8);
                self._values [i].format (alias stream);
            }
            stream:.detabing ();
            stream:.write (Tokens::RPAR);
        }        
    }
    
}



