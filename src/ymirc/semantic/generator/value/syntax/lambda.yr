mod ymirc::semantic::generator::value::syntax::lambda;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::value::base;

import ymirc::syntax::expression::_;

/**
 * The value wrapper expression is a convinient expression that is used for syntax rewritting
 * It contains a semantic value, that is directly returned when validated
 * This class is used to put semantic elements inside syntax trees
 */
pub class LambdaValueWrapperExpr over Expression {

    // The name of the temlate value in the rewritter
    let _name : [c8];

    // The type of the value to finalize, before transforming
    let _type : &FunctionPtrTypeExpr;

    /// The content of the wrapper
    let _content : &Value;

    pub self (loc : &Word, name : [c8], func : &FunctionPtrTypeExpr, content : &Value)
        with super (loc)
        , _name = name
        , _content = content
        , _type = func
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value contained inside the wrapper
     */
    pub fn getValue (self)-> &Value {
        self._content
    }

    /**
     * @returns: the function type of the expression
     * */
    pub fn getType (self)-> &FunctionPtrTypeExpr {
        self._type
    }

    pub fn getName (self)-> [c8] {
        self._name
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            v : &LambdaValueWrapperExpr => {
                v._content == self._content && v._type == self._type
            }
            _ => { false }
        }
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._type, " = (");
            stream:.entabing ();
            self._content.format (alias stream);
            stream:.detabing ();
            stream:.write (")");
        }
    }

}
