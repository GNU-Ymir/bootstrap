mod ymirc::semantic::generator::value::syntax::wrapper;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::literal::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::base;

import ymirc::syntax::expression::_;

/**
 * The value wrapper expression is a convinient expression that is used for syntax rewritting
 * It contains a semantic value, that is directly returned when validated
 * This class is used to put semantic elements inside syntax trees
 */
pub class ValueWrapperExpr over Expression {

    /// The content of the wrapper
    let _content : &Value;

    pub self (loc : &Word, content : &Value)
        with super (loc), _content = content
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value contained inside the wrapper
     */
    pub fn getValue (self)-> &Value {
        self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Expression)-> bool {
        match o {
            v : &ValueWrapperExpr => {
                v._content == self._content
            }
            _ => { false }
        }
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            self._content.format (alias stream);
        }
    }

}


/**
 * The value wrapper expression is a convinient expression that is used for syntax rewritting
 * It contains a semantic value, that is directly returned when validated
 * This class is used to put semantic elements inside syntax trees 
 */
pub class ExprWrapperValue over Value {

    /// The content of the wrapper    
    let _content : &Expression;

    pub self (loc : &Word, content : &Expression)
        with super (loc, NoneType::new (loc)), _content = content
    {}
        
    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value contained inside the wrapper
     */
    pub fn getContent (self)-> &Expression {
        self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            v : &ExprWrapperValue => {
                v._content == self._content
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        false
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            self._content.format (alias stream);
        }        
    }
        
}
