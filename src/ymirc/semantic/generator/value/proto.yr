mod ymirc::semantic::generator::value::proto;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::none;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::proto;
import ymirc::semantic::symbol::function;



/**
 * A prototype is the prototype of function that can be called
 */
pub class PrototypeValue over Value {


    /// The symbol of the function
    let _sym : &FunctionSymbol;

    /// The list of parameters of the prototype
    let _parameters : [&Value];

    /// The return type of the function
    let _retType : &Type;
      
    /**
     * @params: 
     *   - loc: the location of the reference
     *   - sym: the module symbol
     */
    pub self (loc : &Word, sym : &FunctionSymbol, parameters : [&Value], retType : &Type, throwers : [&Type])
        with super (loc, PrototypeType::new (loc)), _sym = sym, _parameters = parameters, _retType = retType
    {
        self._throwers = throwers;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the parameters of the prototype
     */
    pub def getParameters (self)-> [&Value] {
        self._parameters
    }

    /**
     * @returns: the return type of the prototype
     */
    pub def getRetType (self)-> &Type {
        self._retType
    }
    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &PrototypeValue => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._sym.getPath ().toStr (sep-> "::"s8), '('c8);
            stream:.entabing ();
            for i, j in self._parameters {
                if (i != 0us) stream:.write (", "s8);
                j.format (alias stream);
            }
            stream:.write (")-> "s8);
            self._retType.format (alias stream);
            stream:.detabing ();
        }        
    }
    
}



