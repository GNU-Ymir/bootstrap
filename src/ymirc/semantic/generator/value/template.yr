in template;

pub mod ::ctor;
pub mod ::method;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::type::native::scalar::none_;
use ymirc::semantic::symbol::{template, class_};
use ymirc::syntax::declaration::function;
use ymirc::syntax::expression::{vardecl, empty};

/**
 * A module reference is a variable refering to a module symbol
 */
pub class TemplateRefValue over Value {

    // The location of the module
    let _declLoc : &Word;

    // The symbol
    let _sym : &TemplateSymbol;

    /**
     * @params:
     *   - loc: the location of the reference
     *   - sym: the module symbol
     */
    pub self (loc : &Word, sym : &TemplateSymbol)
        with super (loc, NONE_TYPE, isReduced-> true)
        , _declLoc = sym.getLoc ()
        , _sym = sym
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &TemplateRefValue => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the module symbol that is refered to
     */
    pub fn getSymbol (self)-> &TemplateSymbol {
        self._sym
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.hasCustomFormatTag ("withParams")) {
                stream:.write (self._sym.getPath ().toStr (), " {");
                for i, z in self._sym.getContent ().getParameters () {
                    if i != 0us stream:.write (", ");
                    stream:.write (z);
                }
                stream:.write ("}");
                match self._sym.getContent ().getContent () {
                    f : &FunctionDecl => {
                        stream:.write ("(");
                        for i, p in f.getFunctionProto ().getParameters () {
                            if i != 0us stream:.write (", ");
                            stream:.write (p);
                        }
                        stream:.write (")");
                        match f.getFunctionProto ().getRetType () {
                            EmptyExpression () => {}
                            x : _ => {
                                stream:.write ("-> ", x);
                            }
                        }
                    }
                }
            } else {
                stream:.write (self._sym.getPath ().toStr (), " {");
                for i, z in self._sym.getContent ().getParameters () {
                    if i != 0us stream:.write (", ");
                    stream:.write (z);
                }
                stream:.write ("}");
            }
        }
    }
}
