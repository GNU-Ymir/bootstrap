mod ymirc::semantic::generator::value::vardecl;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io, std::conv;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::void_;



/**
 * A var decl is a variable declared in a function
 */
pub class VarDeclValue over Value {

    // The type of the variable declared (self.getType () always return Void)
    let _varType : &Type;

    /// The value of the variable
    let _value : &Value;

    /// True if the variable is declared mutable
    let _isMutable : bool;

    /// True if the variable is a reference (only used inside pattern matching)
    let _isReference : bool;

    /// True if the variable is lazy
    let _isLazy : bool;

    /// True iif it can create cte var references
    let _isCte : bool;

    /// True iif it is an iterator var decl
    let _isIterator : bool;

    /**
     * @params: 
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - isMutable: true iif the variable is declared mutable
     */
    pub self (loc : &Word, type : &Type, value : &Value, isMutable : bool, isCte : bool = true, isReference : bool = false, isLazy : bool = false, isIterator : bool = false, isReduced : bool = false)
        with super (loc, VoidType::new (loc), isReduced-> isReduced)
        , _value = value
        , _isMutable = isMutable
        , _isReference = isReference
        , _varType = type
        , _isCte = isCte
        , _isLazy = isLazy
        , _isIterator = isIterator
    {
        __version DEBUG {
            if (isReference && isLazy) __pragma!panic ();
        }

        self._throwers = self._value.getThrowers ();
        self._breakLoc = self._value.getBreakerLoc ();
        self._returnLoc = self._value.getReturnerLoc ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &VarDeclValue => {
                if (!self._loc.isSame (p._loc)) return false;
                if (self._varType != p._varType) return false;
                if (self._isReference != p._isReference) return false;
                if (self._isLazy != p._isLazy) return false;
                if (self._isMutable != p._isMutable) return false;
                if (self._isCte != p._isCte) return false;
                if (self._isIterator != p._isIterator) return false;

                true
            }
            _ => { false }
        }
    }

    /**
     * A var declaration is full literal if the var is ignored, and the value is a full literal
     * */
    pub over isFullLiteral (self)-> bool {
        if (self._loc.str () == Keys::UNDER) {
            return self._value.isFullLiteral ();
        }

        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value of the var decl
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the type of the variable that was declared
     * */
    pub fn getVarType (self)-> &Type {
        self._varType
    }

    /**
     * @returns: true if the var is declared mutable
     */
    pub fn isMutable (self)-> bool {
        self._isMutable
    }

    /**
     * @returns: true iif the var can be used to create cte var references
     * */
    pub fn isCte (self)-> bool {
        self._isCte
    }

    /**
     * @returns: true iif the var is lazy
     * */
    pub fn isLazy (self)-> bool {
        self._isLazy
    }

    /**
     * @returns: true iif the var was declared as a for loop iterator
     * */
    pub fn isIterator (self)-> bool {
        self._isIterator
    }

    /**
     * @returns: true iif the var is a reference to a value (only declarable inside a pattern matching)
     * */
    pub fn isReference (self)-> bool {
        self._isReference
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("let "s8);
            if (self._isReference) stream:.write (Keys::REF, ' 'c8);
            if (self._isLazy) stream:.write (Keys::LAZY, ' 'c8);
            if (self._isMutable) stream:.write (Keys::MUTABLE, ' 'c8);

            stream:.write (self._loc.str ());
            if (stream.withVarIds ()) {
                stream:.write ("(#"s8, self._uniqId.to!{[c8], 36us} (), ')'c8);
            }
            
            stream:.entabing ();
            stream:.write (" : "s8, self._varType);
            match self._value {
                UnitValue () => {}
                _ => {
                    stream:.write (" = "s8);
                    stream:.write (self._value);
                }
            }
            
            stream:.detabing ();
        }        
    }
    
}



