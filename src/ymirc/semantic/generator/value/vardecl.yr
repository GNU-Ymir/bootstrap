mod ymirc::semantic::generator::value::vardecl;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io, std::conv;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::none;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;



/**
 * A var decl is a variable declared in a function
 */
pub class VarDeclValue over Value {

    /// The value of the variable
    let _value : &Value;

    /// True if the variable is declared mutable
    let _isMutable : bool;

    /// True iif the variable is declare pure
    let _isPure : bool;
    
    /**
     * @params: 
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - isMutable: true iif the variable is declared mutable
     */
    pub self (loc : &Word, type : &Type, value : &Value, isMutable : bool, isPure : bool)
        with super (loc, type), _value = value, _isMutable = isMutable, _isPure = isPure 
    {
        __version DEBUG {
            if !(!isMutable || !isPure) {
                __pragma!panic ();
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &VarDeclValue => {
                self._loc.isSame (p._loc)
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value of the var decl
     */
    pub def getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: true if the var is declared mutable
     */
    pub def isMutable (self)-> bool {
        self._isMutable
    }

    /**
     * @returns: true if the var is declared pure
     */
    pub def isPure (self)-> bool {
        self._isPure
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("let "s8);
            if (self._isMutable) stream:.write ("mut "s8);
            else if (self._isPure) stream:.write ("pure "s8);

            stream:.write (self._loc.str (), "(#"s8, self._uniqId.to!{[c8], 36us} (), ')'c8, " : "s8);
            stream:.entabing ();
            stream:.write (self._type);
            match self._value {
                NoneValue () => {}
                _ => {
                    stream:.write (" = "s8);
                    stream:.write (self._value);
                }
            }
            
            stream:.detabing ();
        }        
    }
    
}



