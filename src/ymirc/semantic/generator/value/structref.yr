mod ymirc::semantic::generator::value::structref;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::structref;
import ymirc::semantic::symbol::struct_;


/**
 * A struct reference is a variable refering to a struct symbol
 */
pub class StructCtorRefValue over Value {

    /// The location of the struct
    let _declLoc : &Word;

    /// The symbol
    let _sym : &StructSymbol;


    /**
     * @params:
     *   - loc: the location of the reference
     *   - sym: the struct symbol
     */
    pub self (loc : &Word, sym : &StructSymbol)
        with super (loc, STRUCT_REF_TYPE, isReduced-> true)
        , _declLoc = sym.getLoc ()
        , _sym = sym
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &StructCtorRefValue => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the struct symbol that is refered to
     */
    pub fn getSymbol (self)-> &StructSymbol {
        self._sym
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        self
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._sym.getPath ().toStr ());
        }
    }

}
