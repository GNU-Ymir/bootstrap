mod ymirc::semantic::generator::value::methodproto;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::protovar;
import ymirc::semantic::generator::value::literal::none;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::classref;
import ymirc::semantic::generator::type::temporary::proto;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::value::proto;

/**
 * A method prototype value is a prototype value, to which is attach a class symbol
 * It may also have a trait symbol, when the prototype was defined by a trait implementation
 */
pub class MethodPrototypeValue over PrototypeValue {

    /// True iif the self parameter is mutable
    let _isMutable : bool;

    /// The class that defines this prototype
    let _clRef : &ClassRefType;

    /// The trait that defines this prototype (can be EmptySymbol, thus the generic type)
    let _traitSymbol : &Symbol;

    /// True iif the method was marked as final
    let _isFinal : bool;

    /// True iif the associated symbol has no body
    let _isEmpty : bool;

    /// True iif the method symbol was an override
    let _isOver : bool;

    /// True iif the prototype refers to a constructor (it is called differently than standard methods)
    let _isCtor : bool;

    /// The rename of the method def (only applicable if self._isCtor)
    let _rename : [c8] = ""s8;

    /**
     * @params: 
     *   - loc: the location of the prototype
     *   - sym: the function that defines the prototype
     *   - parameters: the list of parameters of the prototype
     *   - retType: the return type of the prototype
     *   - throwers: the list of types that are thrown by the prototype
     *   - clRef: the class defining the method
     *   - trRef: the trait defining the method
     *   - isMutable: true iif the self parameter is mutable
     *   - isFinal: true iif the method is marked as final
     *   - isEmpty: true iif the method has no body
     */
    pub self (loc : &Word, sym : &Symbol, rename : [c8] = ""s8, parameters : [&ProtoVarValue], retType : &Type, throwers : [&Type], clRef : &ClassRefType, trRef : &Symbol = EMPTY_SYMBOL, isMutable : bool, isFinal : bool = false, isEmpty : bool = false, isOver : bool = false, isCtor : bool = false)
        with super (loc, sym, parameters, retType, throwers), _clRef = clRef, _traitSymbol = trRef, _isFinal = isFinal, _isEmpty = isEmpty, _isMutable = isMutable, _isOver = isOver, _isCtor = isCtor, _rename = rename
    {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &MethodPrototypeValue => {
                self._sym == p._sym && self._clRef == p._clRef && self._isCtor == p._isCtor
            }
            _ => { false }
        }
    }

    /**
     * @returns: true if the prototype is similar to 'o', but not necessarily the with the same clRef, it is only prototype comparison
     */
    pub over isSimilar (self, o : &Value)-> bool {
        match o {
            p : &MethodPrototypeValue => {
                if (p._isMutable != self._isMutable) return false;
                if (p._parameters.len != self._parameters.len) return false;
                if (p._isCtor != self._isCtor) return false;
                if (self._retType != p._retType) return false;
                if (self._isCtor) {
                    if (self._rename != p._rename) return false;
                    for i in 0us .. self._parameters.len {
                        if (self._parameters [i] != p._parameters[i]) return false;
                    }
                } else if (self._parameters.len > 1us) {
                    for i in 1us .. self._parameters.len { // start at 1, because we want to ignore self parameter
                        if (self._parameters [i] != p._parameters[i]) return false;
                    }                    
                }
                
                true
            }
            _ => { false }
        }
    }    

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the trait symbol that defines the method 
     * @warning: maybe EmptySymbol
     */
    pub def getTrait (self)-> &Symbol {
        self._traitSymbol
    }

    /**
     * @returns: the type of self of the method
     */
    pub def getClassRef (self)-> &ClassRefType {
        self._clRef
    }

    /**
     * @returns: true iif the method was an override     
     */
    pub def isOver (self)-> bool {
        self._isOver
    }

    /**
     * @returns: true iif the method was declared final
     */
    pub def isFinal (self)-> bool {
        self._isFinal
    }

    /**
     * @returns: true iif the method is a constructor
     */
    pub def isCtor (self)-> bool {
        self._isCtor
    }

    /**
     * @returns: the rename of the constructor (only has an impact if self.isCtor ())
     */
    pub def getRename (self)-> [c8] {
        self._rename
    }


    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isCtor) {
                stream:.write (self._sym.getPath ().toStr (sep-> "::"s8));
                if (self._rename != ""s8) stream:.write ("::"s8, self._rename);
                stream:.write ('('c8);
                
                stream:.entabing ();
                for i, j in self._parameters {
                    if (i != 0us) stream:.write (", "s8);
                    j.format (alias stream);
                }
                stream:.write (")-> "s8);
                self._retType.format (alias stream);
                stream:.detabing ();

            } else {
                self::super.format (alias stream);
            }            
        }
        
    }
    
}


