mod ymirc::semantic::generator::value::lambda;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

import ymirc::syntax::expression::_;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::protovar;
import ymirc::semantic::generator::value::literal::none;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::type::temporary::proto;
import ymirc::semantic::symbol::function;
import ymirc::semantic::symbol::path;
import ymirc::syntax::keys;


/**
 * The lambda value unlike PrototypeValue stores a uncomplete prototype to a lambda 
 * It stores a syntaxic element that will be validated only when it will be called
 * Its validation (done in the will create a prototypevalue and the frame that is associated
 */
pub class LambdaValue over Value {

    /// The list of parameters of the Lambda
    let _parameters : [&Value];

    /// The return type of the function
    let _retType : &Type;

    /// The content of the lambda value
    let _content : &Expression;

    /// The name of the lambda (only for compiler, lambda are anonymus variable)
    let _name : &SymbolPath;

    /// True if the lambda enclose the declaring frame
    let _closure : bool;

    /// The index of the lambda (cf ClosureType and visitor _symbols)
    let _index : usize;
    
    /**
     * @params: 
     *   - loc: the location of the reference
     *   - type: a semi validated type
     *   - parameters: the list of parameters
     *   - retType: the return type of the lambda
     *   - name: the name of the prototype
     *   - closure: true if this is a closure (a simple fn otherwise)
     *   - index: the index of the proto
     */
    pub self (loc : &Word, type : &Type, name : &SymbolPath, parameters : [&Value], retType : &Type, content : &Expression, closure : bool, index : usize)
        with super (loc, type, isReduced-> true)
        , _parameters = parameters
        , _name = name
        , _retType = retType
        , _closure = closure
        , _index = index
        , _content = content
    {}
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the lambda
     */
    pub fn getName (self)-> &SymbolPath {
        self._name
    }
    
    /**
     * @returns: the parameters of the Lambda
     */
    pub fn getParameters (self)-> [&Value] {
        self._parameters
    }

    /**
     * @returns: the return type of the Lambda
     */
    pub fn getRetType (self)-> &Type {
        self._retType
    }

    /**
     * @returns: the content of the lambda
     */
    pub fn getContent (self)-> &Expression {
        self._content
    }

    /**
     * @returns: true iif the lambda is a closure
     */
    pub fn isClosure (self)-> bool {
        self._closure
    }

    /**
     * @returns: the uniq index of the closure (relevant iif self.isClosure ())
     */
    pub fn getClosureIndex (self)-> usize {
        self._index
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &LambdaValue => {
                if (p._index != self._index) return false;
                if (p._closure != self._closure) return false;
                if (p._name != self._name) return false;
                // if (p._content != self._content) return false;
                // if (p._retType != self._retType) return false;
                // if (p._parameters.len != self._parameters.len) return false;
                // for i in 0us .. self._parameters.len {
                //     if (self._parameters [i] != p._parameters [i]) return false;
                // }                    

                true
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        false
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._closure) stream:.write (Keys::COPY);
            stream:.write ('|'c8);
            stream:.entabing ();
            for i, j in self._parameters {
                if (i != 0us) stream:.write (", "s8);
                j.format (alias stream);
            }
            stream:.write ('|'c8);
            match self._retType {
                NoneType () => {}
                _ => {
                    stream:.write ("-> "s8);
                    self._retType.format (alias stream);
                }
            }
            stream:.write (" => "s8);
            self._content.format (alias stream);
            stream:.detabing ();
        }        
    }
    
}



