mod ymirc::semantic::generator::value::construct::range;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::_;
import ymirc::semantic::generator::type::base;

/**
 * Constructor of range value
 */
pub class RangeValue over ConstructValue {

    /// The left value of the range
    let _left : &Value;

    /// The right value of the range    
    let _right : &Value;

    /// The step of the range 
    let _step : &Value;

    /// Enclose the right value ?
    let _full : &Value;
    
    /**
     * @params: 
     *   - loc: the location of the range value
     *   - type: the type of the range value
     *   - left: the left operand of the value
     *   - right: the right operand of the value
     *   - step: the step of the range
     *   - full: a bool typed value, defining wether the right value is enclosed in the range
     */
    pub self (loc : &Word, type : &RangeType, left : &Value, right : &Value, step : &Value = UnitValue::new (), full : &Value = BoolValue::new (EOF_WORD, false), isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _left = left
        , _right = right
        , _step = step
        , _full = full
    {            
        self._throwers = left.getThrowers () ~ right.getThrowers () ~ step.getThrowers () ~ full.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the left operand of the range value
     */
    pub fn getLeft (self)-> &Value {
        self._left
    }

    /**
     * @returns: the right operand of the range value
     */
    pub fn getRight (self)-> &Value {
        self._right
    }

    /**
     * @returns: the value determining if the range is full
     */
    pub fn getIsFull (self)-> &Value {
        self._full
    }

    /**
     * @returns: the value containing the step of the range (might be none)
     */
    pub fn getStep (self)-> &Value {
        self._step
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &RangeValue => {
                if (p._left != self._left) return false;
                if (p._right != self._right) return false;
                if (p._full != self._full) return false;
                if (p._step != self._step) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._left.isFullLiteral () && self._right.isFullLiteral () && self._step.isFullLiteral () && self._full.isFullLiteral ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {


        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write ('('c8);
                stream:.write (self._left);

                stream:.write (" ..["s8, self._full, "] "s8);

                stream:.write (self._right);
                stream:.write (')'c8);
                match self._step {
                    UnitValue () => {}
                    _ => { stream:.write (".step_by ("s8);
                           stream:.write (self._step);
                           stream:.write (')'c8);
                    }
                }
            }
        }        
    }       
    
}

