mod ymirc::semantic::generator::value::construct::cast_;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::_;
import ymirc::semantic::generator::value::base;


/**
 * Constructor of a value from a casted value
 * A cast value is a simple transformation of type (at low level) without data conversion
 */
pub class CastValue over ConstructValue {

    /// The value that is casted
    let _content : &Value;

    /**
     * @params:
     *    - loc: the location of the cast
     *    - type: the type of the value (the type of the destination)
     *    - content: the value that is casted
     */
    pub self (loc : &Word, type : &Type, content : &Value, isLvalue : bool = false, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _content = content
    {
        self._throwers = content.getThrowers ();
        self._isLvalue = isLvalue;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value that is casted
     */
    pub fn getValue (self)-> &Value {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            c : &CastValue => {
                c._content == self._content &&
                    self._type == c._type
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        self._content.needUniqness ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.writef ("cast!{%}(%)", self._type, self._content);
        }
    }

}
