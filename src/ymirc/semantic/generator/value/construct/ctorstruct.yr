mod ymirc::semantic::generator::value::construct::ctorstruct;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::_;
import ymirc::semantic::generator::value::base;


/**
 * Constructor of a value from a ctorstructed value
 * A ctorstruct value is a simple transformation of type (at low level) without data conversion
 */
pub class StructCtorCallValue over ConstructValue {

    /// The values used to construct the struct
    let _params : [&Value];

    /**
     * @params:
     *    - loc: the location of the ctorstruct
     *    - type: the type of the value (the type of the destination)
     *    - content: the value that is ctorstructed
     */
    pub self (loc : &Word, type : &Type, params : [&Value], isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _params = params
    {
        let dmut thr = Vec!{(&Word, &Type)}::new ();
        for i in self._params {
            for j in i.getThrowers () { thr:.push (j); }
        }

        self._throwers = thr[];
        self._isLvalue = false;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the parameters used to construct the struct
     */
    pub fn getParameters (self)-> [&Value] {
        self._params
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        let dmut params = Vec!{&Value}::new ();
        for p in self._params {
            params:.push (p.clone ());
        }

        StructCtorCallValue::new (self._loc, self._type, params[], isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            c : &StructCtorCallValue => {
                self._params == c._params &&
                    self._type == c._type
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        for i in self._params {
            if i.needUniqness () return true;
        }

        return false;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            match self._type {
                s : &StructType => {
                    stream:.writef ("% (%)", s.getStructRef (), self._params);
                }
                _ => {
                    stream:.writef ("% (%)", self._type, self._params);
                }
            }
        }
    }

}
