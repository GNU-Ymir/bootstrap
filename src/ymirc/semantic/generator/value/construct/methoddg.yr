mod ymirc::semantic::generator::value::construct::methoddg;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::fs::path;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::type::native::scalar::delegate;
import ymirc::semantic::generator::value::construct::base;
import ymirc::semantic::generator::value::prototypes::methodproto;

import std::collection::vec;

pub class MethodDelegateValue over ConstructValue {

    // The name of the function being pointed
    let _proto : &MethodPrototypeValue;

    // direct access to the prototype (by its name), otherwise using the vtable index
    let _isDirect : bool;

    // The index of the proto in the vtable
    let _vtableIndex : usize; 
    
    // The closure value
    let _closure : &Value;
    
    /**
     * @params:
     *    - name: the name of the function pointed
     *    - closure: the closure content
     *    - references: for each parameter, true iif the param is a reference
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, meth : &MethodPrototypeValue, closure : &Value, direct : bool, vtableIndex : usize)
        with super (loc, methoddg::createDelegateTypeFromPrototype (meth), isReduced-> true)
        , _proto = meth
        , _closure = closure
        , _isDirect = direct
        , _vtableIndex = vtableIndex
    {
        self._throwers = self._closure.getThrowers ();
    }



    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the prototype of the method being accessed
     */
    pub fn getPrototype (self)-> &MethodPrototypeValue {
        self._proto
    }    

    /**
     * @returns: the closure value
     */
    pub fn getClosure (self)-> &Value {
        self._closure
    }

    /**
     * @returns: the index of the method being accessed in the vtable
     */
    pub fn getVtableIndex (self)-> usize {
        self._vtableIndex
    }

    /**
     * @returns: true iif the access of the method is made by name, otherwise it is made by vtable access
     */
    pub fn isDirect (self)-> bool {
        self._isDirect
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        MethodDelegateValue::new (self._loc, self._proto, self._closure.clone (), self._isDirect, self._vtableIndex)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &MethodDelegateValue => {
                p._proto == self._proto &&
                    self._closure == p._closure &&
                    self._isDirect == p._isDirect && 
                    self._vtableIndex == p._vtableIndex
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        self._closure.needUniqness ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                if (stream.hasCustomFormatTag ("withParams"s8)) {
                    stream:.write (self._closure, ".", self._proto);
                } else {
                    stream:.write ("{.func = ", self._proto, ", .closure = ", self._closure, "}");
                }
            }
        }        

    }

}


fn createDelegateTypeFromPrototype (methodProto : &MethodPrototypeValue)-> &Type {
    let dmut types = Vec!{&Type}::new ();
    let dmut references = Vec!{bool}::new ();
    let dmut lazys = Vec!{bool}::new ();

    for pi in methodProto.getParameters () match (pi.isReference (), pi.isLazy (), pi.getType ()) {
        (isRef : _, isLazy : _, ty : _) => {
            types:.push (ty);
            references:.push (isRef);
            lazys:.push (isLazy);
        }
    }

    return DelegateType::new (methodProto.getLoc (), references[], lazys[], types[], methodProto.getRetType ())
}
