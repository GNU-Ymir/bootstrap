mod ymirc::semantic::generator::value::construct::none;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::construct::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::null_;
import ymirc::semantic::generator::type::native::compound::option;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::base;

/**
 * A none value is an empty value reprensenting an unset option value
 */
pub class ErrOptionValue over ConstructValue {

    // The error value (for try catch, NullValue for none)
    let _err : &Value;

    pub self (loc : &Word, type : &OptionType = OptionType::new (Word::eof (), NONE_TYPE), errValue : &Value = NullValue::new (Word::eof ()), isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _err = errValue
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * ===========================          GETTERS          ==========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> &Value {
        self._err
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        ErrOptionValue::new (self._loc, type-> self._type, errValue-> self._err.clone (), isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            ErrOptionValue () => { true }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._err.isOf!{&NullValue} ()) {
                stream:.write (Keys::NONE);
            } else {
                stream:.write (format ("{.ok = false, .error = %}", self._err));
            }
        }
    }
}
