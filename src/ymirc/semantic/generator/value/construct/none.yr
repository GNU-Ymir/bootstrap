mod ymirc::semantic::generator::value::construct::none;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::construct::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::null_;
import ymirc::semantic::generator::type::native::compound::option;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::base;

/**
 * A none value is an empty value reprensenting an unset option value
 */
pub class ErrOptionValue over ConstructValue {

    // The error value (for try catch, NullValue for none)
    let _err : &Value;

    pub self (loc : &Word, type : &OptionType = OptionType::new (Word::eof (), NONE_TYPE), errValue : &Value = NullValue::new (Word::eof ()), isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _err = errValue
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * ===========================          GETTERS          ==========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> &Value {
        self._err
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &ErrOptionValue => {
                if (self._err != p._err) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        ErrOptionValue::new (self._loc,
                             type-> self._type.asOf!{&OptionType} (),
                             errValue-> self._err.clone (),
                             isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._err.isOf!{&NullValue} ()) {
                // if (!self._type.isOf!{&NoneType} ()) {
                //     stream:.write ("(", Keys::NONE, " as ", self._type, ")");
                // } else {
                stream:.write (Keys::NONE);
                // }
            } else {
                stream:.write (format ("{.ok = false, .error = %}", self._err));
            }
        }
    }
}
