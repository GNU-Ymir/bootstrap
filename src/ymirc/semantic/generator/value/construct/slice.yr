mod ymirc::semantic::generator::value::construct::slice;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::null_;
import ymirc::semantic::generator::value::construct::base;

/**
 * Constructor of a slice value from ptr and len fields
 */
pub class SliceCtorValue over ConstructValue {

    /// The left value of the range
    let _ptr : &Value;

    /// The right value of the range
    let _len : &Value;

    /// The block information (containing metadata used when appening data to the slice)
    let _blk : &Value;

    // true iif the ctor is a implicit alias
    let _implicitAlias : bool;

    /**
     * @params:
     *   - loc: the location of the range value
     *   - type: the type of the range value
     *   - ptr: the pointer operand of the value
     *   - len: the len operand of the value
     */
    pub self (loc : &Word, type : &Type, ptr : &Value, blk : &Value, len : &Value, isImplicitAlias : bool, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _ptr = ptr
        , _blk = blk
        , _len = len
        , _implicitAlias = isImplicitAlias
    {
        self._throwers = ptr.getThrowers () ~ len.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the pointer value of the slice constructor
     */
    pub fn getPointer (self)-> &Value {
        self._ptr
    }

    /**
     * @returns: the len value of the slice constructor
     */
    pub fn getLen (self)-> &Value {
        self._len
    }

    /**
     * @returns: the block info of the slice
     * */
    pub fn getBlk (self)-> &Value {
        self._blk
    }

    /**
     * @returns: true iif the slice ctor can be implicitly aliased
     * */
    pub fn isImplicitAlias (self)-> bool {
        self._implicitAlias
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &SliceCtorValue => {
                if (p._ptr != self._ptr) return false;
                if (p._blk != self._blk) return false;
                if (p._len != self._len) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._ptr.isFullLiteral () && self._len.isFullLiteral ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        SliceCtorValue::new (self._loc, self._type,
                             ptr-> self._ptr.clone (),
                             len-> self._len.clone (),
                             blk-> self._blk.clone (),
                             isImplicitAlias-> self._implicitAlias,
                             isReduced-> self._isReduced)
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {


        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else if (stream.hasCustomFormatTag ("forDebug"s8) && !self._blk.isOf!{&NullValue} ()) {
                stream:.write ("{.len = ", self._len, ", .ptr = ", self._ptr, ", .blk = ", self._blk, "}");
            } else {
                stream:.write ("{.len = ", self._len, ", .ptr = ", self._ptr, "}");
            }
        }
    }

}
