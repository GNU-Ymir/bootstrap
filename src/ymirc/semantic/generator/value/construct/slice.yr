mod ymirc::semantic::generator::value::construct::slice;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::_;
import ymirc::semantic::generator::type::base;

/**
 * Constructor of range value
 */
pub class SliceCtorValue over ConstructValue {

    /// The left value of the range
    let _ptr : &Value;

    /// The right value of the range
    let _len : &Value;

    /**
     * @params:
     *   - loc: the location of the range value
     *   - type: the type of the range value
     *   - ptr: the pointer operand of the value
     *   - len: the len operand of the value
     */
    pub self (loc : &Word, type : &Type, ptr : &Value, len : &Value)
        with super (loc, type), _ptr = ptr, _len = len
    {
        self._throwers = ptr.getThrowers () ~ len.getThrowers ();
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the pointer value of the slice constructor
     */
    pub fn getPointer (self)-> &Value {
        self._ptr
    }

    /**
     * @returns: the len value of the slice constructor
     */
    pub fn getLen (self)-> &Value {
        self._len
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &SliceCtorValue => {
                p._ptr == self._ptr &&
                    p._len == self._len
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {


        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('['c8);
            stream:.write (self._ptr);
            stream:.write (" ; "s8, self._len, "]"s8);
        }
    }

}
