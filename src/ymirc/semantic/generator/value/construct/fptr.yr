mod ymirc::semantic::generator::value::construct::fptr;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::fs::path;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::type::native::fptr;
import ymirc::semantic::generator::value::construct::base;
import ymirc::semantic::generator::value::prototypes::ctorproto;

pub class FuncPtrValue over ConstructValue {

    // The name of the function being pointed
    let _name : &Path;

    /**
     * @params:
     *    - name: the name of the function pointed
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, name : &Path, parameters : [&Type], retType : &Type)
        with super (loc, FuncPtrType::new (loc, parameters, retType)), _name = name
    {}   



    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the function being pointed
     */
    pub def getName (self)-> &Path {
        self._name
    }    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &FuncPtrValue => {
                p._name.toStr () == self._name.toStr () &&
                    p._type == self._type
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._name.toStr (sep-> "::"s8));            
        }        

    }
    

}
