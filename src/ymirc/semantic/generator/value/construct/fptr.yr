mod ymirc::semantic::generator::value::construct::fptr;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::fs::path;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::type::native::scalar::fptr;
import ymirc::semantic::generator::value::construct::base;
import ymirc::semantic::generator::value::prototypes::nameproto;

pub class NameFuncPtrValue over ConstructValue {

    // The name of the function being pointed
    let _name : &NamePrototypeValue;

    /**
     * @params:
     *    - name: the name of the function pointed
     *    - closure: the closure content
     *    - references: for each parameter, true iif the param is a reference
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, name : &NamePrototypeValue, references : [bool], parameters : [&Type], retType : &Type)
        with super (loc, FuncPtrType::new (loc, references, parameters, retType, isMutable-> false), isReduced-> true)
        , _name = name
    {
        self._throwers = self._name.getThrowers ();
    }

    self (loc : &Word, name : &NamePrototypeValue, type : &Type)
        with super (loc, type, isReduced-> true)
        , _name = name
    {
        self._throwers = self._name.getThrowers ();
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the function being pointed
     */
    pub fn getPrototype (self)-> &NamePrototypeValue {
        self._name
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        NameFuncPtrValue::new (self._loc, self._name, self._type)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &NameFuncPtrValue => {
                p._name == self._name &&
                    p._type == self._type
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write (self._name);
            }
        }

    }


}
