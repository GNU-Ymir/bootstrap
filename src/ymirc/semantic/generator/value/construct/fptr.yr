in fptr;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys
use std::stream;

use ymirc::semantic::generator::type::native::scalar::fptr;
use ymirc::semantic::generator::value::prototypes::proto;

@final
pub class ProtoFuncPtrValue over ConstructValue {

    // The proto of the function being pointed
    let _proto : &PrototypeValue;

    /**
     * @params:
     *    - name: the name of the function pointed
     *    - closure: the closure content
     *    - references: for each parameter, true iif the param is a reference
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, proto : &PrototypeValue, references : [bool], lazys : [bool], parameters : [&Type], retType : &Type)
        with super (loc, copy FuncPtrType (loc, references, lazys, parameters, retType, isMutable-> false), isReduced-> true)
        , _proto = proto
    {
        self._throwers = self._proto.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the function being pointed
     */
    pub fn getPrototype (self)-> &PrototypeValue {
        self._proto
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return true;

        match o {
            p : &ProtoFuncPtrValue => {
                if (p._proto != self._proto) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        true
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write (Keys::FUNCTION, ' ', self._proto);
            }
        }

    }


}
