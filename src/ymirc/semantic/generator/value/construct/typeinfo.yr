mod ymirc::semantic::generator::value::construct::typeinfo;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::_;
import ymirc::semantic::generator::type::base;

/**
 * Constructor of range value
 */
pub class TypeInfoValue over ConstructValue {

    // The id of the typeinfo
    let _id : &IntValue;

    // The size of the type
    let _size : &IntValue;

    // The list of inner types
    let _inner : &Value;

    // The name of the type
    let _name : &StringValue;

    /**
     * @params:
     *    - loc: the location of the typeinfo
     *    - type: the type of the typeinfo
     *    - id: the id of the typeinfo (TypeIDS)
     *    - size: the size of the type
     *    - inner: the inner types
     *    - name: the name of the type
     * */
    pub self (loc : &Word, type : &Type, id : usize, size : usize, inner : &Value, name : [c8])
        with super (loc, type)
        , _id = makeIntValue (loc, id, size-> 32u16, signed-> false)
        , _size = makeIntValue (loc, size)
        , _inner = inner
        , _name = makeStringValue (loc, name)
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the id of the typeinfo
     * */
    pub fn getId (self)-> &IntValue {
        self._id
    }

    /**
     * @returns: the size of the type
     * */
    pub fn getSize (self)-> &IntValue {
        self._size
    }

    /**
     * @returns: the slice containing inner values
     * */
    pub fn getInners (self)-> &Value {
        self._inner
    }

    /**
     * @returns: the name of the type
     * */
    pub fn getName (self)-> &StringValue {
        self._name
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &TypeInfoValue => {
                p._id == self._id
                    && p._size == self._size
                    && p._inner == self._inner
                    && p._name == self._name
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (format ("TI[%,%,%,%]", self._id, self._size, self._inner, self._name));
        }
    }



}
