in typeinfo;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::value::literal::{int, string};

/**
 * Constructor of range value
 */
@final
pub class TypeInfoValue over ConstructValue {

    // The id of the typeinfo
    let _id : &IntValue;

    // The size of the type
    let _size : &IntValue;

    // The list of inner types
    let _inner : &Value;

    // The name of the type
    let _name : &StringValue;

    /**
     * @params:
     *    - loc: the location of the typeinfo
     *    - type: the type of the typeinfo
     *    - id: the id of the typeinfo (TypeIDS)
     *    - size: the size of the type
     *    - inner: the inner types
     *    - name: the name of the type
     * */
    pub self (loc : &Word, type : &Type, id : usize, size : usize, inner : &Value, name : [c8])
        with super (loc, type, isReduced-> true)
        , _id = makeIntValue (loc, id, size-> 32u16, signed-> false)
        , _size = makeIntValue (loc, size)
        , _inner = inner
        , _name = makeStringSliceValue (loc, name)
    {}

    self (loc : &Word, type : &Type, id : &IntValue, size : &IntValue, inner : &Value, name : &StringValue)
        with super (loc, type, isReduced-> true)
        , _id = id
        , _size = size
        , _inner = inner
        , _name = name
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the id of the typeinfo
     * */
    pub fn getId (self)-> &IntValue {
        self._id
    }

    /**
     * @returns: the size of the type
     * */
    pub fn getSize (self)-> &IntValue {
        self._size
    }

    /**
     * @returns: the slice containing inner values
     * */
    pub fn getInners (self)-> &Value {
        self._inner
    }

    /**
     * @returns: the name of the type
     * */
    pub fn getName (self)-> &StringValue {
        self._name
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        copy TypeInfoValue (self._loc, self._type,
                            self._id,
                            self._size,
                            self._inner.clone (), self._name)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &TypeInfoValue => {
                if (p._id != self._id) return false;
                if (p._size != self._size) return false;
                if (p._inner != self._inner) return false;
                if (p._name != self._name) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        if (!self._id.isFullLiteral ()) return false;
        if (!self._size.isFullLiteral ()) return false;
        if (!self._inner.isFullLiteral ()) return false;
        if (!self._name.isFullLiteral ()) return false;

        return true;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            if (stream.tags.forParams) {
                stream:.write ("_");
            } else {
                stream:.write (format ("TI[%,%,%,%]", self._id, self._size, self._inner, self._name, tags-> stream.tags));
            }
        }
    }
}
