mod ymirc::semantic::generator::value::construct::methodtemplate;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::fs::path;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::construct::base;
import ymirc::semantic::generator::value::template::_;

import std::collection::vec;

pub class MethodDelegateTemplateValue over ConstructValue {

    // The name of the function being pointed
    let _proto : &TemplateRefMethodValue;

    // The closure value
    let _closure : &Value;

    /**
     * @params:
     *    - name: the name of the function pointed
     *    - closure: the closure content
     *    - references: for each parameter, true iif the param is a reference
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, meth : &TemplateRefMethodValue, closure : &Value)
        with super (loc, NONE_TYPE, isReduced-> true)
        , _proto = meth
        , _closure = closure
    {
        self._throwers = self._closure.getThrowers ();
    }



    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the prototype of the method being accessed
     */
    pub fn getPrototype (self)-> &TemplateRefMethodValue {
        self._proto
    }

    /**
     * @returns: the closure value
     */
    pub fn getClosure (self)-> &Value {
        self._closure
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        MethodDelegateTemplateValue::new (self._loc, self._proto, self._closure.clone ())
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &MethodDelegateTemplateValue => {
                p._proto == self._proto &&
                    self._closure == p._closure
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        self._closure.needUniqness ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                if (stream.hasCustomFormatTag ("withParams"s8)) {
                    stream:.write (self._closure, ".", self._proto);
                } else {
                    stream:.write ("{.func = ", self._proto, ", .closure = ", self._closure, "}");
                }
            }
        }

    }

}
