mod ymirc::semantic::generator::value::construct::delegate::fakemethod;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::fs::path;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::construct::delegate::base;
import ymirc::semantic::generator::value::prototypes::proto;
import ymirc::semantic::generator::value::prototypes::nameproto;
import ymirc::semantic::generator::value::memory::referencer;

import ymirc::syntax::keys;

pub class FakeMethodDelegateValue over DelegateValue {

    // The proto of the function being pointed
    let _proto : &PrototypeValue;

    // The closure value
    let _closure : &Value;

    // The rename (for pretty print only)
    let _protoRename : [c8];

    /**
     * @params:
     *    - proto: the proto of the function pointed
     *    - closure: the closure content
     *    - references: for each parameter, true iif the param is a reference
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, proto : &PrototypeValue, closure : &Value, protoName : [c8] = ""s8)
        with super (loc, NONE_TYPE, isReduced-> true)
        , _proto = proto
        , _closure = closure
        , _protoRename = delegate::fakemethod::getProtoSimpleName (proto, protoName)
    {
        self._throwers = self._closure.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the proto of the function being pointed
     */
    pub fn getPrototype (self)-> &PrototypeValue {
        self._proto
    }

    /**
     * @returns: the closure value
     */
    pub fn getClosure (self)-> &Value {
        self._closure
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &FakeMethodDelegateValue => {
                if (p._proto != self._proto) return false;
                if (p._closure != self._closure) return false;
                if (p._protoRename != self._protoRename) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._closure.isFullLiteral ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                if (stream.hasCustomFormatTag ("withParams"s8)) {
                    match self._closure {
                        r : &ReferencerValue => { stream:.write (r.getValue ()); }
                        _ => {
                            stream:.write (self._closure);
                        }
                    }

                    stream:.write (".", self._protoRename, " ("s8);
                    stream:.entabing ();
                    for i, j in self._proto.getParameters () [1us .. $] {
                        if (i != 0us) stream:.write (", "s8);
                        j.format (alias stream);
                    }
                    stream:.write (")-> "s8);
                    self._proto.getRetType ().format (alias stream);
                    stream:.detabing ();
                } else {
                    stream:.write ('{'c8, self._closure, ';'c8, self._proto, '}'c8);
                }
            }
        }

    }

}

/**
 * Get the name of the prototype used by a fake method
 * */
fn getProtoSimpleName (proto : &PrototypeValue, protoRename : [c8])-> [c8] {
    if (protoRename != ""s8) return protoRename;

    match proto {
        n : &NamePrototypeValue => {
            n.getName ().file ()
        }
        p : _ => {
            p.getSymbol ().getPath ().file ()
        }
    }
}
