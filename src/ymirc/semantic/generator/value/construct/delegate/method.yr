mod ymirc::semantic::generator::value::construct::delegate::method;

import ymirc::lexing::word;
import ymirc::utils::format;
import ymirc::syntax::keys;

import std::io;
import std::fs::path;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::void_;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::type::native::scalar::delegate;
import ymirc::semantic::generator::value::construct::delegate::base;
import ymirc::semantic::generator::value::prototypes::methodproto;

import std::collection::vec;

pub class @final MethodDelegateValue over DelegateValue {

    // The name of the function being pointed
    let _proto : &MethodPrototypeValue;

    // direct access to the prototype (by its name), otherwise using the vtable index
    let _isDirect : bool;

    // The index of the proto in the vtable
    let _vtableIndex : usize; 
    
    // The closure value
    let _closure : &Value;

    // True iif it is a delegate over a struct type
    let _isStruct : bool;

    // Set when the delegate is enclosed in a '&' unary operator
    let _isAddressed : &Word;
    
    /**
     * @params:
     *    - name: the name of the function pointed
     *    - closure: the closure content
     *    - references: for each parameter, true iif the param is a reference
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, meth : &MethodPrototypeValue, closure : &Value, direct : bool, isStruct : bool, vtableIndex : usize, isAddressed : &Word = EOF_WORD)
        with super (loc, delegate::method::createDelegateTypeFromPrototype (isStruct, meth), isReduced-> true)
        , _proto = meth
        , _closure = closure
        , _isDirect = direct
        , _vtableIndex = vtableIndex
        , _isStruct = isStruct
        , _isAddressed = isAddressed
    {
        self._throwers = self._closure.getThrowers ();
    }



    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the prototype of the method being accessed
     */
    pub fn getPrototype (self)-> &MethodPrototypeValue {
        self._proto
    }    

    /**
     * @returns: the closure value
     */
    pub fn getClosure (self)-> &Value {
        self._closure
    }

    /**
     * @returns: the index of the method being accessed in the vtable
     */
    pub fn getVtableIndex (self)-> usize {
        self._vtableIndex
    }

    /**
     * @returns: true iif the access of the method is made by name, otherwise it is made by vtable access
     */
    pub fn isDirect (self)-> bool {
        self._isDirect
    }

    /**
     * @returns: true iif it is a delegate over a struct type
     * */
    pub fn isStruct (self)-> bool {
        self._isStruct
    }

    /**
     * @returns: true if the method is transformed in a delegate value
     * */
    pub fn isAddressed (self)-> bool {
        !self._isAddressed.isEof ()
    }

    /**
     * @returns: the location of the '&' operator, if the delegate was addressed
     * */
    pub fn getAddressedLoc (self)-> &Word {
        self._isAddressed
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        MethodDelegateValue::new (self._loc, self._proto, self._closure.clone (), self._isDirect, self._vtableIndex, isStruct-> self._isStruct)
    }

    pub fn cloneAsAddressed (self, loc : &Word)-> &MethodDelegateValue {
        MethodDelegateValue::new (self._loc, self._proto, self._closure.clone (), self._isDirect, self._vtableIndex, isStruct-> self._isStruct, isAddressed-> loc)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &MethodDelegateValue => {
                p._proto == self._proto &&
                    self._closure == p._closure &&
                    self._isDirect == p._isDirect && 
                    self._vtableIndex == p._vtableIndex
                    self._isStruct == p._isStruct
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        self._closure.needUniqness ()
    }

    pub over isFullLiteral (self)-> bool {
        self._closure.isFullLiteral ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                if (self.isAddressed ()) stream:.write (Keys::DELEGATE, " "s8);
                if (stream.hasCustomFormatTag ("withParams"s8)) {
                    stream:.write (self._closure, ".", self._proto);
                } else {
                    stream:.write ("{.func = ", self._proto, ", .closure = ", self._closure, "}");
                }
            }
        }        

    }

}


fn createDelegateTypeFromPrototype (isStruct : bool, methodProto : &MethodPrototypeValue)-> &Type {
    if (isStruct) return VoidType::new (methodProto.getLoc ());
    else {
        let dmut types = Vec!{&Type}::new ();
        let dmut references = Vec!{bool}::new ();
        let dmut lazys = Vec!{bool}::new ();

        for pi in methodProto.getParameters () match (pi.isReference (), pi.isLazy (), pi.getType ()) {
            (isRef : _, isLazy : _, ty : _) => {
                types:.push (ty);
                references:.push (isRef);
                lazys:.push (isLazy);
            }
        }

        return DelegateType::new (methodProto.getLoc (), references[], lazys[], types[], methodProto.getRetType ())
    }
}
