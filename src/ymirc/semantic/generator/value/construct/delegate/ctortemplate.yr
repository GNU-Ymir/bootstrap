mod ymirc::semantic::generator::value::construct::delegate::ctortemplate;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::fs::path;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::none;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::value::construct::delegate::base;
import ymirc::semantic::generator::value::template::_;

import std::collection::vec;

pub class CtorDelegateTemplateValue over DelegateValue {

    // The name of the function being pointed
    let _proto : &TemplateRefCtorValue;

    // The closure value
    let _instance : &Value;

    // The type of the instance that will be generated once the ctor is finished
    let _instanceType : &Type;

    /**
     * @params:
     *    - name: the name of the function pointed
     *    - closure: the closure content
     *    - references: for each parameter, true iif the param is a reference
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, type : &Type, meth : &TemplateRefCtorValue, instance : &Value = UnitValue::new ())
        with super (loc, NONE_TYPE, isReduced-> true)
        , _proto = meth
        , _instance = instance
        , _instanceType = type
    {
        self._throwers = self._instance.getThrowers ();
    }



    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the prototype of the method being accessed
     */
    pub fn getPrototype (self)-> &TemplateRefCtorValue {
        self._proto
    }

    /**
     * @returns: the closure value
     */
    pub fn getInstance (self)-> &Value {
        self._instance
    }

    /**
     * @returns: the type of the instance that the ctor can generate once template specialization is done
     * */
    pub fn getInstanceType (self)-> &Type {
        self._instanceType
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &CtorDelegateTemplateValue => {
                if (self._instance != p._instance) return false;
                if (p._proto != self._proto) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._instance.isFullLiteral ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write (self._proto);
                match self._instance {
                    UnitValue () => {}
                    _ => {
                        stream:.write ('('c8);
                        stream:.write (self._instance);
                        stream:.write (')'c8);
                    }
                }
            }
        }

    }

}
