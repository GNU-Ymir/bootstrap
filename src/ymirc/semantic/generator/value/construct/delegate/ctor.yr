mod ymirc::semantic::generator::value::construct::delegate::ctor;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::value::construct::delegate::base;
import ymirc::semantic::generator::value::prototypes::_;

/**
 * Constructor of class value, associate an instance of classptr to a ctorprototypevalue
 * CtorPrototypeValue are not callable without an instance, that is why we have this delegate that encapsulate the instance
 */
pub class CtorDelegateValue over DelegateValue {

    // The value of the instance (of type ClassPtrType, if UnitValue, then it is constructed by this delegate before the call, with a runtime call)
    let _instance : &Value;

    /// The prototype of the constructor to call
    let _proto : &CtorPrototypeValue;

    let _instanceType : &Type;

    /**
     * @params: 
     *    - loc: the location of the construction
     *    - type: the type returned by the construction
     *    - instance: the instance that is constructed (if not specified create one)
     *    - proto: the ctor that is called
     */
    pub self (loc : &Word, type : &Type, instance : &Value = UnitValue::new (), proto : &CtorPrototypeValue, isReduced : bool = false)
        with super (loc, NONE_TYPE, isReduced-> isReduced)
        , _instance = instance
        , _proto = proto
        , _instanceType = type
    {
        self._throwers = self._instance.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the instance that is used (can be UnitValue)
     */
    pub fn getInstance (self)-> &Value {
        return self._instance
    }
    
    /**
     * @returns: the prototype that is called
     */
    pub fn getPrototype (self)-> &CtorPrototypeValue {
        self._proto
    }

    /**
     * @returns: the type of the instance created by calling the ctor
     * */
    pub fn getInstanceType (self)-> &Type {
        self._instanceType
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &CtorDelegateValue => {
                if (p._instance != self._instance) return false;
                if (p._proto != self._proto) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._instance.isFullLiteral ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        CtorDelegateValue::new (self._loc,
                                self._type,
                                instance-> self._instance.clone (),
                                self._proto,
                                isReduced-> self._isReduced)
   }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {


        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write (self._proto);
                stream:.entabing ();
                match self._instance {
                    UnitValue () => {}
                    _ => {
                        stream:.write ('('c8);
                        stream:.write (self._instance);
                        stream:.write (')'c8);
                    }
                }

                stream:.detabing ();
            }
        }        
    }
    
}
