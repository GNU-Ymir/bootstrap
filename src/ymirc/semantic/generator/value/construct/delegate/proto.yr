mod ymirc::semantic::generator::value::construct::delegate::proto;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::fs::path;

import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::type::native::scalar::delegate;
import ymirc::semantic::generator::value::construct::delegate::base;
import ymirc::semantic::generator::value::prototypes::proto;

pub class ProtoDelegateValue over DelegateValue {

    // The proto of the function being pointed
    let _proto : &PrototypeValue;

    // The closure value
    let _closure : &Value;

    /**
     * @params:
     *    - proto: the proto of the function pointed
     *    - closure: the closure content
     *    - references: for each parameter, true iif the param is a reference
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, proto : &PrototypeValue, closure : &Value, references : [bool], lazys : [bool], parameters : [&Type], retType : &Type)
        with super (loc, DelegateType::new (loc, references, lazys, parameters, retType), isReduced-> true)
        , _proto = proto
        , _closure = closure
    {
        self._throwers = self._closure.getThrowers ();
    }

    self (loc : &Word, proto : &PrototypeValue, closure : &Value, type : &Type)
        with super (loc, type, isReduced-> true)
        , _proto = proto
        , _closure = closure
    {
        self._throwers = self._proto.getThrowers () ~ self._closure.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the proto of the function being pointed
     */
    pub fn getPrototype (self)-> &PrototypeValue {
        self._proto
    }

    /**
     * @returns: the closure value
     */
    pub fn getClosure (self)-> &Value {
        self._closure
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        ProtoDelegateValue::new (self._loc, self._proto, self._closure.clone (), self._type)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ProtoDelegateValue => {
                p._proto == self._proto &&
                    p._type == self._type
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._closure.isFullLiteral ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write ('{'c8, self._closure, ';'c8, self._proto, '}'c8);
            }
        }

    }


}
