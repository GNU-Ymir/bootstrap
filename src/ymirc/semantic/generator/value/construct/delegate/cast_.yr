in cast_;

use ymirc::lexing::word;
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::semantic::generator::type::native::scalar::{none_, delegate};
use ymirc::semantic::generator::value::{memory::referencer,
                                        prototypes::{proto, nameproto}};

@final
pub class FptrCastDelegateValue over DelegateValue {

    // The closure value
    let _fptr : &Value;

    /**
     * @params:
     *    - proto: the proto of the function pointed
     *    - closure: the closure content
     *    - references: for each parameter, true iif the param is a reference
     *    - parameters: the list of parameters of the function pointer
     *    - retType: the return type of the function pointer
     */
    pub self (loc : &Word, type : &DelegateType, value : &Value)
        with super (loc, type, isReduced-> true)
        , _fptr = value
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the proto of the function being pointed
     */
    pub fn getFuncPtrValue (self)-> &Value {
        self._fptr
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &FptrCastDelegateValue => {
                p._fptr == self._fptr
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._fptr.isFullLiteral ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        if let d : &DelegateType = self._type {
            copy FptrCastDelegateValue (self._loc, d,
                                        self._fptr.clone ())
        } else panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write (Keys::CAST, '(', Keys::DELEGATE, "(", self._fptr, ")");
            }
        }
    }
}
