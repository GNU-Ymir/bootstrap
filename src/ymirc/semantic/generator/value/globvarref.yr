in globvarref;

use ymirc::lexing::word;
use ymirc::utils::format;

use std::{stream, conv};

use ymirc::semantic::symbol::global;
use ymirc::semantic::generator::{globvar,
                                 type,
                                 value::literal::unit};

/**
 * A proto var is a variable declared in the prototype of function
 */
@final
pub class GlobalVarRefValue over Value {

    // The global variable being referenced
    let _refSym : &GlobalSymbol;

    // The validated global var
    let _refVar : &GlobalVarGenerator;

    /**
     * @params:
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - refId: the uniq id of the generator that created the variable
     *    - isSelf: true iif the variable is self
     */
    pub self (loc : &Word, refSym : &GlobalSymbol, refVar : &GlobalVarGenerator)
        with super (loc, refVar.getType (), isReduced-> true)
        , _refVar = refVar
        , _refSym = refSym
    {
        self._isLvalue = true;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &GlobalVarRefValue => {
                if (self._refVar != p._refVar) return false;
                if (self._refSym != p._refSym) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the reference to the global var generator
     */
    pub fn getRefGenerator (self)-> &GlobalVarGenerator {
        self._refVar
    }

    /**
     * @returns: the global symbol being referenced
     * */
    pub fn getRefSymbol (self)-> &GlobalSymbol {
        self._refSym
    }

    /**
     * @returns: true iif the var is lazy
     * */
    pub fn isLazy (self)-> bool {
        self._refVar.isLazy ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._refVar.getName ().toStr ());
        }
    }

}
