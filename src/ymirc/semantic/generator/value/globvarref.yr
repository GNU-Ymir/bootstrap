mod ymirc::semantic::generator::value::globvarref;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io, std::conv;

import ymirc::semantic::symbol::global;
import ymirc::semantic::generator::globvar;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;


/**
 * A proto var is a variable declared in the prototype of function
 */
pub class GlobalVarRefValue over Value {

    /// The global variable being referenced
    let _refSym : &GlobalSymbol;

    /// The validated global var
    let _refVar : &GlobalVarGenerator;

    /**
     * @params:
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - refId: the uniq id of the generator that created the variable
     *    - isSelf: true iif the variable is self
     */
    pub self (loc : &Word, refSym : &GlobalSymbol, refVar : &GlobalVarGenerator)
        with super (loc, refVar.getType (), isReduced-> true)
        , _refVar = refVar
        , _refSym = refSym
    {
        self._isLvalue = true;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &GlobalVarRefValue => {
                self._refVar == p._refVar
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the reference to the global var generator
     */
    pub fn getRefGenerator (self)-> &GlobalVarGenerator {
        self._refVar
    }

    /**
     * @returns: the global symbol being referenced
     * */
    pub fn getRefSymbol (self)-> &GlobalSymbol {
        self._refSym
    }

    /**
     * @returns: true iif the var is lazy
     * */
    pub fn isLazy (self)-> bool {
        self._refVar.isLazy ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._refVar.getName ().toStr ());
        }
    }

}
