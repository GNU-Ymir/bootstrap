mod ymirc::semantic::generator::value::varref;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io, std::conv;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::none;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;



/**
 * A proto var is a variable declared in the prototype of function
 */
pub class VarRefValue over Value {

    /// The value of the variable, only applicable for cte var
    let _value : &Value;

    let _canCte : bool;

    /// True if the variable is the self variable;
    let _isSelf : bool;

    /// The reference of the generator declaration
    let _refId : usize;

    /// The location of the declaration
    let _declLoc : &Word;
    
    /**
     * @params: 
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - refId: the uniq id of the generator that created the variable
     *    - isSelf: true iif the variable is self
     */
    pub self (loc : &Word, declLoc : &Word, type : &Type, value : &Value = NoneValue::new (), refId : usize, isSelf : bool = false, canCte : bool = true)
        with super (loc, type), _declLoc = declLoc, _value = value, _isSelf = isSelf, _refId = refId, _canCte = canCte
    {
        self._isLvalue = true;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &VarRefValue => {
                self._refId == p._refId
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        false
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value of the var ref
     */
    pub fn getValue (self)-> &Value {
        self._value
    }    

    /**
     * @returns: the reference id of the variable declaration
     */
    pub fn getRefId (self)-> usize {
        self._refId
    }
    
    /**
     * @returns: true if this is a reference to the 'self' var decl value
     */
    pub fn isSelf (self)-> bool {
        self._isSelf
    }

    /**
     * @returns: the location of the variable declaration location
     * */
    pub fn getDeclLoc (self)-> &Word {
        self._declLoc
    }

    /**
     * @returns: true if the var is created by the compiler, and can be cte
     * */
    pub fn canCte (self)-> bool {
        self._canCte
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str ());
            if (stream.withVarIds ()) {
                stream:.write ("(#"s8, self._refId.to!{[c8], 36us}(), ')'c8);
            }
        }        
    }
    
}



