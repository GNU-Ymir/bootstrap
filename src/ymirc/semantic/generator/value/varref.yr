in varref;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::value::literal::unit;

@final
pub class VarRefValue over Value {

    // The value of the variable, only applicable for cte var
    let _value : &Value;

    let _canCte : bool;

    // True if it is a function parameter
    let _isParam : bool;

    // True if it is an iterator parameter
    let _isIterator : bool;

    // True if the variable is the self variable;
    let _isSelf : bool;

    // True if the variable is a reference type
    let _isReference : bool;

    // True if the variable is lazy
    let _isLazy : bool;

    // The reference of the generator declaration
    let _refId : usize;

    // The location of the declaration
    let _declLoc : &Word;

    /**
     * @params:
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - refId: the uniq id of the generator that created the variable
     *    - isSelf: true iif the variable is self
     */
    pub self (loc : &Word, declLoc : &Word, type : &Type, value : &Value = UNIT_VALUE, refId : usize, isSelf : bool = false, isParam : bool = false, isIterator : bool = false, isLazy : bool = false, isReference : bool = false, canCte : bool = true, isReduced : bool = false)
        with super (loc, type, isReduced-> (isReduced || !canCte || isSelf))
        , _declLoc = declLoc
        , _value = value
        , _isSelf = isSelf
        , _isParam = isParam
        , _isReference = isReference
        , _refId = refId
        , _canCte = canCte
        , _isLazy = isLazy
        , _isIterator = isIterator
    {
        self._isLvalue = true;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &VarRefValue => {
                if (self._refId != p._refId) return false;
                if (self._isSelf != p._isSelf) return false;
                if (self._isParam != p._isParam) return false;
                if (self._isReference != p._isReference) return false;
                if (self._isLazy != p._isLazy) return false;
                if (self._isIterator != p._isIterator) return false;
                if (self._loc.str != p._loc.str) return false;

                return true;
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        if (self._isIterator) return false;
        if (self._isLazy) return false;

        true
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value of the var ref
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the reference id of the variable declaration
     */
    pub fn getRefId (self)-> usize {
        self._refId
    }

    /**
     * @returns: true if this is a reference to the 'self' var decl value
     */
    pub fn isSelf (self)-> bool {
        self._isSelf
    }

    /**
     * @returns: true if this is a parameter value
     * */
    pub fn isParam (self)-> bool {
        self._isParam
    }

    /**
     * @returns: true if this is an iterator value
     * */
    pub fn isIterator (self)-> bool {
        self._isIterator
    }

    /**
     * @returns: true if this is a reference value
     * */
    pub fn isReference (self)-> bool {
        self._isReference
    }

    /**
     * @returns: the location of the variable declaration location
     * */
    pub fn getDeclLoc (self)-> &Word {
        self._declLoc
    }

    /**
     * @returns: true if the var is created by the compiler, and can be cte
     * */
    pub fn canCte (self)-> bool {
        self._canCte
    }

    /**
     * @returns: true iif the var is lazy
     * */
    pub fn isLazy (self)-> bool {
        self._isLazy
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._loc.str);
            if (stream.tags.withVarIds) {
                stream:.write ("(#", std::conv::to!{[c8], 36} (self._refId), ')');
            }
        }
    }

}
