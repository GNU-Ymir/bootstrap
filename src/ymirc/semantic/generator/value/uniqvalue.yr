mod ymirc::semantic::generator::value::uniqvalue;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;


/**
 * A uniq value is a value that is reused multiple time but generated only once
 */
pub class UniqValue over Value {

    /// The content of the value
    let _content : &Value;

    /**
     * @params: 
     *  - loc: the location of the value
     *  - content: the content of the uniq value
     */
    pub self (loc : &Word, content : &Value)
        with super (loc, content.getType ()), _content = content
    {
        self._throwers = content._throwers;
        self._isLvalue = content._isLvalue;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &UniqValue => {
                self._content == p._content
            }
            _ => { self._content == o }
        }
    }    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the value
     */
    pub def getValue (self)-> &Value {
        self._content
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("#UNIQ(", self._content.getUniqId (), ")");
            // self._content.format (alias stream);
            // stream:.write (")");
        }
        
    }
}


