mod ymirc::semantic::generator::value::panic_;


import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::void_;


/**
 * Panic statement
 */
pub class PanicValue over Value {

    /**
     * @params:
     *   - value: the value returned by the panic
     */
    pub self (loc : &Word)
        with super (loc, VoidType::new (loc), isReduced-> true)
    {
        self._returnLoc = loc;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            PanicValue () => true
            _ => false
        }
    }

    pub over needUniqness (self)-> bool {
        false
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::PANIC);
        }

    }


}
