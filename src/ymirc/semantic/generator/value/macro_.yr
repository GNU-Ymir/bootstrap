in macro_;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type::native::scalar::none_;

use ymirc::semantic::symbol::{class_,
                              macro_::_};


use ymirc::syntax::declaration::function;
use ymirc::syntax::expression::{vardecl, empty};

@final
pub class MacroRefValue over Value {

    // The location of the module
    let _declLoc : &Word;

    // The symbol
    let _sym : &MacroSymbol;

    /**
     * @params:
     *   - loc: the location of the reference
     *   - sym: the module symbol
     */
    pub self (loc : &Word, sym : &MacroSymbol)
        with super (loc, NONE_TYPE, isReduced-> true)
        , _declLoc = sym.getLoc ()
        , _sym = sym
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &MacroRefValue => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the module symbol that is refered to
     */
    pub fn getSymbol (self)-> &MacroSymbol {
        self._sym
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._sym.getPath ().toStr ());
        }
    }
}
