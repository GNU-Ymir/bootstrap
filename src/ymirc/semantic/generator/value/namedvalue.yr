mod ymirc::semantic::generator::value::namedvalue;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;


/**
 * A named value is a value with a named attached to it
 */
pub class NamedValue over Value {

    /// The name of the named value
    let _name : [c8];
    
    /// The value of the variable
    let _value : &Value;
        
    /**
     * @params: 
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - isMutable: true iif the variable is declared mutable
     *    - isSelf: true iif the variable is self
     */
    pub self (loc : &Word, name : [c8], value : &Value, isReduced : bool = false)
        with super (loc, value.getType (), isReduced-> isReduced)
        , _name = name
        , _value = value
    {
        self._returnLoc = self._value.getReturnerLoc ();
        self._breakLoc = self._value.getBreakerLoc ();
        self._throwers = self._value.getThrowers ();
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the named value
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the name of the value
     */
    pub fn getName (self)-> [c8] {
        self._name
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        NamedValue::new (self._loc, self._name, self._value.clone (), isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &NamedValue => {
                if (self._name != p._name) return false;
                self._value == p._value
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        self._value.needUniqness ()
    }

    pub over isFullLiteral (self)-> bool {
        self._value.isFullLiteral ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._name, Tokens::ARROW, ' 'c8);
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.detabing ();
        }        
    }
    
}



