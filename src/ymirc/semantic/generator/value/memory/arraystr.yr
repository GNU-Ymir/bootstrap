mod ymirc::semantic::generator::value::memory::arraystr;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::memory::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::string;

/**
 * A array from string value is the construction of an array from a string literal
 */
pub class ArrayFromStringValue over MemoryValue {

    /// The inner value of type ArrayType
    let _inner : &Value;

    /**
     */
    pub self (loc : &Word, type : &Type, inner : &Value)
        with super (loc, type), _inner = inner
    {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the slice
     */
    pub fn getInner (self)-> &Value {
        self._inner
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================         COMPARISON$          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &ArrayFromStringValue => {
                self._inner == s._inner && s._type == self._type
            }
            _ => {
                false
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("move ("s8);
            stream:.entabing ();
            stream:.write (self._inner);
            stream:.detabing ();
            stream:.write (")"s8);
        }
    }

}
