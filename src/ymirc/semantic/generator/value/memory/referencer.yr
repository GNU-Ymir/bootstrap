in referencer;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;
use ymirc::semantic::generator::type;


@final
pub class ReferencerValue over MemoryValue {

    // The content of the referencer
    let _value : &Value;

    // True if the reference is mutable
    let _isMutable : bool = false;

    /**
     * @params:
     * @params:
     *   - loc: the location of the referencer
     *   - type: the type of the referencer
     *   - values: the value contained in the referencer
     */
    pub self (loc : &Word, type : &Type, value : &Value, isMutable : bool = false, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _isMutable = isMutable
        , _value = value
    {
        self._throwers = value._throwers;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &ReferencerValue => {
                if (self._value != p._value) return false;
                if (self._isMutable != p._isMutable) return false;

                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the referencer
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: true if the reference has mutable privileges
     * */
    pub fn isMutable (self)-> bool {
        self._isMutable
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        copy ReferencerValue (self._loc, self._type,
                              self._value.clone (),
                              isMutable-> self._isMutable,
                              isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::REF, ' ', Tokens::LPAR);
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::RPAR);
        }
    }

}
