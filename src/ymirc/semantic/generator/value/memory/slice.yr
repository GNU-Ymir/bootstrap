mod ymirc::semantic::generator::value::memory::slice;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::memory::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::string;

/**
 * A slice value is the construction of a slice from an array value
 */
pub class SliceValue over MemoryValue {

    // True iif the slice value does not require implicit alias to be an alias
    let _implicitAlias = false;
    
    /// The inner value of type ArrayType
    let _inner : &Value;

    /**
     */
    pub self (loc : &Word, type : &Type, inner : &Value, implicitAlias : bool = false)
        with super (loc, type), _inner = inner, _implicitAlias = (implicitAlias || inner.isOf!{&StringValue} ())
    {}    


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the slice
     */
    pub fn getInner (self)-> &Value {
        self._inner
    }

    /**
     * @returns: true if the slice value is an aliaser
     */
    pub fn isAliaser (self)-> bool {
        self._implicitAlias
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================         COMPARISON$          =========================
     * ================================================================================
     * ================================================================================
     */


    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &SliceValue => {
                self._inner == s._inner && s._type == self._type
            }
            _ => {
                false
            }
        }
    }

    pub over needUniqness (self)-> bool {
        self._inner.needUniqness ()
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('('c8);
            stream:.entabing ();
            stream:.write (self._inner);
            stream:.detabing ();
            stream:.write (")[]"s8);
        }                
    }

}
