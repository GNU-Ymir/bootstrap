in lazy_;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::type::native::scalar::none_;

@final
pub class LazyValue over MemoryValue {

    // The content of the lazy
    let _value : &Value;

    // True if the content of the lazy is by alias
    let _byAlias : bool;

    // The lambda delegate value
    let _lmbd : &Value;

    // Iif true the inner value is already a lazy and does not need to be transformed
    let _isDone : bool;

    /**
     * @params:
     * @params:
     *   - loc: the location of the lazy
     *   - type: the type of the lazy
     *   - values: the value contained in the lazy
     *   - lmbdName: the uniq name of the lazy value
     */
    pub self (loc : &Word, type : &Type, value : &Value, lmbd : &Value, byAlias : bool = false, isDone : bool = false, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _byAlias = byAlias
        , _lmbd = lmbd
        , _isDone = isDone
    {
        self._throwers = value._throwers; // empty
        self._isLvalue = false;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &LazyValue => {
                if (self._value != p._value) return false;
                if (self._byAlias != p._byAlias) return false;
                if (self._isDone != p._isDone) return false;

                return true;
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the lazy
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the delegate to the lambda function used by the lazy
     * */
    pub fn getLambda (self)-> &Value {
        self._lmbd
    }

    /**
     * @returns: true iif the inner value is an alias (or implicit alias)
     * */
    pub fn byAlias (self)-> bool {
        self._byAlias
    }

    /**
     * @returns: true if the lazy is a reference to an old already created lazy
     * */
    pub fn isDone (self)-> bool {
        self._isDone
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        copy LazyValue (self._loc,
                        self._type,
                        self._value.clone (),
                        self._lmbd.clone (),
                        byAlias-> self._byAlias,
                        isDone-> self._isDone,
                        isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::LAZY, ' ', Tokens::LPAR);
            if (stream.tags.forParams) {
                stream:.write ("_");
            } else {
                stream:.entabing ();
                self._value.format (alias stream);
                stream:.detabing ();
            }
            stream:.write (Tokens::RPAR);
        }
    }

}
