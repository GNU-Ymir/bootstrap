mod ymirc::semantic::generator::value::memory::future_;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::memory::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;

/**
 * A future is a mutable value (lvalue) that is aliased
 */
pub class FutureValue over MemoryValue {

    /// The content of the future
    let _value : &Value;

    /// True if the content of the future is by alias
    let _byAlias : bool;

    /// The lambda delegate value
    let _lmbd : &Value;

    /**
     * @params:
     * @params:
     *   - loc: the location of the future
     *   - type: the type of the future
     *   - values: the value contained in the future
     *   - lmbdName: the uniq name of the future value
     */
    pub self (loc : &Word, type : &Type, value : &Value, lmbd : &Value, byAlias : bool = false, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _byAlias = byAlias
        , _lmbd = lmbd
    {
        self._throwers = value._throwers; // empty
        self._isLvalue = false;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &FutureValue => {
                if (self._type != p._type) return false;
                if (self._value != p._value) return false;

                true
            }
            _ => { false }
        }
    }

    pub over needUniqness (self)-> bool {
        self._value.needUniqness ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the future
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the delegate to the lambda function used by the future
     * */
    pub fn getLambda (self)-> &Value {
        self._lmbd
    }

    /**
     * @returns: true iif the inner value is an alias (or implicit alias)
     * */
    pub fn byAlias (self)-> bool {
        self._byAlias
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        FutureValue::new (self._loc, self._type, self._value.clone (), byAlias-> self._byAlias, self._lmbd, isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::FUTURE, ' 'c8, Tokens::LPAR);
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::RPAR);
        }
    }

}
