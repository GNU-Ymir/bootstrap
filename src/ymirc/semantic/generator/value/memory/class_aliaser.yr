in class_aliaser;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::{type::native::scalar::none_,
                                 type::custom::classptr};


@final
pub class ClassAliaserValue over MemoryValue {

    // The content of the aliaser
    let _value : &Value;

    // True if the aliased class is a struct
    let _isStruct : bool;

    /**
     * @params:
     * @params:
     *   - loc: the location of the aliaser
     *   - type: the type of the aliaser
     *   - values: the value contained in the aliaser
     */
    pub self (loc : &Word, type : &ClassPtrType, value : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _isStruct = type.isStruct ()
    {
        self._throwers = value._throwers;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &ClassAliaserValue => {
                if (self._value != p._value) return false;
                if (self._isStruct != p._isStruct) return false;

                return true;
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the aliaser
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        copy ClassAliaserValue (self._loc,
                                self._type.asOf!{&ClassPtrType} (),
                                self._value.clone (),
                                isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            self._value.format (alias stream);
            stream:.write (Tokens::COLON);
        }
    }
}
