in map_aliaser;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::type::native::scalar::none_;
use ymirc::semantic::generator::type::native::compound::map;

@final
pub class MapAliaserValue over AliaserValue {

    /**
     * @params:
     *   - loc: the location of the aliaser
     *   - type: the type of the aliaser
     *   - values: the value contained in the aliaser
     */
    pub self (loc : &Word, type : &MapType, value : &Value, isReduced : bool = false)
        with super (loc, type, value, isReduced-> isReduced)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            MapAliaserValue () => {
                true
            }
            _ => { false }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        copy MapAliaserValue (self._loc,
                              self._type.asOf!{&MapType} (),
                              self._value.clone (),
                              isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            self._value.format (alias stream);
            stream:.write (Tokens::COLON);
        }
    }

}
