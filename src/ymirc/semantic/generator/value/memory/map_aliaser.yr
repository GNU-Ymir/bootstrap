mod ymirc::semantic::generator::value::memory::map_aliaser;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::memory::aliaser;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::compound::map;

/**
 * A aliaser is a mutable value (lvalue) that is aliased
 */
pub class MapAliaserValue over AliaserValue {

    /**
     * @params:
     * @params:
     *   - loc: the location of the aliaser
     *   - type: the type of the aliaser
     *   - values: the value contained in the aliaser
     */
    pub self (loc : &Word, type : &MapType, value : &Value, isReduced : bool = false)
        with super (loc, type, value, isReduced-> isReduced)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &MapAliaserValue => {
                if (self._type != p._type) return false;
                if (self._value != p._value) return false;

                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        MapAliaserValue::new (self._loc, self._type.asOf!{&MapType} (), self._value.clone (), isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            self._value.format (alias stream);
            stream:.write (Tokens::COLON);
        }
    }

}
