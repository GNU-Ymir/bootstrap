in address;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::type::native::scalar::none_;

@final
pub class AddressValue over MemoryValue {

    // The inner operand of the address
    let _inner : &Value;

    /**
     * @params:
     *  - loc: the location of the address operation
     *  - type: the type of the address
     *  - inner: the inner operand of the operation
     */
    pub self (loc : &Word, type : &Type, inner : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _inner = inner
    {
        self._throwers = inner.getThrowers ();
        self._isLvalue = true;
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the inner operand of the access operation
     */
    pub fn getValue (self)-> &Value {
        self._inner
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &AddressValue => {
                if (self._inner != p._inner) return false;

                return true;
            }
            _ => {
                false
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        copy AddressValue (self._loc,
                           self._type,
                           self._inner.clone (),
                           isReduced-> self._isReduced)
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("&(");
            stream:.write (self._inner);
            stream:.write (')');
        }
    }

}
