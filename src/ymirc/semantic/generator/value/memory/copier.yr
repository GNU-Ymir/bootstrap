mod ymirc::semantic::generator::value::memory::copier;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::value::memory::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;

/**
 * A copier is a value that is copied
 */
pub class CopierValue over MemoryValue {

    /// The content of the copier
    let _value : &Value;   
    
    /**
     * @params: 
     * @params: 
     *   - loc: the location of the copier
     *   - type: the type of the copier
     *   - values: the value contained in the copier
     */
    pub self (loc : &Word, type : &Type, value : &Value)
        with super (loc, type), _value = value
    {        
        self._throwers = value._throwers;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &CopierValue => {
                if (self._type != p._type) return false;
                if (self._value != p._value) return false;
                true
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the copier
     */
    pub def getInnerValue (self)-> &Value {
        self._value
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::COPY, ' 'c8, Tokens::LPAR);
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::RPAR);
        }        
    }
    
}



