in copier;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::type::native::scalar::none_;

@final
pub class CopierValue over MemoryValue {

    // The content of the copier
    let _value : &Value;

    // True if the copy is deep (does not affect generation)
    let _isDeep = false;

    // True if the copy is done by the value (dor example by calling a function from core::duplication, or a calss methods, ...)
    // It is used during the expansion, to tell that we only need to expand the inner value, and do nothing special with it
    // We still keep that in a copy for semantic analyses, and keep traces that the specific call is a copy call
    let _isDone : bool;

    /**
     * @params:
     * @params:
     *   - loc: the location of the copier
     *   - type: the type of the copier
     *   - values: the value contained in the copier
     */
    pub self (loc : &Word, type : &Type, value : &Value, isDeep : bool = false, isDone : bool = false, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _isDeep = isDeep
        , _isDone = isDone
    {
        self._throwers = value._throwers;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &CopierValue => {
                if (self._value != p._value) return false;
                if (self._isDeep != p._isDeep) return false;
                if (self._isDone != p._isDone) return false;

                return true;
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the copier
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: true if the copy is deep
     * @info: this should not affect generation, it only informs that inner values within self.getValue () are also copied
     * */
    pub fn isDeep (self)-> bool {
        self._isDeep
    }


    /**
     * @returns: true if the value inside the copy should be used directly, without any more transformations
     * @info:
     * ========
     * True if the copy is done by the value (dor example by calling a function from core::duplication, or a calss methods, ...)
     * It is used during the expansion, to tell that we only need to expand the inner value, and do nothing special with it
     * We still keep that in a copy for semantic analyses, and keep traces that the specific call is a copy call
     * ========
     * */
    pub fn isDone (self)-> bool {
        self._isDone
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        copy CopierValue (self._loc,
                          self._type,
                          self._value.clone (),
                          isDeep-> self._isDeep,
                          isDone-> self._isDone,
                          isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isDone) {
                self._value.format (alias stream);
            } else {
                stream:.write (Keys::COPY, ' ', Tokens::LPAR);
                stream:.entabing ();
                self._value.format (alias stream);
                stream:.detabing ();
                stream:.write (Tokens::RPAR);
            }
        }
    }

}
