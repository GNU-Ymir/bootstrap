mod ymirc::semantic::generator::value::memory::aliaser;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::memory::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;

/**
 * A aliaser is a mutable value (lvalue) that is aliased
 */
pub class AliaserValue over MemoryValue {

    /// The content of the aliaser
    let _value : &Value;

    /// True if the alias was created inside an expansion
    let _fromExpansion : bool;


    /**
     * @params:
     * @params:
     *   - loc: the location of the aliaser
     *   - type: the type of the aliaser
     *   - values: the value contained in the aliaser
     */
    pub self (loc : &Word, type : &Type, value : &Value, fromExpansion : bool = false, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _fromExpansion = fromExpansion
    {
        self._throwers = value._throwers;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &AliaserValue => {
                if (self._value != p._value) return false;
                if (self._fromExpansion != p._fromExpansion) return false;

                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the aliaser
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: true if the alias was declared inside an expansion
     * */
    pub fn isFromExpansion (self)-> bool {
        self._fromExpansion
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        AliaserValue::new (self._loc,
                           self._type,
                           self._value.clone (),
                           fromExpansion-> self._fromExpansion,
                           isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::ALIAS, ' 'c8, Tokens::LPAR);
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::RPAR);
        }
    }

}
