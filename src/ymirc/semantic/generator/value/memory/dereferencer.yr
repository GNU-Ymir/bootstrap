mod ymirc::semantic::generator::value::memory::dereferencer;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::memory::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;

/**
 */
pub class DereferencerValue over MemoryValue {

    /// The inner operand of the dereferencer
    let _inner : &Value;

    /**
     * @params:
     *  - loc: the location of the dereferencer operation
     *  - type: the type of the dereferencer
     *  - inner: the inner operand of the operation
     */
    pub self (loc : &Word, type : &Type, inner : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _inner = inner
    {
        self._throwers = inner.getThrowers ();
        self._isLvalue = true;
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the inner operand of the access operation
     */
    pub fn getValue (self)-> &Value {
        self._inner
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        DereferencerValue::new (self._loc, self._type, self._inner.clone (), isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &DereferencerValue => {
                self._inner == p._inner &&
                    self._type == p._type
            }
            _ => {
                false
            }
        }
    }

    pub over needUniqness (self)-> bool {
        self._inner.needUniqness ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("*("s8);
            stream:.write (self._inner);
            stream:.write (')'c8);
        }
    }

}
