in move_;

use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::type::native::scalar::none_;

@final
pub class MoverValue over MemoryValue {

    // The value that is moved
    let _value : &Value;

    // True if the moved value is a reference and thus must be reset
    let _reset : &Value;

    /**
     * @params:
     *   - loc: the location of the Mover
     *   - type: the type of the Mover
     */
    pub self (loc : &Word, type : &Type, value : &Value, reset : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _value = value
        , _reset = reset
    {
        self._throwers = value._throwers;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &MoverValue => {
                if (self._value != p._value) return false;
                if (self._reset != p._reset) return false;

                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the Mover
     * @info: block of operations defining the instruction to do to move the value
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: true if the value has to be reset after being moved
     * */
    pub fn getReset (self)-> &Value {
        self._reset
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        copy MoverValue (self._loc, self._type,
                         self._value.clone (),
                         self._reset.clone (),
                         isReduced-> self._isReduced)
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::MOVE, ' ', Tokens::LPAR);
            stream:.entabing ();
            self._value.format (alias stream);
            stream:.detabing ();
            stream:.write (Tokens::RPAR);
        }
    }

}
