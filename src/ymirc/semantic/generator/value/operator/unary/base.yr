mod ymirc::semantic::generator::value::operator::unary::base;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;



/**
 */
pub class UnaryOperatorValue over OperatorValue {

    /// The operator
    let _op : UnaryOperators;
    
    /// The inner operand of the unary
    let _inner : &Value;

    /**
     * @params: 
     *  - loc: the location of the unary operation
     *  - type: the type of the unary
     *  - inner: the inner operand of the operation
     */
    pub self (loc : &Word, type : &Type, operator : UnaryOperators, inner : &Value)
        with super (loc, type), _inner = inner, _op = operator
    {
        self._throwers = inner.getThrowers ();
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the inner operand of the unary operation
     */
    pub def getInner (self)-> &Value {
        self._inner
    }


    /**
     * @returns: the operator
     */
    pub def getOperator (self)-> UnaryOperators {
        self._op
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &UnaryOperatorValue => {
                self._inner == p._inner
            }
            _ => {
                false
            }                
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._op);
            stream:.write (self._inner);
        }
    }
    
}
