mod ymirc::semantic::generator::value::operator::slice::arrayaccess;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::slice::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::proto;


/**
 */
pub class ArrayAccessValue over SliceOrArrayOperatorValue {

    /// The array operand of the access
    let _array : &Value;

    /// The right operand of the access
    let _index : &Value;

    /**
     * @params:
     *  - loc: the location of the access operation
     *  - type: the type of the access
     *  - array: the array operand of the operation
     *  - index: the index operand of the operation
     */
    pub self (loc : &Word, type : &Type, array : &Value, index : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _array = array
        , _index = index
    {
        self._throwers = array.getThrowers () ~ index.getThrowers ();
        self._isLvalue = true;
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the array operand of the access operation
     */
    pub fn getArray (self)-> &Value {
        self._array
    }

    /**
     * @returns: the index operand of the access operation
     */
    pub fn getIndex (self)-> &Value {
        self._index
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        ArrayAccessValue::new (self._loc, self._type, self._array.clone (), self._index.clone (), isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ArrayAccessValue => {
                self._array == p._array &&
                    self._index == p._index
            }
            _ => {
                false
            }
        }
    }

    pub over needUniqness (self)-> bool {
        self._array.needUniqness ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._array);
            stream:.write (" ["s8);
            stream:.write (self._index);
            stream:.write (']'c8);
        }
    }

}
