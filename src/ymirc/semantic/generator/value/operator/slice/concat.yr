mod ymirc::semantic::generator::value::operator::slice::concat;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::slice::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;



/**
 */
pub class SliceConcatValue over SliceOrArrayOperatorValue {

    /// The left operand of the concat
    let _left : &Value;

    /// The right operand of the concat
    let _right : &Value;


    /**
     * @params:
     *  - loc: the location of the concatenation
     *  - type: the type of the concat
     *  - left: the left operand of the operation
     *  - right: the right operand of the operation
     */
    pub self (loc : &Word, type : &Type, left : &Value, right : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _left = left
        , _right = right
    {
        self._throwers = left.getThrowers () ~ right.getThrowers ();
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the left operand of the concatenation
     */
    pub fn getLeft (self)-> &Value {
        self._left
    }

    /**
     * @returns: the right operand of the concatenation
     */
    pub fn getRight (self)-> &Value {
        self._right
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &SliceConcatValue => {
                if (self._left != p._left) return false;
                if (self._right != p._right) return false;

                return true;
            }
            _ => {
                false
            }
        }
    }

    pub over isFullLiteral (self)-> bool {
        if (!self._left.isFullLiteral ()) return false;
        if (!self._right.isFullLiteral ()) return false;

        return true;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        SliceConcatValue::new (self._loc,
                               self._type,
                               self._left.clone (),
                               self._right.clone (),
                               isReduced-> self._isReduced)
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._left);
            stream:.write (" ~ "s8);
            stream:.write (self._right);
        }
    }

}
