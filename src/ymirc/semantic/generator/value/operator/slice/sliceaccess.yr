mod ymirc::semantic::generator::value::operator::slice::sliceaccess;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::slice::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::proto;


/**
 */
pub class SliceAccessValue over SliceOrArrayOperatorValue {

    /// The slice operand of the access
    let _slice : &Value;

    /// The right operand of the access
    let _index : &Value;

    /**
     * @params:
     *  - loc: the location of the access operation
     *  - type: the type of the access
     *  - slice: the slice operand of the operation
     *  - index: the index operand of the operation
     */
    pub self (loc : &Word, type : &Type, slice : &Value, index : &Value)
        with super (loc, type), _slice = slice, _index = index
    {
        self._throwers = slice.getThrowers () ~ index.getThrowers ();
        self._isLvalue = true;
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the slice operand of the access operation
     */
    pub fn getSlice (self)-> &Value {
        self._slice
    }

    /**
     * @returns: the index operand of the access operation
     */
    pub fn getIndex (self)-> &Value {
        self._index
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &SliceAccessValue => {
                self._slice == p._slice &&
                    self._index == p._index
            }
            _ => {
                false
            }
        }
    }

    pub over needUniqness (self)-> bool {
        self._slice.needUniqness ()
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._slice);
            stream:.write (" ["s8);
            stream:.write (self._index);
            stream:.write (']'c8);
        }
    }

}
