mod ymirc::semantic::generator::value::operator::call::call;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::call::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::proto;

/**
 * A call value is a call operator of a prototype
 */
pub class CallValue over CallOperatorValue {

    /// The parameters to pass to the prototype
    let _params : [&Value];

    /// The prototype to call
    let _proto : &PrototypeValue;

    /// The parameter to pass that are not specified in the prototype (c variadic)
    let _addParams : [&Value];
    
    /**
     * Create a new call value
     * @params: 
     *   - type: the type returned by the calling
     *   - proto: the prototype to call
     *   - params: the list of parameters
     *   - addParams: the parameter to pass in the calling that are not specified in the prototype (c variadic)
     */
    pub self (loc : &Word, type : &Type, proto : &PrototypeValue, params : [&Value], addParams : [&Value] = [], isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _params = params
        , _proto = proto
        , _addParams = addParams
    {
        let dmut thrs = Vec!{(&Word, &Type)}::new ();
        for i in self._params {
            for j in i.getThrowers () {
                thrs:.push (j);
            }
        }
        
        for i in self._addParams {
            for j in i.getThrowers () {
                thrs:.push (j);
            }
        }

        for j in self._proto.getThrowers () {
            thrs:.push ((loc, j.1));
        }
        
        self._throwers = thrs[];
        self._isLvalue = false;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the parameters passed to the prototype
     */
    pub fn getParameters (self)-> [&Value] {
        self._params
    }

    /**
     * @returns: the parameters passed to the prototype, that are not specified in the prototype
     */
    pub fn getAddParameters (self)-> [&Value] {
        self._addParams
    }

    /**
     * @returns: the prototype to call
     */
    pub fn getPrototype (self)-> &PrototypeValue {
        self._proto
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            s : &CallValue => {
                if (s._params.len != self._params.len) return false;
                if (s._addParams.len != self._addParams.len) return false;
                if (s._proto != self._proto)  return false;

                for i in 0us .. self._params.len {
                    if (s._params [i] != self._params [i]) return false;
                }
                for i in 0us .. self._addParams.len {
                    if (s._addParams [i] != self._addParams [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        let dmut params = Vec!{&Value}::new ();
        let dmut addParams = Vec!{&Value}::new ();
        for i in self._params {
            params:.push (i.clone ());
        }

        for i in self._addParams {
            addParams:.push (i.clone ());
        }

        CallValue::new (self._loc, self._type,
                        self._proto,
                        params[],
                        addParams-> addParams[],
                        isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write (self._proto, " ("s8);
                stream:.entabing ();
                let mut i = 0us;
                for j in self._params {
                    if (i != 0us) stream:.write (", "s8);
                    j.format (alias stream);
                    i += 1us;
                }

                for j in self._addParams {
                    if (i != 0us) stream:.write (", "s8);
                    j.format (alias stream);
                    i += 1us;
                }

                stream:.detabing ();
                stream:.write (')'c8);
            }
        }        
    }        
}

