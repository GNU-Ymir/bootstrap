mod ymirc::semantic::generator::value::operator::call::fptrcall;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::call::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::proto;



/**
 * A call value is a call operator of a prototype
 */
pub class FuncPtrCallValue over CallOperatorValue {

    /// The parameters to pass to the prototype
    let _params : [&Value];

    /// The pointer of function to call
    let _fptr : &Value;
    
    /**
     * Create a new call value
     * @params: 
     *   - type: the type returned by the calling
     *   - proto: the prototype to call
     *   - params: the list of parameters
     */
    pub self (loc : &Word, type : &Type, fptr : &Value, params : [&Value])
        with super (loc, type), _params = params, _fptr = fptr
    {
        let dmut thrs = Vec!{(&Word, &Type)}::new ();
        for i in self._params {
            for j in i.getThrowers () {
                thrs:.push (j);
            }
        }
        
        for j in self._fptr.getThrowers () {
            thrs:.push ((loc, j.1));
        }
        
        self._throwers = thrs[];
        self._isLvalue = true;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the parameters passed to the prototype
     */
    pub fn getParameters (self)-> [&Value] {
        self._params
    }

    /**
     * @returns: the prototype to call
     */
    pub fn getFuncPtr (self)-> &Value {
        self._fptr
    }
                
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            s : &FuncPtrCallValue => {
                if (s._params.len != self._params.len) return false;
                
                if (s._type != self._type)  return false;
                if (s._fptr != self._fptr)  return false;                
                for i in 0us .. self._params.len {
                    if (s._params [i] != self._params [i]) return false;
                }
                
                true
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write ('(', self._fptr, ')', '(');
                stream:.entabing ();
                let mut i = 0us;
                for j in self._params {
                    if (i != 0us) stream:.write (", "s8);
                    j.format (alias stream);
                    i += 1us;
                }

                stream:.detabing ();
                stream:.write (')'c8);
            }
        }        
    }        
}

