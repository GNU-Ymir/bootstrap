mod ymirc::semantic::generator::value::operator::map::access;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::map::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::proto;



pub class MapAccessValue over MapOperatorValue {

    // The map value being accessed
    let _mp : &Value;

    // The key used to access
    let _key : &Value;

    // The throwing in key the key does not exist
    let _thr : &Value;

    pub self (loc : &Word, type : &Type, mp : &Value, key : &Value, thr : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _mp = mp
        , _key = key
        , _thr = thr
    {
        self._throwers = mp.getThrowers () ~ key.getThrowers () ~ thr.getThrowers ();
        self._isLvalue = mp.isLvalue ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the map value being accessed
     * */
    pub fn getMap (self)-> &Value {
        self._mp
    }

    /**
     * @returns: the key used in the access
     * */
    pub fn getKey (self)-> &Value {
        self._key
    }

    /**
     * @returns: the throw operation in case the key does not exist
     * */
    pub fn getKeyError (self)-> &Value {
        self._thr
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          COMPARISON          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &MapAccessValue => {
                if (self._mp != p._mp) return false;
                if (self._key != p._key) return false;
                if (self._thr != p._thr) return false;

                return true;
            }
            _ => {
                false
            }
        }
    }

    pub over isFullLiteral (self)-> bool {
        false
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        MapAccessValue::new (self._loc, self._type,
                             self._mp.clone (),
                             self._key.clone (),
                             self._thr.clone (),
                             isReduced-> self._isReduced)
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._mp);
            stream:.write (" ["s8);
            stream:.write (self._key);
            stream:.write (']'c8);
        }
    }

}
