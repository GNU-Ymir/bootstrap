mod ymirc::semantic::generator::value::operator::map::insert;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::map::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::proto;



pub class MapInsertValue over MapOperatorValue {

    // The map value being inserted
    let _mp : &Value;

    // The key used to insert
    let _key : &Value;

    // The value to insert
    let _value : &Value;

    pub self (loc : &Word, type : &Type, mp : &Value, key : &Value, v : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _mp = mp
        , _key = key
        , _value = v
    {
        self._throwers = mp.getThrowers () ~ key.getThrowers () ~ v.getThrowers ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the map value being inserted
     * */
    pub fn getMap (self)-> &Value {
        self._mp
    }

    /**
     * @returns: the key used in the insert
     * */
    pub fn getKey (self)-> &Value {
        self._key
    }

    /**
     * @returns: the value to insert
     * */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          COMPARISON          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &MapInsertValue => {
                if (self._mp != p._mp) return false;
                if (self._key != p._key) return false;
                if (self._value != p._value) return false;

                return true;
            }
            _ => {
                false
            }
        }
    }

    pub over isFullLiteral (self)-> bool {
        false
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._mp);
            stream:.write (" ["s8);
            stream:.write (self._key);
            stream:.write ("] = "s8);
            stream:.write (self._value);
        }
    }

}
