mod ymirc::semantic::generator::value::operator::map::contain;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::map::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::proto;



pub class MapContainValue over MapOperatorValue {

    // The map value being contained
    let _mp : &Value;

    // The key used to contain
    let _key : &Value;

    // If true then it is a not contain operation
    let _not : bool;

    pub self (loc : &Word, type : &Type, mp : &Value, key : &Value, not : bool, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _mp = mp
        , _key = key
        , _not = not
    {
        self._throwers = mp.getThrowers () ~ key.getThrowers ();
        self._isLvalue = false;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the map value being contained
     * */
    pub fn getMap (self)-> &Value {
        self._mp
    }

    /**
     * @returns: the key used in the contain
     * */
    pub fn getKey (self)-> &Value {
        self._key
    }

    /**
     * @returns: true iif it is a not contain
     * */
    pub fn isNot (self)-> bool {
        self._not
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CLONE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        MapContainValue::new (self._loc, self._type, self._mp.clone (), self._key.clone (), not-> self._not, isReduced-> self._isReduced)
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          COMPARISON          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &MapContainValue => {
                self._mp == p._mp &&
                    self._key == p._key
            }
            _ => {
                false
            }
        }
    }

    pub over needUniqness (self)-> bool {
        self._mp.needUniqness ()
    }

    pub over isFullLiteral (self)-> bool {
        false
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._key);
            if (self._not) {
                stream:.write (' 'c8, BinaryOperators::NOT_IN, ' 'c8);
            } else {
                stream:.write (' 'c8, BinaryOperators::IN, ' 'c8);
            }
            stream:.write (self._mp);
        }
    }

}
