mod ymirc::semantic::generator::value::operator::map::iteration::begin;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::map::iteration::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::mapiterator;
import ymirc::semantic::generator::value::base;


pub class MapIteratorBeginValue over MapIteratorValue {

    // The map value being iterated
    let _mp : &Value;

    pub self (loc : &Word, type : &MapIteratorType, mp : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _mp = mp
    {
        self._throwers = mp.getThrowers ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the map value being accessed
     * */
    pub fn getMap (self)-> &Value {
        self._mp
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("#_begin (", self._mp, ")");
        }
    }

}
