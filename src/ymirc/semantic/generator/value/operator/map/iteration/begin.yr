in begin;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use ymirc::semantic::generator::type;
use std::stream;


@final
pub class MapIteratorBeginValue over MapIteratorValue {

    // The map value being iterated
    let _mp : &Value;

    pub self (loc : &Word, type : &MapIteratorType, mp : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _mp = mp
    {
        self._throwers = mp.getThrowers ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the map value being accessed
     * */
    pub fn getMap (self)-> &Value {
        self._mp
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        if let t : &MapIteratorType = self._type {
            copy MapIteratorBeginValue (self._loc,
                                        t,
                                        self._mp.clone (),
                                        isReduced-> self._isReduced)
        } else panic;
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("#_begin (", self._mp, ")");
        }
    }
}
