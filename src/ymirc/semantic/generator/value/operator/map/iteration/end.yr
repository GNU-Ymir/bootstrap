in end;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::{type, type::native::scalar::bool_};

@final
pub class MapIteratorEndValue over MapIteratorValue {

    // The iterator value
    let _iter : &Value;

    pub self (loc : &Word, iter : &Value, isReduced : bool = false)
        with super (loc, copy BoolType (loc), isReduced-> isReduced)
        , _iter = iter
    {
        self._throwers = iter.getThrowers ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the map value being accessed
     * */
    pub fn getIterator (self)-> &Value {
        self._iter
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        copy MapIteratorEndValue (self._loc,
                                  self._iter.clone (),
                                  isReduced-> self._isReduced)
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("#_is_end (", self._iter, ")");
        }
    }

}
