mod ymirc::semantic::generator::value::operator::map::iteration::end;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::map::iteration::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::bool_;
import ymirc::semantic::generator::type::temporary::mapiterator;
import ymirc::semantic::generator::value::base;


pub class MapIteratorEndValue over MapIteratorValue {

    // The iterator value
    let _iter : &Value;

    pub self (loc : &Word, iter : &Value, isReduced : bool = false)
        with super (loc, BoolType::new (loc), isReduced-> isReduced)
        , _iter = iter
    {
        self._throwers = iter.getThrowers ();
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          GETTERS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * @returns: the map value being accessed
     * */
    pub fn getIterator (self)-> &Value {
        self._iter
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CLONE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over clone (self)-> &Value {
        MapIteratorEndValue::new (self._loc, self._iter.clone (), isReduced-> self._isReduced)
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===================================          COMPARISON          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &MapIteratorEndValue => {
                self._iter == p._iter
            }
            _ => {
                false
            }
        }
    }

    pub over needUniqness (self)-> bool {
        self._iter.needUniqness ()
    }

    pub over isFullLiteral (self)-> bool {
        false
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("#_is_end (", self._iter, ")");
        }
    }

}
