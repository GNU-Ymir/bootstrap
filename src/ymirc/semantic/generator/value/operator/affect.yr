mod ymirc::semantic::generator::value::operator::affect;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::base;
import ymirc::semantic::generator::type::native::compound::pointer;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;


/**
 */
pub class AffectValue over OperatorValue {
    
    /// The left operand of the affect
    let _left : &Value;

    /// The right operand of the affect
    let _right : &Value;

    /**
     * @params: 
     *  - loc: the location of the affect operation
     *  - type: the type of the affect
     *  - left: the left operand of the operation
     *  - right: the right operand of the operation
     */
    pub self (loc : &Word, type : &Type, left : &Value, right : &Value)
        with super (loc, type), _left = left, _right = right
    {
        self._throwers = left.getThrowers () ~ right.getThrowers ();
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the left operand of the affect operation
     */
    pub fn getLeft (self)-> &Value {
        self._left
    }

    /**
     * @returns: the right operand of the affect operation
     */
    pub fn getRight (self)-> &Value {
        self._right
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &AffectValue => {
                self._left == p._left &&
                    self._right == p._right
            }
            _ => {
                false
            }                
        }
    }

    pub over needUniqness (self)-> bool {
        self._left.needUniqness () || self._right.needUniqness ()
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.forParams ()) {
                stream:.write ("_");
            } else {
                stream:.write (self._left);
                stream:.write (" = "s8);
                stream:.write (self._right);
            }
        }
    }
    
}
