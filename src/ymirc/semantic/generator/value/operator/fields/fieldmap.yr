mod ymirc::semantic::generator::value::operator::fields::fieldmap;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::fields::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::memory::dereferencer;


/**
 */
pub class MapLenAccessValue over FieldOperatorValue {

    /**
     * @params:
     *  - loc: the location of the access operation
     *  - type: the type of the access
     *  - str: the struct operand of the operation
     *  - name: the name of the field to access
     */
    pub self (loc : &Word, type : &Type, str : &Value, isReduced : bool = false)
        with super (loc, type, str, isReduced-> isReduced)
    {
        self._throwers = str.getThrowers ();
        self._isLvalue = false;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            MapLenAccessValue () => {
                return true;
            }
            _ => {
                false
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        MapLenAccessValue::new (self._loc, self._type,
                                self._elem.clone (),
                                isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._elem, "."s8, MapKeys::LEN);
        }
    }

}
