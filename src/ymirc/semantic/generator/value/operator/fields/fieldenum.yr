mod ymirc::semantic::generator::value::operator::fields::fieldenum;



import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::fields::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::value::memory::dereferencer;
import ymirc::semantic::generator::type::custom::enum_;



/**
 */
pub class EnumFieldAccessValue over FieldOperatorValue {

    /// The name of the field to access
    let _content : &Value;

    /**
     * @params:
     *   - loc: the location of the access
     *   - type: the type of the value
     *   - en: the enumeration being accessed
     *   - value: the value created by the access
     */
    pub self (loc : &Word, en : &EnumType, value : &Value, isReduced : bool = false)
        with super (loc, en, UNIT_VALUE, isReduced-> isReduced)
        , _content = value
    {
        self._isLvalue = false;
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the field to access
     */
    pub fn getContent (self)-> &Value {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &EnumFieldAccessValue => {
                if (self._content != p._content) return false;

                return true;
            }
            _ => {
                false
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._type, '('c8, self._content, ')'c8);
        }
    }

}
