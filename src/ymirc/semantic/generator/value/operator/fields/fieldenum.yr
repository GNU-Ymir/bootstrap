in fieldenum;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;

use ymirc::semantic::generator::{type, type::custom::enum_};
use ymirc::semantic::generator::value::literal::unit;
use std::stream;

@final
pub class EnumFieldAccessValue over FieldOperatorValue {

    // The name of the field to access
    let _content : &Value;
    let _fieldName : [c8];

    /**
     * @params:
     *   - loc: the location of the access
     *   - type: the type of the value
     *   - en: the enumeration being accessed
     *   - value: the value created by the access
     */
    pub self (loc : &Word, en : &EnumType, value : &Value, fieldName : [c8], isReduced : bool = false)
        with super (loc, en, UNIT_VALUE, isReduced-> isReduced)
        , _content = value
        , _fieldName = fieldName
    {
        self._isLvalue = false;
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the field to access
     */
    pub fn getContent (self)-> &Value {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &EnumFieldAccessValue => {
                if (self._content != p._content) return false;
                if (self._fieldName != p._fieldName) return false;

                return true;
            }
            _ => {
                false
            }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._content.isFullLiteral ()
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        copy EnumFieldAccessValue (self._loc,
                                   self._type.asOf!{&EnumType} (),
                                   value-> self._content.clone (),
                                   fieldName-> self._fieldName,
                                   isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.tags.forDebug) {
                stream:.write (self._type, '(', self._content, ')');
            } else {
                stream:.write (self._type, "::", self._fieldName);
            }
        }
    }

}
