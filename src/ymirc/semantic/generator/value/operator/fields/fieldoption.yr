mod ymirc::semantic::generator::value::operator::fields::fieldoption;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::fields::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::memory::dereferencer;


/**
 */
pub class OptionFieldAccessValue over FieldOperatorValue {

    /// The name of the field to access
    let _name : [c8];

    /**
     * @params:
     *  - loc: the location of the access operation
     *  - type: the type of the access
     *  - str: the option operand of the operation
     *  - name: the name of the field to access
     */
    pub self (loc : &Word, type : &Type, str : &Value, name : [c8], isReduced : bool = false)
        with super (loc, type, str, isReduced-> isReduced)
        , _name = name
    {
        self._throwers = str.getThrowers ();
        self._isLvalue = true;
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the option operand of the access operation
     */
    pub fn getOption (self)-> &Value {
        self._elem
    }

    /**
     * @returns: the name of the field to access
     */
    pub fn getFieldName (self)-> [c8] {
        self._name
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        OptionFieldAccessValue::new (self._loc, self._type, self._elem.clone (), self._name, isReduced-> self._isReduced)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &OptionFieldAccessValue => {
                self._elem == p._elem &&
                    self._name == p._name
            }
            _ => {
                false
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            match self._elem {
                d : &DereferencerValue => {
                    stream:.write (d.getValue (), "-> "s8, self._name);
                }
                _ => {
                    stream:.write (self._elem, "."s8, self._name);
                }
            }
        }
    }

}
