mod ymirc::semantic::generator::value::operator::fields::base;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;

pub class @abstract FieldOperatorValue over OperatorValue {

    // The element being accessed
    let _elem : &Value;

    pub self (loc : &Word, type : &Type, elem : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _elem = elem
    {}

    /**
     * @returns: the object being accessed
     * */
    pub fn getObject (self)-> &Value {
        self._elem
    }

    pub over isFullLiteral (self)-> bool {
        self._elem.isFullLiteral ()
    }

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            f : &FieldOperatorValue => {
                if (self._elem != f._elem) return false;

                return true;
            }
            _ => return false;
        }
    }

}
