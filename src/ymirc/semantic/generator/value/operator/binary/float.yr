mod ymirc::semantic::generator::value::operator::binary::float;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::operator::binary::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::bool_;
import ymirc::semantic::generator::value::base;


/**
 * Binary operator that assume that the operands are float like values
 * Or they can be casted implicitly
 * Assume that the operators are only math operators
 */
pub class BinaryMathFloatOperatorValue over BinaryOperatorValue {

    pub self (loc : &Word, type : &Type, operator : BinaryOperators, left : &Value, right : &Value)
        with super (loc, type, operator, left, right)
    {}

    impl Streamable;
}

/**
 * Special operators, that are calling function (for example dxor, or fmod)
 */
pub class SpecialMathFloatOperatorValue over BinaryOperatorValue {

    let _realValue : &Value;

    pub self (loc : &Word, type : &Type, operator : BinaryOperators, left : &Value, right : &Value, retValue : &Value)
        with super (loc, type, operator, left, right), _realValue = retValue
    {}

    pub fn getRealValue (self)-> &Value {
        self._realValue
    }

    impl Streamable;

    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._realValue);
        }
    }
}

/**
 * Binary operator that assume that the operands are float like values
 * Or they can be casted implicitly
 * Assume that the operators are only comparison operators
 */
pub class CmpFloatOperatorValue over BinaryOperatorValue {

    pub self (loc : &Word, operator : BinaryOperators, left : &Value, right : &Value)
        with super (loc, BoolType::new (loc), operator, left, right)
    {}

    impl Streamable;
}

