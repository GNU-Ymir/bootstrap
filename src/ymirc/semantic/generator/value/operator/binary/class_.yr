mod ymirc::semantic::generator::value::operator::binary::class_;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::operator::binary::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::bool_;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::unit;
import ymirc::semantic::generator::type::temporary::classref;


pub class CmpClassTypeOperatorValue over BinaryOperatorValue {

    let _rtype : &ClassRefType;

    pub self (loc : &Word, operator : BinaryOperators, left : &Value, right : &ClassRefType, isReduced : bool = false)
        with super (loc, BoolType::new (loc), operator, left, UNIT_VALUE, isReduced-> isReduced)
        , _rtype = right
    {}

    pub fn getRType (self)-> &ClassRefType {
        self._rtype
    }

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('('c8, self._left);
            stream:.write (' 'c8, self._op, ' 'c8);
            stream:.write (self._rtype, ')'c8);
        }
    }
}
