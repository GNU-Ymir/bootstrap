in class_;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type::native::scalar::bool_;
use ymirc::semantic::generator::value::literal::unit;
use ymirc::semantic::generator::type;

/**
 * Operator comparing the type of left operand containing a class value and a right operand being a type
 * */
pub class CmpClassTypeOperatorValue over BinaryOperatorValue {

    let _rtype : &ClassRefType;

    pub self (loc : &Word, operator : BinaryOperators, left : &Value, right : &ClassRefType, isReduced : bool = false)
        with super (loc, copy BoolType (loc), operator, left, UNIT_VALUE, isReduced-> isReduced)
        , _rtype = right
    {}

    pub fn getRType (self)-> &ClassRefType {
        self._rtype
    }

    pub over isFullLiteral (self)-> bool {
        false
    }


    pub over clone (self)-> &Value {
        copy CmpClassTypeOperatorValue (self._loc,
                                        self._op,
                                        self._left.clone (),
                                        self._rtype,
                                        isReduced-> self._isReduced)
    }


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('(', self._left);
            stream:.write (' ', self._op, ' ');
            stream:.write (self._rtype, ')');
        }
    }
}
