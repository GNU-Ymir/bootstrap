mod ymirc::semantic::generator::value::operator::binary::array;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::operator::binary::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::bool_;
import ymirc::semantic::generator::value::base;

/**
 * Special operators, that are calling function (for example opEquals, or opCmp)
 */
pub class SpecialArrayOperatorValue over BinaryOperatorValue {

    let _realValue : &Value;

    pub self (loc : &Word, type : &Type, operator : BinaryOperators, left : &Value, right : &Value, retValue : &Value, isReduced : bool = false)
        with super (loc, type, operator, left, right, isReduced-> isReduced)
        , _realValue = retValue
    {}

    pub fn getCall (self)-> &Value {
        self._realValue
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================           CLONE            ==========================
     * ================================================================================
     * ================================================================================
     */

    pub over clone (self)-> &Value {
        SpecialArrayOperatorValue::new (self._loc, self._type, self._op, self._left, self._right, self._realValue.clone (), isReduced-> self._isReduced)
    }

    impl Streamable;

    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._realValue);
        }
    }
}
