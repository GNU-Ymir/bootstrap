in special;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;
use ymirc::semantic::generator::type::native::scalar::bool_;

/**
 * Special operators, that are calling function (for example dxor, or fmod)
 */
@final
pub class SpecialMathFloatOperatorValue over BinaryOperatorValue {

    let _realValue : &Value;

    pub self (loc : &Word, type : &Type, operator : BinaryOperators, left : &Value, right : &Value, retValue : &Value, isReduced : bool = false)
        with super (loc, type, operator, left, right, isReduced-> isReduced)
        , _realValue = retValue
    {}

    pub fn getCall (self)-> &Value {
        self._realValue
    }

    pub over isFullLiteral (self)-> bool {
        false
    }

    pub over clone (self)-> &Value {
        copy SpecialMathFloatOperatorValue (self._loc, self._type,
                                            self._op,
                                            self._left.clone (),
                                            self._right.clone (),
                                            self._realValue.clone (),
                                            isReduced-> self._isReduced)
    }

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._realValue);
        }
    }
}

