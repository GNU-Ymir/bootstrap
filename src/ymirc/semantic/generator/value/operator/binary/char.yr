mod ymirc::semantic::generator::value::operator::binary::char;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::operator::binary::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::bool_;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::proto;


/**
 * Binary operator that assume that the operands are char like values
 * Or they can be casted implicitly
 * Assume that the operator is a math operator
 */
pub class BinaryMathCharOperatorValue over BinaryOperatorValue {

    pub self (loc : &Word, type : &Type, operator : BinaryOperators, left : &Value, right : &Value)
        with super (loc, type, operator, left, right)
    {}

    impl Streamable;    
}


/**
 * Binary operator that assume that the operands are char like values
 * Or they can be casted implicitly
 * Assume that the operator is a comparison operator
 */
pub class CmpCharOperatorValue over BinaryOperatorValue {

    pub self (loc : &Word, operator : BinaryOperators, left : &Value, right : &Value)
        with super (loc, BoolType::new (loc), operator, left, right)
    {}

    impl Streamable;    
}

/**
 * Power char operator that assume that the operands are char like values
 * Or they can be casted implicitly
 * The range char operator is '..' operator or '...' 
 * There is special class for that to make more explicit specialization in the backend part
 */
pub class RangeCharOperatorValue over BinaryOperatorValue {

    /// True if the right value is included in the range
    let _include : bool;
    
    pub self (loc : &Word, type : &Type, op : BinaryOperators, left : &Value, right : &Value, include : bool = false)
        with super (loc, type, op, left, right), _include = include
    {}

    impl Streamable;
}
