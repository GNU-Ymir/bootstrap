mod ymirc::semantic::generator::value::operator::binary::int;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::operator::binary::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::bool_;
import ymirc::semantic::generator::value::base;


/**
 * Binary operator that assume that the operands are int like values
 * Or they can be casted implicitly
 * Also assume that the operator involved is a math one
 * There is special class for that to make more explicit specialization in the backend part
 */
pub class BinaryMathIntOperatorValue over BinaryOperatorValue {

    pub self (loc : &Word, type : &Type, operator : BinaryOperators, left : &Value, right : &Value, isReduced : bool = false)
        with super (loc, type, operator, left, right, isReduced-> isReduced)
    {}

    impl Streamable;
}

/**
 * Special operators, that are calling function (for example dxor)
 */
pub class SpecialMathIntOperatorValue over BinaryOperatorValue {

    let _realValue : &Value;

    pub self (loc : &Word, type : &Type, operator : BinaryOperators, left : &Value, right : &Value, retValue : &Value, isReduced : bool = false)
        with super (loc, type, operator, left, right, isReduced-> isReduced)
        , _realValue = retValue
    {}

    pub fn getCall (self)-> &Value {
        self._realValue
    }

    impl Streamable;
}


/**
 * Binary operator that assume that the operands are int like values
 * Or they can be casted implicitly
 * Also assume that the operator involved is a bitwise one
 * There is special class for that to make more explicit specialization in the backend part
 */
pub class BitwiseIntOperatorValue over BinaryOperatorValue {

    pub self (loc : &Word, type : &Type, operator : BinaryOperators, left : &Value, right : &Value, isReduced : bool = false)
        with super (loc, type, operator, left, right, isReduced-> isReduced)
    {}

    impl Streamable;
}

/**
 * Power int operator that assume that the operands are int like values
 * Or they can be casted implicitly
 * The operator is assumed to be a comparison operator
 * There is special class for that to make more explicit specialization in the backend part
 */
pub class CmpIntOperatorValue over BinaryOperatorValue {

    pub self (loc : &Word, op : BinaryOperators, left : &Value, right : &Value, isReduced : bool = false)
        with super (loc, BoolType::new (loc), op, left, right, isReduced-> isReduced)
    {}

    impl Streamable;
}
