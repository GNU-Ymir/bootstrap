in binary;

pub mod ::array;
pub mod ::class_;
pub mod ::range;
pub mod ::bool_;
pub mod ::char_;
pub mod ::float_;
pub mod ::int_;
pub mod ::pointer_;


use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use std::stream;
use ymirc::semantic::generator::type;


@abstract
pub class BinaryOperatorValue over OperatorValue {

    // The operator
    let _op : BinaryOperators;

    // The left operand of the binary
    let _left : &Value;

    // The right operand of the binary
    let _right : &Value;

    /**
     * @params:
     *  - loc: the location of the binary operation
     *  - type: the type of the binary
     *  - left: the left operand of the operation
     *  - right: the right operand of the operation
     */
    pub self (loc : &Word, type : &Type, operator : BinaryOperators, left : &Value, right : &Value, isReduced : bool = false)
        with super (loc, type, isReduced-> isReduced)
        , _left = left
        , _right = right
        , _op = operator
    {
        self._throwers = left.getThrowers () ~ right.getThrowers ();
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the left operand of the binary operation
     */
    pub fn getLeft (self)-> &Value {
        self._left
    }

    /**
     * @returns: the right operand of the binary operation
     */
    pub fn getRight (self)-> &Value {
        self._right
    }

    /**
     * @returns: the operator of the operation
     */
    pub fn getOperator (self)-> BinaryOperators {
        self._op
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &BinaryOperatorValue => {
                if (self._left != p._left) return false;
                if (self._right != p._right) return false;
                if (self._op != p._op) return false;

                return true;
            }
            _ => {
                false
            }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._left.isFullLiteral () && self._right.isFullLiteral ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('(', self._left);
            stream:.write (' ', self._op, ' ');
            stream:.write (self._right, ')');
        }
    }

}
