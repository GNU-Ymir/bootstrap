mod ymirc::semantic::generator::value::operator::fieldstruct;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::operator::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::value::base;


/**
 */
pub class StructFieldAccessValue over OperatorValue {
    
    /// The struct operand of the access
    let _str : &Value;

    /// The name of the field to access 
    let _name : [c8];

    /**
     * @params: 
     *  - loc: the location of the access operation
     *  - type: the type of the access
     *  - str: the struct operand of the operation
     *  - name: the name of the field to access
     */
    pub self (loc : &Word, type : &Type, str : &Value, name : [c8])
        with super (loc, type), _str = str, _name = name
    {
        self._throwers = str.getThrowers ();
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the struct operand of the access operation
     */
    pub def getStruct (self)-> &Value {
        self._str
    }

    /**
     * @returns: the name of the field to access
     */
    pub def getFieldName (self)-> [c8] {
        self._name
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &StructFieldAccessValue => {
                self._str == p._str &&
                    self._name == p._name
            }
            _ => {
                false
            }                
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._str);
            stream:.write ('.'c8);
            stream:.write (self._name);
        }
    }
    
}
