in unary;

pub mod ::bool_;
pub mod ::float;
pub mod ::int;

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;
use ymirc::semantic::generator::type;
use std::stream;

@abstract
pub class UnaryOperatorValue over OperatorValue {

    // The operator
    let _op : UnaryOperators;

    // The inner operand of the unary
    let _inner : &Value;

    /**
     * @params:
     *  - loc: the location of the unary operation
     *  - type: the type of the unary
     *  - inner: the inner operand of the operation
     */
    pub self (loc : &Word, type : &Type, operator : UnaryOperators, inner : &Value, isReduced : bool)
        with super (loc, type, isReduced-> isReduced)
        , _inner = inner
        , _op = operator
    {
        self._throwers = inner.getThrowers ();
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the inner operand of the unary operation
     */
    pub fn getOperand (self)-> &Value {
        self._inner
    }

    /**
     * @returns: the operator
     */
    pub fn getOperator (self)-> UnaryOperators {
        self._op
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &UnaryOperatorValue => {
                if (self._inner != p._inner) return false;
                if (self._op != p._op) return false;

                return true;
            }
            _ => {
                false
            }
        }
    }

    pub over isFullLiteral (self)-> bool {
        self._inner.isFullLiteral ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._op);
            stream:.write (self._inner);
        }
    }

}
