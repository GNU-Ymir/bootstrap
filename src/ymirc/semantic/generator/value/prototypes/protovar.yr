in protovar;

use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::type::native::scalar::none_;
use ymirc::semantic::generator::value::literal::unit;
use ymirc::semantic::generator::type;

/**
 * A proto var is a variable declared in the prototype of function
 */
pub class ProtoVarValue over Value {

    // The value of the variable
    let _value : &Value;

    // True if the variable is declared mutable
    let _isMutable : bool;

    // True if the variable is the self variable;
    let _isSelf : bool;

    // True iif the variable is reference
    let _isReference : bool;

    // True iif the variable is lazy
    let _isLazy : bool;
    
    // The number of argument consumed by the variable, this is for template variadic vars
    let _nbConsume : u32; 

    /**
     * @params:
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - refId: the override of the uniq Id (for closure reference for example)
     */
    pub self (loc : &Word, type : &Type, refId : usize)
        with super (loc, type, refId-> refId)
        , _value = UNIT_VALUE
        , _isMutable = false
        , _isSelf = false
        , _nbConsume = 1u32
        , _isReference = false
        , _isLazy = false
    {
        self._isLvalue = false;
    }

    /**
     * @params:
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - isMutable: true iif the variable is declared mutable
     *    - isSelf: true iif the variable is self
     */
    pub self (loc : &Word, type : &Type, value : &Value, isMutable : bool, isReference : bool, isLazy : bool = false, isSelf : bool = false, nbConsume : u32 = 1u32)
        with super (loc, type)
        , _value = value
        , _isMutable = isMutable
        , _isSelf = isSelf
        , _nbConsume = nbConsume
        , _isReference = isReference
        , _isLazy = isLazy
    {
        self._isLvalue = self._isMutable;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true iif the variable declaration is the self (first param of methods)
     */
    pub fn isSelf (self)-> bool {
        self._isSelf
    }

    /**
     * @returns: true iif the variable is declared mutable
     */
    pub fn isMutable (self)-> bool {
        self._isMutable
    }

    /**
     * @returns: true iif the variable is declared as a reference
     */
    pub fn isReference (self)-> bool {
        return self._isReference
    }

    /**
     * @returns: true iif the variable is declared as lazy
     * */
    pub fn isLazy (self)-> bool {
        return self._isLazy
    }

    /**
     * @returns: the default value of the parameter
     */
    pub fn getDefaultValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the name of the var
     */
    pub fn getName (self)-> [c8] {
        self._loc.str ()
    }

    /**
     * @returns: the number of variable consumed by the proto variable
     */
    pub fn getNbConsume (self)-> u32 {
        self._nbConsume
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &ProtoVarValue => {
                if (self._loc.str () != p._loc.str ()) return false;
                if (self._isMutable != p._isMutable) return false;
                if (self._isSelf != p._isSelf) return false;
                if (self._isReference != p._isReference) return false;
                if (self._isLazy != p._isLazy) return false;
                if (self._nbConsume != p._nbConsume) return false;

                return true;
            }
            _ => { false }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Keys::MUTABLE, ' ');
            if (self._isReference) stream:.write (Keys::REF, ' ');
            if (self._isLazy) stream:.write (Keys::LAZY, ' ');

            stream:.write (self._loc.str ());
            if (stream.withVarIds ()) {
                stream:.write ("(#", std::conv::to!{[c8], 36} (self._uniqId), ')');
            }
            match self._type {
                NoneType () => {}
                _ => {
                    stream:.write (' ', Tokens::COLON, ' ');
                    self._type.format (alias stream);
                }
            }

            match self._value {
                UnitValue () => {}
                _ => {
                    stream:.write (' ', Tokens::EQUAL, ' ');
                    self._value.format (alias stream);
                }
            }
        }        
    }
    
}



