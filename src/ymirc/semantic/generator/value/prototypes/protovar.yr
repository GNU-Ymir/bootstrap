mod ymirc::semantic::generator::value::prototypes::protovar;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io, std::conv;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::literal::none;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;


/**
 * A proto var is a variable declared in the prototype of function
 */
pub class ProtoVarValue over Value {

    /// The value of the variable
    let _value : &Value;

    /// True if the variable is declared mutable
    let _isMutable : bool;

    /// True if the variable is the self variable;
    let _isSelf : bool;

    /// The number of argument consumed by the variable, this is for template variadic vars
    let _nbConsume : u32; 
    
    
    /**
     * @params: 
     *    - loc: the location of the variable
     *    - type: the type of the variable
     *    - value: the default value of the variable
     *    - isMutable: true iif the variable is declared mutable
     *    - isSelf: true iif the variable is self
     */
    pub self (loc : &Word, type : &Type, value : &Value, isMutable : bool, isSelf : bool = false, nbConsume : u32 = 1u32)
        with super (loc, type), _value = value, _isMutable = isMutable, _isSelf = isSelf, _nbConsume = nbConsume
    {
        self._isLvalue = self._isMutable;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true iif the variable declaration is the self (first param of methods)
     */
    pub def isSelf (self)-> bool {
        self._isSelf
    }

    /**
     * @returns: true iif the variable is declared mutable
     */
    pub def isMutable (self)-> bool {
        self._isMutable
    }

    /**
     * @returns: the default value of the parameter
     */
    pub def getDefaultValue (self)-> &Value {
        self._value
    }

    /**
     * @returns: the name of the var
     */
    pub def getName (self)-> [c8] {
        self._loc.str ()
    }

    /**
     * @returns: the number of variable consumed by the proto variable
     */
    pub def getNbConsume (self)-> u32 {
        self._nbConsume
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &ProtoVarValue => {
                self._isMutable == p._isMutable &&
                    self._isSelf == p._isSelf && 
                    self._type == p._type &&
                    self._value == p._value
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (self._isMutable) stream:.write (Keys::MUTABLE, ' 'c8);
            stream:.write (self._loc.str ());
            if (stream.withVarIds ()) {
                stream:.write ("(#"s8, self._uniqId.to!{[c8], 36us}(), ')'c8);
            }
            match self._type {
                NoneType () => {}
                _ => {
                    stream:.write (' 'c8, Tokens::COLON, ' 'c8);
                    self._type.format (alias stream);
                }
            }

            match self._value {
                NoneValue () => {}
                _ => {
                    stream:.write (' 'c8, Tokens::EQUAL, ' 'c8);
                    self._value.format (alias stream);
                }
            }
        }        
    }
    
}



