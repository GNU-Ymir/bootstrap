mod ymirc::semantic::generator::value::prototypes::dtorproto;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::protovar;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::void_;
import ymirc::semantic::generator::type::temporary::classref;
import ymirc::semantic::generator::type::temporary::proto;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::value::prototypes::methodproto;

/**
 * A method prototype value is a prototype value, to which is attach a class symbol
 * It may also have a trait symbol, when the prototype was defined by a trait implementation
 */
pub class DtorPrototypeValue over MethodPrototypeValue {

    /**
     * @params: 
     *   - loc: the location of the prototype
     *   - sym: the function that defines the prototype
     *   - parameters: the list of parameters of the prototype
     *   - throwers: the list of types that are thrown by the prototype
     *   - clRef: the class defining the method
     */
    pub self (loc : &Word, sym : &Symbol, clRef : &ClassRefType)
        with super (loc, sym, [], VoidType::new (loc), [], clRef-> clRef, trRef-> EMPTY_SYMBOL, isEmpty-> false, isOver-> false, isMutable-> true, attributes-> [])
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &DtorPrototypeValue => {
                self._sym == p._sym && self._clRef == p._clRef
            }
            _ => { false }
        }
    }

    /**
     * @returns: true if the prototype is similar to 'o', but not necessarily the with the same clRef, it is only prototype comparison
     */
    pub over isSimilar (self, o : &Value)-> bool {
        match o {
            _ : &DtorPrototypeValue => {    
                true
            }
            _ => { false }
        }
    }    

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._sym.getPath ().toStr ());
            stream:.write ("__dtor (mut self)"s8);           
        }
        
    }
    
}


