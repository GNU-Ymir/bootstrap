mod ymirc::semantic::generator::value::prototypes::nameproto;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::protovar;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::symbol::empty;
import ymirc::semantic::symbol::path;
import ymirc::semantic::generator::value::prototypes::proto;


/**
 * A name prototype value is a prototype value, to which is attach a finalized name
 */
pub class NamePrototypeValue over PrototypeValue {

    /// The name of the fn
    let _name : &SymbolPath;

    /// True iif the prototype comes from a lambda
    let _isLambda : bool;

    /**
     * @params:
     *   - loc: the location of the prototype
     *   - name: the mangled name of function
     *   - parameters: the list of parameters of the prototype
     *   - retType: the return type of the function
     */
    pub self (loc : &Word, name : &SymbolPath, parameters : [&ProtoVarValue], retType : &Type, isLambda : bool = false)
        with super (loc, EMPTY_SYMBOL, parameters, retType, [], [])
        , _name = name
        , _isLambda = isLambda
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &NamePrototypeValue => {
                if (self._name != p._name) return false;

                return true;
            }
            _ => { false }
        }
    }

    /**
     * @returns: true if the prototype is similar to 'o', but not necessarily the with the same clRef, it is only prototype comparison
     */
    pub over isSimilar (self, o : &Value)-> bool {
        match o {
            p : &NamePrototypeValue => {
                if (p._parameters.len != self._parameters.len) return false;
                if (self._retType != p._retType) return false;
                if (self._name != p._name) return false;
                for i in 0us .. self._parameters.len {
                    if (self._parameters [i].getType () != p._parameters[i].getType ()) return false;
                    if (self._parameters [i].getType ().sameMutability (p._parameters[i].getType ())) return false;
                    if (self._parameters [i].isLazy () != p._parameters[i].isLazy ()) return false;
                    if (self._parameters [i].isReference () != p._parameters[i].isReference ()) return false;
                }

                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the rename of the construname
     */
    pub fn getName (self)-> &SymbolPath {
        self._name
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (!self._isLambda) {
                stream:.write (self._name.toStr (), " ");
            }

            stream:.write ("("s8);

            stream:.entabing ();
            for i, j in self._parameters {
                if (i != 0us) stream:.write (", "s8);
                j.format (alias stream);
            }
            stream:.write (")-> "s8);
            stream:.write (self._retType);
            stream:.detabing ();
        }

    }

}
