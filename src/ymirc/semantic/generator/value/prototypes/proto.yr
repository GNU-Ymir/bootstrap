mod ymirc::semantic::generator::value::prototypes::proto;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::protovar;
import ymirc::semantic::generator::value::literal::none;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::temporary::proto;
import ymirc::semantic::symbol::_;
import ymirc::semantic::symbol::function;
import ymirc::semantic::validator::template::rewrite;
import ymirc::semantic::validator::template::mapper;

/**
 * A prototype is the prototype of function that can be called
 */
pub class PrototypeValue over Value {

    /// The symbol of the function
    let _sym : &Symbol;

    /// The list of parameters of the prototype
    let _parameters : [&ProtoVarValue];

    /// The return type of the function
    let _retType : &Type;

    /// The template rewritter used to generate this prototype
    let _templateRewriter : (&TemplateRewriter)? = ((&TemplateRewriter)?)::__err__;
      
    /**
     * @params: 
     *   - loc: the location of the prototype
     *   - sym: the function that defines the prototype
     *   - parameters: the list of parameters of the prototype
     *   - retType: the return type of the prototype
     *   - throwers: the list of types that are thrown by the prototype
     *   - fromTemplate: the template rewritter used to create this prototype
     */
    pub self (loc : &Word, sym : &Symbol, type : &Type = PROTOTYPE_TYPE, parameters : [&ProtoVarValue], retType : &Type, throwers : [&Type], fromTemplate : (&TemplateRewriter)? = ((&TemplateRewriter)?)::__err__)
        with super (loc, type), _sym = sym, _parameters = parameters, _retType = retType, _templateRewriter = fromTemplate
    {
        let dmut v = Vec!{(&Word, &Type)}::new ();
        for t in throwers {
            v:.push ((loc, t));
        }
        
        self._throwers = v[];
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the parameters of the prototype
     */
    pub def getParameters (self)-> [&ProtoVarValue] {
        self._parameters
    }

    /**
     * @returns: the return type of the prototype
     */
    pub def getRetType (self)-> &Type {
        self._retType
    }

    /**
     * @returns: true iif the prototype refers to a cvariadic function    
     */
    pub def isCVariadic (self)-> bool {
        match self._sym {
            f : &FunctionSymbol => {
                f.isCVariadic ()
            }
            _ => { false }
        }
    }

    /**
     * @returns: the symbol refered by the prototype
     */
    pub def getSymbol (self)-> &Symbol {
        self._sym
    }

    pub def getTemplateMapper (self)-> &TemplateMapper? {
        match self._templateRewriter {
            Ok (t : _) => {
                t.getTemplateMapper ()?
            }
            _ => {
                ((&TemplateMapper)?)::__err__
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &PrototypeValue => {
                self._sym == p._sym
            }
            _ => { false }
        }
    }

    /**
     * @returns: true if the prototype is similar to 'o', but not necessarily the with the same symbol only prototype comparison
     */
    pub def isSimilar (self, o : &Value)-> bool {
        match o {
            p : &PrototypeValue => {
                if (p._parameters.len != self._parameters.len) return false;
                if (self._retType != p._retType) return false;
                for i in 0us .. self._parameters.len {
                    if (self._parameters [i] != p._parameters[i]) return false;
                }

                true
            }
            _ => { false }
        }
    }    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            match self._templateRewriter {
                Ok (x : _) => {
                    let path = self._sym.getPath ();
                    let filename = ymirc::utils::format::format ("%!%::%"s8, path.file (), x.simpleFormat (), path.file ());
                    
                    let fullName = path.parent ().push (filename);
                    stream:.write (fullName.toStr (sep-> "::"s8));
                }
                _ => {
                    stream:.write (self._sym.getPath ().toStr (sep-> "::"s8));
                }
            };
            
            if (stream.hasCustomFormatTag ("withParams"s8)) {
                stream:.entabing ();
                for i, j in self._parameters {
                    if (i != 0us) stream:.write (", "s8);
                    j.format (alias stream);
                }
                stream:.write (")-> "s8);
                self._retType.format (alias stream);
                stream:.detabing ();
            }
        }        
    }
    
}



