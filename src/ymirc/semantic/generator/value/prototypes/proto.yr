mod ymirc::semantic::generator::value::prototypes::proto;

import ymirc::lexing::word;
import ymirc::utils::format;

import ymirc::syntax::keys;
import std::io;
import std::collection::vec;
import std::algorithm::searching;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::protovar;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::scalar::none;
import ymirc::semantic::symbol::_;
import ymirc::semantic::symbol::function;
import ymirc::semantic::validator::template::rewrite;
import ymirc::semantic::validator::template::mapper;


/**
 * A prototype is the prototype of function that can be called
 */
pub class PrototypeValue over Value {

    /// The symbol of the function
    let _sym : &Symbol;

    /// the location of the unsafe keyword or EOF
    let _attributes : [AttributeWord];

    /// The list of parameters of the prototype
    let _parameters : [&ProtoVarValue];

    /// The return type of the function
    let _retType : &Type;

    /// The template rewriter used to generate this prototype
    let _templateRewriter : (&TemplateRewriter)? = ((&TemplateRewriter)?)::__err__;

    /**
     * @params: 
     *   - loc: the location of the prototype
     *   - sym: the function that defines the prototype
     *   - parameters: the list of parameters of the prototype
     *   - retType: the return type of the prototype
     *   - throwers: the list of types that are thrown by the prototype
     *   - fromTemplate: the template rewriter used to create this prototype
     */
    pub self (loc : &Word, sym : &Symbol, parameters : [&ProtoVarValue], retType : &Type, throwers : [(&Word, &Type)], attributes : [AttributeWord], fromTemplate : (&TemplateRewriter)? = ((&TemplateRewriter)?)::__err__)
        with super (loc, NONE_TYPE)
        , _sym = sym
        , _parameters = parameters
        , _retType = retType
        , _templateRewriter = fromTemplate
        , _attributes = attributes
    {
        self._throwers = throwers;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the parameters of the prototype
     */
    pub fn getParameters (self)-> [&ProtoVarValue] {
        self._parameters
    }

    /**
     * @returns: the return type of the prototype
     */
    pub fn getRetType (self)-> &Type {
        self._retType
    }

    /**
     * @returns: true iif the prototype refers to a cvariadic function    
     */
    pub fn isCVariadic (self)-> bool {
        match self._sym {
            f : &FunctionSymbol => {
                f.isCVariadic ()
            }
            _ => { false }
        }
    }

    /**
     * @returns: true iif the prototype refers to an unsafe function
     * */
    pub fn isUnsafe (self)-> bool {
        for i in self._attributes match i.attr {
            Attributes::UNSAFE => { return true; }
        }

        false
    }

    /**
     * @returns: the location of the unsafe keyword or EOF
     * */
    pub fn getUnsafeLoc (self)-> &Word {

        for i in self._attributes match i.attr {
            Attributes::UNSAFE => { return i.loc; }
        }

        EOF_WORD
    }

    /**
     * @returns: true iif the prototype refers to an inline function
     * */
    pub fn isInline (self)-> bool {
        for i in self._attributes match i.attr {
            Attributes::INLINE => { return true; }
        }

        false
    }

    /**
     * @returns: the location of the inline keyword or EOF
     * */
    pub fn getInlineLoc (self)-> &Word {

        for i in self._attributes match i.attr {
            Attributes::INLINE => { return i.loc; }
        }

        EOF_WORD
    }


    /**
     * @returns: the symbol refered by the prototype
     */
    pub fn getSymbol (self)-> &Symbol {
        self._sym
    }

    pub fn getTemplateMapper (self)-> &TemplateMapper? {
        match self._templateRewriter {
            Ok (t : _) => {
                t.getTemplateMapper ()?
            }
            _ => {
                ((&TemplateMapper)?)::__err__
            }
        }
    }

    /*
     * @returns: the score of the template rewriter (if any, 0 otherwise)
     * */
    pub fn getTemplateScore (self)-> u32 {
        match self._templateRewriter {
            Ok (t : _) => {
                t.getScore ()
            }
            _ => { 0u32 }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &PrototypeValue => {
                if (self._sym != p._sym) return false;
                if (self._parameters.len != p._parameters.len) return false;
                if (self._attributes != p._attributes) return false;
                for i in 0us .. self._parameters.len {
                    if (self._parameters [i] != p._parameters [i]) return false;
                }
                if (self._retType != p._retType) return false;

                return true;
            }
            _ => { false }
        }
    }

    /**
     * @returns: true if the prototype is similar to 'o', but not necessarily the with the same symbol only prototype comparison
     */
    pub fn isSimilar (self, o : &Value)-> bool {
        match o {
            p : &PrototypeValue => {
                if (p._parameters.len != self._parameters.len) return false;
                if (self._retType != p._retType) return false;
                for i in 0us .. self._parameters.len {
                    if (self._parameters [i].getType () != p._parameters[i].getType ()) return false;
                    if (self._parameters [i].getType ().sameMutability (p._parameters[i].getType ())) return false;
                    if (self._parameters [i].isLazy () != p._parameters[i].isLazy ()) return false;
                    if (self._parameters [i].isReference () != p._parameters[i].isReference ()) return false;
                }

                true
            }
            _ => { false }
        }
    }    
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            let path = match self.getTemplateMapper () {
                Ok (x : _) => { self._sym.getPath ().withTemplates (x?) }
                _ => { self._sym.getPath () }
            };

            stream:.write (path);
            if (stream.hasCustomFormatTag ("withParams"s8)) {
                stream:.entabing ();
                stream:.write (" ("s8);
                for i, j in self._parameters {
                    if (i != 0us) stream:.write (", "s8);
                    j.format (alias stream);
                }
                stream:.write (")-> "s8);
                self._retType.format (alias stream);
                stream:.detabing ();
            }
        }        
    }
    
}



