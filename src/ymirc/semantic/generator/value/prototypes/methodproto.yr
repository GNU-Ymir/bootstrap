in methodproto;

use ymirc::lexing::word;
use ymirc::utils::format;
use ymirc::syntax::keys;
use std::stream;

use ymirc::syntax::expression;
use ymirc::semantic::generator::value::prototypes::{protovar, proto};
use ymirc::semantic::generator::type;
use ymirc::semantic::generator::type::native::scalar::none_;
use ymirc::semantic::symbol::{function, path, empty};
use ymirc::semantic::generator::type::temporary::classref;
use ymirc::semantic::validator::template::rewrite;

/**
 * A method prototype value is a prototype value, to which is attach a class symbol
 * It may also have a trait symbol, when the prototype was defined by a trait implementation
 */
pub class MethodPrototypeValue over PrototypeValue {

    // True iif the self parameter is mutable
    let _isMutable : bool;

    // The class that defines this prototype
    let _clRef : &ClassRefType;

    // The trait that defines this prototype (can be EmptySymbol, thus the generic type)
    let _traitSymbol : &Symbol;

    // True iif the associated symbol has no body
    let _isEmpty : bool;

    // True iif the method symbol was an override
    let _isOver : bool;

    // True iif the method symbol is declared final
    let _isFinal : bool;

    /**
     * @params: 
     *   - loc: the location of the prototype
     *   - sym: the function that defines the prototype
     *   - parameters: the list of parameters of the prototype
     *   - retType: the return type of the prototype
     *   - throwers: the list of types that are thrown by the prototype
     *   - clRef: the class defining the method
     *   - trRef: the trait defining the method
     *   - isMutable: true iif the self parameter is mutable
     *   - isFinal: true iif the method is marked as final
     *   - isEmpty: true iif the method has no body
     */
    pub self (loc : &Word, sym : &Symbol, parameters : [&ProtoVarValue], retType : &Type, throwers : [(&Word, &Type)], attributes : [AttributeWord], clRef : &ClassRefType, trRef : &Symbol = EMPTY_SYMBOL, isMutable : bool, isEmpty : bool = false, isOver : bool = false, isFinal : bool = false, fromTemplate : (TemplateRewriter)? = none)
        with super (loc, sym, parameters, retType, throwers, attributes, fromTemplate-> fromTemplate)
        , _clRef = (if (isMutable) { clRef.clone (1u32) } else { clRef.clone (0u32) }).asOf!{&ClassRefType} ()
        , _traitSymbol = trRef
        , _isEmpty = isEmpty
        , _isMutable = isMutable
        , _isOver = isOver
        , _isFinal = isFinal
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &MethodPrototypeValue => {
                if (self._clRef != p._clRef) return false;
                if (self._traitSymbol != p._traitSymbol) return false;

                return true;
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the trait symbol that defines the method 
     * @warning: maybe EmptySymbol
     */
    pub fn getTrait (self)-> &Symbol {
        self._traitSymbol
    }

    /**
     * @returns: the type of self of the method
     */
    pub fn getClassRef (self)-> &ClassRefType {
        self._clRef
    }

    /**
     * @returns: true iif the method was an override     
     */
    pub fn isOver (self)-> bool {
        self._isOver
    }

    /**
     * @returns: true iif the method was declared as final
     * */
    pub fn isFinal (self)-> bool {
        self._isFinal
    }

    /**
     * @returns: true if the method has to be called from the vtable
     * */
    pub fn isVirtual (self)-> bool {
        !self._isFinal || self._isOver // is method is final, and is not an override it is not virtual
    }

    /**
     * @returns: true if the method has no body
     * */
    pub fn isEmpty (self)-> bool {
        self._isEmpty
    }

    /**
     * @returns: true iif the method is a field method
     * */
    pub fn isField (self)-> bool {
        for i in self._attributes match i.attr {
            Attributes::FIELD => { return true; }
        }

        false
    }

    /**
     * @returns: the location of the field attributes if any, EOF_WORD otherwise
     * */
    pub fn getFieldLoc (self)-> &Word {
        for i in self._attributes match i.attr {
            Attributes::FIELD => { return i.loc; }
        }

        EOF_WORD
    }

    /**
     * @returns: true iif the method was declared mutable
     */
    pub fn isMutable (self)-> bool {
        self._isMutable
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MISC          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    impl Streamable;

}
