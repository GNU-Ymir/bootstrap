in ctorproto;

use ymirc::syntax::keys;
use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::value::prototypes::protovar;
use ymirc::semantic::generator::type;
use ymirc::semantic::generator::type::native::scalar::void_;
use ymirc::semantic::generator::type::temporary::classref;
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::value::prototypes::methodproto;
use ymirc::semantic::validator::template::rewrite;

/**
 * A method prototype value is a prototype value, to which is attach a class symbol
 * It may also have a trait symbol, when the prototype was defined by a trait implementation
 */
@final
pub class CtorPrototypeValue over MethodPrototypeValue {

    /// The rename of the ctor fn
    let _rename : [c8] = "";

    let _pre : bool = false;

    let _post : bool = false;

    /**
     * @params: 
     *   - loc: the location of the prototype
     *   - sym: the function that defines the prototype
     *   - parameters: the list of parameters of the prototype
     *   - throwers: the list of types that are thrown by the prototype
     *   - clRef: the class defining the method
     */
    pub self (loc : &Word,
              sym : &Symbol,
              pre : bool = false,
              post : bool = false,
              rename : [c8] = "",
              parameters : [&ProtoVarValue],
              throwers : [(&Word, &Type)],
              attributes : [AttributeWord],
              clRef : &ClassRefType,
              fromTemplate : (TemplateRewriter)? = none)

        with super (loc,
                    sym,
                    parameters,
                    copy VoidType (loc),
                    throwers,
                    clRef-> clRef,
                    trRef-> EMPTY_SYMBOL,
                    isEmpty-> false,
                    isOver-> false,
                    isMutable-> true,
                    attributes-> attributes,
                    fromTemplate-> fromTemplate)

        , _rename = rename
        , _pre = pre
        , _post = post
    {}    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self.super.opEquals (o)) return false;

        match o {
            p : &CtorPrototypeValue => {
                if (self._rename != p._rename) return false;
                if (self._pre != p._pre || self._post != p._post) return false;

                return true;
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the rename of the constructor
     */
    pub fn getRename (self)-> [c8] {
        self._rename
    }

    pub fn isPre (self)-> bool {
        self._pre
    }

    pub fn isPost (self)-> bool {
        self._post
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          CLONE          ======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    pub fn cloneForPre (self)-> &CtorPrototypeValue {
        copy CtorPrototypeValue (self._loc,
                                 self._sym,
                                 pre-> true,
                                 post-> false,
                                 rename-> self._rename,
                                 parameters-> self._parameters,
                                 throwers-> self._throwers,
                                 attributes-> self._attributes,
                                 clRef-> self._clRef,
                                 fromTemplate-> self._templateRewriter)
    }

    pub fn cloneForPost (self)-> &CtorPrototypeValue {
        copy CtorPrototypeValue (self._loc,
                                 self._sym,
                                 pre-> false,
                                 post-> true,
                                 rename-> self._rename,
                                 parameters-> self._parameters,
                                 throwers-> self._throwers,
                                 attributes-> self._attributes,
                                 clRef-> self._clRef,
                                 fromTemplate-> self._templateRewriter)
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            let path = match self.getTemplateMapper () {
                Ok (x : _) => { self._sym.getPath ().withTemplates (x?) }
                _ => { self._sym.getPath () }
            };

            stream:.write (path);
            if self._pre {
                stream:.write ("[pre]");
            } else if self._post {
                stream:.write ("[post]");
            }

            if (stream.tags.withParams) {
                stream:.write (" (");

                stream:.entabing ();
                for i, j in self._parameters {
                    if (i != 0us) stream:.write (", ");
                    j.format (alias stream);
                }
                stream:.write (")-> mut &(mut ");
                self._clRef.format (alias stream);
                stream:.write (")");
                stream:.detabing ();
            }
        }
        
    }
    
}


