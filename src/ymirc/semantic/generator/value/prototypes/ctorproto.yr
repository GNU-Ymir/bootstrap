mod ymirc::semantic::generator::value::prototypes::ctorproto;

import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::prototypes::protovar;
import ymirc::semantic::generator::value::literal::none;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::void_;
import ymirc::semantic::generator::type::temporary::classref;
import ymirc::semantic::generator::type::temporary::proto;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::value::prototypes::methodproto;

/**
 * A method prototype value is a prototype value, to which is attach a class symbol
 * It may also have a trait symbol, when the prototype was defined by a trait implementation
 */
pub class CtorPrototypeValue over MethodPrototypeValue {

    /// The rename of the ctor fn
    let _rename : [c8] = ""s8;

    /**
     * @params: 
     *   - loc: the location of the prototype
     *   - sym: the function that defines the prototype
     *   - parameters: the list of parameters of the prototype
     *   - throwers: the list of types that are thrown by the prototype
     *   - clRef: the class defining the method
     */
    pub self (loc : &Word, sym : &Symbol, rename : [c8] = ""s8, parameters : [&ProtoVarValue], throwers : [&Type], attributes : [AttributeWord], clRef : &ClassRefType)
        with super (loc, sym, parameters, VoidType::new (loc), throwers, clRef-> clRef, trRef-> EMPTY_SYMBOL, isEmpty-> false, isOver-> false, isMutable-> true, attributes-> attributes), _rename = rename
    {}    


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            p : &CtorPrototypeValue => {
                self._sym == p._sym && self._clRef == p._clRef
            }
            _ => { false }
        }
    }

    /**
     * @returns: true if the prototype is similar to 'o', but not necessarily the with the same clRef, it is only prototype comparison
     */
    pub over isSimilar (self, o : &Value)-> bool {
        match o {
            p : &CtorPrototypeValue => {
                if (p._isMutable != self._isMutable) return false;
                if (p._parameters.len != self._parameters.len) return false;
                if (self._retType != p._retType) return false;
                if (self._rename != p._rename) return false;
                for i in 0us .. self._parameters.len {
                    if (self._parameters [i] != p._parameters[i]) return false;
                }
                
                true
            }
            _ => { false }
        }
    }    

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the rename of the constructor
     */
    pub fn getRename (self)-> [c8] {
        self._rename
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    
    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._sym.getPath ().toStr (sep-> "::"s8));
            if (self._rename != ""s8) stream:.write ("::"s8, self._rename);

            if (stream.hasCustomFormatTag ("withParams"s8)) {
                stream:.write (" ("s8);

                stream:.entabing ();
                for i, j in self._parameters {
                    if (i != 0us) stream:.write (", "s8);
                    j.format (alias stream);
                }
                stream:.write (")-> dmut &"s8);
                self._clRef.format (alias stream);
                stream:.detabing ();
            }
        }
        
    }
    
}


