mod ymirc::semantic::generator::value::break_;


import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::semantic::generator::type::native::none;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::scope::base;
import ymirc::semantic::generator::base;
import ymirc::semantic::generator::type::base;
import ymirc::semantic::generator::type::native::void_;
import ymirc::semantic::generator::value::literal::unit;


/**
 * Break statement
 */
pub class BreakValue over Value {

    /// The value returned by the break
    let _value : &Value;

    /**
     * @params: 
     *   - value: the value returned by the break
     */
    pub self (loc : &Word, value : &Value, isReduced : bool = false)
        with super (loc, VoidType::new (loc), isReduced-> isReduced)
        , _value = value
    {
        self._breakLoc = loc;
        self._throwers = self._value.getThrowers ();
    }    

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value returned by the break
     */
    pub fn getValue (self)-> &Value {
        self._value
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        match o {
            b : &BreakValue => {
                self._value == b._value
            }
            _ => false
        }
    }

    pub over needUniqness (self)-> bool {
        true
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (Keys::BREAK, " ");
            match self._value {
                UnitValue () => { stream:.write ("{}"s8); }
                _ => {
                    stream:.entabing ();
                    self._value.format (alias stream);
                    stream:.detabing ();
                }
            }
        }        

    }   
    
    
}

