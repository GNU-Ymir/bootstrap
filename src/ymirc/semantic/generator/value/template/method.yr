in method;

use ymirc::semantic::generator::type;
use ymirc::semantic::generator::type::native::scalar::none_;
use ymirc::semantic::symbol::{template, class_};
use ymirc::syntax::declaration::{function, constructor};
use ymirc::syntax::expression::{vardecl, empty};

@final
pub class TemplateRefMethodValue over TemplateRefValue {

    let _clRef : &ClassSymbol;

    pub self (loc : &Word, cl : &ClassSymbol, tmp : &TemplateSymbol)
        with super (loc, tmp)
        , _clRef = cl
    {}


    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &TemplateRefMethodValue => {
                if (self._clRef != p._clRef) return false;
                return true;
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the class symbol that contains the template method
     * */
    pub fn getClassSymbol (self)-> &ClassSymbol {
        self._clRef
    }

    /**
     * @returns: the name of the method
     * */
    pub fn getFunctionName (self)-> [c8] {
        match self._sym.getContent ().getContent () {
            f : &FunctionDecl => { f.getLoc ().str () }
            _ => panic;
        }
    }

    /**
     * @returns: the syntax declaration of the method
     * */
    pub fn getFunction (self)-> &FunctionDecl {
        match self._sym.getContent ().getContent () {
            f : &FunctionDecl => { f }
            _ => panic;
        }
    }

    /**
     * @returns: true if the function declaration declares self as mutable
     * */
    pub fn isMutable (self)-> bool {
        match self._sym.getContent ().getContent () {
            f : &FunctionDecl => {
                let v = f.getFunctionProto ().getParameters ()[0];
                return (v.isMutable () || v.isDeeplyMutable ());
            }
        }

        panic;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            if (stream.hasCustomFormatTag ("withParams")) {
                stream:.write (self._sym.getPath ().toStr (), " {");
                for i, z in self._sym.getContent ().getParameters () {
                    if i != 0us stream:.write (", ");
                    stream:.write (z);
                }
                stream:.write ("}");
                match self._sym.getContent ().getContent () {
                    f : &FunctionDecl => {
                        stream:.write ("(");
                        for i, p in f.getFunctionProto ().getParameters ()[1us .. $] {
                            if i != 0us stream:.write (", ");
                            stream:.write (p);
                        }
                        stream:.write (")");
                        match f.getFunctionProto ().getRetType () {
                            EmptyExpression () => {}
                            x : _ => {
                                stream:.write ("-> ", x);
                            }
                        }
                    }
                }
            } else {
                stream:.write (self._sym.getPath ().toStr (), " {");
                for i, z in self._sym.getContent ().getParameters () {
                    if i != 0us stream:.write (", ");
                    stream:.write (z);
                }
                stream:.write ("}");
            }
        }
    }

}
