in multsym;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

use ymirc::semantic::generator::{base,
                                 value::base,
                                 type::base,
                                 type::native::scalar::none_};

/**
 * A mult sym value, is a value that contains references to multiple symbols
 * It can happen when multiple symbols have the same name for example
 */
@final
pub class MultSymValue over Value {

    // The content of the multiple sym
    let _values : [&Value];

    // The string to print for pretty error formatting
    let _prettyStr : [c8];
    
    /**
     * @params: 
     *   - loc: the location of the reference
     * 
     */
    pub self (loc : &Word, content : [&Value], prettyStr : [c8] = ""s8)
        with super (loc, NONE_TYPE, isReduced-> true)
        , _prettyStr = prettyStr
        , _values = {
            // Flattening mult symbols
            let mut res : [mut &Value] = [];
            for c in content {
                if let m : &MultSymValue = c {
                    res ~= m._values;
                }
                else res ~= [c];
            }
            res
        }
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the list of values contained in the mult sym
     */
    pub fn getValues (self)-> [&Value] {
        self._values
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    pub over opEquals (self, o : &Generator)-> bool {
        if (!self::super.opEquals (o)) return false;

        match o {
            p : &MultSymValue => {
                if (p._values.len != self._values.len) return false;
                for i in 0us .. self._values.len {
                    if (p._values [i] != self._values [i]) return false;
                }

                true
            }
            _ => { false }
        }
    }

    pub over isFullLiteral (self)-> bool {
        for i in self._values {
            if (!i.isFullLiteral ()) return false;
        }

        true
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          CLONING          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Create an exact copy of the value with a different uniqId
     * */
    pub over clone (self)-> &Value {
        let mut result = [i.clone () for i in self._values];
        copy MultSymValue (self._loc, result, prettyStr-> self._prettyStr)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            match self._prettyStr {
                "" =>
                    stream:.write ("<mutlsym-value>");
                _ =>
                    stream:.write (self._prettyStr);
            };                    
        }        
    }
    
}



