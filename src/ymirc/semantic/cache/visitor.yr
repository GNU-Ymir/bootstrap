mod ymirc::semantic::cache::visitor;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import ymirc::semantic::generator::_;
import ymirc::semantic::symbol::_;

import std::fs::path;

/**
 * Cache class that read and dump cache, to allow diff validation
 * and avoid recompiling every symbols at each ne compilation
 * */
pub class @final Cache {

    /// The path to the package being compiled
    let _packageDir : &Path;

    /// The root symbol of the package
    let dmut _package : &Symbol;

    /**
     * @params:
     *    - packageDir: the path to the package being compiled
     *    - package: the root symbol of the package
     * */
    pub self (packageDir : &Path, dmut package : &Symbol)
        with _packageDir = packageDir, _package = alias package
    {}

    /**
     * Load the current cache, and update the list of symbols that have to be validated
     * Also adds the generators to the symbols that are not different from last validation
     * And insert weak symbols, that are dependencies from syntax symbols, that are not yet validated (i.e. templates)
     * @params:
     *    - package: the root symbol of the package
     * */
    pub fn updateDiff (mut self) {
    }

    /**
     * Dump a new cache directory with updated generators and list of symbols
     * */
    pub fn updateGenerators (mut self) {
    }

    /**
     * @returns: the list of symbols whose cache are too old, or were simply not found
     * */
    pub fn getSymbolsToValidate (mut self)-> dmut [&Symbol] {
        []
    }

}
