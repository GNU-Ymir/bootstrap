mod ymirc::semantic::symbol::constructor;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::class_;
import ymirc::syntax::declaration::constructor;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::io;

pub class ConstructorSymbol over Symbol {
    
    /// The syntax constructor
    let _content : &ConstructorDecl;
       
    /**
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */
    
    /// The constructor validated at validation time
    let dmut _proto : &Generator = EmptyGenerator::new ();

    /// The class that contains the constructor
    let dmut _class : &ClassSymbol;


    /**
     * @params: 
     *    - loc: the location of the declaration
     *    - comm: the comments about the declaration
     *    - content: the syntax declaration
     *    - cl: the class containing the constructor
     */
    pub self (loc : &Word, comm : [c8], content : &ConstructorDecl, dmut cl : &ClassSymbol)
        with super (loc, comm), _class = alias cl, _content = content
    {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the constructor
     */
    pub def getContent (self)-> &ConstructorDecl {
        self._content
    }

    /**
     * @returns: the prototype of the constructor (validation time)
     */
    pub def getFrameProto (mut self)-> dmut &Generator {
        alias self._proto
    }

    /**
     * @returns: the prototype of the constructor (validation time)
     */
    pub def getFrameProto (self)-> &Generator {
        self._proto
    }

    /**
     * @returns: the class that contains the constructor
     */
    pub def getParentClass (self)-> &ClassSymbol {
        self._class
    }

    /**
     * @returns: the class that contains the constructor
     */
    pub def getParentClass (mut self)-> dmut &ClassSymbol {
        alias self._class
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the validated prototype of the constructor
     * @params:
     *   - proto: the prototype of the validated frame
     */
    pub def setFrameProto (mut self, dmut proto : &Generator) {
        self._proto = alias proto;
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {


        pub over format (self, dmut stream : &Formatter) {
            import std::conv;
            stream:.write (self.to![c8]());
        }        
    }    
    
}
