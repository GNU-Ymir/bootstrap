mod ymirc::semantic::symbol::constructor;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::class_;
import ymirc::syntax::declaration::constructor;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::io;
import std::fs::path;

pub class ConstructorSymbol over Symbol {
    
    /// The syntax constructor
    let _content : &ConstructorDecl;

    /// True iif the ctor is unsafe
    let _isUnsafe : bool;

    /**
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */
    
    /// The constructor validated at validation time
    let mut _proto : &Generator = EmptyGenerator::new ();

    /// The class that contains the constructor
    let dmut _class : &ClassSymbol;


    /**
     * @params: 
     *    - loc: the location of the declaration
     *    - comm: the comments about the declaration
     *    - content: the syntax declaration
     *    - cl: the class containing the constructor
     */
    pub self (loc : &Word, comm : [c8], content : &ConstructorDecl, dmut cl : &ClassSymbol, protection : Protection, isUnsafe : bool)
        with super (loc, comm, protection-> protection), _class = alias cl, _content = content, _isUnsafe = isUnsafe
    {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the constructor
     */
    pub fn getContent (self)-> &ConstructorDecl {
        self._content
    }

    /**
     * @returns: the prototype of the constructor (validation time)
     */
    pub fn getFrameProto (self)-> &Generator {
        self._proto
    }

    /**
     * @returns: the class that contains the constructor
     */
    pub fn getParentClass (self)-> &ClassSymbol {
        self._class
    }

    /**
     * @returns: the class that contains the constructor
     */
    pub fn getParentClass (mut self)-> dmut &ClassSymbol {
        alias self._class
    }

    /**
     * @returns: true iif the ctor is marked unsafe
     * */
    pub fn isUnsafe (self)-> bool {
        self._isUnsafe
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the validated prototype of the constructor
     * @params:
     *   - proto: the prototype of the validated frame
     */
    pub fn setFrameProto (mut self, proto : &Generator) {
        self._proto = proto;
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================           PRIVATE            =========================
     * ================================================================================
     * ================================================================================
     */

    prot over computeFullName (self)-> &Path {
        if (self._content.getRename ().str () == ""s8) {
            (self::super).computeFullName ()
        } else {
            let mut p = match self._referent {
                Ok (x : _) => {
                    x.getPath ()
                }
                _ => { Path::new (""s8) }
            }
            
            p = p.push (self._content.getRename ().str ());
            p
        }
    }
    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }    
    
}
