in constructor;

use ymirc::utils::format;
use ymirc::lexing::{word, tokens};
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::_;

use ymirc::syntax::declaration::{class_, constructor};
use ymirc::syntax::expression::_;
use ymirc::syntax::declaration::protection;

use std::{stream, fs::path};

@final
pub class ConstructorSymbol over Symbol {
    
    // The syntax constructor
    let _content : &ConstructorDecl;

    // True iif the ctor is unsafe
    let _isUnsafe : bool;

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */
    
    // The constructor validated at validation time
    let mut _proto : &Generator = EMPTY_GENERATOR;

    // The class that contains the constructor
    let dmut _class : &ClassSymbol;

    // The body of the ctor set at validation time
    let mut _body : &Generator = EMPTY_GENERATOR;

    // True if the constructor uses a redirection ctor
    let mut _hasRedirect : bool = false;

    /**
     * @params: 
     *    - loc: the location of the declaration
     *    - comm: the comments about the declaration
     *    - content: the syntax declaration
     *    - cl: the class containing the constructor
     */
    pub self (loc : &Word, comm : [c8], content : &ConstructorDecl, dmut cl : &ClassSymbol, protection : Protection, isUnsafe : bool)
        with super (loc, comm, protection-> protection)
        , _class = alias cl
        , _content = content
        , _isUnsafe = isUnsafe
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the constructor
     */
    pub fn getContent (self)-> &ConstructorDecl {
        self._content
    }

    /**
     * @returns: the prototype of the constructor (validation time)
     */
    pub fn getFrameProto (self)-> &Generator {
        self._proto
    }

    /**
     * @returns: the body of the ctor (after validation time)
     * */
    pub fn getBody (self)-> &Generator {
        self._body
    }

    /**
     * @returns: true if the ctor is a redirection ctor
     * */
    pub fn hasRedirect (self)-> bool {
        self._hasRedirect
    }

    /**
     * @returns: the class that contains the constructor
     */
    pub fn getParentClass (self)-> &ClassSymbol {
        self._class
    }

    /**
     * @returns: the class that contains the constructor
     */
    pub fn getParentClass (mut self)-> dmut &ClassSymbol {
        alias self._class
    }

    /**
     * @returns: true iif the ctor is marked unsafe
     * */
    pub fn isUnsafe (self)-> bool {
        self._isUnsafe
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the validated prototype of the constructor
     * @params:
     *   - proto: the prototype of the validated frame
     */
    pub fn setFrameProto (mut self, proto : &Generator, body : &Generator, hasRedirect : bool) {
        self._proto = proto;
        self._body = body;
        self._hasRedirect = hasRedirect;
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           PRIVATE            =========================
     * ================================================================================
     * ================================================================================
     */

    prot over computeFullName (self)-> &SymbolPath {
        if (self._content.getRename ().str () == ""s8) {
            (self::super).computeFullName ()
        } else {
            let mut p = match self._referent {
                Ok (x : _) => {
                    x.getPath ()
                }
                _ => { SymbolPath (""s8) }
            }
            
            p = p.push (self._content.getRename ().str (), tmpls-> self._templateMapper);
            p
        }
    }
    
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }    
    
}
