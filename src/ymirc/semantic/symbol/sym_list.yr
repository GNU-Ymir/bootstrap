in sym_list;

use std::stream;

/**
 * A symbol list is a container of mutable symbols
 * It ensures that symbols appears only once in the list
 */
@final
pub class SymbolList {

    // The content of the list
    let dmut _content : [&Symbol] = [];

    // The hashset to make sure the symbols appears only once
    let mut _set : [u64 => mut ()] = copy [];
    
    /**
     * Create an empty symbol list
     */
    pub self () {}

    /**
     * Insert a symbol in the list
     * Ensure that is it not already in it
     */
    pub fn insert (mut self, dmut sym : &Symbol) {
        let h = sym.toHash ();
        if (h !in self._set) {
            self._set [h] = ();
            self._content ~= [alias sym];
        }
    }

    /**
     * @returns: the list of symbols
     */
    pub fn opIndex (mut self)-> dmut [&Symbol] {
        alias self._content
    }

    /**
     * @returns: the list of symbols
     */
    pub fn opIndex (self)-> [&Symbol] {
        self._content
    }

    impl Streamable;
}


/**
 * A symbol list is a container of immutable symbols
 * It ensures that symbols appears only once in the list
 */
@final
pub class ImutSymbolList {

    // The content of the list
    let mut _content : [mut &Symbol] = [];

    // The hashset to make sure the symbols appears only once
    let mut _set : [u64 => mut ()] = copy [];
    
    /**
     * Create an empty symbol list
     */
    pub self () {}

    /**
     * Insert a symbol in the list
     * Ensure that is it not already in it
     */
    pub fn insert (mut self, sym : &Symbol) {
        let h = sym.toHash ();
        if (h !in self._set) {
            self._set [h] = ();
            self._content ~= [sym];
        }
    }

    /**
     * @returns: the list of symbols
     */
    pub fn opIndex (self)-> [&Symbol] {
        self._content
    }

    impl Streamable;
}
