mod ymirc::semantic::symbol::sym_list;

import std::collection::vec;
import std::collection::set;
import ymirc::semantic::symbol::_;
import std::stream;

/**
 * A symbol list is a container of mutable symbols
 * It ensures that symbols appears only once in the list
 */
pub class @final SymbolList {

    // The content of the list
    let dmut _content = Vec!{dmut &Symbol}::new ();

    // The hashset to make sure the symbols appears only once
    let dmut _set = HashSet!{&Symbol}::new ();
    
    /**
     * Create an empty symbol list
     */
    pub self () {}

    /**
     * Insert a symbol in the list
     * Ensure that is it not already in it
     */
    pub def insert (mut self, dmut sym : &Symbol) {
        if (sym !in self._set) {
            self._set:.insert (sym);
            self._content:.push (alias sym);
        }
    }

    /**
     * @returns: the list of symbols
     */
    pub def opIndex (mut self)-> dmut [&Symbol] {
        alias self._content:.opIndex ()
    }

    /**
     * @returns: the list of symbols
     */
    pub def opIndex (self)-> [&Symbol] {
        self._content[]
    }

    impl Streamable;
    
}


/**
 * A symbol list is a container of immutable symbols
 * It ensures that symbols appears only once in the list
 */
pub class @final ImutSymbolList {

    // The hashset to make sure the symbols appears only once
    let dmut _set = HashSet!{&Symbol}::new ();
    
    /**
     * Create an empty symbol list
     */
    pub self () {}

    /**
     * Insert a symbol in the list
     * Ensure that is it not already in it
     */
    pub def insert (mut self, sym : &Symbol) {
        self._set:.insert (sym);        
    }

    /**
     * @returns: the list of symbols
     */
    pub def opIndex (self)-> [&Symbol] {
        self._set.opIndex ()
    }

    impl Streamable;
    
}
