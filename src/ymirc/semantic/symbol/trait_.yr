in trait_;

use ymirc::utils::format;
use ymirc::lexing::{word, tokens};
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::_;

use ymirc::syntax::declaration::{trait_, condblock, protection};
use ymirc::syntax::expression::_;
use ymirc::syntax::declaration::protection;

use std::stream;

@final
pub class TraitSymbol over Symbol {

    // The syntaxic trait
    let _content : &TraitDecl;

    // The list of assertion of the class
    let mut _assertions : [mut &Expression] = [];

    // The comments about the assertions
    let mut _assertComments : [mut [c8]] = [];

    // The conditional blocks
    let mut _condBlocks : [mut &CondBlockDecl] = [];

    // True if the symbol is already validated by trait validator (in semantic pass)
    let mut _validated : bool = false;

    pub self (loc : &Word, comm : [c8], content : &TraitDecl, protection : Protection)
        with super (loc, comm, protection-> protection)
        , _content = content
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic content
     */
    pub fn getContent (self)-> &TraitDecl {
        self._content
    }

    /**
     * @returns: the list of assertions (things to check before validating the class)
     */
    pub fn getAssertions (self)-> [&Expression] {
        self._assertions
    }

    /**
     * @returns: the list of comments on assertion inside the class
     */
    pub fn getAssertionComments (self)-> [[c8]] {
        self._assertComments
    }

    /**
     * @returns: the list of conditional blocks in the trait
     * */
    pub fn getCondBlocks (self)-> [&CondBlockDecl] {
        self._condBlocks
    }

    /**
     * @returns: true iif the symbol has already been validated by the trait validator
     * */
    pub fn isValidated (self)-> bool {
        self._validated
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Add a new assertion in the trait
     * @params: 
     *   - assertion: the assertion
     *   - comm: the comments about the assertion
     */
    pub fn addAssertion (mut self, assertion : &Expression, comm : [c8]) {
        self._assertions ~= [assertion];
        self._assertComments ~= [comm];
    }

    /**
     * Add a new conditional block in the trait
     * @params:
     *    - c: the conditional block
     */
    pub fn addCondBlock (mut self, c : &CondBlockDecl) {
        self._condBlocks ~= [c];
    }

    /**
     * @params:
     *   - b: iif true the symbol was validated by trait validator in semantic pass
     * */
    pub fn setValidated (mut self, b : bool) {
        self._validated = b;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;

}
