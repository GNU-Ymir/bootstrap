mod ymirc::semantic::symbol::trait_;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::trait_;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::collection::vec;
import std::io;

pub class TraitSymbol over Symbol {

    /// The syntaxic trait
    let _content : &TraitDecl;

    /// The list of assertion of the class
    let dmut _assertions = Vec!{&Expression}::new ();

    /// The comments about the assertions
    let dmut _assertComments = Vec!{[c8]}::new ();


    pub self (loc : &Word, comm : [c8], content : &TraitDecl, protection : Protection)
        with super (loc, comm, protection-> protection), _content = content
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic content
     */
    pub def getContent (self)-> &TraitDecl {
        self._content
    }

    /**
     * @returns: the list of assertions (things to check before validating the class)
     */
    pub def getAssertions (self)-> [&Expression] {
        self._assertions[]
    }

    /**
     * @returns: the list of comments on assertion inside the class
     */
    pub def getAssertionComments (self)-> [[c8]] {
        self._assertComments[]
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Add a new assertion in the trait
     * @params: 
     *   - assertion: the assertion
     *   - comm: the comments about the assertion
     */
    pub def addAssertion (mut self, assertion : &Expression, comm : [c8]) {
        self._assertions:.push (assertion);
        self._assertComments:.push (comm);
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }    
    
}
