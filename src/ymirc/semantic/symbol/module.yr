mod ymirc::semantic::symbol::module;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::io;

/**
 *
 */
pub class ModuleSymbol over Symbol {

    /// True iif the module was imported
    let _isExtern : bool;

    /// True iif the module is global
    let _isGlobal : bool;


    /**
     * @params: 
     *   - loc: the location of the module
     *   - comm: the comments about the module
     *   - isExtern: is the module external ?
     *   - isGlobal: is the module global ?
     */
    pub self (loc : &Word, comm : [c8], protection : Protection = Protection::PUBLIC, isExtern : bool = false, isGlobal : bool = false)
        with super (loc, comm, protection-> protection), _isExtern = isExtern, _isGlobal = isGlobal
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true iif the module is global
     */
    pub def isGlobal (self)-> bool {
        self._isGlobal
    }

    /**
     * @returns: true iif the module was imported
     */
    pub def isExtern (self)-> bool {
        self._isExtern
    }    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {


        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("Module : [", self._loc.str (), " (", self._fullName.toStr (), ")", "]");
            let inner = self._table.getContent ();
            stream:.entabing ();
            for n, i in inner {
                for s in i {
                    stream:.write ("\n- ", n, " : ");
                    s.format (alias stream);
                }
            }
            stream:.detabing (); 
        }        
    }    
    
}
