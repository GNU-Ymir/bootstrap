in format;

use ymirc::utils::format;

pub trait AdvanceSymFormatting {

    pub fn formatSymTree (self, dmut stream : &Formatter) {
        let name = self._fullName.toStr ();
        if (name != ""s8) {
            stream:.write (name);
        }

        if (self._used.len () != 0us || self._coreModules.len != 0us) {
            stream:.write (" - use {"s8);
            let mut i = 0us;
            for v in self._used {
                if (i != 0us) stream:.write (", "s8);
                stream:.write (v.getPath ().toStr ());
                i += 1us;
            }

            for v in self._coreModules {
                if (i != 0us) stream:.write (", "s8);
                stream:.write (v.getPath ().toStr ());
                i += 1us;
            }
            stream:.write ("}"s8);
        }

        if (name != ""s8) {
            stream:.write ("\n"s8);
            stream:.entabing ();
        }


        for name, v in self._table.getContent () {
            for s in v {
                if (self._table.isPublic (name, s)) {
                    stream:.write ("pub "s8);
                }

                s.formatSymTree (alias stream);
            }
        }


        if (name != ""s8) {
            stream:.detabing ();
        }
    }

}
