mod ymirc::semantic::symbol::format;

import std::collection::vec;
import ymirc::utils::format;

pub trait AdvanceFormat {

    /**
     * Format the used tree modules to stream
     * */
    pub fn formatSymbolTree (self, dmut stream : &Formatter, dmut parentLast : &Vec!{bool} = Vec!{bool}::new ()) {
        let name = self._fullName.toStr (sep-> "::"s8);
        if (name != ""s8) {
            stream:.write (name, "\n"s8);
        }

        let mut j = 0us, max = self._table.getContent ().len ();
        for _, i in self._table.getContent () {
            j += 1us;
            for s, index in i {
                let last = (index == i.len () - 1us) && (j == max);

                for d in parentLast {
                    if (d) { stream:.entabing (txt-> "    "s8); }
                    else { stream:.entabing (txt-> "|    "s8); }
                }

                if (!last) {
                    stream:.write ("├── "s8);
                } else {
                    stream:.write ("└── "s8);
                }

                parentLast:.push (last);
                s.formatSymbolTree (alias stream, parentLast-> alias parentLast);
                __pragma!trusted ({parentLast:.pop ()});

                for _ in parentLast {
                    stream:.detabing ();
                }
            }
        }
    }
}
