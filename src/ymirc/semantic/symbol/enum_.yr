in enum_;

use ymirc::utils::format;
use ymirc::lexing::{word, tokens};
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::{_, value::literal::unit};
use ymirc::syntax::declaration::{enum_, protection};
use ymirc::syntax::expression::_;

use std::stream;

@final
pub class EnumSymbol over Symbol {

    // The syntax expression of the enum
    let _content : &EnumDecl; 

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */

    // The generator set at validation time
    let mut _gen : &Generator = EMPTY_GENERATOR;

    // The list of field of the enumeration
    let dmut _fields : [([c8], &Value)] = [];

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             CTOR             =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @params: 
     *   - loc: the location of the symbol
     *   - comm: the comments about the declaration
     *   - content: the syntaxic decl
     */
    pub self (loc : &Word, comm : [c8], content : &EnumDecl, protection : Protection)
        with super (loc, comm, protection-> protection)
        , _content = content
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic decl
     */
    pub fn getContent (self)-> &EnumDecl {
        self._content
    }

    /**
     * @returns: the generator validated at validation time
     */
    pub fn getGenerator (self)-> &Generator {
        self._gen
    }

    /**
     * Search a field in the enum
     * @params: 
     *    - name: the name of the field
     * @returns: the value of the field (or UnitValue)
     */
    pub fn getField (self, name : [c8])-> &Value {
        for i in self._fields {
            if (i._0 == name) return i._1;
        }

        UNIT_VALUE
    }

    /**
     * @returns: the list of fields inside the enum
     * */
    pub fn getAllFields (self)-> [([c8], &Value)] {
        self._fields
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the generator at validation time
     * @params: 
     *    - gen: The type info of the enum
     */
    pub fn setGenerator (mut self, gen : &Generator) {
        self._gen = gen;
    }

    /**
     * Insert a field in the enumeration
     * @params: 
     *    - name: the name of the field
     *    - value: the value of the field
     */
    pub fn insertField (mut self, name : [c8], value : &Value) {
        self._fields ~= [(name, value)];
    }
        
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;

}
