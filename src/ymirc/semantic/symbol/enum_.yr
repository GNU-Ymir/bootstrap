mod ymirc::semantic::symbol::enum_;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::enum_;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::collection::vec;
import std::io;

pub class EnumSymbol over Symbol {

    /// The syntax expression of the enum
    let _content : &EnumDecl; 

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */


    /// The generator set at validation time
    let dmut _gen : &Generator = EmptyGenerator::new ();

    /// The list of field of the enumeration
    let dmut _fields = Vec!{([c8], &Value)}::new ();
    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             CTOR             =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @params: 
     *   - loc: the location of the symbol
     *   - comm: the comments about the declaration
     *   - content: the syntaxic decl
     */
    pub self (loc : &Word, comm : [c8], content : &EnumDecl, protection : Protection)
        with super (loc, comm, protection-> protection), _content = content
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic decl
     */
    pub fn getContent (self)-> &EnumDecl {
        self._content
    }

    /**
     * @returns: the generator validated at validation time
     */
    pub fn getGenerator (self)-> &Generator {
        self._gen
    }

    /**
     * Search a field in the enum
     * @params: 
     *    - name: the name of the field
     * @returns: the value of the field (or UnitValue)
     */
    pub fn getField (self, name : [c8])-> &Value {
        for i in self._fields {
            if (i._0 == name) return i._1;
        }

        UNIT_VALUE
    }

    /**
     * @returns: the list of fields inside the enum
     * */
    pub fn getAllFields (self)-> [([c8], &Value)] {
        self._fields[]
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the generator at validation time
     * @params: 
     *    - gen: The type info of the enum
     */
    pub fn setGenerator (mut self, dmut gen : &Generator) {
        self._gen = alias gen;
    }

    /**
     * Insert a field in the enumeration
     * @params: 
     *    - name: the name of the field
     *    - value: the value of the field
     */
    pub fn insertField (mut self, name : [c8], value : &Value) {
        self._fields:.push ((name, value));
    }
        
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }    
}
