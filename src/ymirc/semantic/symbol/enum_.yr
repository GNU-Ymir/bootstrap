mod ymirc::semantic::symbol::enum_;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::enum_;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::io;

pub class EnumSymbol over Symbol {

    /// The syntax expression of the enum
    let _content : &EnumDecl; 

    /**
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */


    /// The generator set at validation time
    let dmut _gen : &Generator = EmptyGenerator::new ();

    /**
     * @params: 
     *   - loc: the location of the symbol
     *   - comm: the comments about the declaration
     *   - content: the syntaxic decl
     */
    pub self (loc : &Word, comm : [c8], content : &EnumDecl, protection : Protection)
        with super (loc, comm, protection-> protection), _content = content
    {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic decl
     */
    pub def getContent (self)-> &EnumDecl {
        self._content
    }

    /**
     * @returns: the generator validated at validation time
     */
    pub def getGenerator (mut self)-> dmut &Generator {
        alias self._gen
    }

    /**
     * @returns: the generator validated at validation time
     */
    pub def getGenerator (self)-> &Generator {
        self._gen
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the generator at validation time
     * @params: 
     *    - gen: The type info of the enum
     */
    pub def setGenerator (mut self, dmut gen : &Generator) {
        self._gen = alias gen;
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }    
}
