mod ymirc::semantic::symbol::error;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;
import ymirc::errors::_;

pub class ErrorSymbol over Symbol {

    let _error : &ErrorMsg;

    /**
     * @params:
     *   - loc: the location of the error
     *   - comm: the comments about the error
     */
    pub self (error : &ErrorMsg)
        with super (EOF_WORD, ""s8), _error = error
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntax declaration
     */
    pub fn getMessage (self)-> &ErrorMsg {
        self._error
    }

    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._error);
        }

    }

}
