in constructor;

use ymirc::utils::format;
use ymirc::lexing::{word, tokens};
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::_;

use ymirc::syntax::declaration::{macrorule, protection};
use ymirc::syntax::expression::_;

use std::stream;

pub class MacroConstructorSymbol over Symbol {

    // The syntaxic impl
    let _content : &MacroRuleDecl;


    pub self (loc : &Word, comm : [c8], content : &MacroRuleDecl, protection : Protection)
        with super (loc, comm, protection-> protection), _content = content
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic content
     */
    pub fn getContent (self)-> &MacroRuleDecl {
        self._content
    }    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }    
    
}
