mod ymirc::semantic::symbol::template;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::io;

pub class TemplateSymbol over Symbol {

    /// The syntaxic content of the template
    let _content : &TemplateDecl;
        
    /**
     * @params: 
     *   - loc: the location of the template
     *   - comm: the comments about the template
     */
    pub self (loc : &Word, comm : [c8], content : &TemplateDecl, protection : Protection)
        with super (loc, comm, protection-> protection), _content = content
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic content of the template 
     */
    pub fn getContent (self)-> &TemplateDecl {
        self._content
    }

    prot over computeFullName (self)-> &SymbolPath {
        match self._content.getContent () {
            ctor : &ConstructorDecl => {
                if (ctor.getRename ().str () == ""s8) {
                    (self::super).computeFullName ()
                } else {
                    let mut p = match self._referent {
                        Ok (x : _) => {
                            x.getPath ()
                        }
                        _ => { SymbolPath::new (""s8) }
                    }

                    p = p.push (ctor.getRename ().str (), tmpls-> self._templateMapper);
                    p
                }
            }
            _ => {
                (self::super).computeFullName ()
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }    
    
}
