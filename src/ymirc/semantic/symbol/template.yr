in template;

use ymirc::utils::format;
use ymirc::lexing::{word, tokens};
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::_;

use ymirc::syntax::declaration::_;
use ymirc::syntax::expression::_;
use std::stream;

@final
pub class TemplateSymbol over Symbol {

    // The syntaxic content of the template
    let _content : &TemplateDecl;
        
    /**
     * @params: 
     *   - loc: the location of the template
     *   - comm: the comments about the template
     */
    pub self (loc : &Word, comm : [c8], content : &TemplateDecl, protection : Protection)
        with super (loc, comm, protection-> protection)
        , _content = content
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic content of the template 
     */
    pub fn getContent (self)-> &TemplateDecl {
        self._content
    }

    prot over computeFullName (self)-> &SymbolPath {
        match self._content.getContent () {
            ctor : &ConstructorDecl => {
                if (ctor.getRename ().str == "") {
                    (self.super).computeFullName ()
                } else {
                    let mut p = match self._referent {
                        Ok (x : _) => {
                            x.getPath ()
                        }
                        _ => { copy SymbolPath ("") }
                    }

                    p = p.push (ctor.getRename ().str, tmpls-> self._templateMapper);
                    p
                }
            }
            _ => {
                (self.super).computeFullName ()
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;

}
