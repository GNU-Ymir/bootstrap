mod ymirc::semantic::symbol::path;

import ymirc::semantic::validator::template::mapper;
import std::collection::vec;
import std::stream;
import std::io;

import ymirc::utils::format;
import std::fs::path;

pub class @final SymbolPath {

    // The content of the path
    prv let dmut _parts = Vec!{[c8]}::new ();

    // The templates of the path
    prv let dmut _tmpls = Vec!{(&TemplateMapper)?}::new ();

    pub self (path : [c8], tmpls : (&TemplateMapper)? = ((&TemplateMapper)?)::_err_) {
        let sep = "::"s8;
        let mut last = 0us;
        for i in 0us .. path.len {
            if (path[i .. $].len >= sep.len) {
                if (path[i .. i + sep.len] == sep) {
                    self._parts:.push (copy (path[last .. i]));
                    self._tmpls:.push (((&TemplateMapper)?)::__err__);
                    last = i + sep.len;
                }
            }
        }

        if (last != path.len) {
            self._parts:.push (copy (path [last .. $]));
            self._tmpls:.push (tmpls);
        }
    }

    /**
     * Inner construction to avoid unnecessary parsing.
     * @complexity: O(n)
     * @params:
     *    - path: the parts of the path
     */
    prv self (path : [[c8]], tmpls : [(&TemplateMapper)?]) {
        for i in path {
            self._parts:.push (copy i);
        }
        for i in tmpls {
            self._tmpls:.push (i);
        }
    }

    /**
     * Transform the path into a string.
     * */
    pub fn toStr (self, withTemplates : bool = true)-> [c8] {
        let sep = "::"s8;
        let dmut stream = StringStream::new ();
        for i, j in self._parts {
            if j != 0us {
                stream:.write (sep);
            }

            stream:.write (i);
            if (withTemplates) {
                match self._tmpls [j] {
                    Ok (x : _) => { stream:.write (format("!%::%", x.simpleFormat (), i)); }
                }
            }
        }
        return stream[];
    }


    pub fn asStdPath (self, withTemplates : bool = false)-> &Path {
        Path::new (self.toStr (withTemplates-> withTemplates), sep-> "::"s8)
    }

    /**
     * Compare two paths.
     * @params:
     *   - o: another path
     */
    pub fn opEquals (self, o : &SymbolPath)-> bool {
        if (self._parts.len () != o._parts.len ()) return false;
        if (self._parts[] != o._parts[]) return false;
        for i, z in self._tmpls[] match (z, o._tmpls [i]) {
            (Ok (a : _), Ok (b : _)) => if (a != b) return false;
            (_, Ok ()) => return false;
            (Ok (), _) => return false;
            (_, _) => {}
        }

        true
    }

    pub fn file (self)-> [c8] {
        if (self._parts.len () > 0us) {
            return self._parts[$ - 1us]
        }

        ""s8
    }

    /**
     * Append a path to the current path, from a string. The string is splitted according the to the separator of given as parameter.
     * @params:
     *    - path: the path to split and append to the path
     *    - sep: the token used to split the path
     */
    pub fn push (self, path : [c8], tmpls : (&TemplateMapper)? = ((&TemplateMapper)?)::__err_) -> &SymbolPath {
        let sep = "::"s8;
        let dmut aux = SymbolPath::new (self._parts[], self._tmpls[]);
        {
            let mut last = 0us;
            for i in 0us .. path.len {
                if (path[i .. $].len >= sep.len) {
                    if (path[i .. i + sep.len] == sep) {
                        aux._parts:.push (copy (path[last .. i]));
                        aux._tmpls:.push (((&TemplateMapper)?)::_err__);
                        last = i + sep.len;
                    }
                }
            }

            if (last != path.len) {
                aux._parts:.push (copy (path [last .. $]));
                aux._tmpls:.push (tmpls);
            }
        }
        aux
    }

    /**
     * Append a path to the current path.
     * @params:
     *    - path: the path to append at the end of the current path.
     */
    pub fn push (self, path : &SymbolPath) -> &SymbolPath {
        let dmut aux = SymbolPath::new (self._parts[], self._tmpls[]);
        for i in path._parts {
            aux._parts:.push (copy i);
        }
        for j in path._tmpls {
            aux._tmpls:.push (j);
        }

        aux
    }

    pub fn withTemplates (self, tmps : (&TemplateMapper)?)-> &SymbolPath {
        let dmut aux = SymbolPath::new (self._parts[], self._tmpls[]);
        if (self._tmpls.len () != 0us) {
            (alias aux._tmpls) [aux._tmpls.len () - 1us] = tmps;
        }

        aux
    }

    /**
     * @returns: the parts composing the path.
     */
    pub fn parts (self)-> [[c8]] {
        self._parts[]
    }

    /**
     * @returns: the list of template of the symbol
     * */
    pub fn templates (self)-> [(&TemplateMapper)?] {
        self._tmpls[]
    }

    impl std::stream::Streamable {

        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write (self.toStr ());
        }
    }


    impl std::hash::Hashable;
}
