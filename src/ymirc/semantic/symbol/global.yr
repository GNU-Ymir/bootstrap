in global;

use ymirc::utils::format;
use ymirc::lexing::{word, tokens};
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::_;

use ymirc::syntax::declaration::{global, protection};
use ymirc::syntax::expression::_;

use std::stream;

@final
pub class GlobalSymbol over Symbol {

    // The syntaxic global var
    let _content : &GlobalDecl;

    // True if the variable is static (lazy otherwise)
    let _isStatic : bool;

    // True if the variable is external
    let _isExtern : bool;

    // True if the variable is thread local
    let _isThreadLocal : bool;

    // The generator set at validation time after the validation  of the symbol
    let mut _gen : &Generator = EMPTY_GENERATOR;

    pub self (loc : &Word, comm : [c8], content : &GlobalDecl, protection : Protection, isExtern : bool, isStatic : bool, isThreadLocal : bool)
        with super (loc, comm, protection-> protection)
        , _content = content
        , _isExtern = isExtern
        , _isStatic = isStatic
        , _isThreadLocal = isThreadLocal
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic content
     */
    pub fn getContent (self)-> &GlobalDecl {
        self._content
    }

    /**
     * @returns: true if the variable is an external variable
     * */
    pub fn isExternal (self)-> bool {
        self._isExtern
    }

    /**
     * @returns: true if the variable is static, it is lazy otherwise
     * */
    pub fn isStatic (self)-> bool {
        self._isStatic
    }

    /**
     * @returns: true if the variable is thread local
     * */
    pub fn isThreadLocal (self)-> bool {
        self._isThreadLocal
    }

    /**
     * @returns: the generator set at validation, (EmptyGenerator if not yet set)
     * */
    pub fn getGenerator (self)-> &Generator {
        self._gen
    }

    /**
     * Set the generator of the global symbol after validation
     * */
    pub fn setGenerator (mut self, gen : &Generator) {
        self._gen = gen;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;

}
