mod ymirc::semantic::symbol::table;

import ymirc::semantic::symbol::_;
import ymirc::syntax::declaration::protection;
import std::collection::map;
import std::collection::vec;
import ymirc::utils::string;
import std::io;

/**
 * A table is used to store the symbols
 */
pub class @final Table {

    /// The content of the table    
    let dmut _content = HashMap!{[c8], dmut &Vec!{dmut &Symbol}}::new ();

    /// The list of symbols that are public (subset of self._content)
    let dmut _publicSyms = HashMap!{[c8], dmut &Vec!{dmut &Symbol}}::new ();
    
    /// All the templates (solution) contained in the table
    let dmut _templates = Vec!{dmut &Symbol}::new ();

    /**
     * Create an empty table containing nothing   
     */
    pub self () {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: all the inserted template symbols
     */
    pub fn getTemplates (self)-> [&Symbol] {
        self._templates[]
    }

    /**
     * @returns: all the inserted template symbols
     */
    pub fn getTemplates (mut self)-> dmut [&Symbol] {
        return (alias self._templates)[];
    }

    /**
     * @returns: all the symbols
     */
    pub fn getContent (self)-> &HashMap!{[c8], dmut &Vec!{dmut &Symbol}} {
        self._content
    }

    /**
     * @returns: all the symbols that are public (subset of self.getContent ()
     */
    pub fn getPublicContent (self)-> &HashMap!{[c8], dmut &Vec!{dmut &Symbol}} {
        self._publicSyms
    }

    /**
     * @returns: all the symbols
     */
    pub fn getContent (mut self)-> dmut &HashMap!{[c8], dmut &Vec!{dmut &Symbol}} {
        alias self._content
    }

    /**
     * @returns: all the symbols that are public (subset of self.getContent ()
     */
    pub fn getPublicContent (mut self)-> dmut &HashMap!{[c8], dmut &Vec!{dmut &Symbol}} {
        alias self._publicSyms
    }

    /**
     * @returns: true if the symbol is declared public in the table
     * */
    pub fn isPublic (self, name : [c8], sym : &Symbol)-> bool {
        let x = self._publicSyms.find (name);
        match x {
            Ok (v : _) => {
                for s in v { if (s is sym) return true; }
            }
        }

        false
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          INSERTION           =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Insert a new symbol in the table
     * @params: 
     *   - sym: the symbol
     */
    pub fn insert (mut self, name : [c8], dmut sym : &Symbol, replace : bool = false) {
        let fnd = if (!replace) {
            let dmut x = self._content:.find (name);
            match ref x {
                Ok (dmut v : _) => {
                    v:.push (alias sym);
                    true
                }
                _ => { false }
            }
        } else { false }
        
        if (!fnd) {
            let dmut v = Vec!{dmut &Symbol}::new ();
            v:.push (alias sym);
            self._content:.insert (name, alias v);
        }
        
        match sym.getProtection () {
            Protection::PUBLIC => {
                let fnd2 = if (!replace) {
                    let dmut r = self._publicSyms:.find (name);
                    match ref r {
                        Ok (dmut v : _) => {
                            v:.push (alias sym);
                            true
                        }
                        _ => { false }
                    }
                } else { false }
                
                if (!fnd2) {
                    let dmut v = Vec!{dmut &Symbol}::new ();
                    v:.push (alias sym);
                    self._publicSyms:.insert (name, alias v);
                }                 
            }
        }
    }

    /**
     * Insert a template symbol
     * @params: 
     *   - sym: the template solution to insert
     */
    pub fn insertTemplate (mut self, dmut sym : &Symbol) {
        self._templates:.push (alias sym);
    }


    /**
     * Remove a symbol from the symbol table (keep the other symbols with the same name)
     * @params: 
     *    - name: the name of the symbol to remove
     *    - sym: the symbol to remove (addr equality)
     * @info: do nothing if the symbol was not in the table
     */
    pub fn remove (mut self, name : [c8], dmut sym : &Symbol) {
        let dmut fnd = self._content:.find (name);
        match ref fnd {
            Ok (dmut v : _) => {
                let dmut res = Vec!{dmut &Symbol}::new ();
                for x in 0us .. v.len () {
                    let dmut i = (alias v)[x];
                    if (i !is sym) res:.push (alias i);
                }
                
                if (res.len () != 0us) 
                    self._content:.insert (name, alias res);
                else self._content:.remove (name);
            }
        }

        let dmut fnd2 = self._publicSyms:.find (name);
        match ref fnd2 {
            Ok (dmut v : _) => {
                let dmut res = Vec!{dmut &Symbol}::new ();
                for x in 0us .. v.len () {
                    let dmut i = (alias v)[x];
                    if (i !is sym) res:.push (alias i);
                }
                
                if (res.len () != 0us) 
                    self._publicSyms:.insert (name, alias res);
                else self._publicSyms:.remove (name);
            }
        }        
    }
    
    /**
     * Remove everything from the table
     */
    pub fn clear (mut self) {
        self._content:.clear ();
        self._publicSyms:.clear ();
        self._templates:.clear ();
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          SEARCHING           =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Search all the symbols whose name is name
     * @params: 
     *   - name: the name of the symbols to find
     *   - protection: the protection of the symbols (filtering)
     * @returns: A list of symbols
     */
    pub fn find (mut self, name : [c8], protection : Protection = Protection::PRIVATE)-> dmut [&Symbol] {
        match protection {
            Protection::PUBLIC => {
                let dmut x = self._publicSyms:.find (name);
                match ref x {
                    Ok (dmut v : _) => { return (alias v)[]; }
                    _ => { return []; }
                }
            }
            _ => {
                let dmut x = self._content:.find (name);
                match ref x {
                    Ok (dmut v : _) => { return (alias v)[]; }
                    _ => { return []; }
                }
            }
        }
    }

    /**
     * Search all the symbols whose name is name
     * @params: 
     *   - name: the name of the symbols to find
     *   - protection: the protection of the symbols (filtering)
     * @returns: A list of symbols
     */
    pub fn find (self, name : [c8], protection : Protection = Protection::PRIVATE)-> [&Symbol] {
        match protection {
            Protection::PUBLIC => {
                let x = self._publicSyms.find (name);                
                match x {
                    Ok (v : _) => {
                        return v[]; }
                    _ => { return []; }
                }
            }
            _ => {
                let x = self._content.find (name);
                match x {
                    Ok (v : _) => { return v[]; }
                    _ => { return []; }
                }
            }
        }
    }


    /**
     * Search all the symbols whose name are close to `name`
     * @params: 
     *   - name: the name of the symbols to find
     *   - distance: the distance between `name` and the name of symbol
     *   - protection: the protection of the symbols (filtering)
     * @returns: A list of symbols
     */
    pub fn findClose (self, name : [c8], distance : usize, protection : Protection = Protection::PRIVATE)-> [&Symbol] {
        let dmut res = Vec!{&Symbol}::new ();
        match protection {
            Protection::PUBLIC => {
                for n, s in self._publicSyms {
                    if (string::levenshteinDistance (n, name) <= distance && n.len > distance && name.len > distance) {
                        for j in s {
                            match j {
                                EmptySymbol () => {}
                                _ => 
                                    res:.push (j);
                            }                            
                        }
                    }
                }
            }
            _ => {
                for n, s in self._content {
                    if (string::levenshteinDistance (n, name) <= distance && n.len > distance && name.len > distance) {
                        for j in s {
                            match j {
                                EmptySymbol () => {}
                                _ => 
                                    res:.push (j);
                            }
                        }
                    }
                }
            }
        }
        
        res[]
    }

    
    
    
}
