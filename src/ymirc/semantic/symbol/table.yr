mod ymirc::semantic::symbol::table;

import ymirc::semantic::symbol::_;
import ymirc::syntax::declaration::protection;
import std::collection::map;
import std::collection::vec;

/**
 * A table is used to store the symbols
 */
pub class @final Table {

    /// The content of the table    
    let dmut _content = HashMap!{[c8], dmut &Vec!{dmut &Symbol}}::new ();

    /// The list of symbols that are public (subset of self._content)
    let dmut _publicSyms = HashMap!{[c8], dmut &Vec!{dmut &Symbol}}::new ();
    
    /// All the templates (solution) contained in the table
    let dmut _templates = Vec!{dmut &Symbol}::new ();

    /**
     * Create an empty table containing nothing   
     */
    pub self () {}


    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: all the inserted template symbols
     */
    pub def getTemplates (self)-> [&Symbol] {
        self._templates[]
    }

    /**
     * @returns: all the inserted template symbols
     */
    pub def getTemplates (mut self)-> dmut [&Symbol] {
        return (alias self._templates)[];
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          INSERTION           =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Insert a new symbol in the table
     * @params: 
     *   - sym: the symbol
     */
    pub def insert (mut self, dmut sym : &Symbol, replace : bool = false) {
        let fnd = if (!replace) {
            let dmut x = self._content:.find (sym.getLoc ().str ());
            match ref x {
                Ok (dmut v : _) => {
                    v:.push (alias sym);
                    true
                }
                _ => { false }
            }
        } else { false }
        
        if (!fnd) {
            let dmut v = Vec!{dmut &Symbol}::new ();
            v:.push (alias sym);
            self._content:.insert (sym.getLoc ().str (), alias v);
        }
        
        match sym.getProtection () {
            Protection::PUBLIC => {
                let fnd2 = if (!replace) {
                    let dmut r = self._publicSyms:.find (sym.getLoc ().str ());
                    match ref r {
                        Ok (dmut v : _) => {
                            v:.push (alias sym);
                            true
                        }
                        _ => { false }
                    }
                } else { false }
                
                if (!fnd2) {
                    let dmut v = Vec!{dmut &Symbol}::new ();
                    v:.push (alias sym);
                    self._publicSyms:.insert (sym.getLoc ().str (), alias v);
                }                 
            }
        }
    }

    /**
     * Insert a template symbol
     * @params: 
     *   - sym: the template solution to insert
     */
    pub def insertTemplate (mut self, dmut sym : &Symbol) {
        self._templates:.push (alias sym);
    }

    /**
     * Remove everything from the table
     */
    pub def clear (mut self) {
        self._content:.clear ();
        self._publicSyms:.clear ();
        self._templates:.clear ();
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          SEARCHING           =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Search all the symbols whose name is name
     * @params: 
     *   - name: the name of the symbols to find
     *   - protection: the protection of the symbols (filtering)
     * @returns: A list of symbols
     */
    pub def find (mut self, name : [c8], protection : Protection = Protection::PRIVATE)-> dmut [&Symbol] {
        match protection {
            Protection::PUBLIC => {
                let dmut x = self._publicSyms:.find (name);
                match ref x {
                    Ok (dmut v : _) => { return (alias v)[]; }
                    _ => { return []; }
                }
            }
            _ => {
                let dmut x = self._content:.find (name);
                match ref x {
                    Ok (dmut v : _) => { return (alias v)[]; }
                    _ => { return []; }
                }
            }
        }
    }
    
    
}
