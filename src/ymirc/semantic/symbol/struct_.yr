mod ymirc::semantic::symbol::struct_;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::io;

pub class StructSymbol over Symbol {

    /// The syntaxic content of the structure
    let _content : &StructDecl;

    /// Is the structure an union
    let _isUnion : bool;

    /// Is the structure packed
    let _isPacked : bool;

    /**
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */

    /// The validated structref of the struct
    let dmut _structRef : &Generator = EmptyGenerator::new ();
        
    /**
     * @params: 
     *   - loc: the location of the struct
     *   - comm: the comments about the struct
     */
    pub self (loc : &Word, comm : [c8], content : &StructDecl, protection : Protection, isUnion : bool = false, isPacked : bool = false)
        with super (loc, comm, protection-> protection), _content = content, _isUnion = isUnion, _isPacked = isPacked
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic content of the struct
     */
    pub fn getContent (self)-> &StructDecl {
        self._content
    }

    /**
     * @returns: the list of fields declared in the struct
     * */
    pub fn getFields (self)-> [&Expression] {
        self._content.getFields ()
    }

    /**
     * @returns: the structref (at validation time) of the struct
     */
    pub fn getStructRef (mut self)-> dmut &Generator {
        alias self._structRef
    }

    /**
     * @returns: the structref (at validation time) of the struct
     */
    pub fn getStructRef (self)-> &Generator {
        self._structRef
    }

    /**
     * @returns: true iif the structure is packed
     */
    pub fn isPacked (self)-> bool {
        self._isPacked
    }

    /**
     * @returns: true iif the structure is an union
     */
    pub fn isUnion (self)-> bool {
        self._isUnion
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the type info of the struct
     * @params: 
     *    - info: the type info set at validation time
     */
    pub fn setStructRef (mut self, dmut info : &Generator) {
        self._structRef = alias info;
    }
       
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }    
    
}
