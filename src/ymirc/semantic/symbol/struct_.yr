mod ymirc::semantic::symbol::struct_;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::io;

pub class StructSymbol over Symbol {

    /// The syntaxic content of the structure
    let _content : &StructDecl;

    /**
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */

    /// The validated typeinfo of the struct
    let dmut _typeInfo : &Generator = EmptyGenerator::new ();
        
    /**
     * @params: 
     *   - loc: the location of the struct
     *   - comm: the comments about the struct
     */
    pub self (loc : &Word, comm : [c8], content : &StructDecl)
        with super (loc, comm), _content = content
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic content of the struct
     */
    pub def getContent (self)-> &StructDecl {
        self._content
    }
    
    /**
     * @returns: the typeinfo (at validation time) of the struct
     */
    pub def getTypeInfo (mut self)-> dmut &Generator {
        alias self._typeInfo
    }

    /**
     * @returns: the typeinfo (at validation time) of the struct
     */
    pub def getTypeInfo (self)-> &Generator {
        self._typeInfo
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the type info of the struct
     * @params: 
     *    - info: the type info set at validation time
     */
    pub def setTypeInfo (mut self, dmut info : &Generator) {
        self._typeInfo = alias info;
    }
       
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {


        pub over format (self, dmut stream : &Formatter) {
            import std::conv;
            stream:.write (self.to![c8]());
        }        
    }    
    
}
