mod ymirc::semantic::symbol::function;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::io;

pub class FunctionSymbol over Symbol {

    /// The syntaxic declaration of the function
    let _content : &FunctionDecl;

    /// True iif the function is a C variadic function
    let _isCVariadic : bool;

    /// True iif the function is marked override
    let _isOver : bool;

    /// true iif the function is a unittest
    let _isTest : bool;

    /// True iif the function is marked final
    let _isFinal : bool;
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */

    /// The generator set at validation time for the prototype of the function
    let mut _proto : &Generator = EmptyGenerator::new ();

    

    pub self (loc : &Word, comm : [c8], content : &FunctionDecl, protection : Protection, isCVariadic : bool = false, isOver : bool = false, isTest : bool = false, isFinal : bool = false)
        with super (loc, comm, protection-> protection), _content = content,
    _isCVariadic = isCVariadic,
    _isOver = isOver,
    _isTest = isTest,
    _isFinal = isFinal
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the syntaxic content of the function
     */
    pub def getContent (self)-> &FunctionDecl {
        self._content
    }

    /**
     * @returns: true if the function is C variadic
     */
    pub def isCVariadic (self)-> bool {
        self._isCVariadic
    }
    
    /**
     * @returns: true iif the function is marked override
     */
    pub def isOver (self)-> bool {
        self._isOver
    }

    /**
     * @returns: true iif the function is a unittest
     */
    pub def isTest (self)-> bool {
        self._isTest
    }

    /**
     * @returns: true iif the function is marked final
     */
    pub def isFinal (self)-> bool {
        self._isFinal
    }
    
    /**
     * @returns: the frame prototype of the function
     */
    pub def getFrameProto (self)-> &Generator {
        self._proto
    }

    /**
     * @returns: true if the symbol is a method symbol
     */
    pub def isMethod (self)-> bool {
        false
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the frame prototype of the function (validation time)
     * @params: 
     *   - proto: the validated prototype
     */
    pub def setFrameProto (mut self, proto : &Generator) {
        self._proto = proto;
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }    
    
}

