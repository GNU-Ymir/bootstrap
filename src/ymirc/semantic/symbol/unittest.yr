mod ymirc::semantic::symbol::unittest;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;
import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;
import std::io;

pub class UnitTestSymbol over Symbol {

    // The syntaxix declaration of the function
    let _content : &UnitTestDecl;

    // The generator of the unittest after validation
    let mut _gen : &Generator = EmptyGenerator::new ();

    /**
     * Declare an unit test
     * @params:
     *    - loc: the location of the test
     *    - comm: the comments about the test
     *    - content: the declaration of the test
     * */
    pub self (loc : &Word, comm : [c8], content : &UnitTestDecl)
        with super (loc, comm, protection-> Protection::PRIVATE)
        , _content = content
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntaxic content of the function
     * */
    pub fn getContent (self)-> &UnitTestDecl {
        self._content
    }

    /**
     * @returns: the generator of the unittest (can be empty if not validated)
     * */
    pub fn getGenerator (self)-> &Generator {
        self._gen
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the generator of the unit test after validation
     * @params:
     *   - gen: the generator
     * */
    pub fn setGenerator (mut self, gen : &Generator) {
        self._gen = gen;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }
    }


}
