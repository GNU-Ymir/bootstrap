mod ymirc::semantic::symbol::class_;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::class_;
import ymirc::syntax::declaration::condblock;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::collection::set;
import std::collection::vec;
import std::io;

pub class ClassSymbol over Symbol {

    /*!
     * ================================================================================
     * ================================================================================
     * =========================         DECLARATION          =========================
     * ================================================================================
     * ================================================================================
     */
    
    /// The ancestor of the class
    let _ancestor : &Expression;

    /// The fields of the class
    let dmut _fields = Vec!{&Expression}::new ();

    /// The comments about the fields
    let dmut _fieldComments = Vec!{[c8]}::new ();

    /// The name of the fields that are marked private
    let dmut _privateFields  = HashSet!{[c8]}::new ();

    /// The name of the fields that are marked protected
    let dmut _protectedFields = HashSet!{[c8]}::new ();

    /// The name of the fields that are marked protected
    let dmut _publicFields = HashSet!{[c8]}::new ();
    
    /// The list of assertion of the class
    let dmut _assertions = Vec!{&Expression}::new ();

    /// The list of cond blocks of the class
    let dmut _condBlock = Vec!{&CondBlockDecl}::new ();

    /// The comments about the assertions
    let dmut _assertComments = Vec!{[c8]}::new ();
    
    /// True iif the class is abstract
    let _isAbstract : bool;

    /// True iif the class is final
    let _isFinal : bool;

    /// True if the class is a structure (final, no ancestor, and on the stack)
    let _isStruct : bool;

    /// True if the struct is movable
    let _isMovable : bool;


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */
    
    /// The destructor of the class
    let dmut _dtor : &Symbol = EmptySymbol::new ();

    /// The generator set at validation time, to avoid multiple validation of the same symbol    
    let dmut _classRef : &Generator = EmptyGenerator::new ();
    
    /**
     * The list of function that were declared in a traits, but
     * not overriden by the class 
     * They were put directly in the class as they were, and will be validate likewise
     * This vector is filled at validation time
     */
    let dmut _addMethods = Vec!{dmut &Symbol}::new ();


    /*!
     * ================================================================================
     * ================================================================================
     * =========================         CONSTURCTION         =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @params: 
     *   - loc: the location of the declaration
     *   - comm: the comments about the declaration
     *   - ancestor: the expression defining the ancestor class
     *   - isAbstract: true iif the class is abstract
     *   - isFinal: true iif the class if final
     */
    pub self (loc : &Word, comm : [c8], ancestor : &Expression, isAbstract : bool = false, isFinal : bool = false, isMovable : bool = false, isStruct : bool = false, protection : Protection = Protection::PRIVATE)
        with super (loc, comm, protection-> protection)
        , _ancestor = ancestor
        , _isAbstract = isAbstract
        , _isFinal = isFinal
        , _isStruct = isStruct
        , _isMovable = isMovable
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: the expression defining the ancestor of the class 
     */
    pub fn getAncestor (self)-> &Expression {
        self._ancestor
    }

    /**
     * @returns: the list of expression that defines the fields of the class
     */
    pub fn getFields (self)-> [&Expression] {
        self._fields[]
    }

    /**
     * @returns: the list of comments about the fields
     */
    pub fn getFieldComments (self)-> [[c8]] {
        self._fieldComments[]
    }
    
    /**
     * @returns: true iif the field exists in the class and is declared private (false otherwise)
     */
    pub fn isFieldPrivate (self, name : [c8])-> bool {
        name in self._privateFields
    }

    /**
     * @returns: true iif the field exists in the class and is declared protected (false otherwise)
     */
    pub fn isFieldProtected (self, name : [c8])-> bool {
        name in self._protectedFields
    }

    /**
     * @returns: true iif the field exists in the class and is declared public (false otherwise)
     */
    pub fn isFieldPublic (self, name : [c8])-> bool {
        name in self._publicFields
    }

    /**
     * @returns: the list of assertions (things to check before validating the class)
     */
    pub fn getAssertions (self)-> [&Expression] {
        self._assertions[]
    }

    pub fn getCondBlocks (self)-> [&CondBlockDecl] {
        self._condBlock[]
    }

    /**
     * @returns: the list of comments on assertion inside the class
     */
    pub fn getAssertionComments (self)-> [[c8]] {
        self._assertComments[]
    }

    /**
     * @returns: true iif the class is abstract (only applies on classes)
     */
    pub fn isAbstract (self)-> bool {
        self._isAbstract
    }
    
    /**
     * @returns: true iif the class is final (only applies on classes)
     */
    pub fn isFinal (self)-> bool {
        self._isFinal
    }

    /**
     * @returns: true iif the class is a struct class
     * */
    pub fn isStruct (self)-> bool {
        self._isStruct
    }

    /**
     * @returns: true iif the struct is movable (only applicable on structs)
     * */
    pub fn isMovable (self)-> bool {
        self._isMovable
    }

    /**
     * @returns: the class ref of the class if validated (EmptyGenerator if not)
     */
    pub fn getClassRef (self)-> &Generator {
        self._classRef
    }

    /**
     * @returns: the list of methods added to the class
     */
    pub fn getAddMethods (mut self)-> dmut [&Symbol] {
        return alias (alias self._addMethods)[];
    }

    /**
     * @returns: the list of methods added to the class
     */
    pub fn getAddMethods (self)-> [&Symbol] {
        return self._addMethods[];
    }

    /**
     * @returns: the destructor of the class
     */
    pub fn getDestructor (mut self)-> dmut &Symbol {
        alias self._dtor
    }
    
    /**
     * @returns: the destructor of the class
     */
    pub fn getDestructor (self)-> &Symbol {
        self._dtor
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Add an addMethod in the class
     * AddMethods are methods that are implemented from a Trait and are not present in the vtable of the ancestor
     * @params: 
     *    - meth: the symbol of the method to add (at declaration time)
     */
    pub fn insertAddMethod (mut self, dmut meth : &Symbol) {
        self._addMethods:.push (alias meth);
    }

    /**
     * Set the class reference of the class (validated)
     * @params: 
     *    - info: a type generator created at validation time 
     */
    pub fn setClassRef (mut self, dmut info : &Generator) {
        self._classRef = alias info;
    }
    
    /**
     * Set the destructor of the class
     * @params: 
     *    - dtor: the symbol of the destructor of the class (at declaration time)
     */
    pub fn setDestructor (mut self, dmut dtor : &Symbol) {
        self._dtor = alias dtor;
        self._dtor:.setReferent (alias self);
    }
    
    /**
     * Add a field declaration to the class
     * @params: 
     *   - field: the field
     *   - comm: the comments about the field
     *   - protection: the protection of the field
     */
    pub fn addField (mut self, field : &Expression, comm : [c8], protection : Protection) {
        self._fields:.push (field);
        self._fieldComments:.push (comm);
        match protection {
            Protection::PUBLIC => self._publicFields:.insert (field.getLoc ().str ());
            Protection::PROTECTED => self._protectedFields:.insert (field.getLoc ().str ());
            _ => {
                self._privateFields:.insert (field.getLoc ().str ());
            }
        }
    }

    /**
     * Add a new assertion in the class
     * @params: 
     *   - assertion: the assertion
     *   - comm: the comments about the assertion
     */
    pub fn addAssertion (mut self, assertion : &Expression, comm : [c8]) {
        self._assertions:.push (assertion);
        self._assertComments:.push (comm);
    }

    /**
     * Add a new conditional block in the class
     * @params:
     *    - c: the conditional block
     */
    pub fn addCondBlock (mut self, c : &CondBlockDecl) {
        self._condBlock:.push (c);
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {


        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self::typeinfo.name);
        }        
    }
    
}
