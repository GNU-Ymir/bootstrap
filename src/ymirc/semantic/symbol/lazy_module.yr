mod ymirc::semantic::symbol::lazy_module;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;

import std::fs::path;
import std::io;

/**
 *
 */
pub class LazyModuleSymbol over Symbol {

    /// The path of the file to read
    let _path : &Path;

    /// The location of the lazyModule if it is a sub lazyModule declared throw an importation
    let _importLoc : &Word;

    /// The name of the module
    let _name : [c8];

    let _packageDir : &Path;

    let mut _finalized : &Symbol = EmptySymbol::new ();

    /**
     * @params:
     *   - loc: the location of the lazyModule
     *   - comm: the comments about the lazyModule
     *   - isExtern: is the lazyModule external ?
     *   - isGlobal: is the lazyModule global ?
     */
    pub self (name : [c8], importLoc : &Word, path : &Path, packageDir : &Path, protection : Protection = Protection::PUBLIC)
        with super (importLoc, ""s8, protection-> protection)
        , _importLoc = importLoc
        , _path = path
        , _name = name
        , _packageDir = packageDir
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the path of the file to read to extract the module
     * */
    pub fn getImportPath (self)-> &Path {
        self._path
    }

    /**
     * @returns: the location of the import (for global sub lazyModules)
     * */
    pub fn getImportLoc (self)-> &Word {
        self._importLoc
    }

    /**
     * @returns: the name of the module
     * */
    pub fn getModuleName (self)-> [c8] {
        self._name
    }

    /**
     * @returns: the package directory that imported this module
     * */
    pub fn getPackageDir (self)-> &Path {
        self._packageDir
    }

    /**
     * @returns: the module that was declared if the lazy module was executed, empty symbol otherwise
     * */
    pub fn getFinalized (self)-> &Symbol {
        self._finalized
    }

    /**
     * Change the content of the lazy module
     * */
    pub fn setFinalized (mut self, s : &Symbol) {
        self._finalized = s;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {


        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("LazyModule : [", self._loc.str (), " (", self._fullName.toStr (), ")", "]");
        }
    }

}
