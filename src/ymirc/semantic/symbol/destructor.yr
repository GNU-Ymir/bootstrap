in destructor;

use ymirc::utils::format;
use ymirc::lexing::{word, tokens};
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::_;

use ymirc::syntax::declaration::{class_, destructor, protection};
use ymirc::syntax::declaration::protection;

@final
pub class DestructorSymbol over Symbol {
    
    // The syntax destructor
    let _content : &DestructorDecl;
       
    /*!
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */
    
    // The destructor validated at validation time
    let mut _proto : &Generator = EMPTY_GENERATOR;

    // The body of the dtor validated at validation time
    let mut _body : &Generator = EMPTY_GENERATOR;

    // The class that contains the destructor
    let dmut _class : &ClassSymbol;

    /**
     * @params: 
     *    - loc: the location of the declaration
     *    - comm: the comments about the declaration
     *    - content: the syntax declaration
     *    - cl: the class containing the destructor
     */
    pub self (loc : &Word, comm : [c8], content : &DestructorDecl, dmut cl : &ClassSymbol)
        with super (loc, comm, protection-> Protection::PUBLIC)
        , _class = alias cl
        , _content = content
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the content of the destructor
     */
    pub fn getContent (self)-> &DestructorDecl {
        self._content
    }

    /**
     * @returns: the prototype of the destructor (validation time)
     */
    pub fn getFrameProto (self)-> &Generator {
        self._proto
    }

    /**
     * @returns: the class that contains the destructor
     */
    pub fn getParentClass (self)-> &ClassSymbol {
        self._class
    }

    /**
     * @returns: the class that contains the destructor
     */
    pub fn getParentClass (mut self)-> dmut &ClassSymbol {
        alias self._class
    }

    /**
     * @returns: true if the dtor does nothing
     * */
    pub fn isEmpty (self)-> bool {
        match self._content.getBody () {
            EmptyExpression () => { true }
            bl : &BlockExpr => {
                bl.getGuards ().len == 0us && bl.getExpressions ().len == 0us
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the validated prototype of the destructor
     * @params:
     *   - proto: the prototype of the validated frame
     */
    pub fn setFrameProto (mut self, proto : &Generator, body : &Generator) {
        self._proto = proto;
        self._body = body;
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;

}
