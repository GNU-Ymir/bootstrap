in aka_;

use ymirc::utils::format;
use ymirc::lexing::{word, tokens};
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::_;
use ymirc::syntax::declaration::{aka_, protection};

@final
pub class AkaSymbol over Symbol {

    // The content of the aka (syntax declaration)
    let _content : &AkaDecl;

    // Caching the result inside the symbols once it is validated
    let mut _gen : &Generator = EMPTY_GENERATOR;

    /**
     * @params: 
     *   - loc: the location of the aka
     *   - comm: the comments about the aka
     */
    pub self (loc : &Word, comm : [c8], content : &AkaDecl, protection : Protection)
        with super (loc, comm, protection-> protection), _content = content
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntax declaration
     */
    pub fn getContent (self)-> &AkaDecl {
        self._content
    }

    /**
     * @returns: the generator of the aka (if validated, EmptyGenerator if not)
     */
    pub fn getGenerator (self)-> &Generator {
        self._gen
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the generator of the aka
     */
    pub fn setGenerator (mut self, gen : &Generator) {
        self._gen = gen;
    }

    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

}
