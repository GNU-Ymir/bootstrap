mod ymirc::semantic::symbol::aka_;

import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::syntax::declaration::aka_;
import ymirc::syntax::declaration::protection;


pub class Aka over Symbol {

    /// The content of the aka (syntax declaration)
    let _content : &syntax::declaration::aka_::Aka;

    /// Caching the result inside the symbols once it is validated
    let mut _gen : &Generator = EmptyGenerator::new ();

    /**
     * @params: 
     *   - loc: the location of the aka
     *   - comm: the comments about the aka
     */
    pub self (loc : &Word, comm : [c8], content : &syntax::declaration::aka_::Aka, protection : Protection = Protection::PRIVATE)
        with super (loc, comm, protection-> protection), _content = content
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the syntax declaration
     */
    pub def getContent (self)-> &syntax::declaration::aka_::Aka {
        self._content
    }

    /**
     * @returns: the generator of the aka (if validated, EmptyGenerator if not)
     */
    pub def getGenerator (self)-> &Generator {
        self._gen
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */
   
    /**
     * Set the generator of the aka
     */
    pub def setGenerator (mut self, gen : &Generator) {
        self._gen = gen;
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            match self._gen {
                EmptyGenerator () => { self._content.format (alias stream); }
                _ => {
                    self._gen.format (alias stream);
                }
            }
        }
    }    
}
