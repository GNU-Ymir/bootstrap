mod ymirc::semantic::validator::sizeof_;

import ymirc::syntax::expression::_;
import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;

import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::utils::bigint;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import std::algorithm::searching;
import std::io;
import std::conv;

/**
 * The validator responsible for the validation of 'sizeof' expressions
 */
pub class SizeofValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}


    /**
     * Validate a sizeof expression
     * @params:
     *    - context: the context of the validation
     *    - i: the intrinsic expression to validate
     * @returns: the validated expression
     */
    pub def validate (self, dmut context : &Validator, i : &IntrinsicExpr)-> &Value
        throws &ErrorMsg
    {
        let t = context:.validateType (i.getContent ());
        let size = self.validateType (alias context, i.getLoc (), t);

        let u = IntType::new (i.getLoc (), size-> 0u16, signed-> false);

        IntValue::new (i.getLoc (), u, size)
    }

    /**
     * Validate a sizeof expression
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - t: the type whose size is being computed
     * @returns: the size
     * */
    def validateType (self, dmut context : &Validator, loc : &Word, t : &Type)-> usize
        throws &ErrorMsg
    {
        match t {
            b : &BoolType => {
                return self.validateBoolType (alias context, loc, b);
            }
            it : &IntType => {
                return self.validateIntType (alias context, loc, it);
            }
            c : &CharType => {
                return self.validateCharType (alias context, loc, c);
            }
            d : &DelegateType => {
                return self.validateDelegateType (alias context, loc, d);
            }
            f : &FloatType => {
                return self.validateFloatType (alias context, loc, f);
            }
            f : &FuncPtrType => {
                return self.validateFuncPtrType (alias context, loc, f);
            }
            v : &VoidType => {
                return self.validateVoidType (alias context, loc, v);
            }
            a : &ArrayType => {
                return self.validateArrayType (alias context, loc, a);
            }
            p : &PointerType => {
                return self.validatePointerType (alias context, loc, p);
            }
            r : &RangeType => {
                return self.validateRangeType (alias context, loc, r);
            }
            s : &SliceType => {
                return self.validateSliceType (alias context, loc, s);
            }
            tu : &TupleType => {
                return self.validateTupleType (alias context, loc, tu);
            }
            c : &ClassPtrType => {
                return self.validateClassPtrType (alias context, loc, c);
            }
            e : &EnumType => {
                return self.validateType (alias context, loc, e.getProxy ());
            }
            s : &StructType => {
                return self.validateStructType (alias context, loc, s);
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TYPE_HAS_NO_SIZE, t));
    }

    /**
     * Validate a sizeof expression on a class ptr type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - c: the class type
     * @returns: the size
     * */
    def validateClassPtrType (self, dmut _ : &Validator, _ : &Word, _ : &ClassPtrType)-> usize {
        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32)
    }


    /**
     * Validate a sizeof on a struct type
     * * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - s: the struct type
     * @returns: the size
     * */
    def validateStructType (self, dmut context : &Validator, loc : &Word, s : &StructType)-> usize
        throws &ErrorMsg
    {
        context;
        loc;
        s;
        __pragma!fake_throw (&ErrorMsg);
        __pragma!panic ();
    }

    /**
     * Validate a sizeof on a tuple type
     * * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - t: the tuple type
     * @returns: the size
     * */
    def validateTupleType (self, dmut context : &Validator, loc : &Word, t : &TupleType)-> usize
        throws &ErrorMsg
    {
        let mut current = 0us;
        let mut glob = 0us;
        let mut globAlign = 1us;

        for inner in t.getInners () {
            let innerS = self.validateType (alias context, loc, inner);
            let align = self.validateAlignOf (loc, inner);
            if (align > globAlign) { globAlign = align; }

            let padding = (align - (current % align)) % align;
            let aligned = (current + padding);

            current = aligned + innerS;
            glob += padding + innerS;
        }

        if (glob % globAlign != 0us) {
            glob = glob + (globAlign - (glob % globAlign));
        }

        glob
    }


    /**
     * Validate a sizeof expression on a pointer type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - p: the pointer type
     * @returns: the size
     * */
    def validateRangeType (self, dmut context : &Validator, loc : &Word, r : &RangeType)-> usize
        throws &ErrorMsg
    {
        self.validateType (alias context, loc, r.getInners ()[0us]) * 4us
    }

    /**
     * Validate a sizeof expression on a slice type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - s: the slice type
     * @returns: the size
     * */
    def validateSliceType (self, dmut _ : &Validator, _ : &Word, _ : &SliceType)-> usize {
        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32 * 2u32)
    }

    /**
     * Validate a sizeof expression on a pointer type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - p: the pointer type
     * @returns: the size
     * */
    def validatePointerType (self, dmut _ : &Validator, _ : &Word, _ : &PointerType)-> usize {
        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32)
    }

    /**
     * Validate a sizeof expression on an array type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - a: the array type
     * @returns: the size
     * */
    def validateArrayType (self, dmut context : &Validator, loc : &Word, a : &ArrayType)-> usize {
        self.validateType (alias context, loc, a.getInners ()[0us]) * a.getSize ().getValue ().to!{usize} ()
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * Validate a sizeof expression on a delegate type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - d: the delegate type
     * @returns: the size
     * */
    def validateDelegateType (self, dmut _ : &Validator, _ : &Word, _ : &DelegateType)-> usize {
        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32 * 2u32)
    }

    /**
     * Validate a sizeof expression on a func ptr type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - f: the funcptr type
     * @returns: the size
     * */
    def validateFuncPtrType (self, dmut _ : &Validator, _ : &Word, _ : &FuncPtrType)-> usize {
        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32)
    }

    /**
     * Validate a sizeof expression on a void type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - d: the void type
     * @returns: the size
     * */
    def validateVoidType (self, dmut _ : &Validator, _ : &Word, _ : &VoidType)-> usize {
        1us
    }

    /**
     * Validate a sizeof expression on a char type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - c: the char type
     * @returns: the size
     * */
    def validateCharType (self, dmut _ : &Validator, _ : &Word, c : &CharType)-> usize {
        cast!usize (c.getSize () / 8u16)
    }

    /**
     * Validate a sizeof expression on a float type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - f: the float type
     * @returns: the size
     * */
    def validateFloatType (self, dmut _ : &Validator, _ : &Word, f : &FloatType)-> usize {
        match f.getSize () {
            0u16 => { cast!usize (global::state::instance ().getFloatTypeSize () / 8u16) }
            80u16 => { cast!usize (global::state::instance ().getFloatTypeSize () / 8u16) }
            _ => {
                cast!usize (f.getSize () / 8u16)
            }
        }
    }

    /**
     * Validate a sizeof expression on a bool type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - b: the bool type
     * @returns: the size
     * */
    def validateBoolType (self, dmut _ : &Validator, _ : &Word, _ : &BoolType)-> usize {
        1us
    }

    /**
     * Validate a sizeof expression on an int type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - i: the int type
     * @returns: the size
     * */
    def validateIntType (self, dmut _ : &Validator, _ : &Word, i : &IntType)-> usize {
        match i.getSize () {
            0u16 => {
                cast!usize (global::state::instance ().getSizeTypeSize () / 8u32)
            }
            x : u16 => {
                cast!usize (x / 8u16)
            }
        }
    }


    /**
     * @returns: the type alignment of t
     * */
    def validateAlignOf (self, loc : &Word, t : &Type)-> usize
        throws &ErrorMsg
    {
        match t {
            _ : &BoolType => {
                return 1us;
            }
            it : &IntType => {
                match it.getSize () {
                    0u16 => { return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32); }
                    x : u16 => { return cast!usize (x) / 8us; }
                }
            }
            c : &CharType => {
                match c.getSize () {
                    x : u16 => { return cast!usize (x) / 8us; }
                }
            }
            _ : &DelegateType => {
                return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
            }
            f : &FloatType => {
                match f.getSize () {
                    x : u16 => { return cast!usize (x) / 8us; }
                }
            }
            _ : &FuncPtrType => {
                return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
            }
            _ : &VoidType => {
                return 1us;
            }
            a : &ArrayType => {
                return self.validateAlignOf (loc, a.getInners ()[0us]);
            }
            _ : &PointerType => {
                return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
            }
            r : &RangeType => {
                return self.validateAlignOf (loc, r.getInners ()[0us]);
            }
            _ : &SliceType => {
                return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
            }
            tu : &TupleType => {
                let mut max = 1us;
                for inner in tu.getInners () {
                    let align = self.validateAlignOf (loc, inner);
                    if (align > max) { max = align; }
                }

                return max;
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TYPE_HAS_NO_SIZE, t));
    }


}
