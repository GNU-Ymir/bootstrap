mod ymirc::semantic::validator::sizeof_;

import ymirc::syntax::expression::_;
import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;

import ymirc::semantic::symbol::base;

import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::utils::bigint;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import std::collection::vec;
import std::algorithm::searching;
import std::io;
import std::conv;

/**
 * The validator responsible for the validation of 'sizeof' expressions
 */
pub class SizeofValidator {

    // The struct symbol whose size is being computed, to avoid infinite recursivity
    let dmut _sizeStruct = Vec!{&Symbol}::new ();

    // The struct symbol whose alignment is being computed, to avoid infinite recursivity
    let dmut _alignStruct = Vec!{&Symbol}::new ();

    /**
     * Create a new empty validator
     */
    pub self () {}


    /**
     * Validate a sizeof expression
     * @params:
     *    - context: the context of the validation
     *    - i: the intrinsic expression to validate
     * @returns: the validated expression
     */
    pub fn validate (mut self, dmut context : &Validator, i : &IntrinsicExpr)-> &Value
        throws &ErrorMsg
    {
        let t = context:.validateType (i.getContent ());
        let size = self:.validateType (i.getLoc (), t);

        makeIntValue (i.getLoc (), size, size-> 32u16)
    }

    /**
     * Compute the size of a type
     * @params:
     *   - context: the context of the validation
     *   - type: the type whose size has to be computed
     * @returns: a int value containing the size
     * */
    pub fn validate (mut self, dmut context : &Validator, loc : &Word, type : &Type)-> &Value
        throws &ErrorMsg
    {
        context;
        let size = self:.validateType (loc, type);
        makeIntValue (loc, size, size-> 32u16)
    }


    /**
     * Validate a sizeof expression
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - t: the type whose size is being computed
     * @returns: the size
     * */
    pub fn validateType (mut self, loc : &Word, t : &Type)-> usize
        throws &ErrorMsg
    {
        match t {
            b : &BoolType => {
                return self.validateBoolType (loc, b);
            }
            it : &IntType => {
                return self.validateIntType (loc, it);
            }
            c : &CharType => {
                return self.validateCharType (loc, c);
            }
            d : &DelegateType => {
                return self.validateDelegateType (loc, d);
            }
            f : &FloatType => {
                return self.validateFloatType (loc, f);
            }
            f : &FuncPtrType => {
                return self.validateFuncPtrType (loc, f);
            }
            v : &VoidType => {
                return self.validateVoidType (loc, v);
            }
            a : &ArrayType => {
                return self:.validateArrayType (loc, a);
            }
            p : &PointerType => {
                return self.validatePointerType (loc, p);
            }
            r : &RangeType => {
                return self:.validateRangeType (loc, r);
            }
            s : &SliceType => {
                return self.validateSliceType (loc, s);
            }
            tu : &TupleType => {
                return self:.validateTupleType (loc, tu);
            }
            c : &ClassPtrType => {
                return self:.validateClassPtrType (loc, c);
            }
            e : &EnumType => {
                return self:.validateType (loc, e.getProxy ());
            }
            c : &ClassRefType => {
                return self:.validateClassRefType (loc, c);
            }
            o : &OptionType => {
                return self:.validateOptionType (loc, o);
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TYPE_HAS_NO_SIZE, t));
    }

    /**
     * Validate a sizeof expression on a class ptr type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - c: the class type
     * @returns: the size
     * */
    fn validateClassPtrType (mut self, loc : &Word, c : &ClassPtrType)-> usize
        throws &ErrorMsg
    {
        if (c.getSymbol ().isStruct ()) return self:.validateClassRefType (loc, c.getInner ());

        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32)
    }

    /**
     * Validate a sizeof on a class ref type (inner part of a class)
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - cl: the class ref type
     * @returns: the size
     * */
    fn validateClassRefType (mut self, loc : &Word, cl : &ClassRefType)-> usize
        throws &ErrorMsg
    {

        if (cl.getSymbol ().isStruct ()) {
            for sy in self._sizeStruct {
                if (sy is cl.getSymbol ()) {
                    throw ErrorMsg::fatal (cl.getSymbol ().getLoc (), format (ValidateErrorMessage::NO_SIZE_FORWARD_REF, cl));
                }
            }

            self._sizeStruct:.push (cl.getSymbol ());
        }

        let mut current = 16us;
        let mut glob = cast!usize (global::state::instance ().getSizeTypeSize () / 8u32) * 2us; // 2 pointers for vtable and monitor
        let mut globAlign = cast!usize (global::state::instance ().getSizeTypeSize () / 8u32); // align of pointers

        {
            for inner in cl.getFields () {
                match inner {
                    v : &VarDeclValue => {
                        let innerS = self:.validateType (v.getLoc (), v.getVarType ());
                        let align = self:.validateAlignOf (loc, v.getVarType ());
                        if (align > globAlign) { globAlign = align; }

                        let padding = (align - (current % align)) % align;
                        let aligned = current + padding;

                        current = aligned + innerS;
                        glob += padding + innerS;
                    }
                }
            }
        } exit {
            if (cl.getSymbol ().isStruct ()) {
                __pragma!trusted ({self._sizeStruct:.pop ();});
            }
        }

        if (glob % globAlign != 0us) {
            glob = glob + (globAlign - (glob % globAlign));
        }

        glob
    }

    /**
     * Validate the size of the fields of a class ref
     * */
    pub fn computeSizeAndAligns (mut self, cl : &ClassRefType)-> [(usize, usize)]
        throws &ErrorMsg
    {
        let dmut res = Vec!{(usize, usize)}::new ();
        res:.push ((0us, 8us));
        res:.push ((8us, 8us));

        let mut current = if (cl.getSymbol ().isStruct ()) { 16us } else { 0us }
        let mut globAlign = if (cl.getSymbol ().isStruct ()) {
            1us
        } else {
            cast!usize (global::state::instance ().getSizeTypeSize () / 8u32)
        }// align of pointers

        for inner in cl.getFields () match inner {
            v : &VarDeclValue => {
                let innerS = self:.validateType (v.getLoc (), v.getVarType ());
                let align = self:.validateAlignOf (v.getLoc (), v.getVarType ());

                if (align > globAlign) { globAlign = align; }

                let padding = (align - (current % align)) % align;
                let aligned = current + padding;

                res:.push ((aligned, innerS));
                current = aligned + innerS;
            }
        }

        res[]
    }

    /**
     * Validate a sizeof on a tuple type
     * * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - t: the tuple type
     * @returns: the size
     * */
    fn validateTupleType (mut self, loc : &Word, t : &TupleType)-> usize
        throws &ErrorMsg
    {
        let mut current = 0us;
        let mut glob = 0us;
        let mut globAlign = 1us;

        for inner in t.getInners () {
            let innerS = self:.validateType (loc, inner);
            let align = self:.validateAlignOf (loc, inner);
            if (align > globAlign) { globAlign = align; }

            let padding = (align - (current % align)) % align;
            let aligned = (current + padding);

            current = aligned + innerS;
            glob += padding + innerS;
        }

        if (glob % globAlign != 0us) {
            glob = glob + (globAlign - (glob % globAlign));
        }

        glob
    }

    /**
     * Validate the sizeof an option type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - o: the option type
     * @returns: the size
     * */
    fn validateOptionType (mut self, loc : &Word, t : &OptionType)-> usize
        throws &ErrorMsg
    {
        let inner = self:.validateType (loc, t.getInners ()[0]);
        let errorSize = cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
        let contentSize = if (inner > errorSize) { inner } else { errorSize };

        return contentSize + cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
    }

    /**
     * Validate a sizeof expression on a pointer type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - p: the pointer type
     * @returns: the size
     * */
    fn validateRangeType (mut self, loc : &Word, r : &RangeType)-> usize
        throws &ErrorMsg
    {
        self:.validateType (loc, r.getInners ()[0us]) * 4us
    }

    /**
     * Validate a sizeof expression on a slice type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - s: the slice type
     * @returns: the size
     * */
    fn validateSliceType (self, _ : &Word, _ : &SliceType)-> usize {
        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32 * 2u32)
    }

    /**
     * Validate a sizeof expression on a pointer type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the sizeof
     *     - p: the pointer type
     * @returns: the size
     * */
    fn validatePointerType (self, _ : &Word, _ : &PointerType)-> usize {
        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32)
    }

    /**
     * Validate a sizeof expression on an array type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - a: the array type
     * @returns: the size
     * */
    fn validateArrayType (mut self, loc : &Word, a : &ArrayType)-> usize {
        self:.validateType (loc, a.getInners ()[0us]) * a.getLen ()
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * Validate a sizeof expression on a delegate type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - d: the delegate type
     * @returns: the size
     * */
    fn validateDelegateType (self, _ : &Word, _ : &DelegateType)-> usize {
        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32 * 2u32)
    }

    /**
     * Validate a sizeof expression on a func ptr type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - f: the funcptr type
     * @returns: the size
     * */
    fn validateFuncPtrType (self, _ : &Word, _ : &FuncPtrType)-> usize {
        cast!usize (global::state::instance ().getSizeTypeSize () / 8u32)
    }

    /**
     * Validate a sizeof expression on a void type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - d: the void type
     * @returns: the size
     * */
    fn validateVoidType (self, _ : &Word, _ : &VoidType)-> usize {
        1us
    }

    /**
     * Validate a sizeof expression on a char type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - c: the char type
     * @returns: the size
     * */
    fn validateCharType (self, _ : &Word, c : &CharType)-> usize {
        cast!usize (c.getSize () / 8u16)
    }

    /**
     * Validate a sizeof expression on a float type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - f: the float type
     * @returns: the size
     * */
    fn validateFloatType (self, _ : &Word, f : &FloatType)-> usize {
        match f.getSize () {
            0u16 => { cast!usize (global::state::instance ().getFloatTypeSize () / 8u16) }
            80u16 => { cast!usize (global::state::instance ().getFloatTypeSize () / 8u16) }
            _ => {
                cast!usize (f.getSize () / 8u16)
            }
        }
    }

    /**
     * Validate a sizeof expression on a bool type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - b: the bool type
     * @returns: the size
     * */
    fn validateBoolType (self, _ : &Word, _ : &BoolType)-> usize {
        1us
    }

    /**
     * Validate a sizeof expression on an int type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the sizeof
     *    - i: the int type
     * @returns: the size
     * */
    fn validateIntType (self, _ : &Word, i : &IntType)-> usize {
        match i.getSize () {
            0u16 => {
                cast!usize (global::state::instance ().getSizeTypeSize () / 8u32)
            }
            x : u16 => {
                cast!usize (x / 8u16)
            }
        }
    }


    /**
     * @returns: the type alignment of t
     * */
    fn validateAlignOf (mut self, loc : &Word, t : &Type)-> usize
        throws &ErrorMsg
    {
        match t {
            _ : &BoolType => {
                return 1us;
            }
            it : &IntType => {
                match it.getSize () {
                    0u16 => { return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32); }
                    x : u16 => { return cast!usize (x) / 8us; }
                }
            }
            c : &CharType => {
                match c.getSize () {
                    x : u16 => { return cast!usize (x) / 8us; }
                }
            }
            _ : &DelegateType => {
                return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
            }
            f : &FloatType => {
                match f.getSize () {
                    x : u16 => { return cast!usize (x) / 8us; }
                }
            }
            _ : &FuncPtrType => {
                return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
            }
            c : &ClassPtrType => {
                if (c.getSymbol ().isStruct ()) return self:.validateAlignOfStruct (loc, c.getInner ());
                else return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
            }
            _ : &VoidType => {
                return 1us;
            }
            a : &ArrayType => {
                return self:.validateAlignOf (loc, a.getInners ()[0us]);
            }
            _ : &PointerType => {
                return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
            }
            r : &RangeType => {
                return self:.validateAlignOf (loc, r.getInners ()[0us]);
            }
            _ : &SliceType => {
                return cast!usize (global::state::instance ().getSizeTypeSize () / 8u32);
            }
            tu : &TupleType => {
                return self:.validateAlignOfTuple (loc, tu);
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TYPE_HAS_NO_SIZE, t));
    }

    /**
     * Validate the alignement of a struct type
     * @params:
     *    - loc: the location of the struct
     *    - s: the struct to validate
     * @returns: the alignement of the type
     * @throws:
     *    - &ErrorMsg: if the type has no size
     * */
    fn validateAlignOfStruct (mut self, loc : &Word, s : &ClassRefType)-> usize
        throws &ErrorMsg
    {
        for sy in self._alignStruct {
            if (sy is s.getSymbol ()) {
                throw ErrorMsg::fatal (s.getSymbol ().getLoc (), format (ValidateErrorMessage::NO_SIZE_FORWARD_REF, s));
            }
        }

        let mut max = 1us;
        self._alignStruct:.push (s.getSymbol ());
        {
            for inner in s.getFields () {
                match inner {
                    v : &VarDeclValue => {
                        {
                            let align = self:.validateAlignOf (loc, v.getVarType ());
                            if (align > max) { max = align; }
                        } catch {
                            err : &ErrorMsg => {
                                let note = ErrorMsg::note (s.getSymbol ().getLoc (), format (ValidateErrorMessage::WITHIN_STRUCT_TYPE, s));
                                throw err.withNote ([ErrorMsg::note (v.getLoc (), format (ValidateErrorMessage::FOR_FIELD, v.getLoc ().str ()), notes-> [note])]);
                            }
                        }
                    }
                    _ => __pragma!panic ();
                }
            }
        } exit {
            __pragma!trusted ({self._alignStruct:.pop ();});
        }

        max
    }

    /**
     * Validate the alignement of a tuple type
     * @params:
     *    - loc: the location of the tuple
     *    - tu: the tuple to validate
     * @returns: the alignement of the type
     * @throws:
     *    - &ErrorMsg: if the type has no size
     * */
    fn validateAlignOfTuple (mut self, loc : &Word, tu : &TupleType)-> usize
        throws &ErrorMsg
    {
        let mut max = 1us;
        for inner in tu.getInners () {
            let align = self:.validateAlignOf (loc, inner);
            if (align > max) { max = align; }
        }

        max
    }


}
