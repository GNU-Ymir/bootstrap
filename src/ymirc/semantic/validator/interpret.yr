mod ymirc::semantic::validator::interpret;

import ymirc::semantic::generator::_;
import ymirc::errors::message;
import std::io;

/**
 * The compile time interpreter, is the class that can compute the values at compilation time
 * It is used to compute some stuff, that must be known at compilation time, or for optimization purpose
 */
pub class CompileTimeInterpreter {

    /**
     * Create an empty interpreter
     */
    pub self () {}


    /**
     * Compute the value of `value`, by transforming it into a literal of some sort, that can be interpreted by the compiler as a single value
     * @params: 
     *   - value: the value to interpret
     * @returns: a literal value of some kind (TODO, define precisely what kind ?)
     * @throws: &ErrorMsg: if the value cannot be known at compilation time
     */
    pub def compute (self, value : &Value)-> &Value
        throws &ErrorMsg
    {
        match value {
            LiteralValue () => { value }
            _ => {
                println ("TODO ", value::typeinfo.name);
                __pragma!fake_throw (&ErrorMsg);
                __pragma!panic ();
            }                
        }
    }
    
}
