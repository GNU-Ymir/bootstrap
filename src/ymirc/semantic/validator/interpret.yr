mod ymirc::semantic::validator::interpret;

import ymirc::semantic::generator::_;
import ymirc::semantic::symbol::function;
import ymirc::errors::message;
import std::io;
import ymirc::utils::bigint;
import ymirc::utils::bigfloat;

import ymirc::global::state;

import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::utils::format;
import ymirc::semantic::validator::errors;

import std::collection::vec;

/**
 * The compile time interpreter, is the class that can compute the values at compilation time
 * It is used to compute some stuff, that must be known at compilation time, or for optimization purpose
 */
pub class CompileTimeInterpreter {

    /**
     * Create an empty interpreter
     */
    pub self () {}

    /**
     * Simplify the value by computing what can be computed at compilation time
     * @params:
     *    - value: the value to simplify
     * @returns: the simplified value
     * @throws: if there was an error during the simplification (detecting int overflow for example)
     */
    pub def simplify (self, value : &Value)-> &Value
        throws &ErrorMsg
    {
        match value {
            LiteralValue () => { value }
            rng : &RangeValue => { self.simplifyRangeValue (rng) }
            slc : &SliceConcatValue => { self.simplifySliceConcat (slc) }
            slc : &SliceCompareValue => { self.simplifySliceCompare (slc) }
            slc : &SliceAccessValue => { self.simplifySliceAccess (slc) }
            bin : &BinaryOperatorValue => { self.simplifyBinary (bin) }
            un : &UnaryOperatorValue => { self.simplifyUnary (un) }
            cd : &ConditionalValue => { self.simplifyConditional (cd) }
            bl : &BlockValue => { self.simplifyBlock (bl) }
            vref : &VarRefValue => { self.simplifyVarRef (vref) }
            u : &UniqValue => { self.simplifyUniq (u) }           
            s : &StructFieldAccessValue => { self.simplifyFieldAccess (s) }
            c : &FuncPtrCallValue => { self.simplifyFuncPtrCall (c) }
            l : &LoopValue => { self.simplifyLoopValue (l) }
            s : &SliceValue => { self.simplifySliceValue (s) }
            c : &CallValue => { self.simplifyCallValue (c) }
            _ => {                
                value
            }                
        }        
    }            

    /**
     * Compute the value of `value`, by transforming it into a literal of some sort, that can be interpreted by the compiler as a single value
     * @params: 
     *   - value: the value to interpret
     * @returns: a literal value of some kind (TODO, define precisely what kind ?)
     * @throws: &ErrorMsg: if the value cannot be known at compilation time
     */
    pub def compute (self, value : &Value)-> &Value
        throws &ErrorMsg
    {
        match value {
            LiteralValue () => { value }
            a : &AliaserValue => { self.computeAliaser (a) }
            s : &SliceValue => { self.computeSliceValue (s) }
            rng : &RangeValue => { self.computeRangeValue (rng) }
            slc : &SliceConcatValue => { self.computeSliceConcat (slc) }
            slc : &SliceCompareValue => { self.computeSliceCompare (slc) }
            slc : &SliceAccessValue => { self.computeSliceAccess (slc) }
            bin : &BinaryOperatorValue => { self.computeBinary (bin) }
            un : &UnaryOperatorValue => { self.computeUnary (un) }
            cd : &ConditionalValue => { self.computeConditional (cd) }
            bl : &BlockValue => { self.computeBlock (bl) }
            vref : &VarRefValue => { self.computeVarRef (vref) }
            addr : &AddressValue => { self.computeAddress (addr) }
            u : &UniqValue => { self.compute (u.getValue ()) }
            s : &StructFieldAccessValue => { self.computeFieldAccess (s) }
            c : &CallValue => { self.computeCallValue (c) }
            _ => {
                throw ErrorMsg::fatal (value.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, value.getType ()));
            }                
        }
    }


    /**
     * ================================================================================
     * ================================================================================
     * ====================            COMPUTE AND TRANSFORM           ================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * Compute the value of "value" and try transforming it into a string literal directly usable
     * @params:
     *    - value: the value to compute and transform
     * @returns:
     *    - .0: is in utf8
     *    - .1: the utf8 literal iif .0
     *    - .2: the utf32 literal iif not .0
     * @throws:
     *    - &ErrorMsg: if the value cannot be retreived at compilation time, or does not contain a string literal
     */
    pub def computeString (self, value : &Value)-> (bool, [c8], [c32])
        throws &ErrorMsg
    {
        let inner = match self.compute (value) {
            a : &SliceValue => { a.getInner () }
            l : _ => { l }
        };
        
        match inner {
            s : &StringValue => {
                let size = s.getType ().asOf!{&ArrayType} ().getInners ()[0].asOf!{&CharType} ().getSize ();
                if (size == 8u16) {
                    return (true, s.getUtf8 (), []);
                } else {
                    return (false, [], s.getUtf32 ());
                }
            }
            _ => {
                let ch = CharType::new (value.getLoc (), size-> 8u16);
                let slcType = SliceType::new (value.getLoc (), ch);
                throw ErrorMsg::fatal (inner.getLoc (),
                                       format (ValidateErrorMessage::INCOMPATIBLE_TYPE,
                                               inner.getType (), slcType));                                               
            }
        };
    }

    /**
     * Compute the value of 'value' and try transforming it into a bool literal 
     * @throws:
     *    - &ErrorMsg: if the value cannot be retreived at compilation time, or does not contain a bool literal
     */
    pub def computeBool (self, value : &Value)-> bool
        throws &ErrorMsg
    {
        let inner = self.compute (value);
        match inner {
            b : &BoolValue => {
                b.isTrue ()
            }
            _ => {
                let bType = BoolType::new (value.getLoc ());
                throw ErrorMsg::fatal (inner.getLoc (),
                                       format (ValidateErrorMessage::INCOMPATIBLE_TYPE,
                                               inner.getType (), bType));
            }
        }
    }

    /**
     * Compute the value of 'value' and try transforming it into a int literal
     * @params:
     *     - size: the size of the int type (for error throwing only, does not check that on the literal value)
     *     - signed: true if the int type is signed (for error throwing only, does not check that on the literal value)
     * @throws:
     *    - &ErrorMsg: if the value cannot be retreived at compilation time, or does not contain a int literal
     */
    pub def computeInt (self, value : &Value, size : u16 = 0u16, signed : bool = true)-> &BigInt
        throws &ErrorMsg
    {
        let inner = self.compute (value);
        match inner {
            i : &IntValue => {
                i.getValue ()
            }
            _ => {
                let iType = IntType::new (value.getLoc (), size-> size, signed-> signed);
                throw ErrorMsg::fatal (inner.getLoc (),
                                       format (ValidateErrorMessage::INCOMPATIBLE_TYPE,
                                               inner.getType (), iType));
            }
        }
    }

    /**
     * Compute the value of "value" and try to transform it into a float literal
     * @params:
     *     - size: the size of the int type (for error throwing only, does not check that on the literal value)
     * @throws:
     *    - &ErrorMsg: if the value cannot be retreived at compilation time, or does not contain a float literal
     * */
    pub def computeFloat (self, value : &Value, size : u16 = 0u16)-> &BigFloat
        throws &ErrorMsg
    {
        let inner = self.compute (value);
        match inner {
            f : &FloatValue => {
                f.getValue ()
            }
            _ => {
                let fType = FloatType::new (value.getLoc (), size-> size);
                throw ErrorMsg::fatal (inner.getLoc (),
                                       format (ValidateErrorMessage::INCOMPATIBLE_TYPE,
                                               inner.getType (), fType));
            }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================            RANGE             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the content of a range value at compilation time
     * @params: 
     *   - value: the range value to compute
     * @returns: a range value
     * @throws: &ErrorMsg if the value cannot be known at compilation time
     */
    def computeRangeValue (self, value : &RangeValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.compute (value.getLeft ());
        let right = self.compute (value.getRight ());
        let full = self.compute (value.getIsFull ());
        let step = match value.getStep () {
            n : &NoneValue => { cast!{&Value} (n) }
            s : &Value => { self.compute (s) }
        }
        
        RangeValue::new (value.getLoc (), value.getType (), left, right, full-> full, step-> step)
    }

    /**
     * Simplify the content of a range value at compilation time
     * @params:
     *    - value: the range value to simplify
     * @returns: a range value
     */
    def simplifyRangeValue (self, value : &RangeValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.simplify (value.getLeft ());
        let right = self.simplify (value.getRight ());
        let full = self.simplify (value.getIsFull ());
        let step = match value.getStep () {
            n : &NoneValue => { cast!{&Value} (n) }
            s : &Value => { self.simplify (s) }
        }
        
        RangeValue::new (value.getLoc (), value.getType (), left, right, full-> full, step-> step)        
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================        CONCATENATION         =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * Compute a slice concatenation operation
     * @params: 
     *  - value: the value to compute
     * @returns: the value
     * @throws: 
     *   - &ErrorMsg: if the value cannot be known at compilation time
     */
    def computeSliceConcat (self, value : &SliceConcatValue)-> &Value
        throws &ErrorMsg
    {
        let left = match self.compute (value.getLeft ()) {
            al : &SliceValue => { al.getInner () }
            l : _ => { l }
        };

        let right = match self.compute (value.getRight ()) {
            al : &SliceValue => { al.getInner () }
            r : _ => { r }
        };

        let res = match (left, right) {
            (l : &StringValue, r : &StringValue) => {
                self.concatStrings (value.getLoc (), value.getType (), l, r)
            }
            // (l : &LiteralValue, r : &LiteralValue) => {
            //     self.concatArrays (value.getLoc (), value.getType (), l, r)
            // }
            _ => {
                throw ErrorMsg::fatal (value.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, value.getType ()));
            }            
        }

        res
    }

    /**
     * Simplify a slice concatenation
     */
    def simplifySliceConcat (self, value : &SliceConcatValue)-> &Value
        throws &ErrorMsg
    {
        let left = match self.simplify (value.getLeft ()) {
            al : &SliceValue => { al.getInner () }
            l : _ => { l }
        };

        let right = match self.simplify (value.getRight ()) {
            al : &SliceValue => { al.getInner () }
            r : _ => { r }
        };

        match (left, right) {
            (l : &StringValue, r : &StringValue) => {
                self.concatStrings (value.getLoc (), value.getType (), l, r)
            }
            _ => {
                cast!{&Value} (SliceConcatValue::new (value.getLoc (), value.getType (), left, right))
            }            
        }   
    }
    
    /**
     * Concatenation of two string values
     * @params: 
     *  - loc: the location of the operation
     *  - type: the type of the operation
     *  - left: the left operand of the concat
     *  - right: the right operand of the concat
     * @returns: a aliaservalue containing a new string value
     */
    def concatStrings (self, loc : &Word, type : &Type, left : &StringValue, right : &StringValue)-> &Value {
        match type {
            s : &SliceType => {
                match s.getInners ()[0] {
                    c : &CharType => {
                        if (c.getSize () == 8u16) {
                            return self.concatUtf8 (loc, left, right);
                        } else {
                            return self.concatUtf32 (loc, left, right);
                        }
                    }
                }
            }
        }

        __pragma!panic ();
    }

    /**
     * Concatenate two strings in utf-8 format
     * @params: 
     *   - loc: the location of the operation
     *   - left: the left operand
     *   - right: the right operand
     * @returns: a aliaservalue containing a new string value
     */
    def concatUtf8 (self, loc : &Word, left : &StringValue, right : &StringValue)-> &Value {
        let dmut res = Vec!{c8}::new ();
        let l_u8 = left.getUtf8 ();
        let r_u8 = right.getUtf8 ();
        for i in 0us .. left.getLen () {
            if (l_u8 [i] != '\u{0}'c8)
                res:.push (l_u8 [i]);
        }
        
        for i in 0us .. right.getLen () {
            if (r_u8 [i] != '\u{0}'c8)
                res:.push (r_u8 [i]);
        }

        let len = left.getLen () + right.getLen ();
        res:.push ('\u{0}'c8);
        
        let inner = CharType::new (loc, size-> 8u16);
        let arrType = ArrayType::new (loc, inner, size-> int::usize (loc, len), isMutable-> true);
        let slcType = SliceType::new (loc, inner, isMutable-> true);

        SliceValue::new (
            loc,
            slcType,
            StringValue::new (loc, arrType, c8Val-> res[], c32Val-> [], len), implicitAlias-> true) 
    }

    /**
     * Concatenate two strings in utf-32 format
     * @params: 
     *   - loc: the location of the operation
     *   - left: the left operand
     *   - right: the right operand
     * @returns: a aliaservalue containing a new string value
     */
    def concatUtf32 (self, loc : &Word, left : &StringValue, right : &StringValue)-> &Value {
        let dmut res = Vec!{c32}::new ();
        let l_u32 = left.getUtf32 ();
        let r_u32 = right.getUtf32 ();
        for i in 0us .. left.getLen () {
            if (l_u32 [i] != '\u{0}')
                res:.push (l_u32 [i]);
        }
        
        for i in 0us .. right.getLen () {
            if (r_u32 [i] != '\u{0}')
                res:.push (r_u32 [i]);
        }

        let len = left.getLen () + right.getLen ();
        res:.push ('\u{0}');
        
        let inner = CharType::new (loc, size-> 32u16);
        let arrType = ArrayType::new (loc, inner, size-> int::usize (loc, len), isMutable-> true);
        let slcType = SliceType::new (loc, inner, isMutable-> true);

        SliceValue::new (
            loc,
            slcType,
            StringValue::new (loc, arrType, c8Val-> [], c32Val-> res[], len), implicitAlias-> true) 

    }

    /**
     * Concatenate two arrays
     * @params: 
     *   - loc: the location of the operation
     *   - type: the type of the result
     *   - left: the left operand
     *   - right: the right operand
     * @returns: the result 
     */
    def concatArrays (self, loc : &Word, type : &Type, left : &ArrayValue, right : &ArrayValue)-> &Value {
        let dmut res = Vec!{&Value}::new ();
        let l = left.getInners ();
        let r = right.getInners ();
        for i in 0us .. l.len {
            res:.push (l[i]);
        }

        for j in 0us .. r.len {
            res:.push (r[j]);
        }

        let inner = type.asOf!{&ArrayType}().getInners ()[0];
        let arrType = ArrayType::new (loc, inner, size-> int::usize (loc, res.len ()), isMutable-> true);

        ArrayValue::new (loc, arrType, res[])
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of a slice comparison
     * @params: 
     *   - value: the value to execute a cte
     * @returns: the result value
     * @throws: 
     *  - &ErrorMsg: if the value cannot be known at compilation time
     */
    def computeSliceCompare (self, value : &SliceCompareValue)-> &Value
        throws &ErrorMsg
    {
        let left = match self.compute (value.getLeft ()) {
            al : &SliceValue => { al.getInner () }
            l : _ => { l }
        };

        let right = match self.compute (value.getRight ()) {
            al : &SliceValue => { al.getInner () }
            r : _ => { r }
        };

        let res = match (left, right) {
            (l : &StringValue, r : &StringValue) => {                
                BoolValue::new (value.getLoc (), (l == r))
            }
            (l : &ArrayValue, r : &ArrayValue) => {
                BoolValue::new (value.getLoc (), (l == r))
            }
            _ => {
                throw ErrorMsg::fatal (value.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, value.getType ()));
            }            
        }

        res
    }

    /**
     * Simplify a slice comparison value
     */
    def simplifySliceCompare (self, value : &SliceCompareValue)-> &Value
        throws &ErrorMsg
    {
        let left = match self.simplify (value.getLeft ()) {
            al : &SliceValue => { al.getInner () }
            l : _ => { l }
        };

        let right = match self.simplify (value.getRight ()) {
            al : &SliceValue => { al.getInner () }
            r : _ => { r }
        };

        let ret : &Value = match (left, right) {
            (l : &StringValue, r : &StringValue) => {                
                cast!{&Value} (BoolValue::new (value.getLoc (), (l == r)))
            }
            (l : &ArrayValue, r : &ArrayValue) => {
                cast!{&Value} (BoolValue::new (value.getLoc (), (l == r)))
            }
            _ => {
                cast!{&Value} (SliceCompareValue::new (value.getLoc (), value.getType (), left, right))
            }            
        };

        ret
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================            BINARY            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of a binary operation
     * @params: 
     *   - bin: the value to compute
     * @returns: the result
     * @throws:
     *   - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeBinary (self, bin : &BinaryOperatorValue)-> &Value
        throws &ErrorMsg
    {
        match bin {
            iBin : &BinaryMathIntOperatorValue => {
                return self.computeBinMathInt (iBin);
            }
            sBin : &SpecialMathIntOperatorValue => {
                return self.computeSpecialMathInt (sBin);
            }
            cmp : &CmpIntOperatorValue => {
                return self.computeCompareIntValue (cmp);
            }
            bBin : &LogicalBinBoolOperatorValue => {
                return self.computeLogicalBinBool (bBin);
            }
            bBin : &CmpBoolOperatorValue => {
                return self.computeCompareBoolValue (bBin);
            }
            fBin : &BinaryMathFloatOperatorValue => {
                return self.computeBinMathFloat (fBin);
            }
            sBin : &SpecialMathFloatOperatorValue => {
                return self.computeSpecialMathFloat (sBin);
            }
            fBin : &CmpFloatOperatorValue => {
                return self.computeCompareFloat (fBin);
            }
            _ => {
                throw ErrorMsg::fatal (bin.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, bin.getType ()));
            }
        }
    }

    /**
     * Simplify a binary operator
     */
    def simplifyBinary (self, bin : &BinaryOperatorValue)-> &Value
        throws &ErrorMsg
    {
        match bin {
            iBin : &BinaryMathIntOperatorValue => {
                return self.simplifyBinMathInt (iBin);
            }
            sBin : &SpecialMathIntOperatorValue => {
                return self.simplifySpecialMathInt (sBin);
            }
            cmp : &CmpIntOperatorValue => {
                return self.simplifyCompareIntValue (cmp);
            }
            bBin : &LogicalBinBoolOperatorValue => {
                return self.simplifyLogicalBinBool (bBin);
            }
            bBin : &CmpBoolOperatorValue => {
                return self.simplifyCompareBoolValue (bBin);
            }
            fBin : &BinaryMathFloatOperatorValue => {
                return self.simplifyBinMathFloat (fBin);
            }
            sBin : &SpecialMathFloatOperatorValue => {
                return self.simplifySpecialMathFloat (sBin);
            }
            fBin : &CmpFloatOperatorValue => {
                return self.simplifyCompareFloat (fBin);
            }
            _ => {
                bin
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================       BINARY CMP INT        ==========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of int binary comparison
     * @params:
     *     - bin: the operator to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be knwon at compile time
     */
    def computeCompareIntValue (self, bin : &CmpIntOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.compute (bin.getLeft ());
        let right = self.compute (bin.getRight ());
        match (left, right) {
            (l : &IntValue, r : &IntValue) => {
                match bin.getOperator () {
                    BinaryOperators::INF => { return BoolValue::new (bin.getLoc (), l.getValue () < r.getValue ()); }
                    BinaryOperators::SUP => { return BoolValue::new (bin.getLoc (), l.getValue () > r.getValue ()); }
                    BinaryOperators::INF_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () <= r.getValue ()); }
                    BinaryOperators::SUP_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () >= r.getValue ()); }
                    BinaryOperators::NOT_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () != r.getValue ()); }
                    BinaryOperators::DEQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () == r.getValue ()); }
                    _ => __pragma!panic ();
                }
            }
            _ => __pragma!panic ();
        }
    }

    /**
     * Simplify a binary int comparison
     */
    def simplifyCompareIntValue (self, bin : &CmpIntOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.simplify (bin.getLeft ());
        let right = self.simplify (bin.getRight ());
        match (left, right) {
            (l : &IntValue, r : &IntValue) => {
                match bin.getOperator () {
                    BinaryOperators::INF => { return BoolValue::new (bin.getLoc (), l.getValue () < r.getValue ()); }
                    BinaryOperators::SUP => { return BoolValue::new (bin.getLoc (), l.getValue () > r.getValue ()); }
                    BinaryOperators::INF_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () <= r.getValue ()); }
                    BinaryOperators::SUP_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () >= r.getValue ()); }
                    BinaryOperators::NOT_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () != r.getValue ()); }
                    BinaryOperators::DEQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () == r.getValue ()); }
                    _ => __pragma!panic ();
                }
            }
            _ => {
                return CmpIntOperatorValue::new (bin.getLoc (), bin.getOperator (), left, right);
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================       BINARY CMP BOOL        =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of bool binary comparison
     * @params:
     *     - bin: the operator to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be knwon at compile time
     */
    def computeCompareBoolValue (self, bin : &CmpBoolOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.compute (bin.getLeft ());
        let right = self.compute (bin.getRight ());
        match (left, right) {
            (l : &BoolValue, r : &BoolValue) => {
                match bin.getOperator () {
                    BinaryOperators::NOT_EQUAL => { return BoolValue::new (bin.getLoc (), l.isTrue () != r.isTrue ()); }
                    BinaryOperators::DEQUAL => { return BoolValue::new (bin.getLoc (), l.isTrue () == r.isTrue ()); }
                    _ => __pragma!panic ();
                }
            }
            _ => __pragma!panic ();
        }
    }

    /**
     * Simplify the value of bool binary comparison
     * @params:
     *     - bin: the operator to compute
     * @returns: the result
     */
    def simplifyCompareBoolValue (self, bin : &CmpBoolOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.simplify (bin.getLeft ());
        let right = self.simplify (bin.getRight ());
        match (left, right) {
            (l : &BoolValue, r : &BoolValue) => {
                match bin.getOperator () {
                    BinaryOperators::NOT_EQUAL => { return BoolValue::new (bin.getLoc (), l.isTrue () != r.isTrue ()); }
                    BinaryOperators::DEQUAL => { return BoolValue::new (bin.getLoc (), l.isTrue () == r.isTrue ()); }
                    _ => __pragma!panic ();
                }
            }
            _ => return CmpBoolOperatorValue::new (bin.getLoc (), bin.getOperator (), left, right);
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================       BINARY LOGIC BOOL        =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of a binary logical operation on bools
     * @params:
     *     - bin: the operator to compute
     * @throws:
     *    - &ErrorMsg: if the value cannot be knwon at compile time
     * */
    def computeLogicalBinBool (self, bin : &LogicalBinBoolOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.compute (bin.getLeft ());
        let right = self.compute (bin.getRight ());
        match (left, right) {
            (l : &BoolValue, r : &BoolValue) => {
                match bin.getOperator () {
                    BinaryOperators::DPIPE => { return BoolValue::new (bin.getLoc (), l.isTrue () || r.isTrue ()) }
                    BinaryOperators::DAND  => { return BoolValue::new (bin.getLoc (), l.isTrue () && r.isTrue ()) }
                    _ => __pragma!panic ();
                }
            }
            _ => __pragma!panic ();
        }
    }

    /**
     * Simplify the value of a binary logical operation on bools
     * @params:
     *     - bin: the operator to compute
     * */
    def simplifyLogicalBinBool (self, bin : &LogicalBinBoolOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.simplify (bin.getLeft ());
        let right = self.simplify (bin.getRight ());
        match (left, right) {
            (l : &BoolValue, r : &BoolValue) => {
                match bin.getOperator () {
                    BinaryOperators::DPIPE => { return BoolValue::new (bin.getLoc (), l.isTrue () || r.isTrue ()) }
                    BinaryOperators::DAND  => { return BoolValue::new (bin.getLoc (), l.isTrue () && r.isTrue ()) }
                    _ => __pragma!panic ();
                }
            }
            _ => return LogicalBinBoolOperatorValue::new (bin.getLoc (), bin.getOperator (), left, right);
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================       BINARY MATH INT        =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of a int binary math operator
     * @params:
     *    - bin: the operator to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeBinMathInt (self, bin : &BinaryMathIntOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.compute (bin.getLeft ());
        let right = self.compute (bin.getRight ());

        match (left, right, bin.getType ()) {
            (l : &IntValue, r : &IntValue, t : &IntType) => {
                match bin.getOperator () {
                    BinaryOperators::PLUS => { return self.computeBinMathIntAdd (bin.getLoc (), t, l, r); }
                    BinaryOperators::MINUS => { return self.computeBinMathIntSub (bin.getLoc (), t, l, r); }
                    BinaryOperators::STAR => { return self.computeBinMathIntMul (bin.getLoc (), t, l, r); }
                    BinaryOperators::PERCENT => { return self.computeBinMathIntMod (bin.getLoc (), t, l, r); }
                    BinaryOperators::DIV => { return self.computeBinMathIntDiv (bin.getLoc (), t, l, r); }
                    _ => __pragma!panic ();
                }
            }
            _ => __pragma!panic ();
        }
    }

    /**
     * Compute the value of a special int binary math operator
     * @params:
     *    - bin: the operator to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeSpecialMathInt (self, bin : &SpecialMathIntOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.compute (bin.getLeft ());
        let right = self.compute (bin.getRight ());

        match (left, right, bin.getType ()) {
            (l : &IntValue, r : &IntValue, t : &IntType) => {
                match bin.getOperator () {
                    BinaryOperators::DXOR => { return self.computeBinMathIntPow (bin.getLoc (), t, l, r); }
                    _ => __pragma!panic ();
                }
            }
            _ => __pragma!panic ();
        }
    }

    /**
     * Simplify a math binary int
     */
    def simplifyBinMathInt (self, bin : &BinaryMathIntOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.simplify (bin.getLeft ());
        let right = self.simplify (bin.getRight ());

        match (left, right, bin.getType ()) {
            (l : &IntValue, r : &IntValue, t : &IntType) => {
                match bin.getOperator () {
                    BinaryOperators::PLUS => { return self.computeBinMathIntAdd (bin.getLoc (), t, l, r); }
                    BinaryOperators::MINUS => { return self.computeBinMathIntSub (bin.getLoc (), t, l, r); }
                    BinaryOperators::STAR => { return self.computeBinMathIntMul (bin.getLoc (), t, l, r); }
                    BinaryOperators::PERCENT => { return self.computeBinMathIntMod (bin.getLoc (), t, l, r); }
                    BinaryOperators::DIV => { return self.computeBinMathIntDiv (bin.getLoc (), t, l, r); }
                    _ => __pragma!panic ();
                }
            }
            _ => {
                return BinaryMathIntOperatorValue::new (bin.getLoc (), bin.getType (), bin.getOperator (), left, right);
            }
        }
    }

    /**
     * Simplify a special math binary int
     */
    def simplifySpecialMathInt (self, bin : &SpecialMathIntOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.simplify (bin.getLeft ());
        let right = self.simplify (bin.getRight ());

        match (left, right, bin.getType ()) {
            (l : &IntValue, r : &IntValue, t : &IntType) => {
                match bin.getOperator () {
                    BinaryOperators::DXOR => { return self.computeBinMathIntPow (bin.getLoc (), t, l, r); }
                    _ => __pragma!panic ();
                }
            }
            _ => {
                return BinaryMathIntOperatorValue::new (bin.getLoc (), bin.getType (), bin.getOperator (), left, right);
            }
        }
    }

    
    /**
     * Compute an addition between two int values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathIntAdd (self, loc : &Word, type : &IntType, left : &IntValue, right : &IntValue)-> &Value
        throws &ErrorMsg
    {
        let r = left.getValue () + right.getValue ();
        self.verifyOverFlowInt (loc, type, r);

        IntValue::new (loc, type, r)
    }

    /**
     * Compute an substraction between two int values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathIntSub (self, loc : &Word, type : &IntType, left : &IntValue, right : &IntValue)-> &Value
        throws &ErrorMsg
    {
        let r = left.getValue () - right.getValue ();
        self.verifyOverFlowInt (loc, type, r);

        IntValue::new (loc, type, r)
    }

    /**
     * Compute an multiplication between two int values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathIntMul (self, loc : &Word, type : &IntType, left : &IntValue, right : &IntValue)-> &Value
        throws &ErrorMsg
    {
        let r = left.getValue () * right.getValue ();
        self.verifyOverFlowInt (loc, type, r);

        IntValue::new (loc, type, r)
    }

    /**
     * Compute a division between two int values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathIntDiv (self, loc : &Word, type : &IntType, left : &IntValue, right : &IntValue)-> &Value
        throws &ErrorMsg
    {
        let r = {
            left.getValue () / right.getValue ()
        } catch {
            _ => throw ErrorMsg::fatal (loc, ValidateErrorMessage::DIVISION_BY_ZERO);
        };

        self.verifyOverFlowInt (loc, type, r);

        IntValue::new (loc, type, r)
    }

    /**
     * Compute a modulo between two int values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathIntMod (self, loc : &Word, type : &IntType, left : &IntValue, right : &IntValue)-> &Value
        throws &ErrorMsg
    {
        let r = {
            left.getValue () % right.getValue ()
        } catch {
            _ => throw ErrorMsg::fatal (loc, ValidateErrorMessage::DIVISION_BY_ZERO);
        };

        self.verifyOverFlowInt (loc, type, r);

        IntValue::new (loc, type, r)
    }

    /**
     * Compute a power between two int values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathIntPow (self, loc : &Word, type : &IntType, left : &IntValue, right : &IntValue)-> &Value
        throws &ErrorMsg
    {
        let r = {
            left.getValue () ^^ right.getValue ()
        } catch {
            _ => throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY, right.getType (), right, u64::max));
        }

        self.verifyOverFlowInt (loc, type, r);

        IntValue::new (loc, type, r)
    }

    /**
     * ================================================================================
     * ================================================================================
     * ============================        INT UTILS        ===========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Verify that the int value does not exceed the capacities of the type
     * @params: 
     *    - type: the type of the int value
     *    - val: the content of the int value
     * @throws:
     *    - &ErrorMsg: if there is an overflow
     */
    def verifyOverFlowInt (self, loc : &Word, type : &IntType, value : &BigInt)
        throws &ErrorMsg
    {
        let max = self.createIntMaxValue (type);
        let min = self.createIntMinValue (type);

        if (value > max) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY, type, value, max));
        }
        if (value < min) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY_MIN, type, value, min));
        }
    }

    /**
     * Create the max value for the type 'i'
     * @params:
     *     - i: a int type
     * @returns: the maximum value the int can contain
     * */
    pub def createIntMaxValue (self, i : &IntType)-> &BigInt {
        match (i.getSize (), i.isSigned ()) {
            (0u16, false) => { BigInt::new (2us) ^^ (global::state::instance ().getSizeTypeSize ()) - 1us }
            (0u16, true)  => { (BigInt::new (2us) ^^ (global::state::instance ().getSizeTypeSize () - 1us)) - 1us }
            (size : u16, false) => { BigInt::new (2us) ^^ cast!usize (size) - 1us }
            (size : u16, true) => { (BigInt::new (2us) ^^ cast!usize (size - 1u16)) - 1us }
            _ => {
                __pragma!panic ();
            }
        }
    } catch {
        _ : &BigIntError => {
            __pragma!panic ();
        }
    }

    /**
     * Create the min value for the type 'i'
     * @params:
     *     - i: a int type
     * @returns: the maximum value the int can contain
     * */
    pub def createIntMinValue (self, i : &IntType)-> &BigInt {
        match (i.getSize (), i.isSigned ()) {
            (0u16, false) => { BigInt::new (0us) }
            (0u16, true)  => { 0us - (BigInt::new (2us) ^^ (global::state::instance ().getSizeTypeSize () - 1us)) }
            (_, false)    => { BigInt::new (0us) }
            (size : u16, true) => { 0us - (BigInt::new (2us) ^^ cast!usize (size - 1u16)) }
            _ => {
                __pragma!panic ();
            }
        }
    } catch {
        _ : &BigIntError => {
            __pragma!panic ();
        }
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================       BINARY CMP FLOAT        ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of float binary comparison
     * @params:
     *     - bin: the operator to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be knwon at compile time
     */
    def computeCompareFloat (self, bin : &CmpFloatOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.compute (bin.getLeft ());
        let right = self.compute (bin.getRight ());
        match (left, right) {
            (l : &FloatValue, r : &FloatValue) => {
                match bin.getOperator () {
                    BinaryOperators::INF => { return BoolValue::new (bin.getLoc (), l.getValue () < r.getValue ()); }
                    BinaryOperators::SUP => { return BoolValue::new (bin.getLoc (), l.getValue () > r.getValue ()); }
                    BinaryOperators::INF_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () <= r.getValue ()); }
                    BinaryOperators::SUP_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () >= r.getValue ()); }
                    BinaryOperators::NOT_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () != r.getValue ()); }
                    BinaryOperators::DEQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () == r.getValue ()); }
                    _ => __pragma!panic ();
                }
            }
            _ => __pragma!panic ();
        }
    }

    /**
     * Simplify a binary int comparison
     */
    def simplifyCompareFloat (self, bin : &CmpFloatOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.simplify (bin.getLeft ());
        let right = self.simplify (bin.getRight ());
        match (left, right) {
            (l : &FloatValue, r : &FloatValue) => {
                match bin.getOperator () {
                    BinaryOperators::INF => { return BoolValue::new (bin.getLoc (), l.getValue () < r.getValue ()); }
                    BinaryOperators::SUP => { return BoolValue::new (bin.getLoc (), l.getValue () > r.getValue ()); }
                    BinaryOperators::INF_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () <= r.getValue ()); }
                    BinaryOperators::SUP_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () >= r.getValue ()); }
                    BinaryOperators::NOT_EQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () != r.getValue ()); }
                    BinaryOperators::DEQUAL => { return BoolValue::new (bin.getLoc (), l.getValue () == r.getValue ()); }
                    _ => __pragma!panic ();
                }
            }
            _ => {
                return CmpIntOperatorValue::new (bin.getLoc (), bin.getOperator (), left, right);
            }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================       BINARY MATH FLOAT        =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of a float binary math operator
     * @params:
     *    - bin: the operator to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeBinMathFloat (self, bin : &BinaryMathFloatOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.compute (bin.getLeft ());
        let right = self.compute (bin.getRight ());

        match (left, right, bin.getType ()) {
            (l : &FloatValue, r : &FloatValue, t : &FloatType) => {
                match bin.getOperator () {
                    BinaryOperators::PLUS => { return self.computeBinMathFloatAdd (bin.getLoc (), t, l, r); }
                    BinaryOperators::MINUS => { return self.computeBinMathFloatSub (bin.getLoc (), t, l, r); }
                    BinaryOperators::STAR => { return self.computeBinMathFloatMul (bin.getLoc (), t, l, r); }
                    BinaryOperators::DIV => { return self.computeBinMathFloatDiv (bin.getLoc (), t, l, r); }
                    _ => __pragma!panic ();
                }
            }
            _ => {
                throw ErrorMsg::fatal (bin.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, bin.getType ()));
            }
        }
    }

    /**
     * Compute the value of a special float binary math operator
     * @params:
     *    - bin: the operator to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeSpecialMathFloat (self, bin : &SpecialMathFloatOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.compute (bin.getLeft ());
        let right = self.compute (bin.getRight ());

        match (left, right, bin.getType ()) {
            (l : &FloatValue, r : &IntValue, t : &FloatType) => {
                match bin.getOperator () {
                    BinaryOperators::DXOR => { return self.computeBinMathFloatPow (bin.getLoc (), t, l, r); }
                    _ => __pragma!panic ();
                }
            }
            // (l : &FloatValue, r : &FloatValue, t : &FloatType) => {
            //     match bin.getOperator () {
            //         BinaryOperators::FMOD => { return self.computeBinMathFloatMod (bin.getLoc (), t, l, r); }
            //         _ => __pragma!panic ();
            //     }
            // }
            _ => {
                throw ErrorMsg::fatal (bin.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, bin.getType ()));
            }
        }
    }

    /**
     * Simplify a math binary float
     */
    def simplifyBinMathFloat (self, bin : &BinaryMathFloatOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.simplify (bin.getLeft ());
        let right = self.simplify (bin.getRight ());

        match (left, right, bin.getType ()) {
            (l : &FloatValue, r : &FloatValue, t : &FloatType) => {
                match bin.getOperator () {
                    BinaryOperators::PLUS => { return self.computeBinMathFloatAdd (bin.getLoc (), t, l, r); }
                    BinaryOperators::MINUS => { return self.computeBinMathFloatSub (bin.getLoc (), t, l, r); }
                    BinaryOperators::STAR => { return self.computeBinMathFloatMul (bin.getLoc (), t, l, r); }
                    BinaryOperators::DIV => { return self.computeBinMathFloatDiv (bin.getLoc (), t, l, r); }
                    _ => __pragma!panic ();
                }
            }
            _ => {
                return BinaryMathFloatOperatorValue::new (bin.getLoc (), bin.getType (), bin.getOperator (), left, right);
            }
        }
    }

    /**
     * Simplify a special math binary float
     */
    def simplifySpecialMathFloat (self, bin : &SpecialMathFloatOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let left = self.simplify (bin.getLeft ());
        let right = self.simplify (bin.getRight ());

        match (left, right, bin.getType ()) {
            (l : &FloatValue, r : &IntValue, t : &FloatType) => {
                match bin.getOperator () {
                    BinaryOperators::DXOR => { return self.computeBinMathFloatPow (bin.getLoc (), t, l, r); }
                    _ => __pragma!panic ();
                }
            }
            // (l : &FloatValue, r : &FloatValue, t : &FloatType) => {
            //     match bin.getOperator () {
            //         BinaryOperators::FMOD => { return self.computeBinMathFloatMod (bin.getLoc (), t, l, r); }
            //         _ => __pragma!panic ();
            //     }
            // }
            _ => {
                return BinaryMathFloatOperatorValue::new (bin.getLoc (), bin.getType (), bin.getOperator (), left, right);
            }
        }
    }

    /**
     * Compute an addition between two float values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathFloatAdd (self, loc : &Word, type : &FloatType, left : &FloatValue, right : &FloatValue)-> &Value  {
        let r = left.getValue () + right.getValue ();
        FloatValue::new (loc, type, r)
    }

    /**
     * Compute an substraction between two float values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathFloatSub (self, loc : &Word, type : &FloatType, left : &FloatValue, right : &FloatValue)-> &Value {
        let r = left.getValue () - right.getValue ();
        FloatValue::new (loc, type, r)
    }

    /**
     * Compute an multiplication between two float values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathFloatMul (self, loc : &Word, type : &FloatType, left : &FloatValue, right : &FloatValue)-> &Value {
        let r = left.getValue () * right.getValue ();
        FloatValue::new (loc, type, r)
    }

    /**
     * Compute a division between two float values
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathFloatDiv (self, loc : &Word, type : &FloatType, left : &FloatValue, right : &FloatValue)-> &Value
        throws &ErrorMsg
    {
        let r = {
            left.getValue () / right.getValue ()
        } catch {
            _ => throw ErrorMsg::fatal (loc, ValidateErrorMessage::DIVISION_BY_ZERO);
        };

        FloatValue::new (loc, type, r)
    }

    // /**
    //  * Compute a mod division between two float values
    //  * @params:
    //  *    - type: the type of the addition
    //  *    - left: the left operand
    //  *    - right: the right operand
    //  * @returns: the result of the addition
    //  */
    // def computeBinMathFloatMod (self, loc : &Word, type : &FloatType, left : &FloatValue, right : &FloatValue)-> &Value
    //     throws &ErrorMsg
    // {
    //     let r = {
    //         left.getValue () % right.getValue ()
    //     } catch {
    //         _ => throw ErrorMsg::fatal (loc, ValidateErrorMessage::DIVISION_BY_ZERO);
    //     };

    //     FloatValue::new (loc, type, r)
    // }

    /**
     * Compute a power between a float and a int value
     * @params:
     *    - type: the type of the addition
     *    - left: the left operand
     *    - right: the right operand
     * @returns: the result of the addition
     */
    def computeBinMathFloatPow (self, loc : &Word, type : &FloatType, left : &FloatValue, right : &IntValue)-> &Value
        throws &ErrorMsg
    {
        let r = {
            left.getValue () ^^ right.getValue ().to!{i64} ()
        } catch {
            _ => throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY, right.getType (), right, u64::max));
        }


        FloatValue::new (loc, type, r)
    }


    /**
     * ================================================================================
     * ================================================================================
     * ===========================        FLOAT UTILS        ==========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Create the maximal finite value for the type 'f'
     * @params:
     *     - f: a float type
     * @returns: the maximal finite value the float can encode
     * */
    pub def createFloatMaxValue (self, f : &FloatType)-> &BigFloat {
        match (f.getSize (), state::instance ().getFloatTypeSize ()) {
            (32u16, _) => { self.createFloatFromHex ("1"s8, "fffffe"s8, "127"s8) }
            (64u16, _) => { self.createFloatFromHex ("1"s8, "fffffffffffff"s8, "1023"s8) }
            (80u16, _) => { self.createFloatFromHex ("f"s8, "fffffffffffffff"s8, "16380"s8) }

            // fsize
            (_, 32u16) => { self.createFloatFromHex ("1"s8, "fffffe"s8, "127"s8) }
            (_, 64u16) => { self.createFloatFromHex ("1"s8, "fffffffffffff"s8, "1023"s8) }
            _ => {
                self.createFloatFromHex ("f"s8, "fffffffffffffff"s8, "16380"s8)
            }
        }
    }

    /**
     * Create the minimal finite value for the type 'f'
     * @params:
     *     - f: a float type
     * @returns: the minimal finite value the float can encode
     * */
    pub def createFloatMinValue (self, f : &FloatType)-> &BigFloat {
        match (f.getSize (), state::instance ().getFloatTypeSize ()) {
            (32u16, _) => { self.createFloatFromHex ("1"s8, "0"s8, "-126"s8) }
            (64u16, _) => { self.createFloatFromHex ("1"s8, "0"s8, "-1022"s8) }
            (80u16, _) => { self.createFloatFromHex ("8"s8, "0"s8, "-16385"s8) }

            // fsize
            (_, 32u16) => {  self.createFloatFromHex ("1"s8, "0"s8, "-126"s8) }
            (_, 64u16) => {  self.createFloatFromHex ("1"s8, "0"s8, "-1022"s8) }
            _ => {
                self.createFloatFromHex ("8"s8, "0"s8, "-16385"s8)
            }
        }
    }

    /**
     * Create the nan value for the type 'f'
     * @params:
     *     - f: a float type
     * @returns: the nan value the float can encode
     * */
    pub def createFloatNanValue (self, _ : &FloatType)-> &BigFloat {
        BigFloat::new (f32::nan)
    }

    /**
     * Create the precision for the type 'f'
     * @params:
     *     - f: a float type
     * @returns: the precision of the float
     * */
    pub def createFloatDigValue (self, f : &FloatType)-> usize {
        match (f.getSize (), global::state::instance ().getFloatTypeSize ()) {
            (32u16, _) => { 6us }
            (64u16, _) => {  15us }
            (80u16, _) => {  18us }

            // fsize
            (_, 32u16) => { 6us }
            (_, 64u16) => {  15us }
            _ => {  18us }
        }
    }

    /**
     * Create the number of bits int the mantissa for the type 'f'
     * @params:
     *     - f: a float type
     * @returns: the number of bits in the mantissa
     * */
    pub def createFloatMantDigValue (self, f : &FloatType)-> usize {
        match (f.getSize (), state::instance ().getFloatTypeSize ()) {
            (32u16, _) => { 24us }
            (64u16, _) => {  53us }
            (80u16, _) => {  64us }

            // fsize
            (_, 32u16) => { 24us }
            (_, 64u16) => {  53us }
            _ => {  64us }
        }
    }

    /**
     * Create the maximum values such that 10^^max is representable by type 'f'
     * @params:
     *     - f: a float type
     * */
    pub def createFloatMax10ExpValue (self, f : &FloatType)-> usize {
        match (f.getSize (), state::instance ().getFloatTypeSize ()) {
            (32u16, _) => { 38us }
            (64u16, _) => { 308us }
            (80u16, _) => { 4932us }

            // fsize
            (_, 32u16) => { 38us }
            (_, 64u16) => { 308us }
            _ => { 4932us }
        }
    }

    /**
     * Create the minimum values such that 10^^min is representable by type 'f'
     * @params:
     *     - f: a float type
     * */
    pub def createFloatMin10ExpValue (self, f : &FloatType)-> isize {
        match (f.getSize (), state::instance ().getFloatTypeSize ()) {
            (32u16, _) => { -37is }
            (64u16, _) => {  -307is }
            (80u16, _) => {  -4931is }

            // fsize
            (_, 32u16) => { -37is }
            (_, 64u16) => {  -307is }
            _ => {  -4931is }
        }
    }

    /**
     * Create the maximum values such that 2^^(max-1) is representable by type 'f'
     * @params:
     *     - f: a float type
     * */
    pub def createFloatMax2ExpValue (self, f : &FloatType)-> usize {
        match (f.getSize (), state::instance ().getFloatTypeSize ()) {
            (32u16, _) => { 128us }
            (64u16, _) => {  1024us }
            (80u16, _) => { 16384us }

            // fsize
            (_, 32u16) => { 128us }
            (_, 64u16) => {  1024us }
            _ => { 16384us }
        }
    }

    /**
     * Create the minimum values such that 2^^(min) is representable by type 'f'
     * @params:
     *     - f: a float type
     * */
    pub def createFloatMin2ExpValue (self, f : &FloatType)-> isize {
        match (f.getSize (), state::instance ().getFloatTypeSize ()) {
            (32u16, _) => { -125is }
            (64u16, _) => {  -1021is }
            (80u16, _) => { -16381is }

            // fsize
            (_, 32u16) => { -125is }
            (_, 64u16) => {  -1021is }
            _ => { -16381is }
        }
    }

    /**
     * Create the number of decimal digit of precision value for the type 'f'
     * @params:
     *     - f: a float type
     * @returns: the dig value the float can encode
     * */
    pub def createFloatInfValue (self, _ : &FloatType)-> &BigFloat {
        BigFloat::new (f32::inf)
    }

    /**
     * Create the number of decimal digit of precision value for the type 'f'
     * @params:
     *     - f: a float type
     * @returns: the dig value the float can encode
     * */
    pub def createFloatEpsilonValue (self, f : &FloatType)-> &BigFloat {
        match (f.getSize (), state::instance ().getFloatTypeSize ()) {
            (32u16, _) => { BigFloat::new (2.0) ^^ (-23i64) }
            (64u16, _) => {  BigFloat::new (2.0) ^^ (-52i64) }
            (80u16, _) => {  BigFloat::new (2.0) ^^ (-63i64) }

            // fsize
            (_, 32u16) => { BigFloat::new (2.0) ^^ (-23i64) }
            (_, 64u16) => {  BigFloat::new (2.0) ^^ (-52i64) }
            _ => {  BigFloat::new (2.0) ^^ (-63i64) }
        }
    } // catch {
    //     _ => __pragma!panic ();
    // }

    /**
     * Create a bigfloat from hexadecimal parts
     * @params:
     *    - int: the int part of the hex literal
     *    - frac: the fractional part of the hex literal
     *    - exp: the exponential part of the hex literal
     * @returns: a bigfloat
     * */
    pub def createFloatFromHex (self, int : [c8], frac : [c8], exp : [c8])-> &BigFloat {
        import std::conv;

        let intPartV = BigFloat::new (BigInt::new (int.to!{usize, 16us} ()));
        let decPartV = BigFloat::new ((BigInt::new (frac.to!{usize, 16us} ()))) * (BigFloat::new (16.0) ^^ -cast!i64 (frac.len));
        let expPartV = if (exp[0] == '-'c8) {
            BigFloat::new (2.0) ^^ -exp[1us .. $].to!{i64} ()
        } else {
            BigFloat::new (2.0) ^^ exp.to!{i64} ()
        };

        (intPartV + decPartV) * expPartV
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================            UNARY             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of a unary operation
     * @params: 
     *   - un: the value to compute
     * @returns: the result
     * @throws:
     *   - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeUnary (self, un : &UnaryOperatorValue)-> &Value
        throws &ErrorMsg
    {
        match un {
            b : &UnaryBoolOperatorValue => self.computeUnaryBool (b);
            i : &UnaryIntOperatorValue => self.computeUnaryInt (i);
            _ => {
                throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, un.getType ()));
            }
        }
    }

    /**
     * Simplify an unary operator
     */
    def simplifyUnary (self, un : &UnaryOperatorValue)-> &Value
        throws &ErrorMsg
    {
        match un {
            b : &UnaryBoolOperatorValue => {
                self.simplifyUnaryBool (b)
            }
            i : &UnaryIntOperatorValue => self.simplifyUnaryInt (i);
            _ => {
                cast!{&Value} (un)
            }
        }        
    }
    
    /**
     * Compute the value of an unary operator on a bool value
     * @params: 
     *    - un: the unary operator to validate
     * @returns: the result value
     * @throws: 
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeUnaryBool (self, un : &UnaryBoolOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let content = self.compute (un.getInner ());
        match un.getOperator () {
            UnaryOperators::NOT => {
                match content {
                    v : &BoolValue => {
                        if (v.isTrue ()) {
                            return BoolValue::new (un.getLoc (), false);
                        } else {
                            return BoolValue::new (un.getLoc (), true);
                        }
                    }
                    _ => throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, un.getType ()));
                }
            }
            _ => __pragma!panic ();
        }
    }
    
    /**
     * Compute the value of an unary operator on an int value
     * @params: 
     *    - un: the unary operator to validate
     * @returns: the result value
     * @throws: 
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeUnaryInt (self, un : &UnaryIntOperatorValue)-> &Value
        throws &ErrorMsg
    {
        match un.getOperator () {
            UnaryOperators::MINUS => {
                let content = self.compute (un.getInner ());
                match content {
                    v : &IntValue => {
                        return IntValue::new (un.getLoc (), un.getType (), BigInt::new (0) - v.getValue ());
                    }
                }
            }
        }
        
        throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, un.getType ()));
    }

    /**
     * Compute an unary operator on a bool value
     */
    def simplifyUnaryBool (self, un : &UnaryBoolOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let content = self.simplify (un.getInner ());
        match un.getOperator () {
            UnaryOperators::NOT => {
                match content {
                    v : &BoolValue => {
                        if (v.isTrue ()) {
                            return BoolValue::new (un.getLoc (), false);
                        } else {
                            return BoolValue::new (un.getLoc (), true);
                        }
                    }
                    _ => {
                        return UnaryBoolOperatorValue::new (un.getLoc (), un.getOperator (), content);
                    }
                }
            }
            _ => __pragma!panic ();
        }
    }


    /**
     * Compute the value of an unary operator on an int value
     * @params: 
     *    - un: the unary operator to validate
     * @returns: the result value
     * @throws: 
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def simplifyUnaryInt (self, un : &UnaryIntOperatorValue)-> &Value
        throws &ErrorMsg
    {
        let content = self.simplify (un.getInner ());
        match un.getOperator () {
            UnaryOperators::MINUS => {
                match content {
                    v : &IntValue => {
                        return IntValue::new (un.getLoc (), un.getType (), BigInt::new (0) - v.getValue ());
                    }
                }
            }
        }
        
        UnaryIntOperatorValue::new (un.getLoc (), un.getOperator (), un.getType (), content)
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================         SLICE ACCESS         =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute a slice access value
     * @params: 
     *   - slc: the value to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeSliceAccess (self, slc : &SliceAccessValue)-> &Value
        throws &ErrorMsg
    {
        let array = self.compute (slc.getSlice ());
        let index = self.compute (slc.getIndex ());
        let u_index = match index {
            i : &IntValue => {
                {
                    i.getValue ().to!usize ()
                } catch {
                    _ => throw ErrorMsg::fatal (i.getLoc (), format (ValidateErrorMessage::OVERFLOW_CAPACITY, IntType::new (i.getLoc (), size-> 0u16, signed-> false), i.getValue (), 12));                    
                }
            }
            _ => {
                throw ErrorMsg::fatal (index.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, index.getType ()));
            }
        };

        let res : &Value = match array {
            a : &ArrayValue => {
                if (a.getInners ().len <= u_index) {
                    throw ErrorMsg::fatal (a.getLoc (), format (ValidateErrorMessage::ARRAY_OVERFLOW, a.getInners ().len, u_index));
                }
                
                a.getInners ()[u_index]
            }
            str : &StringValue => {
                if (str.getLen () <= u_index) {
                    throw ErrorMsg::fatal (str.getLoc (), format (ValidateErrorMessage::ARRAY_OVERFLOW, str.getLen (), u_index));
                }

                let chType = str.getType ().asOf!{&SliceType} ().getInners ()[0];
                let size = chType.asOf!{&CharType} ().getSize ();
                if (size == 8u16) {
                    cast!{&Value} (CharValue::new (slc.getLoc (), chType, c8Val-> str.getUtf8 ()[u_index]))
                } else {
                    cast!{&Value} (CharValue::new (slc.getLoc (), chType, c32Val-> str.getUtf32 ()[u_index]))
                }
            }
            _ => {
                throw ErrorMsg::fatal (array.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, array.getType ()));
            }
        };

        res
    }

    /**
     * Simplify a slice access
     */
    def simplifySliceAccess (self, slc : &SliceAccessValue)-> &Value
        throws &ErrorMsg
    {
        let array = self.simplify (slc.getSlice ());
        let index = self.simplify (slc.getIndex ());
        let u_index = match index {
            i : &IntValue => {
                {
                    i.getValue ().to!usize ()
                } catch {
                    _ => throw ErrorMsg::fatal (i.getLoc (), format (ValidateErrorMessage::OVERFLOW_CAPACITY, IntType::new (i.getLoc (), size-> 0u16, signed-> false), i.getValue (), 12));                    
                }
            }
            _ => {
                return SliceAccessValue::new (slc.getLoc (), slc.getType (), array, index);
            }
        };

        let res : &Value = match array {
            a : &ArrayValue => {
                if (a.getInners ().len <= u_index) {
                    throw ErrorMsg::fatal (a.getLoc (), format (ValidateErrorMessage::ARRAY_OVERFLOW, a.getInners ().len, u_index));
                }
                
                a.getInners ()[u_index]
            }
            str : &StringValue => {
                if (str.getLen () <= u_index) {
                    throw ErrorMsg::fatal (str.getLoc (), format (ValidateErrorMessage::ARRAY_OVERFLOW, str.getLen (), u_index));
                }

                let chType = str.getType ().asOf!{&SliceType} ().getInners ()[0];
                let size = chType.asOf!{&CharType} ().getSize ();
                if (size == 8u16) {
                    cast!{&Value} (CharValue::new (slc.getLoc (), chType, c8Val-> str.getUtf8 ()[u_index]))
                } else {
                    cast!{&Value} (CharValue::new (slc.getLoc (), chType, c32Val-> str.getUtf32 ()[u_index]))
                }
            }
            _ => {
                cast!{&Value} (SliceAccessValue::new (slc.getLoc (), slc.getType (), array, index))
            }
        };

        res
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================         FIELD ACCESS         =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of a struct field access
     * @params:
     *    - acc: the value to compute
     */
    def computeFieldAccess (self, acc : &StructFieldAccessValue)-> &Value
        throws &ErrorMsg
    {
        let inner = self.compute (acc.getStruct ());
        match inner {
            rng : &RangeValue => {
                self.computeFieldAccessRange (rng, acc.getFieldName ())
            }
            slc : &SliceValue => {
                self.computeFieldAccessSlice (slc, acc.getFieldName ())
            }
            _ => {
                throw ErrorMsg::fatal (inner.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, inner.getType ()));   
            }
        }
    }

    /**
     * Simplify a struct field access
     */
    def simplifyFieldAccess (self, acc : &StructFieldAccessValue)-> &Value
        throws &ErrorMsg
    {
        let inner = self.simplify (acc.getStruct ());
        let toSimplify = match inner {
            u : &UniqValue => { u.getValue () }
            _ => inner
        };
        
        match toSimplify {
            rng : &RangeValue => {
                self.computeFieldAccessRange (rng, acc.getFieldName ())
            }
            del : &DelegateValue => {
                self.simplifyFieldAccessDelegate (del, acc.getFieldName ())
            }
            slc : &SliceValue => {
                {
                    self.computeFieldAccessSlice (slc, acc.getFieldName ())
                } catch {
                    _ => {
                        acc
                    }
                }
            }
            _ => {
                cast!{&Value} (StructFieldAccessValue::new (acc.getLoc (), acc.getType (), inner, acc.getFieldName ()))
            }
        }        
    }
    
    /**
     * Compute the value of a struct field access on a range value
     * @params:
     *    - rng: the range value that is accessed
     *    - field: the name of the field being accessed
     */
    def computeFieldAccessRange (self, rng : &RangeValue, field : [c8])-> &Value {
        match field {
            RangeKeys::STEP => {
                rng.getStep ()
            }
            RangeKeys::CONTAIN => {
                rng.getIsFull ()
            }
            RangeKeys::SCD => {
                rng.getRight ()
            }
            RangeKeys::FST => {
                rng.getLeft ()
            }
            _ => {
                __pragma!panic ();
            }            
        }
    }    

    /**
     * Compute the value of a field access on a slice value
     */
    def computeFieldAccessSlice (self, slc : &SliceValue, field: [c8])-> &Value
        throws &ErrorMsg
    {
        println (slc.getInner ());
        match field {
            SliceKeys::LEN => {
                match slc.getInner () {
                    arr : &ArrayValue => {
                        return usize (slc.getLoc (), arr.getLen ());
                    }
                    s : &StringValue => {
                        return usize (slc.getLoc (), s.getLen ());
                    }
                    cp : &CopierValue => {
                        let inner = self.compute (cp.getInnerValue ());
                        match inner {
                            arr : &ArrayValue => {
                                return usize (slc.getLoc (), arr.getLen ());
                            }
                            s : &StringValue => {
                                return usize (slc.getLoc (), s.getLen ());
                            }
                        }
                    }
                }
            }
        }

        throw ErrorMsg::fatal (slc.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, slc.getType ()));   
    }
    
    /**
     * Simplify a field access on a delegate value
     * @params:
     *    - del: the delegate value
     *    - field: the field to access
     */
    def simplifyFieldAccessDelegate (self, del : &DelegateValue, field : [c8])-> &Value
        throws &ErrorMsg
    {
        match field {
            DelegateKeys::CLOSURE => {
                self.simplify (del.getClosure ())
            }
            _ => {
                cast!{&Value} (del)
            }
        }
    }
        
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================      CONDITION / LOOPS       =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute a conditional value
     * @params:
     *   - cd: the value to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeConditional (self, cd : &ConditionalValue)-> &Value
        throws &ErrorMsg
    {
        let test = self.compute (cd.getTest ());
        let isTrue = match test {
            b : &BoolValue => {
                b.isTrue ()
            }
            _ => {
                throw ErrorMsg::fatal (test.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, test.getType ()));
            }
        };

        if (isTrue) {
            self.compute (cd.getContent ())
        } else match cd.getElse () {
            NoneValue () => {
                throw ErrorMsg::fatal (cd.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, cd.getType ()));
            }
            e : _ => {
                self.compute (e)
            }
        }     
    }

    /**
     * Simplify a conditional value
     */
    def simplifyConditional (self, cd : &ConditionalValue)-> &Value
        throws &ErrorMsg
    {
        let test = self.simplify (cd.getTest ());
        match test {
            b : &BoolValue => {
                if (b.isTrue ()) {
                    return self.simplify (cd.getContent ());
                } else {
                    return self.simplify (cd.getElse ());
                }
            }
        }

        let content = self.simplify (cd.getContent ());
        let else_ = self.simplify (cd.getElse ());
        ConditionalValue::new (cd.getLoc (), cd.getType (), test, content, else_, isComplete-> cd.isComplete ())
    }

    
    /**
     * Compute a block value
     * @params:
     *   - bl: the block value to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeBlock (self, block : &BlockValue)-> &Value 
        throws &ErrorMsg
    {
        if (block.getValues ().len > 1us) {
            throw ErrorMsg::warn (block.getLoc (), format (ValidateErrorMessage::CTE_IGNORED, block.getValues ().len - 1us));
        }

        if (block.getValues ().len == 0us) {
            throw ErrorMsg::fatal (block.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, block.getType ()));
        }

        self.compute (block.getValues ()[$ - 1us])
    }

    /**
     * Simplify a block 
     */
    def simplifyBlock (self, block : &BlockValue)-> &Value
        throws &ErrorMsg
    {
        if (block.getValues ().len == 1us) {
            self.simplify (block.getValues ()[0us])
        } else {
            let dmut v = Vec!{&Value}::new ();
            v:.reserve (block.getValues ().len);
            
            for i in 0us .. block.getValues ().len {
                let ret = self.simplify (block.getValues ()[i]);
                match ret {
                    _ : &NoneValue => {}
                    un : &UniqValue => {
                        if i == block.getValues ().len - 1us {
                            v:.push (un);
                        }
                    }
                    ib : &BlockValue => {
                        for inner in ib.getValues () {
                            if (!inner.isOf!{&UnitValue} () && !inner.isOf!{&NoneValue} ()) {
                                v:.push (inner);
                            }
                        }
                    }
                    _ => {
                        v:.push (ret);
                    }
                }
            }

            cast!{&Value} (BlockValue::new (block.getLoc (), block.getType (), v[], breakLoc-> block.getBreakerLoc (), returnLoc-> block.getReturnerLoc (), isSet-> block.isSet ()))
        }
    }

    /**
     * Simplify a loop value
     */
    def simplifyLoopValue (self, l : &LoopValue)-> &Value
        throws &ErrorMsg
    {
        let t = self.simplify (l.getTest ());
        let c = self.simplify (l.getContent ());

        if (l.isCteFor () && t.isOf!{&NoneValue} ()) {
            c
        } else {            
            cast!{&Value} (LoopValue::new (l.getLoc (), l.getType (), t, c, isDo-> l.isDo (), isCteFor-> l.isCteFor ()))
        }                
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             VARS             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute a var ref value
     * @params:
     *   - bl: the value to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeVarRef (self, vref : &VarRefValue)-> &Value 
        throws &ErrorMsg
    {
        match vref.getValue () {
            NoneValue () => {
                throw ErrorMsg::fatal (vref.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, vref.getType ()));
            }
            c : _ => { self.compute (c) }
        }
    }

    /**
     * Simplify the value of a var ref
     */
    def simplifyVarRef (self, vref : &VarRefValue)-> &Value
        throws &ErrorMsg
    {
        match vref.getValue () {
            NoneValue () => {
                cast!{&Value} (vref)
            }
            c : _ => {
                self.simplify (c)
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================         CALL VALUES          =========================
     * ================================================================================
     * ================================================================================
     */

    /**   
     * Simplify a a func ptr call
     */
    def simplifyFuncPtrCall (self, c : &FuncPtrCallValue)-> &Value
        throws &ErrorMsg
    {
        let dmut v = Vec!{&Value}::new ();
        v:.reserve (c.getParameters ().len);
        for p in c.getParameters () {
            v:.push (self.simplify (p));
        }

        let fptr = self.simplify (c.getFuncPtr ());
        match fptr {            
            s : &StructFieldAccessValue => {
                match (s.getStruct (), s.getFieldName ()) {
                    (d : &DelegateValue, DelegateKeys::FUNC) => {
                        return NameCallValue::new (c.getLoc (), c.getType (), d.getName (), v[]);
                    }
                    (u : &UniqValue, DelegateKeys::FUNC) => {
                        if (u.getValue ().isOf!{&DelegateValue} ()) {                            
                            return NameCallValue::new (c.getLoc (), c.getType (),
                                                       u.getValue ().asOf!{&DelegateValue} ().getName (), v[]);
                        }
                    }
                }
            }
        }
        
        FuncPtrCallValue::new (c.getLoc (), c.getType (), fptr, v[])
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================         CALL VALUES          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compute the value of a call value
     * @params:
     *    - cl: the call value to compute
     */
    def computeCallValue (self, cl : &CallValue)-> &Value
        throws &ErrorMsg
    {
        match (cl.getParameters ().len, cl.getPrototype ().getSymbol ()) {
            (0us, func : &FunctionSymbol) => {
                match func.getFrameBody () {
                    v : &Value => {
                        {
                            return self.compute (v);
                        } catch {
                            err : &ErrorMsg => {
                                throw ErrorMsg::fatal (cl.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, cl.getType ()),
                                                       notes-> [err]);
                            }
                        }
                    }
                }
            }
        }
        
        throw ErrorMsg::fatal (cl.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, cl.getType ()));
    }

    /**
     * Simplify the value of a call value
     */
    def simplifyCallValue (self, cl : &CallValue)-> &Value {
        match (cl.getParameters ().len, cl.getPrototype ().getSymbol ()) {
            (0us, func : &FunctionSymbol) => {
                match func.getFrameBody () {
                    v : &Value => {
                        {
                            return self.compute (v);
                        } catch {
                            _ : &ErrorMsg => {}
                        }
                    }
                }
            }
        }

        cl
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================         MISC VALUES          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Simplify a uniq value
     */
    def simplifyUniq (self, un : &UniqValue)-> &Value
        throws &ErrorMsg
    {
        let inner = self.compute (un.getValue ())?;
        match inner {
            Ok (x : _) => { x }
            _ => {
                cast!{&Value} (UniqValue::new (un.getLoc (), self.simplify (un.getValue ())))
            }
        }          
    }

    /**
     * Compute an address operator value
     * @params:
     *   - addr: the value to compute
     * @returns: the result
     * @throws:
     *    - &ErrorMsg: if the value cannot be known at compile time
     */
    def computeAddress (self, addr : &AddressValue)-> &Value
        throws &ErrorMsg
    {
        match (addr.getType (), addr.getInner ()) {
            (FuncPtrType (), PrototypeValue ()) => { // Ok if this is an address to a function 
                addr
            }
            _ => {
                throw ErrorMsg::fatal (addr.getLoc (), format (ValidateErrorMessage::UNKNOWN_AT_COMPILE_TIME, addr.getType ()));
            }
        }
    }

    /**
     * Compute the value of an aliaser
     */
    def computeAliaser (self, al : &AliaserValue)-> &Value
        throws &ErrorMsg
    {
        let inner = self.compute (al.getInnerValue ());
        AliaserValue::new (al.getLoc (),
                           al.getType (),
                           inner)
    }

    /**
     * Compute the value contained in a slice 
     */
    def computeSliceValue (self, al : &SliceValue)-> &Value
        throws &ErrorMsg
    {
        let inner = self.compute (al.getInner ());
        SliceValue::new (al.getLoc (),
                         al.getType (),
                         inner, implicitAlias-> al.isAliaser ())
    }

    /**
     * Simplify an aliaser value
     */
    def simplifyAliaser (self, al : &AliaserValue)-> &Value
        throws &ErrorMsg
    {
        let inner = self.simplify (al.getInnerValue ());
        AliaserValue::new (al.getLoc (),
                           al.getType (),
                           inner)
    }

    /**
     * Simplify a slice value
     */
    def simplifySliceValue (self, al : &SliceValue)-> &Value
        throws &ErrorMsg
    {
        let inner = self.simplify (al.getInner ());
        SliceValue::new (al.getLoc (),
                         al.getType (),
                         inner, implicitAlias-> al.isAliaser ())
    }
    
}
