mod ymirc::semantic::validator::visitor;

import ymirc::semantic::validator::symbol::_;
import ymirc::semantic::validator::operator::_;
import ymirc::semantic::validator::template::_;
import ymirc::semantic::declarator::visitor;
import ymirc::semantic::validator::type;
import ymirc::semantic::validator::value;
import ymirc::semantic::validator::literal;
import ymirc::semantic::validator::errors;
import ymirc::semantic::validator::interpret;
import ymirc::semantic::validator::pragma;

import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;
import ymirc::syntax::keys;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::protection;
import ymirc::errors::_;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::utils::format;
import ymirc::global::core_;

import std::collection::vec;
import std::collection::map;
import std::collection::set;
import std::algorithm::comparison;
import std::io, std::fs::path;


extern (C) def _yrt_exc_get_stack_trace ()-> [&(void)];
extern (C) def _yrt_exc_resolve_stack_trace (trc : [&void])-> [c8];

/**
 * The validator class is the class that transform the declared symbols into validated generators that can be passed to the backend
 */
pub class Validator {

    /// The list of generators to pass to the backend
    let dmut _generated = Vec!{&Generator}::new ();

    /**
     * ================================================================================
     * ================================================================================
     * =========================          DECLARATOR          =========================
     * ================================================================================
     * ================================================================================
     */

    /// The declarator for post semantic symbol declaration
    let dmut _declarator : &Declarator;
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================      SYMBOL VALIDATORS       =========================
     * ================================================================================
     * ================================================================================
     */

    /// The validator that is in charge of aka validation
    let dmut _akaValidator = AkaValidator::new ();

    /// The validator that is in charge of class validation
    let dmut _classValidator = ClassValidator::new ();
    
    /// The validator that is in charge of validating cast expressions
    let dmut _castValidator = CastValidator::new ();
    
    /// The validator that is in charge of validating functions
    let dmut _functionValidator = FunctionValidator::new ();

    /// The validator that is in charge of validating modules
    let dmut _moduleValidator = ModuleValidator::new ();
    
    /// The validator that is in charge of class validation
    let dmut _structValidator = StructValidator::new ();

    /// The validator that is in charge of enum validation
    let dmut _enumValidator = EnumValidator::new ();

    /// The validator that is in charge of template validation
    let dmut _templateSolver = TemplateSolver::new ();

    /// The declarator that is in charge of template rewritting and declaration
    let dmut _templateDeclarator = TemplateDeclarator::new ();

    /// The validator that is in charge of template validation
    let dmut _traitValidator = TraitValidator::new ();

    /// The validator that is in charge of the lambda validation
    let dmut _lambdaValidator = LambdaValidator::new ();

    /// The validator that is in charge of the pragma exprs validation 
    let dmut _pragmaValidator = PragmaValidator::new ();

    /// The validator that is in charge of the validation of global variables
    let dmut _globalValidator = GlobalValidator::new ();

    /**
     * ================================================================================
     * ================================================================================
     * =========================        SUB VALIDATORS        =========================
     * ================================================================================
     * ================================================================================
     */

    /// The validator that is in charge of validating types
    let dmut _typeValidator = TypeValidator::new ();

    /// The validator that is in charge of validating values
    let dmut _valueValidator = ValueValidator::new ();

    /// The validator used to validate binary operators
    let dmut _binOpValidator = BinaryOpValidator::new ();

    /// The validator used to validate unary operators
    let dmut _unOpValidator = UnaryOpValidator::new ();

    /// The validator used to validate call operators
    let dmut _callOpValidator = CallOpValidator::new ();

    /// The validator used to validate index operators
    let dmut _indexOpValidator = IndexOpValidator::new ();

    /// The validator used to validate literals
    let dmut _literalValidator = LiteralValidator::new ();

    /// The intepreter used to compute cte values
    let dmut _compileTimeInterpreter = CompileTimeInterpreter::new ();

    /// The validator used to validate for loops
    let dmut _forLoopValidator = ForLoopValidator::new ();

    /// The validator used to validate '::' operation where left operand is a type
    let dmut _subTypeValidator = SubTypeValidator::new ();

    /// The validator used to validate match expressions
    let dmut _matcherValidator = MatcherValidator::new ();
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CONTEXT            =========================
     * ================================================================================
     * ================================================================================
     */

    /// The referent are used when accessing symbols
    let dmut _referent = Vec!{dmut &Symbol}::new ();
    
    /// The current scope variable declarations
    let dmut _symbols = Vec!{dmut &Vec!{dmut &HashMap!{[c8], &Value}}}::new ();

    /// The list of symbols that are used in the current block
    let dmut _usedSyms = Vec!{dmut &Vec!{dmut &HashSet!{[c8]}}}::new ();

    /// The current return type of the current function
    let dmut _functionReturns = Vec!{&Type}::new ();

    /// True iif we are currently validating a lambda body
    let dmut _inLambda = Vec!{bool}::new ();

    /// True iif we are currently validating a function body (can be a lambda)
    let dmut _inFunctionBody = Vec!{bool}::new ();
    
    /// The current type of the breaks for the current loop
    let dmut _loopBreakTypes = Vec!{dmut &Vec!{&Type}}::new ();

    /// The current closure type
    let dmut _closureType = Vec!{dmut &ClosureType}::new ();

    /// The current type whose fields are being validated
    let dmut _fieldConstructionTypes = Vec!{&Type}::new ();

    /// The list of fields that have been validated during the pre construction
    let dmut _fieldConstructionValidated = Vec!{dmut &HashSet!{[c8]}}::new ();

    /// The class that is being validated (methods, constructors, etc.)
    let dmut _classContext = Vec!{&Type}::new ();

    /// The current value that is being indexed for opDollar
    let dmut _dollarContext = Vec!{dmut &Vec!{&Value}}::new ();

    /**
     * ================================================================================
     * ================================================================================
     * =========================        VERIFICATIONS         =========================
     * ================================================================================
     * ================================================================================
     */

    /// The native type names
    let dmut _nativeTypeNames = HashSet!{[c8]}::new ();    

    /**
     * ================================================================================
     * ================================================================================
     * =========================         CONSTRUCTION         =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * Create a new empty validator
     */
    pub self (dmut declarator : &Declarator)
        with _declarator = alias declarator
    {        
        for t in NativeTypes::__members__ {
            self._nativeTypeNames:.insert (t);
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          VALIDATION          =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * Validate a symbol
     * @params: 
     *   - sym: the symbol to validate
     * @throws: 
     *   - &ErrorMsg: if there was an error in the validation
     */
    pub def validate (mut self, dmut sym : &Symbol)
        throws &ErrorMsg
    {
        match ref sym {
            dmut m : &ModuleSymbol => {
                self._moduleValidator:.validate (alias self, alias m);
            }
            dmut f : &FunctionSymbol => {
                self._functionValidator:.validate (alias self, alias f);
            }
            dmut c : &ClassSymbol => {
                self._classValidator:.validate (alias self, alias c, inModule-> true);
            }
            dmut tr : &TraitSymbol => {
                self._traitValidator:.validate (alias self, alias tr);
            }
            dmut en : &EnumSymbol => {
                self._enumValidator:.validate (alias self, alias en);
            }
            dmut glb : &GlobalSymbol => {
                self._globalValidator:.validate (alias self, alias glb);
            }
            EmptySymbol () => {
                // Just do nothing 
            }
            TemplateSymbol () => {
                // TODO, verify that the symbols can be infered without any call, and if yes then validate it
            }
            _ => {
                println ("TODO : ", sym::typeinfo.name);
                __pragma!panic ();
            }                
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================            TYPES             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate an expression assuming its a type
     * @params: 
     *    - type: the expression to validate
     * @returns: the generator
     * @throws: &ErrorMsg, if the type is not valid
     */
    pub def validateType (mut self, type : &Expression)-> &Type
        throws &ErrorMsg
    {
        self._typeValidator:.validate (alias self, type)
    }


    /**
     * Validate an expression assuming its a type
     * @params: 
     *    - type: the expression to validate
     *    - decos: the additional decoration of the type (basically the decorations of a vardecl)
     * @returns: the generator of the type
     * @throws: &ErrorMsg, if the type is not valid
     */
    pub def validateType (mut self, type : &Expression, decos : [DecoratorWord], canBeRef : bool = false)-> (bool, &Type)
        throws &ErrorMsg
    {
        let dmut found = HashMap!{Decorators, &Word}::new ();
        let dmut antiAffs = hmap #[
            Decorators::PURE => hset #{Decorators::MUT, Decorators::CONST, Decorators::DMUT, Decorators::REF},
            Decorators::MUT  => hset #{Decorators::CONST, Decorators::DMUT, Decorators::PURE},
            Decorators::DMUT  => hset #{Decorators::CONST, Decorators::MUT, Decorators::PURE},
            Decorators::CONST  => hset #{Decorators::PURE, Decorators::MUT, Decorators::DMUT},
            Decorators::REF => hset #{Decorators::PURE}
        ];
        
        for i in decos {      
            if (i.deco == Decorators::REF && !canBeRef) {
                throw ErrorMsg::fatal (i.loc, format (ValidateErrorMessage::UNDEF_DECORATOR_TYPE, Decorators::REF));
            }
            
            match found.find (i.deco) {
                Ok (l : _) => throw ErrorMsg::warn (i.loc, format (ValidateErrorMessage::MULTIPLE_DECORATORS, i.deco), notes-> [ErrorMsg::note (l, ""s8)]);
            }

            match antiAffs.find (i.deco) {
                Ok (an : _) => {
                    for j in an {
                        match found.find (j) {
                            Ok (l : _) => throw ErrorMsg::fatal (i.loc, format (ValidateErrorMessage::CONFLIT_DECORATORS, j, i.deco), notes-> [ErrorMsg::note (l, ""s8)]);
                        }
                    }
                }
                Err () => {
                    throw ErrorMsg::fatal (i.loc, format (ValidateErrorMessage::UNDEF_DECORATOR_TYPE, i.deco));
                }
            }
            
            found:.insert (i.deco, i.loc);
        }
        
        let (isMutable, isDeeplyMutable, isRef) = (Decorators::MUT in found, Decorators::DMUT in found, Decorators::REF in found);
        
        (isRef, self._typeValidator:.validate (alias self, type, isMutable-> (isMutable || isDeeplyMutable), parentMutable-> (isMutable || isDeeplyMutable), isDeeplyMutable-> isDeeplyMutable))
    }


    /**
     * @params: 
     *    - decos: a list of decorated word (for example those of a var decl)
     *    - toFind: a list of decorators to check
     * @returns: true if one of the `toFind` can be found in `decos`
     * @warning: does not check integrity of the `decos` set
     * @example: 
     * ======================
     * let isPure = self.findDecos ([DecoratorWord (Word::eof (), Decorators::PURE)], [Decorators::PURE]);
     * let isMutable = self.findDecos ([DecoratorWord (Word::eof (), Decorators::PURE)], [Decorators::MUT, Decorators::DMUT]);
     * 
     * assert (isPure && !isMutable)
     * ======================
     */
    pub def findDecos (self, decos : [DecoratorWord], toFind : [Decorators])-> bool {
        for i in decos {
            for j in toFind {
                if (i.deco == j) return true;
            }
        }

        false
    }
    

    /**
     * ================================================================================
     * ================================================================================
     * =========================            VALUES            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate an expression assuming its a value
     * @params: 
     *    - value: the expression to validate
     * @returns: the generator
     * @throws: &ErrorMsg, if the value is not valid
     */
    pub def validateValue (mut self, value : &Expression)-> &Value
        throws &ErrorMsg
    {
        self._valueValidator:.validate (alias self, value)
    }


    /**
     * Validate an expression assuming its a value
     * @params: 
     *    - loc: the location of the affection
     *    - value: the expression to validate
     *    - type: the expected type (and mutability)
     * @returns: the generator
     * @throws: &ErrorMsg, if the value is not valid, or cannot be put in type
     */
    pub def validateValue (mut self, loc : &Word, value : &Expression, type : &Type, verif : bool = true)-> &Value
        throws &ErrorMsg
    {
        let v = self._valueValidator:.validate (alias self, value, type-> type);
        if (verif) {
            self:.verifyCompatibleTypeWithValue (loc, type, v);
            self:.verifyMemoryOwner (loc, type, v, byReference-> false);
        }

        v
    }

    /**
     * Validate cte expressions (e.g. cte if, cte assert, ...) or expressions that must be known at compilation time
     * @params: 
     *   - value: the value to validate
     * @returns: the result value
     * @throws:
     *   - &ErrorMsg: if the validation failed, or the value cannot be known at compilation time
     */
    pub def validateCteValue (mut self, value : &Expression)-> &Value
        throws &ErrorMsg
    {
        value;
        __pragma!fake_throw (&ErrorMsg);
        __pragma!panic ();
    }    

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the declarator for symbol declaration
     */
    pub def getDeclarator (mut self)-> dmut &Declarator {
        alias self._declarator
    }
    
    /**
     * @returns: the validator for binary operations
     */
    pub def getBinOpValidator (mut self)-> dmut &BinaryOpValidator {
        alias self._binOpValidator
    }

    /**
     * @returns: the validator for unary operations
     */
    pub def getUnOpValidator (mut self)-> dmut &UnaryOpValidator {
        alias self._unOpValidator
    }

    /**
     * @returns: the validator for call operators
     */
    pub def getCallOpValidator (mut self)-> dmut &CallOpValidator {
        alias self._callOpValidator
    }

    /**
     * @returns: the validator for cast expressions
     */
    pub def getCastValidator (mut self)-> dmut &CastValidator {
        alias self._castValidator
    }

    /**
     * @returns: the validator for index operators
     */
    pub def getIndexOpValidator (mut self)-> dmut &IndexOpValidator {
        alias self._indexOpValidator
    }

    /**
     * @returns: the validator for literals
     */
    pub def getLiteralValidator (mut self)-> dmut &LiteralValidator {
        alias self._literalValidator
    }

    /**
     * @returns: the validator for any kind of values
     */
    pub def getValueValidator (mut self)-> dmut &ValueValidator {
        alias self._valueValidator
    }

    /**
     * @returns: the validator of sub type access ('::' on type left operand)
     */
    pub def getSubTypeValidator (mut self)-> dmut &SubTypeValidator {
        alias self._subTypeValidator
    }
    
    /**
     * @returns: the validator for akas
     */
    pub def getAkaValidator (mut self)-> dmut &AkaValidator {
        alias self._akaValidator
    }

    /**
     * @returns: the validator for classes
     */
    pub def getClassValidator (mut self)-> dmut &ClassValidator {
        alias self._classValidator
    }
    
    /**
     * @returns: the validator for functions
     */
    pub def getFunctionValidator (mut self)-> dmut &FunctionValidator {
        alias self._functionValidator
    }

    /**
     * @returns: the validator for modules
     */
    pub def getModuleValidator (mut self)-> dmut &ModuleValidator {
        alias self._moduleValidator
    }

    /**
     * @returns: the validator for struct
     */
    pub def getStructValidator (mut self)-> dmut &StructValidator {
        alias self._structValidator
    }

    /**
     * @returns: the validator for templates
     */
    pub def getTemplateSolver (mut self)-> dmut &TemplateSolver {
        alias self._templateSolver
    }

    /**
     * @returns: the declarator for templates 
     */
    pub def getTemplateDeclarator (mut self)-> dmut &TemplateDeclarator {
        alias self._templateDeclarator
    }
    
    /**
     * @returns: the validator for traits
     */
    pub def getTraitValidator (mut self)-> dmut &TraitValidator {
        alias self._traitValidator
    }

    /**
     * @returns: the validator for enums
     */
    pub def getEnumValidator (mut self)-> dmut &EnumValidator {
        alias self._enumValidator
    }
    
    /**
     * @returns: the validator for lambdas
     */
    pub def getLambdaValidator (mut self)-> dmut &LambdaValidator {
        alias self._lambdaValidator
    }

    /**
     * @returns: the validator for pragmas
     */
    pub def getPragmaValidator (mut self)-> dmut &PragmaValidator {
        alias self._pragmaValidator
    }
    
    /**
     * @returns: the interpreter that can compute cte values
     */
    pub def getCompileTimeInterpreter (mut self)-> dmut &CompileTimeInterpreter {
        alias self._compileTimeInterpreter
    }

    /**
     * @returns: the for loop validator
     */
    pub def getForLoopValidator (mut self)-> dmut &ForLoopValidator {
        alias self._forLoopValidator
    }

    /**
     * @returns: the matcher expression validator
     */
    pub def getMatcherValidator (mut self)-> dmut &MatcherValidator {
        alias self._matcherValidator
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CONTEXT            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Push a new referent 
     * @params: 
     *   - sym: the symbol that will be used for future symbol access
     */
    pub def pushReferent (mut self, dmut sym : &Symbol) {
        self._referent:.push (alias sym);
    }

    /**
     * Exit the current referent
     */
    pub def popReferent (mut self) {
        self._referent:.pop (1u64);
    }


    /**
     * @returns: the current referent
     */
    pub def getReferent (mut self)-> dmut &Symbol {
        return alias (alias self._referent)[self._referent.len () - 1us];
    } catch {
        _ : &OutOfArray => __pragma!panic ();
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================       LOCAL VARIABLES        =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Enter a new foreign scope space
     * @params: 
     *   - isLambda: true iif the foreign that will be validated is lambda function (closure or not)
     *   - isFnBody: true iif the foreign we just entered is for validating a function body
     *   - clContext: type of the class whose symbol is being validated (applicable for symbol defined inside classes, e.g. methods, ctors)
     */
    pub def enterForeign (mut self, isLambda : bool = false, isFnBody : bool, clContext : &Type = NONE_TYPE) {
        self._symbols:.push (Vec!{dmut &HashMap!{[c8], &Value}}::new ());
        self._usedSyms:.push (Vec!{dmut &HashSet!{[c8]}}::new ());
        self._functionReturns:.push (NoneType::new (loc-> EOF_WORD));
        self._inLambda:.push (isLambda);
        self._inFunctionBody:.push (isFnBody);
        self._loopBreakTypes:.push (Vec!{&Type}::new ());
        self._fieldConstructionTypes:.push (NONE_TYPE);
        self._fieldConstructionValidated:.push (HashSet!{[c8]}::new ());
        self._classContext:.push (clContext);
        self._dollarContext:.push (Vec!{&Value}::new ());
    }

    /**
     * Exit a foreign scope space
     */
    pub def exitForeign (mut self) {
        self._symbols:.pop (1u64);
        self._usedSyms:.pop (1u64);
        self._functionReturns:.pop (1u64);
        self._loopBreakTypes:.pop (1u64);
        self._inLambda:.pop (1u64);
        self._inFunctionBody:.pop (1u64);
        self._fieldConstructionValidated:.pop (1u64);
        self._fieldConstructionTypes:.pop (1u64);
        self._classContext:.pop (1u64);
        self._dollarContext:.pop (1u64);
    }
    
    /**
     * After entering a foreign with isFnBody-> false, we can change the context with this function 
     * This allows to avoid exiting foreign, and reentering it just after
     * @info: this does not have to be exited
     * @example: 
     * ==================
     * enterForeign (isFnBody-> false); // <-    
     * // Validate prototype                | 
     * enterFunctionBody (); //             |
     * // Validate function body            |
     * exitForeign (); // ------------------+
     * ==================
     */
    pub def enterFunctionBody (mut self) {
        __pragma!trusted ({
            (alias self._inFunctionBody) [self._inFunctionBody.len () - 1us] = true;
        });
    }

    /**
     * @returns: true iif the context is currently in validation of a function body (or lambda)
     */
    pub def isInFunctionBody (self)-> bool {
        __pragma!trusted ({
            if (self._inFunctionBody.len () != 0us) {
                self._inFunctionBody [self._inFunctionBody.len () - 1us]
            } else {
                false
            }
        })
    }

    /**
     * @returns: true iif the context is currently in validation of a lambda body
     */
    pub def isInLambdaBody (self)-> bool {
        __pragma!trusted ({
            if (self._inLambda.len () != 0us) {
                self._inLambda [self._inLambda.len () - 1us]
            } else {
                false
            }
        })
    }
    
    /**
     * @returns: the index of the foreign that would be enclosed if a lambda closure was created in current context
     */
    pub def getCurrentClosingIndex (self)-> usize {
        self._symbols.len () - 1us
    }

    /**
     * @returns: the class being validated (might be NONE_TYPE)
     */
    pub def getCurrentClassContext (self)-> &Type {
        if (self._classContext.len () == 0us) return NONE_TYPE;
        __pragma!trusted ({
            self._classContext [self._classContext.len () - 1us]
        })
    }

    /**
     * @params: 
     *    - clRef: the type whose element we want to access
     * @returns: 
     *    - .0: true if the current context allows to access the private elements of clRef type
     *    - .1: true if the current context allows to access the protected elements of clRef type
     */
    pub def getCurrentClassContextProtections (self, clRef : &ClassRefType)-> (bool, bool) {
        let mut current = self.getCurrentClassContext (); 
        match current {
            cl : &ClassRefType => {
                if (cl == clRef) return (true, true); // We are in the class definition (a method, a ctor, etc.)
                
                current = cl.getAncestor (); // Maybe we are in the class definition of a child class
                loop { 
                    match current {
                        anc : &ClassRefType => {
                            if (anc == clRef) return (false, true); // This is a child class, so we have access to protected content
                            current = anc.getAncestor ();
                        }
                        _ => { return (false, false); } // No, this is not a child class, we are outside
                    }                
                }                
            }
        }

        (false, false)
    }
    
    /**
     * Enter a closure, that can enclose variable from the parent function
     * @params: 
     *   - refId: the uniq id of the declaration of the enclosing variable in the parent function
     *   - closureIndex: the index of the closure (index of the foreign to enclose)
     */
    pub def enterClosure (mut self, loc : &Word, refId : usize, closureIndex : usize) {
        (alias (alias self._symbols)[self._symbols.len () - 1us])[0us]:.insert ("#{CLOSURE-VARREF}"s8, VarRefValue::new (Word::new ("#{CLOSURE-VARREF}"s8, loc), EOF_WORD, VoidType::new (EOF_WORD), false, refId, isReference-> false));
        (alias (alias self._usedSyms)[self._usedSyms.len () - 1us])[0us]:.insert ("#{CLOSURE-VARREF}"s8);
        
        self._closureType:.push (ClosureType::new (EOF_WORD, [], [], [], refId, (alias self._symbols)[closureIndex], alias (alias self._usedSyms)[closureIndex]));
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * Exit the current closure validation
     * @returns: the closure type
     */
    pub def exitClosure (mut self) -> &Type {
        let type = self._closureType[self._closureType.len () - 1us];
        
        self._closureType:.pop ();
        
        type
    } catch {
        _ => __pragma!panic ();
    }
    
    /**
     * Set the type of the current function
     */
    pub def setFunctionReturn (mut self, type : &Type) {
        (alias self._functionReturns)[self._functionReturns.len () - 1us] = type;        
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * @returns: the current function return type
     */
    pub def getFunctionReturn (self)-> &Type {
        self._functionReturns[][$ - 1us]
    }

    /**
     * Enter a dollar context (opDollar is available on 'value')
     * @params:
     *    - value: the value being indexed
     */
    pub def enterDollar (mut self, value : &Value) {
        ((alias self._dollarContext)[self._dollarContext.len () - 1us]):.push (value);
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * Quit a dollar context (opDollar is no longer usable on the last dollar context entered)
     */
    pub def exitDollar (mut self) {
        ((alias self._dollarContext)[self._dollarContext.len () - 1us]):.pop (1u64);
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * @returns: the value being indexed that can be used for opDollar
     */
    pub def getCurrentDollarContext (self)-> (&Value)? {
        let v = self._dollarContext [self._dollarContext.len () - 1us];
        match v.len () {
            0us => { ((&Value)?)::__err__ }
            _ => {
                (v [$ - 1us])?
            }
        }
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * Enter a new scope
     */
    pub def enterBlock (mut self) {
        (alias self._symbols)[][$ - 1us]:.push (HashMap!{[c8], &Value}::new ());
        (alias self._usedSyms)[][$ - 1us]:.push (HashSet!{[c8]}::new ());
    }

    /**
     * Exit a scope
     * @throws: 
     *   - &ErrorMsg: if a symbol was declared but unused and warnUnused
     */
    pub def safeQuitBlock (mut self) {
        (alias self._symbols)[][$ - 1us]:.pop (1u64);
        (alias self._usedSyms)[][$ - 1us]:.pop (1u64);
    }
    
    /**
     * Exit a scope
     * @throws: 
     *   - &ErrorMsg: if a symbol was declared but unused and warnUnused
     */
    pub def quitBlock (mut self, warnUnused : bool = true)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        if (warnUnused) {
            for name, g in self._symbols[][$ - 1us][][$ - 1us] {
                if (name != Keys::SELF) { // SELF does not need to be used
                    if (name !in self._usedSyms[][$ - 1us][][$ - 1us]) {
                        errors:.push (ErrorMsg::warn (g.getLoc (), format (ValidateErrorMessage::DECLARED_NOT_USED, name)));
                    }
                }
            }
        }
        
        (alias self._symbols)[][$ - 1us]:.pop (1u64);
        (alias self._usedSyms)[][$ - 1us]:.pop (1u64);

        if errors.len () != 0us {
            throw ErrorMsg::list (errors[]);
        }
    }

    /**
     * Enter a new loop
     * @params: 
     *    - type: the type of the breaks
     */
    pub def enterLoop (mut self, type : &Type = NoneType::new (EOF_WORD)) {
        __pragma!trusted ({
            (alias self._loopBreakTypes)[self._loopBreakTypes.len () - 1us]:.push (type);
        });
    }

    /**
     * Set the type of the break types
     * @params: 
     *    - type: the type to set for the breaks
     */
    pub def setCurrentLoopType (mut self, type : &Type) {
        __pragma!trusted ({
            let dmut v = alias (alias self._loopBreakTypes)[self._loopBreakTypes.len () - 1us];
            (alias v)[v.len () - 1us] = type;
        });
    }

    /**
     * @returns: the type of the current loop breaks
     */
    pub def getCurrentLoopType (self)-> &Type {
        self._loopBreakTypes[][$ - 1us][][$ - 1us]
    }

    /**
     * Quit the loop scope
     * @returns: the type of the breaks inside the closing loop
     */
    pub def quitLoop (mut self)-> &Type {
        let ret = self._loopBreakTypes[][$ - 1us][][$ - 1us];
        __pragma!trusted ({(alias self._loopBreakTypes)[][$ - 1us]:.pop ();});
        ret
    }

    /**
     * @returns: true if the context is actually validating a loop in the current validated function scope
     */
    pub def isInLoop (self)-> bool {
        self._loopBreakTypes[][$ - 1us].len () != 0us
    }

    /**
     * Enter the validation of a pre constructor during field validation
     * @params: 
     *    - type: the type whose field are being validated
     */
    pub def enterFieldConstruction (mut self, type : &ClassRefType) {
        __pragma!trusted ({
            (alias self._fieldConstructionTypes)[self._fieldConstructionTypes.len () - 1us] = type;
            __version DEBUG {
                // we didn't enter a new foreign apparently
                assert (self._fieldConstructionValidated[self._fieldConstructionValidated.len () - 1us].len () == 0us);
            }
        })
    }

    /**
     * @returns: the list of fields that have been validated during pre validation
     */
    pub def getFieldValidated (self)-> &HashSet!{[c8]} {
        __pragma!trusted ({
            self._fieldConstructionValidated[self._fieldConstructionValidated.len () - 1us]
        })
    }

    /**
     * Insert a field inside the list of validated field
     * @params: 
     *   - field: the name of the field that have been validated and then is usable
     */
    pub def setFieldValidated (mut self, field : [c8]) {
        __pragma!trusted ({
            (alias self._fieldConstructionValidated)[self._fieldConstructionValidated.len () - 1us]:.insert (field);
        })
    }

    /**
     * @returns: true iif we are currently validating the fields in a pre construction of a ctor of a class
     */
    pub def isInFieldConstruction (self)-> bool {
        if (self._fieldConstructionTypes.len () == 0us) return false;
        __pragma!trusted ({
            match self._fieldConstructionTypes[self._fieldConstructionTypes.len () - 1us] {
                NoneType () => { false }
                _ => { true }
            }
        })
    }

    /**
     * @returns: the type whose fields are being constructed (might be NONE_TYPE)
     */
    pub def getFieldConstructionType (self)-> &Type {
        if (self._fieldConstructionTypes.len () == 0us) return NONE_TYPE;
        __pragma!trusted ({
            self._fieldConstructionTypes[self._fieldConstructionTypes.len () - 1us]            
        })
    }
    
    /**
     * Quit the pre validation of fields 
     */
    pub def quitFieldConstruction (mut self) {
        __pragma!trusted ({
            (alias self._fieldConstructionValidated)[self._fieldConstructionValidated.len () - 1us]:.clear ();
            (alias self._fieldConstructionTypes)[self._fieldConstructionTypes.len () - 1us] = NONE_TYPE;
        });
    }
    
    /**
     * Insert a new variable in the current block
     * @params: 
     *    - name: the name of the variable
     *    - val: the declaration of the variable
     */
    pub def insertLocal (mut self, name : [c8], val : &Value) {
        (alias ((alias self._symbols)[][$ - 1us]))[][$ - 1us]:.insert (name, val);
    }

    /**
     * Clear the current scope
     */
    pub def clearLocalScope (mut self) {
        (alias ((alias self._symbols)[][$ - 1us]))[][$ - 1us]:.clear ();
    }

    /**
     * Search the definition of a local variable
     * @params: 
     *   - name: the name of the variable to search
     *   - canBeInClosure: if the variable can be a variable from the parent of a closure
     * @returns: the generator of the variable or NoneValue
     */
    pub def getLocal (mut self, loc : &Word, name : [c8], canBeInClosure : bool = true)-> &Value
        throws &ErrorMsg
    {
        for i in 0us .. self._symbols [][$ - 1us].len () {
            let ptr = self._symbols[][$ - 1us][][i].find (name);
            match ptr {
                Ok (g : &Value) => {
                    (alias ((alias self._usedSyms)[][$ - 1us])[][i]):.insert (name);
                    return g;
                }
            }
        }

        if (canBeInClosure) {
            return self:.getInClosure (loc, name);
        } else {
            return NoneValue::new ();
        }
    }

    /**
     * Search the definition of a local variable 
     * @warning: use only for shadowing verification, it does not update used variable infos
     * @params: 
     *   - name: the name of the variable to search
     *   - canBeInClosure: if the variable can be a variable from the parent of a closure
     * @returns: the generator of the variable or NoneValue
     */
    def getLocalNoUse (self, name : [c8])-> &Value {
        for i in 0us .. self._symbols [][$ - 1us].len () {
            let ptr = self._symbols[][$ - 1us][][i].find (name);
            match ptr {
                Ok (g : _) => {
                    return g;
                }
            }
        }

        NoneValue::new ()        
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        GLOBAL SYMBOLS        =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Search all the global symbols whose name are name
     * @params: 
     *   - name: the name of the symbols to get
     * @returns: the list of symbols whose name are name, and are accessible from the current context
     */
    pub def getGlobal (mut self, name : [c8])-> dmut [&Symbol] {
        if (self._referent.len () == 0us) return [];
        let dmut res = (alias self._referent) [self._referent.len () - 1us]:.getSymbols (name);
        return (alias res)[];
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * Search all the global symbols whose name are close to `name`, with a distance of `distance`
     * @params: 
     *   - name: the name of the symbols to get
     *   - distance: the distance of the name of the symbol to `name`
     * @returns: the list of symbols whose name are close to `name` (only public ones)
     */
    pub def getCloseGlobal (self, name : [c8], distance : usize = 2us)-> [&Symbol] {
        if (self._referent.len () == 0us) return [];
        let res = ( self._referent) [self._referent.len () - 1us].getCloseSymbols (name, distance);
        return res[];
    } catch {
        _ => __pragma!panic ();
    }    

    /**
     * Search all the global symbols whose name are name
     * @params: 
     *   - name: the name of the symbols to get
     * @returns: the list of symbols whose name are name, even if they are not accessible from the current context (protection)
     */
    pub def getGlobalPrivate (mut self, name : [c8])-> dmut [&Symbol] {
        if (self._referent.len () == 0us) return [];
        let dmut res = (alias self._referent) [self._referent.len () - 1us]:.getSymbols (name, protection-> Protection::PRIVATE);
        return (alias res)[];
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * @returns: the mutable version of the module registered in the module ref
     * @panic: if the module ref points to an invalid module
     */
    pub def getModuleFromRef (mut self, module : &ModuleRefValue)-> dmut &Symbol {
        alias self._declarator:.getMutableSymbol (module.getSymbol ())
    }

    /**
     * @returns: the mutable version of the symbol 
     * @panic: if the symbol is invalid, and was not declared by the current context
     */
    pub def getClassFromRef (mut self, sym : &ClassSymbol)-> dmut &Symbol {
        alias self._declarator:.getMutableSymbol (sym)
    }

    /**
     * @returns: the mutable version of the symbol 
     * @panic: if the symbol is invalid, and was not declared by the current context
     */
    pub def getSymbolFromRef (mut self, sym : &Symbol)-> dmut &Symbol {
        alias self._declarator:.getMutableSymbol (sym)
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          INFERENCE           =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Infer the type from two branch that must lead to a common type 
     * @info: by setting none to oldType, only the type of val will be used
     * @params: 
     *   - loc: the location of the branching
     *   - oldType: the type of the other branch
     *   - val: the value of the current branch
     * @returns: the type that is common to oldType and val.getType (), without explicit cast needed
     * @throws:
     *   - &ErrorMsg: if there is no common type possible
     */
    pub def inferTypeBranchingWithValue (self, loc : &Word, oldType : &Type, val : &Value)-> &Type
        throws &ErrorMsg
    {
        let ret = self.inferTypeBranching (loc, val.getLoc (), oldType, val.getType ());
        {
            // Trying to implicit alias the type
            self.verifyMemoryOwner (loc, ret, val, checkTypes-> true, byReference-> false);
            ret
        } catch {
            ErrorMsg () => {  // if it didn't succeed, then return an imutable version of the type
                return ret.clone (isMutable-> false);
            }
        }
    }

    /**
     * Infer the type from two branch that must lead to a common type 
     * @info: by setting none to oldType, only the type of val will be used
     * @params: 
     *   - lloc: the location of the left branch
     *   - rloc: the location of the right branch
     *   - left: the type of the left branch
     *   - right: the type of the right branch
     * @returns: the type that is common to oldType and val.getType (), without explicit cast needed
     * @throws:
     *   - &ErrorMsg: if there is no common type possible
     */
    def inferTypeBranching (self, lloc : &Word, rloc : &Word, left : &Type, right : &Type)-> &Type
        throws &ErrorMsg
    {
        if (left.isOf!{&NoneType} ()) return right;
        
        if (left == right) {
            if (left.mutabilityLevel () < right.mutabilityLevel ()) return left;
            else return right;
        }
        
        match (left, right) {
            (slc : &SliceType, rslc : &SliceType) => {
                return self.inferTypeBranchingSlices (lloc, rloc, slc, rslc);
            }
            (lp : &ClassPtrType, rp : &ClassPtrType) => {
                return self.inferTypeBranchingClass (lloc, rloc, lp, rp);
            }
            (ltp : &TupleType, rtp : &TupleType) => {
                return self.inferTypeBranchingTuple (lloc, rloc, ltp, rtp);
            }            
        }

        throw ErrorMsg::fatal (lloc, end-> rloc, format (ValidateErrorMessage::INCOMPATIBLE_TYPE, left, right));
    }

    /**
     * Infer the type from two branch that must lead to a common type , where left and right types are slice types but not equal
     * @params: 
     *   - lloc: the location of the left branch
     *   - rloc: the location of the right branch
     *   - left: the type of the left branch
     *   - right: the type of the right branch
     * @returns: the type that is common to oldType and val.getType (), without explicit cast needed
     * @throws:
     *   - &ErrorMsg: if there is no common type possible
     */
    def inferTypeBranchingSlices (self, lloc : &Word, rloc : &Word, left : &SliceType, right : &SliceType)-> &Type
        throws &ErrorMsg
    {
        if (left.getInners ()[0].isOf!{&VoidType} ()) return right;
        if (right.getInners ()[0].isOf!{&VoidType} ()) return left;
        
        let inner = {
            self.inferTypeBranching (lloc, rloc, left.getInners ()[0], right.getInners ()[0])
        } catch {
            ErrorMsg () => {
                throw ErrorMsg::fatal (lloc, end-> rloc, format (ValidateErrorMessage::INCOMPATIBLE_TYPE, left, right));
            }
        }
        
        SliceType::new (lloc, inner, isMutable-> left.isMutable () && right.isMutable ())
    }

    /**
     * Infer the type from two branch that must lead to a common type , where left and right types are class ptr types but not equal
     * @params: 
     *   - lloc: the location of the left branch
     *   - rloc: the location of the right branch
     *   - left: the type of the left branch
     *   - right: the type of the right branch
     * @returns: the type that is common to oldType and val.getType (), without explicit cast needed
     * @throws:
     *   - &ErrorMsg: if there is no common type possible
     */
    def inferTypeBranchingClass (self, lloc : &Word, rloc : &Word, left : &ClassPtrType, right : &ClassPtrType)-> &Type
        throws &ErrorMsg
    {
        if (self.isAncestor (left, right)) return left.clone (mutLevel-> min (left.mutabilityLevel (), right.mutabilityLevel ()));
        if (self.isAncestor (right, left)) return right.clone (mutLevel-> min (left.mutabilityLevel (), right.mutabilityLevel ()));

        match self.getCommonAncestor (lloc, left, right) {
            c : &ClassPtrType => return c.clone (mutLevel-> min (left.mutabilityLevel (), right.mutabilityLevel ()));
            _ => {
                throw ErrorMsg::fatal (lloc, end-> rloc, format (ValidateErrorMessage::INCOMPATIBLE_TYPE, left, right));
            }
        }        
    }

    /**    
     * Infer the type from two branch that must lead to a common type , where left and right types are tuple types but not equal
     * @params: 
     *   - lloc: the location of the left branch
     *   - rloc: the location of the right branch
     *   - left: the type of the left branch
     *   - right: the type of the right branch
     * @returns: the type that is common to oldType and val.getType (), without explicit cast needed
     * @throws:
     *   - &ErrorMsg: if there is no common type possible
     */
    def inferTypeBranchingTuple (self, lloc : &Word, rloc : &Word, left : &TupleType, right : &TupleType)-> &Type
        throws &ErrorMsg
    {
        if (left.getInners ().len != right.getInners ().len ) {
            throw ErrorMsg::fatal (lloc, end-> rloc, format (ValidateErrorMessage::INCOMPATIBLE_TYPE, left, right));   
        }

        let dmut inners = Vec!{&Type}::new ();
        {
            for i in 0us .. left.getInners ().len {
                inners:.push (self.inferTypeBranching (lloc, rloc, left.getInners ()[i], right.getInners ()[i]));
            }
        } catch {
            ErrorMsg () => {
                throw ErrorMsg::fatal (lloc, end-> rloc, format (ValidateErrorMessage::INCOMPATIBLE_TYPE, left, right));
            }
        }
                
        TupleType::new (lloc, inners[], isMutable-> left.isMutable () && right.isMutable ())
    }
        
    /**
     * Infer a lambda value from a function or delegate type
     * @params: 
     *   - type: the type that will help for the inference
     *   - val: the value in which the search is performed
     * @returns: a lambda value
     * @throws: 
     *   - &ErrorMsg: if is was not found, or the inference is impossible 
     */
    pub def inferLambdaValue (mut self, type : &Type, val : &Value)-> &Value
        throws &ErrorMsg
    {
        let innerVal = match val {
            v : &VarRefValue => { v.getValue () } // The lambda value can be hidden in a variable
            _ => { val }
        };
        
        match innerVal {            
            lmbd : &LambdaValue => {
                let paramTypes = match type {
                    f : &FuncPtrType => { f.getParameters () }
                    d : &DelegateType => { d.getParameters () }
                    _ => { throw ErrorMsg::fatal (val.getLoc (), format (ValidateErrorMessage::INCOMPATIBLE_TYPE, type, val.getType ())); } // The lambda value was found, but the result cannot be infered
                }
                
                if (lmbd.getParameters ().len != paramTypes.len) {
                    throw ErrorMsg::fatal (val.getLoc (), format (ValidateErrorMessage::INCOMPATIBLE_TYPE, type, val.getType ()));         
                }
                
                return self._lambdaValidator.validateLambdaBody (alias self, Path::new (lmbd.getName ()), lmbd, paramTypes); // Validate the lambda from the parameters of  'type'
            }
            _ => { // The lambda value was not found
                throw ErrorMsg::fatal (val.getLoc (), format (ValidateErrorMessage::INCOMPATIBLE_TYPE, type, val.getType ()));
            }
        };
        
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================         VERIFICATION         =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Verify that the variable is not shadowing another variable
     * And that the variable name is a valid variable identifier (not a native type)
     * @params: 
     *    - loc: the location and name of the variable that may shadow
     * @throws: &ErrorMsg, if the variable shadows another local declaration, or the variable name is a type name
     */
    pub def verifyShadow (self, loc : &Word)
        throws &ErrorMsg
    {
        self.verifyNotIsNativeType (loc);
        match self.getLocalNoUse (loc.str ()) {
            NoneValue () => {}
            gen : _ => {
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::SHADOWING_DECL, loc.str ()),
                                       notes-> [ErrorMsg::note (gen.getLoc (), ValidateErrorMessage::FIRST_DEFINED)]
                                       );
            }
        }
    }

    /**
     * Verify that the name of the variable is not a native type
     * @params: 
     *   - loc: the location and name of the variable
     * @throws: &ErrorMsg, iif the name of the variable is a native type
     */
    pub def verifyNotIsNativeType (self, loc : &Word)
        throws &ErrorMsg
    {
        if loc.str () in self._nativeTypeNames {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::IS_NATIVE_TYPE, loc.str ()));
        }
    }

    /**
     * Verify that the value `value` can be casted into the type `type` implicitely
     * @warning: this does not check implicit aliases and references (cf. self.verifyMemoryOwner)
     * @params: 
     *   - loc: the location of the affectation    
     *   - type: the type into which the cast is made
     *   - value: the value used
     * @throws: &ErrorMsg: if the cast cannot be made
     */
    pub def verifyCompatibleTypeWithValue (self, loc : &Word, type : &Type, value : &Value)
        throws &ErrorMsg
    {
        match (type, value) {
            (_ : &PointerType, _ : &NullValue) => return {} // ptr = null;
            (_ : &SliceType, _) => { 
                match value.getType () {
                    s : &SliceType => { if s.getInners ()[0].isOf!{&VoidType} () return {} } // slice = [];
                }
            }
            (_, u : &UniqValue) => { // uniq values contains other things 
                self.verifyCompatibleTypeWithValue (loc, type, u.getValue ());
                return {}
            }        
        }
        
        self.verifyCompatibleType (loc, value.getLoc (), type, value.getType ())
    }

    /**
     * Verify the compatibility of two types (not complete equals)
     * @params: 
     *   - lLoc: the location of the left type (or left operand, this is the location that will be shown in the error message)
     *   - rLoc: the location of the right type (or right operand, this is the location that will be shown in the error message)
     *   - noAncestor: don't check for ancestor compatibility 
     * @throws: &ErrorMsg: if the type are not compatible
     */
    pub def verifyCompatibleType (self, lLoc : &Word, rLoc : &Word, left : &Type, right : &Type, noAncestor : bool = false)
        throws &ErrorMsg
    {
        if (!left.isCompatible (right)) {
            if (!noAncestor) {
                if (self.isAncestor (left, right)) { return {} }
            }
            
            if (lLoc.line () == rLoc.line ()) {
                throw ErrorMsg::fatal (lLoc, end-> rLoc, format (ValidateErrorMessage::INCOMPATIBLE_TYPE, left, right));
            } else {
                throw ErrorMsg::fatal (rLoc, format (ValidateErrorMessage::INCOMPATIBLE_TYPE, left, right),
                                       notes-> [ErrorMsg::note (lLoc, ""s8)]);
            }
        }
    }

    /**
     * @warning: Function that must be called at any affectation or memory movement in the code
     * Verify that the movement of memory is permitted (no implicit alias, no const disqualifier, etc.)
     * @params: 
     *   - loc: the location of the affectation
     *   - type: the type of the operation, to which the value is casted
     *   - value: the value that is moved
     *   - construct: true iif this is the construction of a new variable (this is the only time lambda are allowed)
     *   - checkTypes: if false does not call verifyCompatibleTypeWithValue, (this should be disable only if this was done beforehand)
     *   - byReference: if true the left type is a reference
     * @throws: 
     *   - ErrorMsg: if the operation is not permitted    
     */
    pub def verifyMemoryOwner (self, loc : &Word, type : &Type, value : &Value, construct : bool = false, checkTypes : bool = true, byReference : bool)
        throws &ErrorMsg
    {
        match value {
            u : &UniqValue => { // we must check with the content of the uniq value, maybe it contains alias or ref, or pure, etc.
                self.verifyMemoryOwner (loc, type, u.getValue (), construct-> construct, checkTypes-> checkTypes, byReference-> byReference);
                return {}
            }
        }
        
        if (checkTypes) self.verifyCompatibleTypeWithValue (loc, type, value);

        self.verifyCompleteType (loc, type, construct); // Verify that the type can be used (if it is incomplete it cannot)
        self.verifyImplicitAlias (loc, type, value, byReference-> byReference); // Verify that the movement is not made implicitely
        self.verifyImplicitPure (loc, type, value); // verify that there is no pure movement

        match type {
            LambdaType () => { // lambda type cannot be changed, they are not really values
                if (!construct || !value.isOf!{&LambdaValue} ()) throw ErrorMsg::fatal (value.getLoc (), ValidateErrorMessage::USE_AS_VALUE, notes-> [ErrorMsg::note (loc, ""s8)]);
                
                self.verifyMutabilityLevel (loc, value.getLoc (), type, value.getType (), byReference);
            }
            PointerType () => { // If we put null in a pointer it is necessarily a lesser level, but that is authorized
                let llevel = type.mutabilityLevel ();
                let rlevel = value.getType ().mutabilityLevel ();
                if (llevel > max (1u32, rlevel) && !value.isOf!{&NullValue} ()) {
                    self.verifyMutabilityLevel (loc, value.getLoc (), type, value.getType (), byReference);
                }
            }
            _ => { // all the other types must be checked in a deeper analyses
                self.verifyMutabilityLevel (loc, value.getLoc (), type, value.getType (), byReference);
            }
        }
    }

    /**
     * Verification that the type used is complete and therefore can be used for a variable data type (so not a TemporaryType)
     * @params: 
     *  - loc: the location of the use
     *  - type: the type to check
     *  - construct: true iif this is the creation of a new variable (in that case lambda type are authorized)
     * @throws:
     *  - &ErrorMsg: if there is something not allowed here
     */
    def verifyCompleteType (self, loc : &Word, type : &Type, construct : bool)
        throws &ErrorMsg
    {
        if (type.isOf!{&LambdaType}() && construct) return {}
        if (type.isOf!{&ClassRefType} ()) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::INCOMPLETE_TYPE, type),
                                   notes-> [ErrorMsg::note (loc, ValidateErrorMessage::FORGET_AND_CLASS, oneLine-> true)] ~ if (!loc.isSame (type.getLoc ())) { [ErrorMsg::note (loc, ""s8)] } else { [] });
        }
        if (type.isOf!{&TemporaryType} ()) {
            throw ErrorMsg::fatal (type.getLoc (), format (ValidateErrorMessage::INCOMPLETE_TYPE, type), notes-> if (!loc.isSame (type.getLoc ())) { [ErrorMsg::note (loc, ""s8)] } else { [] });
        }
    }

    /**
     * Verification that the the type does not need alias, and otherwise that the value is an aliaser
     * @warning: does not fully check the mutability etc., cf. verifyMutabilityLevel
     * @params: 
     *  - loc: the location of the movement
     *  - type: the type that will receive the data
     *  - value: the value that is moved
     * @throws:
     *  - &ErrorMsg: if there is something not allowed here
     */
    def verifyImplicitAlias (self, loc : &Word, type : &Type, value : &Value, byReference : bool)
        throws &ErrorMsg
    {
        // Value to a value that needs ref, but without explicitely writing it
        // e.g. { let z = 12; let ref x = z; } 
        if (byReference && !value.isOf!{&ReferencerValue} ()) { 
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::IMPLICIT_REFERENCE, value.getType ()));
        }

        // Reference to a value that does not need ref
        // e.g. { let z = 12; let x = ref z; }
        else if (!byReference && value.isOf!{&ReferencerValue} ()) { 
            throw ErrorMsg::fatal (loc, ValidateErrorMessage::UNECESSARY_REFERENCE);
        }

        // Alias of borrowable data, but without explicitely writing it
        // e.g. { let z = [1, 2, 3]; let dmut a = z; }
        else if (!byReference && self.needExplicitAlias (type, value)) {
            let llevel = type.mutabilityLevel ();            
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::DISCARD_CONST_LEVEL, llevel, 1u32),
                                   notes-> [ErrorMsg::note (value.getLoc (), format (ValidateErrorMessage::IMPLICIT_ALIAS, value.getType ()))]);
        }

        // Alias but on non borrowable data, or on a const borrowable data, so when it is not needed
        // e.g. { let mut z = [12]; let x = alias z; } 
        else if (value.isOf!{&AliaserValue} ()) {
            if (!type.needExplicitAlias () || type.mutabilityLevel () <= 1u32) {
                throw ErrorMsg::fatal (loc, ValidateErrorMessage::UNECESSARY_ALIAS);
            }
        }
        // else if ((byReference && value.isOf!{&ReferencerValue} ()) || !self.needExplicitAlias ()) {}
    }

    /**
     * Check if the value can be used without explicit alias over it
     * @params: 
     *  - type: the type that will receive the data
     *  - value: the value that is moved
     * @throws:
     *  - &ErrorMsg: if there is something not allowed here
     */
    pub def needExplicitAlias (self, type : &Type, value : &Value)-> bool {
        if (!type.needExplicitAlias ()) return false; // no data are borrowed
        match value {
            s : &SliceValue => {
                if (s.isAliaser ()) return false;
            }
            AliaserValue () => return false; 
            CopierValue () => return false;
            DeepCopierValue () => return false;
            LiteralValue () => return false; 
            ConstructValue () => return false; 
            BlockValue () => return false;            
            ScopeValue () => return false; 
            CallValue () => return false;
            CtorCallValue () => return false;
        }
        
        type.mutabilityLevel () > 1u32        
    }
    

    /**
     * Verify that there is no movement of pure data 
     * @example: 
     * ==========================
     * let dmut a = [1, 2, 3];
     * let pure b = a; // prohibited because 
     * a [0] = 9;
     * // b is changed
     * println (b); // [9, 2, 3], but it is pure ??
     * ==========================
     * @warning: does not fully check the mutability etc., cf. verifyMutabilityLevel
     * @params: 
     *   - loc: the location of the movement 
     *   - type: the left type of the operation
     *   - value: the value that is moved
     * @throws: if there is something prohibited
     */
    def verifyImplicitPure (self, loc : &Word, type : &Type, value : &Value)
        throws &ErrorMsg
    {
        if (type.isPure ()) {
            if (value.getType ().isPure () || value.isOf!{&DeepCopierValue} ()) return {}
            else {
                throw ErrorMsg::fatal (loc, ValidateErrorMessage::DISCARD_CONST,
                                       notes-> [ErrorMsg::note (value.getLoc (), format (ValidateErrorMessage::IMPLICIT_PURE, value.getType ()))]);
            }
        }

    }

    /**
     * Verify that the mutability level of lType is higher or equal than those of rType, otherwise memory movement creates a discard of const
     * @example:
     * ===================
     * let mut a = [1, 2, 3];
     * let dmut b = alias a; // no implicit alias, but a cannot give mutable access to inner values
     * b [0] = 9;
     * println (a); // [9, 2, 3]; we did not respected the contract of a
     * ===================
     * @params: 
     *   - lLoc: the location of the left operand in the movement operation
     *   - rLoc: the location of the right operation in the movement operation
     *   - lType: the type on the left of the operation (type of `b` in the example)
     *   - rType: the type on the right of the operation (type of `a` in the example)
     *   - byReference: true iif the types are a reference     
     * @throws:
     *  - &ErrorMsg: if the movement is not allowed 
     */
    def verifyMutabilityLevel (self, lLoc : &Word, rLoc : &Word, lType : &Type, rType : &Type, byReference : bool)
        throws &ErrorMsg
    {        
        match lType {
            t : &TupleType => { self.verifyMutabilityLevelTuple (lLoc, rLoc, lType, t); }
            LambdaType () => {
                if (lType.isMutable ()) {
                    throw ErrorMsg::fatal (rLoc, format (ValidateErrorMessage::DISCARD_CONST_LEVEL, 1, 0));
                }
            }
            _ => {
                // this test is useless I think, native scalar types have always a mutability level of 1, but it is probably faster that way
                if (lType.isOf!{&CustomType} () || lType.isOf!{&CompoundType} () || byReference) {                    
                    if (byReference) {
                        if (!rType.isMutable () && lType.isMutable ()) {
                            throw ErrorMsg::fatal (lLoc, format (ValidateErrorMessage::DISCARD_CONST_LEVEL, 1u32, 0u32),
                                                   notes-> [ErrorMsg::note (rLoc, format (ValidateErrorMessage::DISCARD_CONST_LEVEL_TYPES, rType, lType))]);
                        }
                    }

                    {
                        let lLevel = lType.mutabilityLevel ();
                        let rLevel = if (self.isVoidSliceType (rType)) {
                            lLevel
                        } else {
                            rType.mutabilityLevel ()
                        };

                        if (lLevel > max (1u32, rLevel)) {
                            throw ErrorMsg::fatal (lLoc, format (ValidateErrorMessage::DISCARD_CONST_LEVEL, lLevel, max (1u32, rLevel)),
                                                   notes-> [ErrorMsg::note (rLoc, format (ValidateErrorMessage::DISCARD_CONST_LEVEL_TYPES, rType, lType))]);
                        }
                    }
                }
            }
        }
    }

    /**
     * @returns: true if `type` is slice of containing void elements
     */
    def isVoidSliceType (self, type : &Type)-> bool {
        match type {
            s : &SliceType => {
                s.getInners ()[0].isOf!{&VoidType} ()
            }
            _ => { false }
        }
    }

    /**
     * Tuple are trees, thus the mutability level does not work, we have to make a different validation
     * @params: 
     *   - lLoc: the location of the left operand
     *   - rLoc: the location of the right operand
     *   - lType: the left type of the operation
     *   - rType: the right type of the operation
     * @throws: 
     *  - &ErrorMsg: if the movement is not allowed 
     */
    def verifyMutabilityLevelTuple (self, lLoc : &Word, _ : &Word, lType : &Type, rType : &TupleType)
        throws &ErrorMsg
    {
        match lType {
            left : &TupleType => {
                {
                    for i in 0us .. left.getInners ().len { // The mutability level of tuple is a bit more complicated, we need to check the level of every branch, it is a tree not a list
                        let litype = left.getInners ()[i], ritype = rType.getInners ()[i];
                        self.verifyMutabilityLevel (litype.getLoc (), ritype.getLoc (), litype, ritype, byReference-> false);
                    }
                } catch {
                    err : &ErrorMsg => {
                        throw ErrorMsg::fatal (lLoc, ValidateErrorMessage::DISCARD_CONST, notes-> [err]);
                    }
                }
            }
            _ => {
                __pragma!panic ();
            }
        }
    }
    
    /**
     * Testing if left is an ancestor class of right, this is usefull for type compatibility checking
     * @info: check if the types are ClassPtrType, or ClassRefType (works with both)
     * @params: 
     *    - left: any type
     *    - right: any type
     * @returns: true if the left type is a classptrtype and is an ancestor of the right type (a classptrtype as well)
     */
    pub def isAncestor (self, left : &Type, right : &Type)-> bool {
        let rInner : &ClassRefType = match right { // This function is made to work with classptr and classref
            c : &ClassPtrType => { c.getInner () }
            c : &ClassRefType => { c }
            _ => { return false; }
        };

        let lInner : &ClassRefType = match left { // This function is made to work with classptr and classref
            c : &ClassPtrType => { c.getInner () }
            c : &ClassRefType => { c }
            _ => { return false; }
        };

        let mut ancestor = rInner.getAncestor ();
        loop { // we traverse the ancestor of right
            match ancestor {
                c : &ClassRefType => { 
                    if (c == lInner) { break true; } // if one of the ancestor of right is equal to left, then left is an ancestor of right
                    ancestor = c.getAncestor (); // else we go up again
                }
                _ => { break false; } // No ancestor left
            }
        }
    }

    /**
     * Verify that 'left' is an ancestor of 'right'
     * @params: 
     *    - left: any type
     *    - right: any type
     * @throws:
     *    - &ErrorMsg: if 'left' is not an ancestor of 'right'
     */
    pub def verifyAncestor (self, loc : &Word, left : &Type, right : &Type)
        throws &ErrorMsg
    {
        if (!self.isAncestor (left, right)) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::NOT_ANCESTOR, left, right));
        }
    }

    /**
     * Verify that 'right' implement the trait 'left'
     * @params: 
     *    - left: any type (but needs to be a trait in order to work)
     *    - right: any type (but needs to be a class in order to work)
     * @throws: 
     *   - &ErrorMsg: if 'right' does not implement 'left'
     */
    pub def verifyImplement (self, loc : &Word, left : &Type, right : &Type)
        throws &ErrorMsg
    {
        if (!right.isOf!{&TraitRefType} ()) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::NOT_A_TRAIT, right));
        }

        let lInner : &ClassRefType = match left { // This function is made to work with classptr and classref
            c : &ClassPtrType => { c.getInner () }
            c : &ClassRefType => { c }
            _ => {
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::NOT_A_CLASS, left));
            }
        };

        let mut ancestor : &Type = lInner;
        loop { // we traverse the class and its ancestor to check if it implements the trait
            match ancestor {
                c : &ClassRefType => { 
                    for im in c.getImplTraits () {
                        if (im == right) return {}
                    }
                    ancestor = c.getAncestor (); // else we go up again
                }
                _ => { break {} } // No ancestor left
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::CLASS_NOT_IMPL, lInner, right));
    }

    /**
     * Get the common ancestor of left and right 
     * @params: 
     *   - loc: the location of the operation
     *   - left: a class type
     *   - right: a class type
     * @returns: a class type containing the common ancestor, or NoneType
     */
    pub def getCommonAncestor (self, loc : &Word, left : &ClassPtrType, right : &ClassPtrType)-> &Type {
        let mut ancestor : &Type = left.getInner ();

        // We traverse the list of ancestor of the left 
        loop {
            match ancestor {
                c : &ClassRefType => {
                    // if one of the ancestor of left is also an ancestor of right, then it is a common ancestor
                    if (self.isAncestor (ancestor, right)) break ClassPtrType::new (loc, c, isMutable-> false); 
                    else { // We go back again
                        ancestor = c.getAncestor ();
                    }
                }
                _ => { // No ancestor left to check
                    break NONE_TYPE;
                }
            }            
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          GENERATION          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Insert a new generator that will be sent to the backend for final transformation
     * @params: 
     *    - gen: a generator that can be transformed into a valid backend element (e.g. FrameGenerator)
     */
    pub def insertNewGenerator (mut self, gen : &Generator) {
        self._generated:.push (gen);
    }

    /**
     * @returns: the list of generators that were inserted for final transformation
     */
    pub def getGenerators (self)-> [&Generator] {
        self._generated[]
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================            UTILS             =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * Create a syntax var path (a PathExpr) leading to a given path
     * This function can be used to create path to core functions, or core files
     * @panic: the path contains at least one element 
     * @example: 
     * ====================
     * let syntVar = context.createSyntaxVarFromPath (loc, ["core", "array", "opCmp"]);
     * println (format ("%", syntVar)); // core::array::opCmp
     * ====================
     * @params: 
     *   - loc: the location of the expression
     *   - path: the path to the transform into a var
     * @returns: a syntax expression containing the path
     */
    pub def createSyntaxVarFromPath (self, loc : &Word, path : [[c8]])-> &Expression {
        if (path.len == 0us) __pragma!panic ();
        let mut leaf : &Expression = VarExpr::new (Word::new (path[0us], loc));
        for i in 1us .. path.len { // This is relatively simple, we just create a list
            leaf = PathExpr::new (Word::new (Tokens::DCOLON, loc),
                                  leaf,
                                  VarExpr::new (Word::new (path[i], loc)));                                  
        }
        
        leaf
    }

    /**
     * Retreive the type core::exception::Exception and validate it
     * @params: 
     *   - loc: the location of the creation
     * @returns: the exception type (ClassPtrType)
     * @throws: 
     *    - &ErrorMsg: if the type is not found (e.g. compiled in standalone)
     */
    pub def getExceptionType (mut self, loc : &Word = EOF_WORD)-> &Type
        throws &ErrorMsg
    {
        let var = self.createSyntaxVarFromPath (loc, path-> [CoreNames::CORE_MODULE, CoreNames::EXCEPTION_MODULE, CoreNames::EXCEPTION_TYPE]);
        let type = self:.validateType (var);
        match type {
            c : &ClassRefType => { c.createInstance (true, true) }
            _ => { __pragma!panic (); }
        }
    }

    
    /**
     * Create an error message for global retreival fail
     * This create an error message, with alternative variable with close names, or private variables inaccessible from the current context
     * @params: 
     *   - loc: the location of the var to find
     *   - name: the name of the variable to find
     * @returns: the error message, that can be thrown as it is
     */
    pub def createGlobalVarError (mut self, loc : &Word, name : [c8])-> &ErrorMsg {
        let dmut notes = Vec!{&ErrorMsg}::new ();
        
        // Search all the symbols with the same name, but that are not accessible
        let mut syms = self:.getGlobalPrivate (name);
        let mut msgFrom = ValidateErrorMessage::PRIVATE_IN_THIS_CONTEXT_FROM_MOD, mut msgNonFrom = ValidateErrorMessage::PRIVATE_IN_THIS_CONTEXT;
        if (syms.len == 0us) { // if no symbol is named 'name', then maybe there is typo in the variable name
            syms = self:.getCloseGlobal (name, distance-> 2us); // Get all the symbols whose names are close to 'name'
            
            // Change the error messages
            msgFrom = ValidateErrorMessage::MAYBE_WAS_MEANT_FROM_MOD; 
            msgNonFrom = ValidateErrorMessage::MAYBE_WAS_MEANT;
        }
        
        let dmut used = HashSet!{&Path}::new ();
        for s in syms { // add the notes to the error
            if (s.getPath () !in used) {
                let p = s.getPath ().parent ().toStr (sep-> Tokens::DCOLON);
                if (p.len != 0us) {
                    notes:.push (ErrorMsg::note (s.getLoc (), oneLine-> true, format (msgFrom, s.getPath ().file (), p)));
                } else
                    notes:.push (ErrorMsg::note (s.getLoc (), oneLine-> true, format (msgNonFrom, s.getPath ().file ())));
                
                used:.insert (s.getPath ());
            }
        }    
        
        // Not thrown, it will be thrown by the caller function
        ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEF_VAR, name), notes-> notes[])
    }


    /**
     * Validate the arguments of a template call/checker
     * @params: 
     *    - lst: the list of template arguments
     * @returns: 
     *    - a list of generator (can be a mix of types and values)
     * @throws:
     *    - &ErrorMsg: if there is an error in the validation
     */
    pub def validateTemplateArgumentList (mut self, lst : [&Expression])-> [&Generator]
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        let dmut results = Vec!{&Generator}::new ();
        for i in lst {
            { // We first try a type
                results:.push (self:.validateType (i));
            } catch {
                err : &ErrorMsg => { // Apparently its not a type
                    let val = self:.validateValue (i); // Maybe its a value
                    results:.push (self:.getCompileTimeInterpreter ().compute (val)); // but we need to know it a compile time
                } catch {
                    err2 : &ErrorMsg => { // Another error, we print both errors (type and value) for better debugging
                        let valueError = ErrorMsg::note (i.getLoc (), ValidateErrorMessage::TEMPLATE_VALUE_TRY, notes-> [err2]);
                        errors:.push (ErrorMsg::list ([err, valueError]));
                    }
                }
            };
        }

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]); // Some arguments are invalid
        
        results[] // Everything is ok
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Check if value is the var value 'self'
     * @params: 
     *    - value: the value to check
     * @returns: true iif the value is a var ref value containing the 'self' variable 
     */
    pub def isSelf (self, value : &Value)-> bool {
        match value {
            v : &VarRefValue => { v.isSelf () }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           PRIVATE            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: a local variable that is enclosed
     */
    def getInClosure (mut self, loc : &Word, name : [c8])-> &Value
        throws &ErrorMsg
    {
        if (self._closureType.len () == 0us) return NoneValue::new ();

        let dmut closureType = (alias self._closureType) [self._closureType.len () - 1us];
        let (field, index) = closureType.getField (name);
        if (field.isOf!{&NoneType} ()) {
            let syms = closureType.getClosureSymbols ();
            let dmut used = closureType:.getClosureUsed ();
            
            for i in 0us .. syms.len () {
                let ptr = syms[i].find (name);
                match ptr {
                    Ok (g : &Value) => {
                        let val = self.checkEnclosable (loc, g);
                        (alias used)[][i]:.insert (name);
                        let type = g.getType ();

                        let types = closureType.getInnerTypes () ~ [type];
                        let names = closureType.getInnerNames () ~ [name];
                        let values = closureType.getInnerValues () ~ [val];
                        let fndIndex = values.len - 1us;
                        
                        let dmut secClosureType = ClosureType::new (closureType.getLoc (), types, names, values, closureType.getRefId (), syms, alias used);
                        (alias self._closureType)[][$ - 1us] = alias secClosureType;
                        
                        let oldRef = self:.getLocal (EOF_WORD, "#{CLOSURE-VARREF}"s8, canBeInClosure-> false);
                        match oldRef {
                            v : &VarRefValue => {
                                let closureRef = VarRefValue::new (oldRef.getLoc (), EOF_WORD, secClosureType, false, v.getRefId (), isReference-> false);
                                (alias (alias self._symbols)[self._symbols.len () - 1us])[0us]:.insert ("#{CLOSURE-VARREF}"s8, closureRef);

                                return ClosureFieldAccessValue::new (EOF_WORD, type, closureRef, fndIndex);
                            }
                            _ => __pragma!panic ();
                        }
                    }
                }
            }            
        } else {
            let closureRef = self:.getLocal (EOF_WORD, "#{CLOSURE-VARREF}"s8, canBeInClosure-> false);
            return ClosureFieldAccessValue::new (EOF_WORD, field, closureRef, index);
        }
        
        NoneValue::new ()
    } catch {        
        _ : &OutOfArray => __pragma!panic ();
        err : &ErrorMsg => throw err;
    }

    /**
     * Check that the value is enclosable, and return a the enclosable value derived from it
     * @params:
     *    - loc: the location of the enclosing
     *    - value: the value being enclosed
     */
    def checkEnclosable (self, loc : &Word, value : &Value)-> &Value
        throws &ErrorMsg
    {
        match value {
            v : &VarDeclValue => {
                match v.getType () {
                    LambdaType () => {
                        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::ENCLOSE_INCOMPLETE_TYPE, value.getType ()),
                                               notes-> [ErrorMsg::note (value.getLoc (), ValidateErrorMessage::DECLARED_HERE)]);
                    }
                    _ => {
                        cast!{&Value} (VarRefValue::new (loc, v.getLoc (), v.getType (), v.isMutable (), v.getUniqId (), isSelf-> false, isReference-> false))
                    }
                }
            }
            p : &ProtoVarValue => {
                cast!{&Value} (VarRefValue::new (loc, p.getLoc (), p.getType (), p.isMutable (), p.getUniqId (), isSelf-> p.isSelf (), isReference-> p.isReference ()))
            }
            _ => {
                value
            }
        }        
    }
}
