mod ymirc::semantic::validator::operator::unary;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::syntax::expression::operator::unary;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::memory::address;
import ymirc::semantic::generator::value::memory::dereferencer;
import ymirc::semantic::generator::value::prototypes::proto;
import ymirc::semantic::generator::value::literal::int;
import ymirc::semantic::generator::type::native::int;
import ymirc::semantic::generator::value::operator::unary::_;
import ymirc::syntax::keys;

import ymirc::lexing::word;

import ymirc::semantic::generator::type::_;


/**
 * The unary validator is used to validate UnaryOpExpr
 * It is a class validator because unary operation are complex
 */
pub class UnaryOpValidator {

    /**
     * Create an empty validator     
     */
    pub self () {}

    /**
     * Validate a unary expression
     * @params: 
     *  - context: the context of the validation
     *  - un: the unary operator to validate
     * @returns: a value
     * @throws: &ErrorMsg, if the validation failed
     */
    pub fn validate (self, dmut context : &Validator, un : &UnaryExpr) -> &Value
        throws &ErrorMsg
    {
        match un.getLoc () {
            UnaryOperators::MINUS => {
                self.validateMinusOperator (alias context, un)
            }
            UnaryOperators::AND => {
                self.validateAndOperator (alias context, un)
            }
            UnaryOperators::STAR => {
                self.validateStarOperator (alias context, un)
            }
            UnaryOperators::NOT => {
                self.validateNotOperator (alias context, un)
            }
            _ => {
                throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNDEFINED_UN_OP_TOK, un.getLoc ().str ()));
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================            MINUS             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a minus unary expression
     * @params: 
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws: 
     *   - &ErrorMsg: if there is an error in the validation       
     */
    fn validateMinusOperator (self, dmut context : &Validator, un : &UnaryExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.validateValue (un.getOperand ());
        match value.getType () { // minus operator works only on int and float operands
            it : &IntType => {
                if (!it.isSigned ()) {
                    throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNDEFINED_UN_OP, un.getLoc ().str (), it));
                }

                let ret = UnaryIntOperatorValue::new (un.getLoc (), UnaryOperators::MINUS, value.getType (), value);
                let x = context:.getCompileTimeInterpreter ().simplify (ret);
                match (x, x.getType ()) {
                    (i : &IntValue, t : &IntType) => {
                        context:.getLiteralValidator ().verifyIntOverflow (context, un.getLoc (), t, i.getValue ());
                    }
                }
                x
            }
            FloatType () => {
                cast!{&Value} (UnaryFloatOperatorValue::new (un.getLoc (), UnaryOperators::MINUS, value.getType (), value))
            }
            _ => {
                throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNDEFINED_UN_OP, un.getLoc ().str (), value.getType ()));
            }
        }
    }
    
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             AND              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate an and unary expression
     * @params: 
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws: 
     *   - &ErrorMsg: if there is an error in the validation       
     */
    fn validateAndOperator (self, dmut context : &Validator, un : &UnaryExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.validateValue (un.getOperand ());
        match value {
            _ : &PrototypeValue => { __pragma!panic (); }
            _ => {
                if (!value.isLvalue ()) {
                    throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::NOT_A_LVALUE, value));
                }

                let ptr = PointerType::new (un.getLoc (), value.getType (), isMutable-> true);
                AddressValue::new (un.getLoc (), ptr, value)
            }
        }
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             STAR             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a star unary expression
     * @params: 
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws: 
     *   - &ErrorMsg: if there is an error in the validation       
     */
    fn validateStarOperator (self, dmut context : &Validator, un : &UnaryExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.validateValue (un.getOperand ());
        match value.getType () {
            p : &PointerType => {
                return self.validateDerefPointer (alias context, un.getLoc (), p, value);
            }
            _ => {
                throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNDEFINED_UN_OP, un.getLoc ().str (), value.getType ()));
            }
        }
    }

    /**
     * Validate a deref on a pointer value
     * @params:
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws:
     *    - &ErrorMsg: if there is an error in the validation
     * */
    fn validateDerefPointer (self, dmut context : &Validator, loc : &Word, ptype : &PointerType, value : &Value)-> &Value
        throws &ErrorMsg
    {
        context:.verifyUnsafeContext (loc);

        let retType =
            if (!value.isLvalue ()) {
                ptype.getInners ()[0].clone (0u32)
            } else {
                ptype.getInners ()[0]
            };

        if (retType.isOf!{&VoidType} ()) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_UN_OP, loc.str (), ptype));
        }

        return DereferencerValue::new (value.getLoc (), retType, value);
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             NOT              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a not unary expression
     * @params:
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws:
     *   - &ErrorMsg: if there is an error in the validation
     */
    fn validateNotOperator (self, dmut context : &Validator, un : &UnaryExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.validateValue (un.getOperand ());
        match value.getType () {
            IntType () => {
                let ret = UnaryIntOperatorValue::new (un.getLoc (), UnaryOperators::NOT, value.getType (), value);
                let x = context:.getCompileTimeInterpreter ().simplify (ret);
                match (x, x.getType ()) {
                    (i : &IntValue, t : &IntType) => {
                        context:.getLiteralValidator ().verifyIntOverflow (context, un.getLoc (), t, i.getValue ());
                    }
                }
                x
            }
            BoolType () => {
                cast!{&Value} (UnaryBoolOperatorValue::new (un.getLoc (), UnaryOperators::NOT, value))
            }
            _ => {
                throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNDEFINED_UN_OP, un.getLoc ().str (), value.getType ()));
            }
        }
    }

}
