mod ymirc::semantic::validator::operator::unary;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::syntax::expression::operator::unary;
import ymirc::semantic::generator::value::base;
import ymirc::semantic::generator::value::memory::address;
import ymirc::semantic::generator::value::memory::dereferencer;
import ymirc::semantic::generator::value::prototypes::_;
import ymirc::semantic::generator::value::literal::int;
import ymirc::semantic::generator::value::operator::unary::_;
import ymirc::semantic::generator::value::literal::string;

import ymirc::semantic::generator::value::construct::methoddg;
import ymirc::semantic::generator::value::construct::fptr;

import ymirc::semantic::generator::type::native::scalar::int;
import ymirc::syntax::keys;

import ymirc::lexing::word;
import ymirc::global::core_;
import ymirc::syntax::expression::_;

import ymirc::semantic::generator::type::_;

import std::collection::vec;
import std::io;

/**
 * The unary validator is used to validate UnaryOpExpr
 * It is a class validator because unary operation are complex
 */
pub class UnaryOpValidator {

    /**
     * Create an empty validator     
     */
    pub self () {}

    /**
     * Validate a unary expression
     * @params: 
     *  - context: the context of the validation
     *  - un: the unary operator to validate
     * @returns: a value
     * @throws: &ErrorMsg, if the validation failed
     */
    pub fn validate (self, dmut context : &Validator, un : &UnaryExpr) -> &Value
        throws &ErrorMsg
    {
        match un.getLoc () {
            UnaryOperators::MINUS => {
                self.validateMinusOperator (alias context, un)
            }
            UnaryOperators::AND => {
                self.validateAndOperator (alias context, un)
            }
            UnaryOperators::STAR => {
                self.validateStarOperator (alias context, un)
            }
            UnaryOperators::NOT => {
                self.validateNotOperator (alias context, un)
            }
            _ => {
                throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNDEFINED_UN_OP_TOK, un.getLoc ().str ()));
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            MINUS             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a minus unary expression
     * @params: 
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws: 
     *   - &ErrorMsg: if there is an error in the validation       
     */
    fn validateMinusOperator (self, dmut context : &Validator, un : &UnaryExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.implicitEnumUnwrap (context:.validateValue (un.getOperand ()));
        match value.getType () { // minus operator works only on int and float operands
            it : &IntType => {
                if (!it.isSigned ()) {
                    throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNDEFINED_UN_OP, un.getLoc ().str (), it));
                }

                let ret = UnaryIntOperatorValue::new (un.getLoc (), value.getType (), UnaryOperators::MINUS, value);
                let x = context.getCompileTimeInterpreter ().reduce (ret);
                match (x, x.getType ()) {
                    (i : &IntValue, t : &IntType) => {
                        context:.getCompileTimeInterpreter ().verifyOverFlowInt (un.getLoc (), t, i.getValue ());
                    }
                }
                x
            }
            FloatType () => {
                cast!{&Value} (UnaryFloatOperatorValue::new (un.getLoc (), value.getType (), UnaryOperators::MINUS, value))
            }
            c : &ClassPtrType => {
                self.validateClassOp (alias context, un.getLoc (), UnaryOperators::MINUS, c, value)
            }
            _ => {
                throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNDEFINED_UN_OP, un.getLoc ().str (), value.getType ()));
            }
        }
    }
    
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             AND              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate an and unary expression
     * @params: 
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws: 
     *   - &ErrorMsg: if there is an error in the validation       
     */
    fn validateAndOperator (self, dmut context : &Validator, un : &UnaryExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.validateValue (un.getOperand (), noReduce-> true);
        match value {
            m : &MethodDelegateValue => {
                return self.validateFunctionPointerFromMethodDg (alias context, un.getLoc (), m);
            }
            p : &PrototypeValue => {
                return self.validateFunctionPointerFromProto (alias context, un.getLoc (), p);
            }
            _ => {
                context.verifyLeftOperandMove (un.getLoc (), value, allowImmutable-> true, allowSelf-> true);

                // If we can make a ref, but not when immutable is not allowed,
                // therefore the ref is of a param,iter,closure, etc.
                // And cannot be made mutable
                let innerType = if (!context.checkLeftOperandMove (value, allowImmutable-> false, allowSelf-> true)) {
                    value.getType ().clone (0u32)
                } else {
                    value.getType ()
                };

                let ptr = PointerType::new (un.getLoc (), innerType, isMutable-> true);
                AddressValue::new (un.getLoc (), ptr, value)
            }
        }
    }


    /**
     * Validate an and unary operator on a method delegate
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - m: the delegate value
     * @returns: a value
     * @throws:
     *    - &ErrorMsg: if the validation fails
     * */
    fn validateFunctionPointerFromMethodDg (self, dmut _ : &Validator, loc : &Word, m : &MethodDelegateValue)-> &Value
        throws &ErrorMsg
    {
        if (m.isAddressed ()) {
            throw ErrorMsg::fatal (m.getAddressedLoc (), format (ValidateErrorMessage::UNECESSARY_ADDRESS_METHOD));
        }


        if (m.getPrototype ().getThrowers ().len != 0us) {
            let dmut notes = Vec!{&ErrorMsg}::new ();
            for i in m.getPrototype ().getThrowers () {
                notes:.push (ErrorMsg::note (i._0, format (ValidateErrorMessage::THROWING, i._1)));
            }

            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::FUNCTION_TO_FPTR_THROWING, m, withTags-> ["withParams"s8]), notes-> notes[]);
        }

        if (m.getPrototype ().isUnsafe ()) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::FUNCTION_TO_FPTR_UNSAFE, m, withTags-> ["withParams"s8]));
        }

        return m.cloneAsAddressed (loc);
    }

    /**
     * Validate an and unary operator on a prototype value
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - p: the prototype value
     * @returns: a value
     * @throws:
     *    - &ErrorMsg: if the validation fails
     * */
    pub fn validateFunctionPointerFromProto (self, dmut _ : &Validator, loc : &Word, p : &PrototypeValue)-> &Value
        throws &ErrorMsg
    {
        // only function can be used not child classes of prototype (method, lambda, dtor, ctors, ...)
        let isFunc = match p {
            CtorPrototypeValue () => { false }
            DtorPrototypeValue () => { false }
            MethodPrototypeValue () => { false }
            NamePrototypeValue () => { false }
            _ => { true }
        };

        if (!isFunc) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_UN_OP, loc.str (), p, withTags-> ["withParams"s8]));
        }

        if (p.getThrowers ().len != 0us) {
            let dmut notes = Vec!{&ErrorMsg}::new ();
            for i in p.getThrowers () {
                notes:.push (ErrorMsg::note (i._0, format (ValidateErrorMessage::THROWING, i._1)));
            }

            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::FUNCTION_TO_FPTR_THROWING, p, withTags-> ["withParams"s8]), notes-> notes[]);
        }

        if (p.isUnsafe ()) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::FUNCTION_TO_FPTR_UNSAFE, p, withTags-> ["withParams"s8]));
        }

        let dmut types = Vec!{&Type}::new ();
        let dmut references = Vec!{bool}::new ();
        let dmut lazys = Vec!{bool}::new ();
        for v in p.getParameters () {
            references:.push (v.isReference ());
            lazys:.push (v.isLazy ());
            types:.push (v.getType ());
        }

        let retType = p.getRetType ();
        ProtoFuncPtrValue::new (loc, p, references[], lazys[], types[], retType)
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             STAR             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a star unary expression
     * @params: 
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws: 
     *   - &ErrorMsg: if there is an error in the validation       
     */
    fn validateStarOperator (self, dmut context : &Validator, un : &UnaryExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.implicitEnumUnwrap (context:.validateValue (un.getOperand ()));
        match value.getType () {
            p : &PointerType => {
                return self.validateDerefPointer (alias context, un.getLoc (), p, value);
            }
            _ => {
                throw ErrorMsg::fatal (un.getLoc (), format (ValidateErrorMessage::UNDEFINED_UN_OP, un.getLoc ().str (), value.getType ()));
            }
        }
    }

    /**
     * Validate a deref on a pointer value
     * @params:
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws:
     *    - &ErrorMsg: if there is an error in the validation
     * */
    fn validateDerefPointer (self, dmut context : &Validator, loc : &Word, ptype : &PointerType, value : &Value)-> &Value
        throws &ErrorMsg
    {
        context:.verifyUnsafeContext (loc);

        let retType =
            if (!value.isLvalue ()) {
                ptype.getInners ()[0].clone (0u32)
            } else {
                ptype.getInners ()[0]
            };

        if (retType.isOf!{&VoidType} ()) {
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_UN_OP, loc.str (), ptype));
        }

        return DereferencerValue::new (value.getLoc (), retType, value);
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             NOT              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a not unary expression
     * @params:
     *    - context: the context of the validation
     *    - un: the unary operator to validate
     * @returns: a value
     * @throws:
     *   - &ErrorMsg: if there is an error in the validation
     */
    fn validateNotOperator (self, dmut context : &Validator, un : &UnaryExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.implicitEnumUnwrap (context:.validateValue (un.getOperand ()));
        self.validateNotOperator (alias context, un.getLoc (), value)
    }

    /**
     * Validate a not unary expression
     * @params:
     *    - context: the context of the validation
     *    - value: the value operand that is negated
     * @returns: a value
     * @throws:
     *   - &ErrorMsg: if there is an error in the validation
     */
    pub fn validateNotOperator (self, dmut context : &Validator, loc : &Word, value : &Value)-> &Value
        throws &ErrorMsg
    {
        match value.getType () {
            IntType () => {
                let ret = UnaryIntOperatorValue::new (loc, value.getType (), UnaryOperators::NOT, value);
                let x = context:.getCompileTimeInterpreter ().reduce (ret);
                match (x, x.getType ()) {
                    (i : &IntValue, t : &IntType) => {
                        context:.getCompileTimeInterpreter ().verifyOverFlowInt (loc, t, i.getValue ());
                    }
                }
                x
            }
            BoolType () => {
                cast!{&Value} (UnaryBoolOperatorValue::new (loc, UnaryOperators::NOT, value))
            }
            c : &ClassPtrType => {
                self.validateClassOp (alias context, loc, UnaryOperators::NOT, c, value)
            }
            _ => {
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_UN_OP, UnaryOperators::NOT, value.getType ()));
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =====================             CLASS/STRUCT              ====================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate an op override on a class value
     * @params:
     * */
    fn validateClassOp (self, dmut context : &Validator, loc : &Word, op : UnaryOperators, cptr : &ClassPtrType, value : &Value)-> &Value
        throws &ErrorMsg
    {
        {
            let str = makeStringSliceValue (loc, op);
            let meth = context:.constructObjectMethodAcc (loc, cptr, value, OpOverrideNames::UNARY_OP_OVERRIDE);
            let templ = context:.getValueValidator ().validateTemplateCall (alias context, loc, meth, [str]);

            context:.getCallOpValidator ().validate (alias context, loc, templ, [])
        } catch {
            err : &ErrorMsg => { // In case of error show the location of the rewrite for clearer errors
                throw ErrorMsg::note (loc, ValidateErrorMessage::VALIDATING, notes-> [err]);
            }
        }
    }

}
