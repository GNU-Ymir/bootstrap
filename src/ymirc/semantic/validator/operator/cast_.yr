mod ymirc::semantic::validator::operator::cast_;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::utils::math;
import ymirc::syntax::expression::cast_;
import ymirc::global::core_;

import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;
import ymirc::syntax::expression::_;
import ymirc::utils::bigint;
import ymirc::utils::bigfloat;

import std::algorithm::comparison;
import std::collection::vec;
import std::io;

/**
 * The cast validator is used to validate CastExpr
 */
pub class CastValidator {

    /**
     * Create an empty validator
     */
    pub self () {}

    /**
     * Validate a cast expression that returns a value
     * @params: 
     *    - context: the context of the validation
     *    - c: the cast operator to validate
     * @returns: a value
     * @throws:
     *    - &ErrorMsg, if the validation failed
     */
    pub fn validateValue (self, dmut context : &Validator, c : &CastExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.validateValue (c.getValue ());
        let type = context:.validateType (c.getType ());

        self.validateCast (alias context, loc-> c.getLoc (), value, type)
    }

    /**
     * Validate the implicit cast of 'value' into 'type'
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the cast
     *     - value: the value to cast
     *     - type: the type into which to cast
     * @returns: a value
     * @throws:
     *      - &ErrorMsg: if the validation failed
     * */
    pub fn validateCast (self, dmut context : &Validator, loc : &Word = EOF_WORD, value : &Value, type : &Type)-> &Value
        throws &ErrorMsg
    {
        let iLoc = if (loc.isEof ()) { value.getLoc () } else { loc };

        // It is possible to cast into the following types, with some conditions
        let ret = match type {
            i : &IntType => { self.validateIntCast (alias context, iLoc, i, value, value.getType ()) }
            f : &FloatType => { self.validateFloatCast (alias context, iLoc, f, value, value.getType ()) }
            ct : &CharType => { self.validateCharCast (alias context, iLoc, ct, value, value.getType ()) }
            b : &BoolType => { self.validateBoolCast (alias context, iLoc, b, value, value.getType ()) }
            p : &PointerType => { self.validatePointerCast (alias context, iLoc, p, value, value.getType ()) }
            cp : &ClassPtrType => { self.validateClassPtrCast (alias context, iLoc, cp, value, value.getType ()) }
            _ => {
                // If the value contains an enumeration, it can be casted into the proxy type
                match value.getType () {
                    en : &EnumType => { self.validateFromEnumCast (alias context, iLoc, type, value, en) }
                    _ => {
                        // Other casts are not allowed
                        throw ErrorMsg::fatal (iLoc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), type));
                    }
                }
            }
        };

        context.getCompileTimeInterpreter ().reduce (ret)
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             INT              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type int
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - i: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateIntCast (self, dmut _ : &Validator, loc : &Word, i : &IntType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            iC : &IntType => { // int value can be casted to any int value signed or unsigned
                if (iC.getSize () == i.getSize () && iC.isSigned () == i.isSigned ()) {
                    return value;
                }

                return CastValue::new (loc, i, value);
            }
            c : &CharType => {
                // char values can be casted to unsigned int, if they have the same size (i.e. c8 => u8, c32 => u32)
                if (!i.isSigned () && c.getSize () == i.getSize ()) {
                    return CastValue::new (loc, i, value);
                }
            }
            BoolType () => {
                // bool values can be casted to u8
                if (!i.isSigned () && i.getSize () == 8u16) {
                    return CastValue::new (loc, i, value);
                }
            }
            FloatType () => {
                // float values can be casted to i32,i64, ..., or u32, u64, ...
                if (i.getSize () >= 32u16) {
                    return CastValue::new (loc, i, value);
                }
            }
        }

        // Other types are not castable to int
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), i));
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================            FLOAT             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type float
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - f: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateFloatCast (self, dmut _ : &Validator, loc : &Word, f : &FloatType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            fC : &FloatType => { // only float types are castable to float types
                if (fC.getSize () == f.getSize ()) {
                    return value;
                }

                return CastValue::new (loc, f, value);
            }
            i : &IntType => {
                if (i.getSize () >= 32u16) {
                    return CastValue::new (loc, f, value);
                }
            }
        }

        // Other types are not castable to float
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), f));        
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             CHAR             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type char
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - c: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateCharCast (self, dmut _ : &Validator, loc : &Word, c : &CharType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            cC : &CharType => { // char can be casted into other chars, it is up to the user to make sure there is no lost in data (no warning if the data is known at compile time?)
                if (cC.getSize () == c.getSize ()) {
                    return value;
                }

                return CastValue::new (loc, c, value);
            }
            i : &IntType => { // int can be casted into char if they are of the same size and unsigned (u8 -> c8, u32 -> c32)
                if (!i.isSigned () && i.getSize () == c.getSize ()) {
                    return CastValue::new (loc, c, value);
                }
            }
        }

        // Other types are not castable to char
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), c));
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             BOOL             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type bool
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - b: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateBoolCast (self, dmut _ : &Validator, loc : &Word, b : &BoolType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            i : &IntType => { // int can be casted into bool if they are of size 8 and unsigned (u8 -> bool)
                if (!i.isSigned () && i.getSize () == 8u16) {
                    return CastValue::new (loc, b, value);
                }
            }
            BoolType () => {
                return value;
            }
        }

        // Other types are not castable to bool
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), b));
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           POINTER            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type pointer
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - p: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validatePointerCast (self, dmut context : &Validator, loc : &Word, p : &PointerType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            oP : &PointerType => {
                if (oP.getInners ()[0] == p.getInners ()[0]) {
                    // the cast is to the same type, no need to cast
                    return value;
                } else {
                    {
                        let auxType = p.clone (pattern-> oP);

                        // Make sure there is no implicit alias involved
                        context:.verifyMemoryOwner (loc, vType, value, false);
                        return CastValue::new (loc, auxType, value, isLvalue-> true)
                    } catch {
                        _ : &ErrorMsg => { // else, cast to an imutable value
                            let auxType = p;
                            return CastValue::new (loc, auxType, value, isLvalue-> true)
                        }
                    }
                }
            }
        }

        // Other types are not castable to pointers
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), p));        
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================            CLASS             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type class ptr
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - c: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateClassPtrCast (self, dmut context : &Validator, loc : &Word, c : &ClassPtrType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            oC : &ClassPtrType => {
                context.verifyCompatibleType (loc, value.getLoc (), c, oC, noAncestor-> false);
                // The mutability level must be conserved, so we cannot modify the mutability level by casting classes
                let mutLevel = if (oC.getInner ().isMutable () && oC.isMutable ()) {
                    2u32
                } else if (oC.isMutable ()) {
                    1u32
                } else { 0u32 };
                
                let auxType = c.clone (mutLevel-> mutLevel);
                return CastValue::new (loc, auxType, value, isLvalue-> true);
            }
        }

        // Other types are not castable to classes
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), c));        
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             ENUM             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from a value ot type enum
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - t: the type of the cast
     *    - value: the value being casted whose type is an enum
     *    - en: the type of the enumeration (value.getType ())
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateFromEnumCast (self, dmut context : &Validator, loc : &Word, t : &Type, value : &Value, en : &EnumType)-> &Value
        throws &ErrorMsg
    {
        if (t == en.getProxy ()) { // if the type inside the enumeration is the type of the cast there is no problem
            let auxType = t;
            return CastValue::new (loc, auxType, value);
        }

        // We can cast an enumeration into other types if the proxy type is castable to 't'
        match t {
            i : &IntType => return self.validateIntCast (alias context, loc, i, value, en.getProxy ());
            f : &FloatType => return self.validateFloatCast (alias context, loc, f, value, en.getProxy ());
            ct : &CharType => return self.validateCharCast (alias context, loc, ct, value, en.getProxy ());
            p : &PointerType => return self.validatePointerCast (alias context, loc, p, value, en.getProxy ());
            cp : &ClassPtrType => return self.validateClassPtrCast (alias context, loc, cp, value, en.getProxy ());            
        }

        /// Other casts are not allowed
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), t));
    }
    
}
