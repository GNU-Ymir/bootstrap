mod ymirc::semantic::validator::operator::cast_;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::utils::math;
import ymirc::syntax::expression::cast_;
import ymirc::global::core_;

import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;
import ymirc::syntax::expression::_;
import ymirc::utils::bigint;
import ymirc::utils::bigfloat;

import std::algorithm::comparison;
import std::collection::vec;
import std::io;

/**
 * The cast validator is used to validate CastExpr
 */
pub class CastValidator {

    /**
     * Create an empty validator
     */
    pub self () {}

    /**
     * Validate a cast expression that returns a value
     * @params: 
     *    - context: the context of the validation
     *    - c: the cast operator to validate
     * @returns: a value
     * @throws:
     *    - &ErrorMsg, if the validation failed
     */
    pub fn validateValue (self, dmut context : &Validator, c : &CastExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.validateValue (c.getValue ());
        let type = context:.validateType (c.getType ());

        self.validateCast (alias context, loc-> c.getLoc (), value, type)
    }

    /**
     * Validate the implicit cast of 'value' into 'type'
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the cast
     *     - value: the value to cast
     *     - type: the type into which to cast
     * @returns: a value
     * @throws:
     *      - &ErrorMsg: if the validation failed
     * */
    pub fn validateCast (self, dmut context : &Validator, loc : &Word = EOF_WORD, value : &Value, type : &Type)-> &Value
        throws &ErrorMsg
    {
        let iLoc = if (loc.isEof ()) { value.getLoc () } else { loc };

        // if the value is proxied within an enum type, then the casting is ok
        match value.getType () {
            EnumType () => {
                match context.verifyCompatibleType (loc, value.getLoc (), type, value.getType ())? {
                    Ok () => return context:.verifyCompatibleTypeWithValue (loc, type, value, byReference-> false);
                }
            }
        }

        // It is possible to cast into the following types, with some conditions
        let ret = match type {
            i : &IntType => { self.validateIntCast (alias context, iLoc, i, value, value.getType ()) }
            f : &FloatType => { self.validateFloatCast (alias context, iLoc, f, value, value.getType ()) }
            ct : &CharType => { self.validateCharCast (alias context, iLoc, ct, value, value.getType ()) }
            b : &BoolType => { self.validateBoolCast (alias context, iLoc, b, value, value.getType ()) }
            p : &PointerType => { self.validatePointerCast (alias context, iLoc, p, value, value.getType ()) }
            cp : &ClassPtrType => { self.validateClassPtrCast (alias context, iLoc, cp, value, value.getType ()) }
            _ => {
                // If the value contains an enumeration, it can be casted into the proxy type
                match value.getType () {
                    en : &EnumType => { self.validateFromEnumCast (alias context, iLoc, type, value, en) }
                    _ => {
                        // Other casts are not allowed
                        throw ErrorMsg::fatal (iLoc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), type));
                    }
                }
            }
        };

        context.getCompileTimeInterpreter ().reduce (ret)
    }

    /**
     * Validate an implicit cast of 'value' to 'type'
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - value: the value to cast
     *    - type: the type to which the cast is performed
     * @returns: the casted value (or 'value' if nothing has to be changed)
     * @throws:
     *    - &ErrorMsg: if the implicit cast is not possible
     * */
    pub fn validateImplicit (self, dmut context : &Validator, loc : &Word, value : &Value, type : &Type)-> &Value
        throws &ErrorMsg
    {
        // If the types are compatible, no need for implicit casting
        let err = match context.verifyCompatibleType (loc, value.getLoc (), type, value.getType ())? {
            Ok () => {
                if (context.isProxy (type, value.getType ())) match context.getCompileTimeInterpreter ().reduce (value) {
                    e : &EnumFieldAccessValue => { // implicit cast from enum value to inner type of the enum
                        return self.validateImplicit (alias context, loc, e.getContent (), type); // types are compatible, but there might be a better specialization
                    }
                }

                // directly compatible (we return immediately the value without reduction it might be forced to no reduction - e.g. for reference)
                return value;
            }
            Err (error : &ErrorMsg) => {
                error
            }
            _ => __pragma!panic ();
        };

        // reduce the value to find the real value to implicitely cast (e.g. cast!i8 (1 + 2))
        let rvalue = context.getCompileTimeInterpreter ().reduce (value);

        // If the value is contained within another, we need to implicitely cast inner value
        match rvalue {
            b : &BlockValue => {
                return self.validateImplicitInBlock (alias context, loc, type, b, error-> err);
            }
            e : &EnumFieldAccessValue => {
                { // type is not a proxy, but maybe it is implicitely castable, e.g. enum (i32) -> i8
                    return self.validateImplicit (alias context, loc, e.getContent (), type);
                } catch {
                    innerErr : &ErrorMsg => throw err.withNote ([innerErr]);
                }
            }
        }

        // Some types allow implicit cast for specific values
        match type {
            p : &PointerType => { return self.validateImplicitPointer (alias context, loc, p, rvalue, error-> err) }
            o : &OptionType => { return self.validateImplicitOption (alias context, loc, o, rvalue, error-> err) }
            i : &IntType => { return self.validateImplicitInt (alias context, loc, i, rvalue, error-> err) }
            f : &FloatType => { return self.validateImplicitFloat (alias context, loc, f, rvalue, error-> err) }
            c : &CharType => { return self.validateImplicitChar (alias context, loc, c, rvalue, error-> err) }
            a : &ArrayType => { return self.validateImplicitArray (alias context, loc, a, rvalue, error-> err) }
            s : &SliceType => { return self.validateImplicitSlice (alias context, loc, s, rvalue, error-> err) }
            t : &TupleType => { return self.validateImplicitTuple (alias context, loc, t, rvalue, error-> err) }
            f : &FuncPtrType => { return self.validateImplicitFptr (alias context, loc, f, rvalue, error-> err) }
            d : &DelegateType => { return self.validateImplicitDelegate (alias context, loc, d, rvalue, error-> err) }
        }

        // Others don't
        throw err;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             INT              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type int
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - i: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateIntCast (self, dmut _ : &Validator, loc : &Word, i : &IntType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            iC : &IntType => { // int value can be casted to any int value signed or unsigned
                if (iC.getSize () == i.getSize () && iC.isSigned () == i.isSigned ()) {
                    return value;
                }

                return CastValue::new (loc, i, value);
            }
            c : &CharType => {
                // char values can be casted to unsigned int, if they have the same size (i.e. c8 => u8, c32 => u32)
                if (!i.isSigned () && c.getSize () == i.getSize ()) {
                    return CastValue::new (loc, i, value);
                }
            }
            BoolType () => {
                // bool values can be casted to u8
                if (!i.isSigned () && i.getSize () == 8u16) {
                    return CastValue::new (loc, i, value);
                }
            }
            FloatType () => {
                // float values can be casted to i32,i64, ..., or u32, u64, ...
                if (i.getSize () >= 32u16) {
                    return CastValue::new (loc, i, value);
                }
            }
        }

        // Other types are not castable to int
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), i));
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================            FLOAT             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type float
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - f: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateFloatCast (self, dmut _ : &Validator, loc : &Word, f : &FloatType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            fC : &FloatType => { // only float types are castable to float types
                if (fC.getSize () == f.getSize ()) {
                    return value;
                }

                return CastValue::new (loc, f, value);
            }
            i : &IntType => {
                if (i.getSize () >= 32u16) {
                    return CastValue::new (loc, f, value);
                }
            }
        }

        // Other types are not castable to float
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), f));        
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             CHAR             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type char
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - c: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateCharCast (self, dmut _ : &Validator, loc : &Word, c : &CharType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            cC : &CharType => { // char can be casted into other chars, it is up to the user to make sure there is no lost in data (no warning if the data is known at compile time?)
                if (cC.getSize () == c.getSize ()) {
                    return value;
                }

                return CastValue::new (loc, c, value);
            }
            i : &IntType => { // int can be casted into char if they are of the same size and unsigned (u8 -> c8, u32 -> c32)
                if (!i.isSigned () && i.getSize () == c.getSize ()) {
                    return CastValue::new (loc, c, value);
                }
            }
        }

        // Other types are not castable to char
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), c));
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             BOOL             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type bool
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - b: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateBoolCast (self, dmut _ : &Validator, loc : &Word, b : &BoolType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            i : &IntType => { // int can be casted into bool if they are of size 8 and unsigned (u8 -> bool)
                if (!i.isSigned () && i.getSize () == 8u16) {
                    return CastValue::new (loc, b, value);
                }
            }
            BoolType () => {
                return value;
            }
        }

        // Other types are not castable to bool
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), b));
    }

    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           POINTER            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type pointer
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - p: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validatePointerCast (self, dmut context : &Validator, loc : &Word, p : &PointerType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            oP : &PointerType => {
                if (oP.getInners ()[0] == p.getInners ()[0]) {
                    // the cast is to the same type, no need to cast
                    return value;
                } else {
                    {
                        let auxType = p.clone (pattern-> oP);

                        // Make sure there is no implicit alias involved
                        context:.verifyMemoryOwner (loc, vType, value, false);
                        return CastValue::new (loc, auxType, value, isLvalue-> true)
                    } catch {
                        _ : &ErrorMsg => { // else, cast to an imutable value
                            let auxType = p;
                            return CastValue::new (loc, auxType, value, isLvalue-> true)
                        }
                    }
                }
            }
        }

        // Other types are not castable to pointers
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), p));        
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================            CLASS             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from value into a value of type class ptr
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - c: the type of the cast
     *    - value: the value being casted
     *    - vType: the type of the value (e.g. value.getType (), or enum proxy)
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateClassPtrCast (self, dmut context : &Validator, loc : &Word, c : &ClassPtrType, value : &Value, vType : &Type)-> &Value
        throws &ErrorMsg
    {
        match vType {
            oC : &ClassPtrType => {
                context.verifyCompatibleType (loc, value.getLoc (), c, oC, noAncestor-> false);
                // The mutability level must be conserved, so we cannot modify the mutability level by casting classes
                let mutLevel = if (oC.getInner ().isMutable () && oC.isMutable ()) {
                    2u32
                } else if (oC.isMutable ()) {
                    1u32
                } else { 0u32 };
                
                let auxType = c.clone (mutLevel-> mutLevel);
                return CastValue::new (loc, auxType, value, isLvalue-> true);
            }
        }

        // Other types are not castable to classes
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), c));        
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             ENUM             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cast from a value ot type enum
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the cast
     *    - t: the type of the cast
     *    - value: the value being casted whose type is an enum
     *    - en: the type of the enumeration (value.getType ())
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is impossible
     */
    fn validateFromEnumCast (self, dmut context : &Validator, loc : &Word, t : &Type, value : &Value, en : &EnumType)-> &Value
        throws &ErrorMsg
    {
        if (t == en.getProxy ()) { // if the type inside the enumeration is the type of the cast there is no problem
            let auxType = t;
            return CastValue::new (loc, auxType, value);
        }

        // We can cast an enumeration into other types if the proxy type is castable to 't'
        match t {
            i : &IntType => return self.validateIntCast (alias context, loc, i, value, en.getProxy ());
            f : &FloatType => return self.validateFloatCast (alias context, loc, f, value, en.getProxy ());
            ct : &CharType => return self.validateCharCast (alias context, loc, ct, value, en.getProxy ());
            p : &PointerType => return self.validatePointerCast (alias context, loc, p, value, en.getProxy ());
            cp : &ClassPtrType => return self.validateClassPtrCast (alias context, loc, cp, value, en.getProxy ());            
        }

        /// Other casts are not allowed
        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_CAST_OP, value.getType (), t));
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =======================             IMPLICIT             =======================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Validate an implicit cast where rvalue is a block
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the implicit cast
     *    - type: the type to which the cast is performed
     *    - b: the block value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitInBlock (self, dmut context : &Validator, loc : &Word, type : &Type, b : &BlockValue, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        if (b.isSet () || b.noValue ()) throw error;
        if (b.getValues ().len == 0us) throw error;

        let nbValues = b.getValues ().len;
        let prevLastVal = b.getValues ()[nbValues - 1us];
        let lastVal = self.validateImplicit (alias context, loc, prevLastVal, type);

        let allButLast = b.getValues ()[0us .. nbValues - 1us];
        return BlockValue::new (b.getLoc (), lastVal.getType (), allButLast ~ [lastVal],
                                breakLoc-> b.getBreakerLoc (), returnLoc-> b.getReturnerLoc ());
    }

    /**
     * Implicit cast a value to a pointer type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - p: the pointer type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitPointer (self, dmut _ : &Validator, loc : &Word, p : &PointerType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match v {
            NullValue () => return NullValue::new (loc, type-> p);
        }

        throw error;
    }

    /**
     * Implicit cast a value to an option type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - o: the option type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitOption (self, dmut _ : &Validator, loc : &Word, o : &OptionType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match v {
            ErrOptionValue () => return ErrOptionValue::new (loc, type-> o);
        }

        throw error;
    }

    /**
     * Implicit cast a value to an int type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - i: the int type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitInt (self, dmut context : &Validator, loc : &Word, i : &IntType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match v {
            iv : &IntValue => {
                { // it is a cte int, we might implicit cast it if it does not overflow (ex: 1924 -> u8)
                    context.getCompileTimeInterpreter ().verifyOverFlowInt (iv.getLoc (), i, iv.getValue ()); // but we need to verify overflow
                } catch {
                    innerErr : &ErrorMsg => {
                        throw error.appendNotes ([innerErr]);
                    }
                }

                return IntValue::new (loc, i, iv.getValue ());
            }
        }

        throw error;
    }


    /**
     * Implicit cast a value to a float type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - f: the float type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitFloat (self, dmut _ : &Validator, loc : &Word, f : &FloatType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match v {
            fv : &FloatValue => { // it is cte, we can automatically transform the value into a value of type 'f'
                return FloatValue::new (loc, f, fv.getValue ());
            }
        }

        throw error;
    }

    /**
     * Implicit cast a value to a char type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - c: the char type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitChar (self, dmut context : &Validator, loc : &Word, c : &CharType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match v { // e.g. c32 -> c8
            cv : &CharValue => {
                { // Cte char value, that may be casted to other char types ('a' -> 'a'c8)
                    context.getCompileTimeInterpreter ().verifyOverFlowChar (cv.getLoc (), c, cv);
                } catch {
                    innerErr : &ErrorMsg => { // apparently not
                        throw error.appendNotes ([innerErr]);
                    }
                }

                match cv.getEncodingSize () {
                    8u16 =>  return makeCharValue (loc, cast!u32 (cv.getValue ().utf8), size-> c.getSize ());
                    16u16 => return makeCharValue (loc, cast!u32 (cv.getValue ().utf16), size-> c.getSize ());
                    _ => return makeCharValue (loc, cv.getValue ().utf32, size-> c.getSize ());
                }
            }
        }

        throw error;
    }

    /**
     * Implicit cast a value to an array type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - a: the array type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitArray (self, dmut context : &Validator, loc : &Word, a : &ArrayType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match (a.getInners ()[0], v) {
            (c : &CharType, s : &StringValue) => {
                let result = convertStringArrayValue (loc, s, resultSize-> c.getSize ());
                if (result.getLen () == a.getLen ()) return result;
            }
            (_, av : &ArrayValue) => {
                let typeLen = a.getLen ();
                let typeInnerType = a.getInners ()[0];

                let valueInnerType = av.getType ().asOf!{&ArrayType} ().getInners ()[0];
                let valueLen = av.getType ().asOf!{&ArrayType} ().getLen ();

                match (valueLen, valueInnerType, typeLen, typeInnerType) {
                    (0us, VoidType (), 0us, _) => { // [void ; 0] -> [T ; 0]
                        return ArrayValue::new (v.getLoc (), a, []);
                    }
                    (x : usize, _, y : usize, t2 : &Type) => {
                        if (x == y) { // [T ; N] -> [U ; N]
                            let dmut params = Vec!{&Value}::new ();
                            {
                                for i in 0us .. x {
                                    let innerV = self.validateImplicit (alias context, loc, av.getValues ()[i], t2);
                                    params:.push (innerV);
                                }
                            } catch {
                                innerErr : &ErrorMsg => throw error.withNote ([innerErr], alone-> true);
                            }

                            return ArrayValue::new (v.getLoc (), a, params[]);
                        }
                    }
                }
            }
        }

        throw error;
    }

    /**
     * Implicit cast a value to a slice type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - s: the slice type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitSlice (self, dmut context : &Validator, loc : &Word, s : &SliceType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match (v, v.getType ()) {
            (str : &StringValue, _ : &SliceType) => {
                if (s.getInners ()[0].isOf!{&CharType} ()) {
                    let ch = s.getInners ()[0].asOf!{&CharType} ();
                    return literal::string::convertStringSliceValue (v.getLoc (), str, resultSize-> ch.getSize ());
                }
            }
            (_ : &SliceCtorValue, sr : &SliceType) => {
                if sr.getInners ()[0].isOf!{&VoidType} () { // slice = [];
                    return SliceCtorValue::new (loc, s, NullValue::new (loc), makeIntValue (loc, 0us), isImplicitAlias-> true);
                }
            }
            (_, a : &ArrayType) => {
                if a.getInners ()[0].isOf!{&VoidType} () { // slice = [];
                    return SliceCtorValue::new (loc, s, NullValue::new (loc), makeIntValue (loc, 0us), isImplicitAlias-> true);
                }
            }
            (c : &CopierValue, sr : &SliceType) => {
                if (sr.getInners ()[0].isOf!{&VoidType} ()) {
                    return SliceCtorValue::new (loc, s, NullValue::new (loc), makeIntValue (loc, 0us), isImplicitAlias-> true);
                }

                if (c.getValue ().isOf!{&SliceCtorValue} ()) {
                    return self.validateImplicitSliceFromLit (alias context, loc, s, c.getValue ().asOf!{&SliceCtorValue} (), error);
                }
            }
        }

        context;

        throw error;
    }

    /**
     * Validate an implicit cast from a slice ctor (literal) to a slice value
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the implicit cast
     *    - s: the slice type to which the cast is performed
     *    - ctor: the slice literal value to cast
     * @returns: the casted value
     * @throws: &ErrorMsg
     * */
    fn validateImplicitSliceFromLit (self, dmut context : &Validator, loc : &Word, s : &SliceType, ctor : &SliceCtorValue, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        let array = match ctor.getPointer () { // if we have a literal, then we can construct a new casted literal from it
            addr : &AddressValue => {
                match addr.getValue () {
                    array : &ArrayValue => {
                        array
                    }
                    _ => throw error;
                }
            }
            _ => throw error;
        }

        let dmut params = Vec!{&Value}::new ();
        let mut inner : &Type = NoneType::new (loc);
        {
            let len = array.getValues ().len;
            for i in 0us .. len {
                let innerV = self.validateImplicit (alias context, loc, array.getValues ()[i], s.getInners ()[0]);
                inner = context:.getValueValidator ().addArrayType (alias context, innerV, alias params, inner);
            }
        } catch {
            innerErr : &ErrorMsg => throw error.withNote ([innerErr], alone-> true);
        }

        if (params.len () != 0us) {
            let arrType = ArrayType::new (loc, inner, params.len (), isMutable-> true);
            let arrValue = ArrayValue::new (loc, arrType, params[]);

            let addr = AddressValue::new (loc, PointerType::new (loc, inner), arrValue);
            let retCtor = SliceCtorValue::new (loc, s, addr, makeIntValue (loc, params.len ()), isImplicitAlias-> true);

            CopierValue::new (loc, s, retCtor, isDeep-> false)
        } else {
            return SliceCtorValue::new (loc, s, NullValue::new (loc), makeIntValue (loc, 0us), isImplicitAlias-> true);
        }
    }

    /**
     * Implicit cast a value to a tuple type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - s: the tuple type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitTuple (self, dmut context : &Validator, loc : &Word, t : &TupleType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match v {
            tv : &TupleValue => {
                if (tv.getArity () != t.getInners ().len) {
                    throw error;
                }

                let dmut params = Vec!{&Value}::new ();
                let dmut types = Vec!{&Type}::new ();

                {
                    for i in 0us .. tv.getArity () {
                        let innerV = self.validateImplicit (alias context, loc, tv.getValues ()[i], t.getInners ()[i]);
                        context:.getValueValidator ().addTupleType (alias context, innerV, alias params, alias types);
                    }
                } catch {
                    innerErr : &ErrorMsg => throw error.withNote ([innerErr], alone-> true);
                }

                let type = TupleType::new (tv.getLoc (), types[], isMutable-> true);
                return TupleValue::new (tv.getLoc (), type, params[]);
            }
        }

        throw error;
    }

    /**
     * Implicit cast a value to a funcptr type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - s: the funcptr type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitFptr (self, dmut context : &Validator, loc : &Word, f : &FuncPtrType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match v {
            lmbd : &LambdaValue => {
                let (proto, frame) = context:.getLambdaValidator ():.validateLambdaBody (alias context, lmbd, f.getParameters ());
                context.verifyCompatibleType (loc, lmbd.getLoc (), f, proto.getType ());
                context:.getLambdaValidator ():.insertGenerator (alias context, frame);

                return proto;
            }
        }

        throw error;
    }

    /**
     * Implicit cast a value to a delegate type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - s: the delegate type to which the cast has to be made
     *    - v: the value to cast
     * @returns: the casted value
     * @throws:
     *    - &ErrorMsg: if the cast is not allowed
     * */
    fn validateImplicitDelegate (self, dmut context : &Validator, loc : &Word, d : &DelegateType, v : &Value, error : &ErrorMsg)-> &Value
        throws &ErrorMsg
    {
        match v {
            lmbd : &LambdaValue => {
                let (proto, frame) = context:.getLambdaValidator ():.validateLambdaBody (alias context, lmbd, d.getParameters ());
                context.verifyCompatibleType (loc, lmbd.getLoc (), d, proto.getType ());
                context:.getLambdaValidator ():.insertGenerator (alias context, frame);

                return proto;
            }
        }

        throw error;
    }

}
