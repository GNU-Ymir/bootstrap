in expandop;

use ymirc::semantic::validator::{visitor, errors, template::_};

use ymirc::errors::_;
use ymirc::utils::format;

use ymirc::syntax::{_,
                    declaration::_,
                    expression::{_, literal::_, macro_::_, operator::_, template::_}};

use ymirc::lexing::{word, tokens};
use ymirc::global::core_;

use ymirc::semantic::generator::{value::_, type::_};
use ymirc::semantic::generator::type::{_,
                                       custom::_,
                                       native::{_, scalar::_, compound::_},
                                       temporary::_};

use ymirc::semantic::generator::value::{_,
                                        construct::{_, delegate::_},
                                        literal::_,
                                        memory::_,
                                        operator::{_, binary::_, call::_, fields::_, map::_, slice::_, unary::_},
                                        operator::map::iteration::_,
                                        prototypes::_,
                                        scope::_,
                                        syntax::_,
                                        template::_};

/**
 * The validator for expand and deep expand
 * */
pub record ExpandOpValidator {

    /**
     * Create an empty validator
     * */
    pub self () {}


    /**
     * Validate a expansion operation
     * @params:
     *    - context: the context of the validation
     *    - i: the intrinsic expression to validate
     * @returns: the expanded value
     * @throws:
     *    - &ErrorMsg: if the validation failed
     * */
    pub fn validateExpand (self, dmut context : &Validator, i : &IntrinsicExpr)-> &Value
        throws ErrorMsg
    {
        let mValue = context:.getCompileTimeInterpreter ():.reduce (context:.getValueValidator ().validate (alias context, i.getContent ()));
        context:.verifyCompleteTypeWithValue (i.getContent ().getLoc (), mValue.getType (), mValue, construct-> false);

        let (byAlias, fVal) = match mValue {
            a : &AliaserValue => { (true, a.getValue ()) }
            _ => { (false, mValue) }
        };

        let (result, useAlias) = match fVal.getType () {
            t : &TupleType => {
                self.validateExpandTuple (alias context, t, fVal, i, byAlias)
            }
            a : &ArrayType => {
                self.validateExpandArray (alias context, a, fVal, i, byAlias)
            }
            a : &SliceType => {
                self.validateExpandSlice (alias context, a, fVal, i, byAlias)
            }
            c : &ClassPtrType => {
                self.validateExpandClass (alias context, c, fVal, i, byAlias)
            }
            _ => {
                return mValue;
            }
        };

        if (!useAlias && byAlias) {
            throw copy ErrorMsg::fatal (mValue.getLoc (), format (ValidateErrorMessage::UNECESSARY_ALIAS, mValue.getType ()));
        }

        result
    }

    /**
     * Validate an expansion operation on a tuple value
     * @params:
     *    - context: the context of the validation
     *    - t: the tuple type being expanded
     *    - value: the value to expand
     *    - i: the operator
     * @returns: the expanded value
     * */
    fn validateExpandTuple (self, dmut context : &Validator, t : &TupleType, value : &Value, i : &IntrinsicExpr, byAlias : bool)-> (&Value, bool)
        throws ErrorMsg
    {
        let mut values : [&Value] = [];
        let mut useAlias = false;
        for it in 0us .. t.getInners ().len {
            let type = t.getInners ()[it];
            if (!byAlias) {
                let access = context:.getBinOpValidator ().createTupleFieldAccess (i.getLoc (), type.clone (0u32), value, it);
                values ~= [context:.getCompileTimeInterpreter ():.reduce (access)];
            } else {
                let access = copy TupleFieldAccessValue (i.getLoc (), type, value, it);
                let (fAcc, useAlias_) = if (byAlias && type.isMutable () && type.needExplicitAlias ()) {
                    (copy AliaserValue (access.getLoc (), access.getType (), access, fromExpansion-> true), true)
                } else {
                    (access, false)
                };

                values ~= [fAcc];
                useAlias = useAlias || useAlias_;
            }
        }

        (copy ExpandValue (i.getLoc (), values), useAlias)
    }

    /**
     * Validate an expansion operation on a class value
     * @params:
     *    - context: the context of the validation
     *    - c: the class type being expanded
     *    - value: the value to expand
     *    - i: the operator
     * @returns: the expanded value
     * */
    fn validateExpandClass (self, dmut context : &Validator, c : &ClassPtrType, value : &Value, i : &IntrinsicExpr, byAlias : bool)-> (&Value, bool)
        throws ErrorMsg
    {
        let mut values : [&Value] = [];
        let mut useAlias = false;
        let (inPrv, inProt) = context:.getCurrentClassContextProtections (c.getInner ());
        let clRef = c.getInner ();

        for it in clRef.getLocalFields () match it {
            field : &VarDeclValue => {
                let canAccess = if (clRef.getSymbol ().isFieldPrivate (field.getLoc ().str)) { inPrv }
                else if (clRef.getSymbol ().isFieldProtected (field.getLoc ().str)) { inProt || inPrv }
                else { true };

                if (canAccess) {
                    if (context.isInFieldConstruction () && context.getFieldConstructionType () == clRef) { // it is a local field of the class being constructed
                        if (field.getLoc ().str !in context.getFieldValidated ()) { // And the field is not init yet
                            throw copy ErrorMsg::fatal (i.getLoc (), format (ValidateErrorMessage::CLASS_FIELD_NOT_INIT_YET, field.getLoc ().str),
                                                   notes-> copy [copy ErrorMsg::note (field.getLoc (), ValidateErrorMessage::DECLARED_HERE)]);
                        }
                    }

                    let type = if (byAlias && value.getType ().isDeeplyMutable ()) { field.getVarType () } else { field.getVarType ().clone (0u32) };
                    let acc = if (clRef.isStruct ()) {
                        copy StructFieldAccessValue (i.getLoc (), type, value, field.getLoc ().str)
                    } else {
                        copy ClassFieldAccessValue (i.getLoc (), type, value, field.getLoc ().str)
                    };

                    let (fAcc, useAlias_) = if (byAlias && type.isMutable () && type.needExplicitAlias ()) {
                        (copy AliaserValue (acc.getLoc (), acc.getType (), acc, fromExpansion-> true), true)
                    } else {
                        (acc, false)
                    };

                    values ~= [fAcc];
                    useAlias = useAlias || useAlias_;
                }
            }
        }

        (copy ExpandValue (i.getLoc (), values), useAlias)
    }


    /**
     * Validate an expansion operation on an array value
     * @params:
     *    - context: the context of the validation
     *    - a: the array type being expanded
     *    - value: the value to expand
     *    - i: the operator
     * @returns: the expanded value
     * */
    fn validateExpandArray (self, dmut context : &Validator, a : &ArrayType, value : &Value, i : &IntrinsicExpr, byAlias : bool)-> (&Value, bool)
        throws ErrorMsg
    {
        let mut values : [&Value] = [];
        let mut useAlias = false;

        let type = a.getInners ()[0];
        for it in 0us .. a.getLen () {
            if (!byAlias) {
                let access = context:.getIndexOpValidator ().createArrayAccess (i.getLoc (), type, value, makeIntValue (i.getLoc (), it));
                values ~= [context:.getCompileTimeInterpreter ():.reduce (access)];
            } else {
                let access = copy ArrayAccessValue (i.getLoc (), type, value, makeIntValue (i.getLoc (), it));
                let (fAcc, useAlias_) = if (byAlias && type.isMutable () && type.needExplicitAlias ()) {
                    (copy AliaserValue (access.getLoc (), access.getType (), access, fromExpansion-> true), true)
                } else {
                    (access, false)
                };

                values ~= [fAcc];
                useAlias = useAlias || useAlias_;
            }

        }

        (copy ExpandValue (i.getLoc (), values), useAlias)
    }

    /**
     * Validate an expansion operation on a slice value
     * @params:
     *    - context: the context of the validation
     *    - a: the slice type being expanded
     *    - value: the value to expand
     *    - i: the operator
     * @returns: the expanded value
     * */
    fn validateExpandSlice (self, dmut context : &Validator, a : &SliceType, value : &Value, i : &IntrinsicExpr, byAlias : bool)-> (&Value, bool)
        throws ErrorMsg
    {
        let sizeType = copy IntType (i.getLoc (), size-> 0u16, signed-> false);
        let len = {
            context:.getCompileTimeInterpreter ():.computeInt (copy StructFieldAccessValue (i.getLoc (), sizeType, value, SliceKeys::LEN))
        } catch {
            _ : &ErrorMsg => {
                throw copy ErrorMsg::fatal (i.getLoc (), format (ValidateErrorMessage::UNKNOWN_LENGTH_OF_EXPANSION, a));
            }
        }

        let mut values : [&Value] = [];
        let mut useAlias = false;

        let type = a.getInners ()[0];
        for it in 0us .. len.toT!{usize} () {
            let access = copy SliceAccessValue (i.getLoc (), type, value, makeIntValue (i.getLoc (), it));
            let (fAcc, useAlias_) = if (byAlias && type.isMutable () && type.needExplicitAlias ()) {
                (copy AliaserValue (access.getLoc (), access.getType (), access, fromExpansion-> true), true)
            } else {
                (access, false)
            };

            values ~= [fAcc];
            useAlias = useAlias || useAlias_;
        }


        (copy ExpandValue (i.getLoc (), values), useAlias)
    }

}
