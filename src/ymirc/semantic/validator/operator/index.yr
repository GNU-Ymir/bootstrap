in index;

use ymirc::semantic::validator::{visitor, errors, template::_};
use ymirc::syntax::{_,
                    declaration::_,
                    expression::{_, literal::_, macro_::_, operator::_, template::_}};

use ymirc::errors::_;
use ymirc::utils::{format, bigint};
use ymirc::semantic::generator::{value::_, type::_};
use ymirc::syntax::expression::_;
use ymirc::syntax::keys;
use ymirc::lexing::{word, tokens};
use ymirc::global::core_;

use ymirc::semantic::generator::type::{_,
                                       custom::_,
                                       native::{_, scalar::_, compound::_},
                                       temporary::_};

use ymirc::semantic::generator::value::{_,
                                        construct::{_, delegate::_},
                                        literal::_,
                                        memory::_,
                                        operator::{_, binary::_, call::_, fields::_, map::_, slice::_, unary::_},
                                        operator::binary::{bool_::_, char_::_, float_::_, int_::_, pointer_::_},
                                        operator::map::iteration::_,
                                        prototypes::_,
                                        scope::_,
                                        syntax::_,
                                        template::_};

/**
 * The index validator is used to validate MultOpExpr
 * It is a class validator because index operations are complex
 */
pub record IndexOpValidator {

    /**
     * Create an empty validator     
     */
    pub self () {}

    /**
     * Validate an index expression
     * @params:
     *  - context: the context of the validation
     *  - mult: the mult operator to validate
     * @returns: a value
     * @throws:
     *    - &ErrorMsg: if the validation failed
     */
    pub fn validate (self, dmut context : &Validator, mult : &MultOperatorExpr) -> &Value
        throws ErrorMsg
    {
        let left = if (mult.getLoc () == Tokens::LCRO_AND) {
            context:.getValueValidator ().validateAlias (alias context, mult.getLoc (), mult.getLeft (), isClass-> true, isField-> false)
        } else {
            context.implicitEnumUnwrap (context:.validateValue (mult.getLeft ()))
        };

        self.validate (alias context, mult.getLoc (), left, mult.getRights (), inCopy-> context.isDynamic (mult))
    }

    /**
     * Validate an index expression
     * @params:
     *  - context: the context of the validation
     *   - loc: the location of the operation
     *   - left: the left operand
     *   - right: the right operands
     * @returns: a value
     * @throws:
     *    - &ErrorMsg: if the validation failed
     */
    pub fn validate (self, dmut context : &Validator, loc : &Word, left : &Value, rightExps : [&Expression], inCopy : bool = false)-> &Value
        throws ErrorMsg
    {
        let byAlias = match left {
            a : &ClassAliaserValue => {
                context:.enterDollar (a.getValue ());
                true
            }
            v : _ => {
                context:.enterDollar (v);
                false
            }
        };

        let (ret, useAlias) = {
            let (rights, rTypes) = self.validateRightOperands (alias context, rightExps);
            match left.getType () {
                ArrayType () => {
                    (self.validateArray (alias context, loc, left, rights, rTypes, inCopy), false)
                }
                SliceType () => {
                    (self.validateSlice (alias context, loc, left, rights, rTypes), false)
                }
                PointerType () => {
                    (self.validatePointer (alias context, loc, left, rights, rTypes), false)
                }
                MapType () => {
                    (self.validateMap (alias context, loc, left, rights, rTypes), false)
                }
                c : &ClassPtrType => {
                    (self.validateClassIndex (alias context, loc, c, left, rights), true)
                }
                _ => {
                    throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), rTypes));
                }
            }
        } exit {
            context:.exitDollar ();
        };

        if (byAlias && !useAlias) {
            throw copy ErrorMsg::fatal (left.getLoc (), format (ValidateErrorMessage::UNECESSARY_ALIAS, left.getType ()));
        }

        ret
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          ARRAYS          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Validate a index access on array
     * @params: 
     *   - context: the context of the validation
     *   - loc: the location of the index
     *   - left: the left operand of the operation (assumed to be of array type)
     *   - rights: the list of right operand of the operation
     *   - inCopy: true iif the result is copied immediatly
     * @returns: the result value
     * @throws: 
     *    - &ErrorMsg: if this operation is impossible
     */
    fn validateArray (self, dmut context : &Validator, loc : &Word, left : &Value, rights : [&Value], rTypes : [&Type], inCopy : bool)-> &Value
        throws ErrorMsg
    {
        if (rTypes.len == 1us && rTypes [0] of IntType) {
            return self.validateArrayInteger (alias context, loc, left, rights [0]);
        } else if (rTypes.len == 1us && rTypes [0] of RangeType) {
            if inCopy {
                return self.validateArrayRangeAsSlice (alias context, loc, left, rights [0]);
            } else {
                return self.validateArrayRange (alias context, loc, left, rights [0]);
            }
        }

        throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), rTypes));
    }

    /**
     * Validate an index access on an array value using an integer value
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the index
     *    - left: the left operand (assumed to be of type array)
     *    - right: the right operand (assumed to be of type int)
     * @returns: the access value
     * @throws:
     *    - &ErrorMsg: if this operation is impossible
     */
    fn validateArrayInteger (self, dmut context : &Validator, loc : &Word, left : &Value, right : &Value)-> &Value
        throws ErrorMsg
    {
        let sizeType = copy IntType (loc, size-> 0u16, signed-> false);
        let innerType = left.getType ().asOf!{&ArrayType} ().getInners ()[0us];
        let arraySize = left.getType ().asOf!{&ArrayType} ().getLen ();

        // Cte verification if possible, to check wether the index is positive and does not overflow the array size
        let cteTest = self.verifyNotNegativeInt (alias context, loc, left.getType (), right, maximum-> arraySize, equalMax-> false);

        // Index is cast into a usize (as it will have to, for pointer arithmetic)
        let index = match right.getType ().asOf!{&IntType} ().getSize () {
            0us => { right }
            _ => { context:.getCastValidator ().validateCast (alias context, right, sizeType) }
        };

        let arrayAccess = context:.getCompileTimeInterpreter ():.reduce (self.createArrayAccess (loc, innerType, left, index));

        if (!context.getUnsafeContextLoc ().isEof ()) {
            context:.verifyUnsafeContext (loc);
            return arrayAccess;
        }

        // If the test cannot be made in cte, then add a runtime check
        if (!cteTest) {
            let cmp = copy CmpIntOperatorValue (loc, BinaryOperators::INF_EQUAL, makeIntValue (loc, arraySize), index);
            let cond = self.createOutOfArrayTest (alias context, loc, cmp);

            copy BlockValue (loc, innerType, copy [cond, arrayAccess], isSet-> true)
        } else {
            arrayAccess
        }
    }

    /**
     * Validate an index access on an array value using a range operand
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the index
     *    - left: the left operand (assumed to be of type array)
     *    - right: the right operand (assumed to be of type range)
     * @returns: the access value (of type slice)
     * @throws:
     *    - &ErrorMsg: if this operation is impossible
     * */
    fn validateArrayRangeAsSlice (self, dmut context : &Validator, loc : &Word, left : &Value, right : &Value)-> &Value
        throws ErrorMsg
    {
        match right.getType ().asOf!{&RangeType} ().getInners ()[0] {
            indexType : &IntType => {
                let sizeType = copy IntType (loc, size-> 0u16, signed-> false);
                let innerType = left.getType ().asOf!{&ArrayType} ().getInners ()[0];
                let arraySize = left.getType ().asOf!{&ArrayType} ().getLen ();

                // We create uniq values, to make sure they are constructed only one time
                // They are involved multiple times in the operation
                let rng = right;
                let fstIndex = context:.getCompileTimeInterpreter ():.reduce (copy StructFieldAccessValue (loc, indexType, rng, RangeKeys::FST));
                let scdIndex = context:.getCompileTimeInterpreter ():.reduce (copy StructFieldAccessValue (loc, indexType, rng, RangeKeys::SCD));

                // Cte verification if possible, to check wether the range values are correctly bounded
                let cteFst = self.verifyNotNegativeInt (alias context, loc, left.getType (), fstIndex);
                let cteScd = self.verifyNotNegativeInt (alias context, loc, left.getType (), scdIndex, maximum-> arraySize, equalMax-> true);

                // Cte verification to check wether the range is increasing or decreasing
                let cteOrder = self.verifyScdGTFst (alias context, loc, left.getType (), fstIndex, scdIndex);


                let (fstSizeIndex, scdSizeIndex) = match indexType.getSize () {
                    0us => { (fstIndex, scdIndex) }
                    _ => { // casting index values into usize, as they will be involved in pointer arithmetics
                        let fstSize = context:.getCastValidator ().validateCast (alias context, fstIndex, sizeType);
                        let scdSize = context:.getCastValidator ().validateCast (alias context, scdIndex, sizeType);
                        (fstSize, scdSize)
                    }
                };

                let sizeValue = context:.getCastValidator ().validateCast (alias context,
                                                                           context:.getSizeofValidator ():.validate (alias context, loc, innerType),
                                                                           sizeType);

                // The new len is the subtraction of (range.scd - range.fst)
                let newLen = context:.getCompileTimeInterpreter ():.reduce (copy BinaryMathIntOperatorValue (loc, sizeType, BinaryOperators::MINUS, scdSizeIndex, fstSizeIndex));
                let ptrType = copy PointerType (loc, innerType, isMutable-> innerType.isMutable ()); // the pointer type of the slice value [ptr ; len]
                let arrayAddr = copy AddressValue (loc, ptrType, left);

                let fstPaddIndex = copy BinaryMathIntOperatorValue (loc, sizeType, BinaryOperators::STAR, fstSizeIndex, sizeValue);
                let newPtr = copy BinaryMathPointerOperatorValue (loc, ptrType, BinaryOperators::PLUS,
                                                                  arrayAddr,
                                                                  fstPaddIndex); // the new pointer is the address of the array + range.fst

                let sliceType = copy SliceType (loc, innerType, isMutable-> true);
                let sliceValue = copy SliceCtorValue (loc, sliceType, newPtr,
                                                      NULL_VALUE, // no block info, the array is stack located
                                                      newLen, isImplicitAlias-> false); // Construction of the slice from pointer and length

                if (!context.getUnsafeContextLoc ().isEof ()) {
                    context:.verifyUnsafeContext (loc);
                    return sliceValue;
                }

                // If tests cannot be made at cte, then add runtime checks
                return if (!cteFst || !cteScd || !cteOrder) {
                    // The debug test is if (len < rng.scd || rng.scd < rng.fst) throw OutOfArray ();
                    let cmpLen = copy CmpIntOperatorValue (loc, BinaryOperators::INF, makeIntValue (loc, arraySize), scdIndex);
                    let cmpRange = copy CmpIntOperatorValue (loc, BinaryOperators::INF, scdIndex, fstIndex);
                    let cmp = copy LogicalBinBoolOperatorValue (loc, BinaryOperators::DPIPE, cmpLen, cmpRange);

                    let cond = self.createOutOfArrayTest (alias context, loc, cmp);

                    copy BlockValue (loc, sliceType, copy [cond, sliceValue], isSet-> true)
                } else {
                    sliceValue
                };
            }
        }

        throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), right.getType ()));
    }


    /**
     * Validate an index access on an array value using a range operand
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the index
     *    - left: the left operand (assumed to be of type array)
     *    - right: the right operand (assumed to be of type range)
     * @returns: the access value (of type slice)
     * @throws:
     *    - &ErrorMsg: if this operation is impossible
     * */
    fn validateArrayRange (self, dmut context : &Validator, loc : &Word, left : &Value, right : &Value)-> &Value
        throws ErrorMsg
    {
        match right.getType ().asOf!{&RangeType} ().getInners ()[0] {
            indexType : &IntType => {
                let innerArrayType = left.getType ().asOf!{&ArrayType} ().getInners ()[0us];
                let arraySize = left.getType ().asOf!{&ArrayType} ().getLen ();

                // We create uniq values, to make sure they are constructed only one time
                // They are involved multiple times in the operation
                let rng = right;
                let (fst, scd) = {
                    let fstIndex = context:.getCompileTimeInterpreter ():.computeInt (copy StructFieldAccessValue (loc, indexType, rng, RangeKeys::FST));
                    let scdIndex = context:.getCompileTimeInterpreter ():.computeInt (copy StructFieldAccessValue (loc, indexType, rng, RangeKeys::SCD));
                    (fstIndex, scdIndex)
                } catch {
                    err : &ErrorMsg => {
                        throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::RANGE_ON_ARRAY_NO_COPY, left.getType (), right.getType ()), notes-> copy [err]);
                    }
                }

                if (fst < 0) throw copy ErrorMsg::fatal (loc, end-> right.getLoc (), format (ValidateErrorMessage::NEGATIVE_INT_INDEX, left.getType (), fst));
                if (scd < 0) throw copy ErrorMsg::fatal (loc, end-> right.getLoc (), format (ValidateErrorMessage::NEGATIVE_INT_INDEX, left.getType (), scd));
                if (scd > arraySize) throw copy ErrorMsg::fatal (loc, end-> right.getLoc (), format (ValidateErrorMessage::ARRAY_OVERFLOW, arraySize, scd));
                if (fst > scd) throw copy ErrorMsg::fatal (loc, end-> right.getLoc (), format (ValidateErrorMessage::DECREASING_RANGE_ACCESS, left.getType (), fst, scd));

                let mut values : [&Value] = [];
                let mut innerType : &Type = copy NoneType (loc);
                {
                    for i in fst.to!{usize} () .. scd.to!{usize} () {
                        let acc = self.createArrayAccess (loc, innerArrayType, left, makeIntValue (loc, i));
                        innerType = context:.getLiteralValidator ().addArrayType (alias context, acc, ref values, innerType);
                    }
                } catch {
                    err : _ => {
                        std::io::println (format ("%", err));
                        panic;
                    }
                }

                if (innerType of NoneType) {
                    innerType = innerArrayType.cloneMutableTilBorrow ();
                }

                let finType = copy ArrayType (loc, innerType, (scd - fst).toT!{usize} (), isMutable-> true);
                return copy ArrayValue (loc, finType, values);
            }
        }

        throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), right.getType ()));
    }

    /**
     * Create an array access value, (assuming that if the index is cte, then index overflow was already checked)
     * @info: This function tries to optimize a bit the access if the operation can be done at cte (even without returning a fully cte value)
     * @params:
     *    - loc: the location of the access
     *    - type: the type of the access
     *    - value: the value being accessed
     *    - index: the index of the access
     * */
    pub fn createArrayAccess (self, loc : &Word, type : &Type, value : &Value, index : &Value)-> &Value {
        match (index, value) {
            (i : &IntValue, arr : &ArrayValue) => {
                // We already checked overflow
                let ib = i.getValue ().toT!{usize} ();
                arr.getValues ()[ib]
            }
            _ => {
                copy ArrayAccessValue (loc, type, value, index)
            }
        }

    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =====================================          SLICES          =====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Validate an index access on a slice value
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - left: the left operand of the access (assumed to be of type slice)
     *    - rights: the right operands of the access
     *    - rTypes: the types of the right operands
     * @returns: The slice access value
     * @throws: 
     *   - &ErrorMsg: if the access is impossible
     */
    fn validateSlice (self, dmut context : &Validator, loc : &Word, left : &Value, rights : [&Value], rTypes : [&Type])-> &Value
        throws ErrorMsg
    {
        let leftU = left;
        if (rTypes.len == 1us && rTypes [0] of IntType) {
            return self.validateSliceInteger (alias context, loc, leftU, rights [0]);
        } else if (rTypes.len == 1us && rTypes [0] of RangeType) {
            return self.validateSliceRange (alias context, loc, leftU, rights [0]);
        }

        throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), rTypes));
    }

    /**
     * Validate a index operation on a slice using a single int value
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - left: the left operand (of type slice)
     *    - right: the right operand (of type int)
     * @returns: an access value
     * @throws:
     *    - &ErrorMsg: if the access is impossible
     */
    fn validateSliceInteger (self, dmut context : &Validator, loc : &Word, left : &Value, right : &Value)-> &Value
        throws ErrorMsg
    {
        let sizeType = copy IntType (loc, size-> 0u16, signed-> false);
        let type = left.getType ().asOf!{&SliceType} ().getInners ()[0us];

        let len = context:.getCompileTimeInterpreter ():.reduce (copy StructFieldAccessValue (loc, sizeType, left, SliceKeys::LEN));
        let cteLen = context:.getCompileTimeInterpreter ().isCte (len);

        let maxSize = if (cteLen) { len.asOf!{&IntValue}().getValue () } else { copy BigInt (u64::max) };
        // Cte verification if possible, to check wether the index is positive
        let cteTest = self.verifyNotNegativeInt (alias context, loc, left.getType (), right, maximum-> maxSize.toT!{usize} (), equalMax-> false);

        // Index is cast into a usize (as it will have to, for pointer arithmetic)
        let index = match right.getType ().asOf!{&IntType} ().getSize () {
            0us => { right }
            _ => {
                context:.getCastValidator ().validateCast (alias context, right, sizeType)
            }
        };

        if (!context.getUnsafeContextLoc ().isEof ()) {
            context:.verifyUnsafeContext (loc);
            return copy SliceAccessValue (loc, type, left, index);
        }

        if (!cteLen || !cteTest) {
            // Slice size is not cte, then the test cannot be made at cte, we add a runtime check
            let cmp = copy CmpIntOperatorValue (loc, BinaryOperators::INF_EQUAL, len, index);

            let cond = self.createOutOfArrayTest (alias context, loc, cmp);
            let sliceAccess = copy SliceAccessValue (loc, type, left, index);

            copy BlockValue (loc, type, copy [cond, sliceAccess], isSet-> true)
        } else {
            copy SliceAccessValue (loc, type, left, index)
        }
    }

    /**
     * Verify that the index is not negative (if CTE)
     * @returns: true, if the test is cte
     */
    fn verifyNotNegativeInt (self, dmut context : &Validator, loc : &Word, leftType : &Type, right : &Value, maximum : usize = usize::max, equalMax : bool = true)-> bool
        throws ErrorMsg
    {
        let (isNegative, isTooBig, val) = {
            let i = context:.getCompileTimeInterpreter ():.computeInt (right);
            if (equalMax) {
                (i < 0, i > maximum, i)
            } else {
                (i < 0, i >= maximum, i)
            }
        } catch {
            // The value is not cte
            _ => { return false; }
        };

        if (isNegative) { // The cte value is negative, that cannot happen when used as index
            throw copy ErrorMsg::fatal (loc, end-> right.getLoc (), format (ValidateErrorMessage::NEGATIVE_INT_INDEX, leftType, val));
        }

        if (isTooBig) { // The cte value is bigger than the array length
            throw copy ErrorMsg::fatal (loc, end-> right.getLoc (), format (ValidateErrorMessage::ARRAY_OVERFLOW, maximum, val));
        }

        true
    }
    
    /**
     * Validate a index operation on a slice using a single range value
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - left: the left operand (of type slice)
     *    - right: the right operand (of type range)
     * @returns: an access value
     * @throws:
     *    - &ErrorMsg: if the access is impossible
     */
    fn validateSliceRange (self, dmut context : &Validator, loc : &Word, slice : &Value, right : &Value)-> &Value
        throws ErrorMsg
    {
        match right.getType ().asOf!{&RangeType} ().getInners ()[0] {
            indexType : &IntType => { // range access only works if the range is made of integers
                let sizeType = copy IntType (loc, size-> 0u16, signed-> false);
                let innerType = slice.getType ().asOf!{&SliceType} ().getInners ()[0];

                // We create uniq values, to make sure they are constructed only one time
                // They are involved multiple times in the operation
                let rng = right;
                let fstIndex = context:.getCompileTimeInterpreter ():.reduce (copy StructFieldAccessValue (loc, indexType, rng, RangeKeys::FST));
                let scdIndex = context:.getCompileTimeInterpreter ():.reduce (copy StructFieldAccessValue (loc, indexType, rng, RangeKeys::SCD));

                // Cte verification if possible, to check wether the range values are correctly bounded
                let cteFst = self.verifyNotNegativeInt (alias context, loc, slice.getType (), fstIndex);
                let cteScd = self.verifyNotNegativeInt (alias context, loc, slice.getType (), scdIndex);

                // Cte verification to check wether the range is increasing or decreasing
                let cteOrder = self.verifyScdGTFst (alias context, loc, slice.getType (), fstIndex, scdIndex);

                let (fstSizeIndex, scdSizeIndex) = match indexType.getSize () {
                    0us => { (fstIndex, scdIndex) }
                    _ => { // casting index values into usize, as they will be involved in pointer arithmetics
                        let fstSize = context:.getCastValidator ().validateCast (alias context, fstIndex, sizeType);
                        let scdSize = context:.getCastValidator ().validateCast (alias context, scdIndex, sizeType);
                        (fstSize, scdSize)
                    }
                };

                let sizeValue = context:.getCastValidator ().validateCast (alias context,
                                                                   context:.getSizeofValidator ():.validate (alias context, loc, innerType),
                                                                   sizeType);

                // The new len is the subtraction of (range.scd - range.fst)
                let newLen = context:.getCompileTimeInterpreter ():.reduce (copy BinaryMathIntOperatorValue (loc, sizeType, BinaryOperators::MINUS, scdSizeIndex, fstSizeIndex));
                let ptrType = copy PointerType (loc, innerType, isMutable-> innerType.isMutable ()); // the pointer type of the slice value [ptr ; len]

                let fstPaddIndex = copy BinaryMathIntOperatorValue (loc, sizeType, BinaryOperators::STAR, fstSizeIndex, sizeValue);
                let newPtr = copy BinaryMathPointerOperatorValue (loc, ptrType, BinaryOperators::PLUS,
                                                                  copy StructFieldAccessValue (loc, ptrType, slice, SliceKeys::PTR),
                                                                  fstPaddIndex); // the new pointer is the old pointer + range.fst

                // Getting the block info, in case we make some extension to the slice in the future
                let blkInfo = copy StructFieldAccessValue (loc, copy PointerType (loc, copy VoidType (loc)), slice, SliceKeys::BLK_INFO);

                let sliceValue = copy SliceCtorValue (loc, slice.getType (),
                                                      newPtr,
                                                      blkInfo,
                                                      newLen, isImplicitAlias-> false); // Construction of the slice from pointer and length
                let len = copy StructFieldAccessValue (loc, sizeType, slice, SliceKeys::LEN);
                let cmpLen = context:.getCompileTimeInterpreter ():.reduce (copy CmpIntOperatorValue (loc, BinaryOperators::INF, len, scdIndex));
                let cteLen = context:.getCompileTimeInterpreter ().isCte (cmpLen);

                if (!context.getUnsafeContextLoc ().isEof ()) {
                    context:.verifyUnsafeContext (loc);
                    return sliceValue;
                }

                // If tests cannot be made at cte, then add runtime checks
                return if (!cteFst || !cteScd || !cteOrder) {
                    // The debug test is if (len < rng.scd || rng.scd < rng.fst) throw OutOfArray ();
                    let cmpRange = copy CmpIntOperatorValue (loc, BinaryOperators::INF, scdIndex, fstIndex);
                    let cmp = copy LogicalBinBoolOperatorValue (loc, BinaryOperators::DPIPE, cmpLen, cmpRange);

                    let cond = self.createOutOfArrayTest (alias context, loc, cmp);
                    copy BlockValue (loc, slice.getType (), copy [cond, sliceValue], isSet-> true)
                } else {
                    if (cteLen) return sliceValue;

                    // The debug test is if (len < rng.scd) throw OutOfArray ();, we already know that rng.scd >= rng.fst
                    let cond = self.createOutOfArrayTest (alias context, loc, cmpLen);
                    copy BlockValue (loc, slice.getType (), copy [cond, sliceValue], isSet-> true)
                }
            }
        }

        throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, slice.getType (), right.getType ()));
    }

    /**
     * Verify that the range indexes are increasing
     * @returns: true if the test can be made at cte
     */
    fn verifyScdGTFst (self, dmut context : &Validator, loc : &Word, leftType : &Type, fst : &Value, scd : &Value)-> bool
        throws ErrorMsg
    {
        let (isLower, valF, valS) = {
            let f = context:.getCompileTimeInterpreter ():.computeInt (fst);
            let s = context:.getCompileTimeInterpreter ():.computeInt (scd);
            (s < f, f, s)
        } catch {
            _ => {
                return false;
            }
        };

        if (isLower) {
            throw copy ErrorMsg::fatal (loc, end-> fst.getLoc (), format (ValidateErrorMessage::DECREASING_RANGE_ACCESS, leftType, valF, valS));
        }

        true
    }

    /**
     * Create out of array conditional based on the test 'test'
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the slice access
     *    - test: the test of the conditional (conditional being entered if true at runtime)
     * @returns: a conditional value (with no else)
     */
    fn createOutOfArrayTest (self, dmut _ : &Validator, loc : &Word, test : &Value)-> &Value {
        let call = copy PanicValue (loc);
        let dmut cond = copy ConditionalValue (loc, VOID_TYPE, test, call, elsev-> UNIT_VALUE, isComplete-> false);
        cond
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ====================================          POINTERS          ====================================
     * ====================================================================================================
     * ====================================================================================================
     */

    fn validatePointer (self, dmut context : &Validator, loc : &Word, left : &Value, rights : [&Value], rTypes : [&Type])-> &Value
        throws ErrorMsg
    {
        let leftU = left;
        if (rTypes.len == 1us && rTypes [0] of IntType) {
            return self.validatePointerInteger (alias context, loc, leftU, rights[0]);
        }

        throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), rTypes));
    }

    /**
     * Validate an index access on a pointer value using an integer value
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the index
     *     - left: the left operand
     *     - right: the right operand
     * @returns: the access value
     * @throws:
     *    - &ErrorMsg: if the operation is impossible
     * */
    fn validatePointerInteger (self, dmut context : &Validator, loc : &Word, left : &Value, right : &Value)-> &Value
        throws ErrorMsg
    {
        context:.verifyUnsafeContext (loc);

        let ptype = left.getType ().asOf!{&PointerType} ();
        let retType =
            if (!left.isLvalue ()) {
                ptype.getInners ()[0].clone (0u32)
            } else {
                ptype.getInners ()[0]
            };

        if (retType of VoidType) {
            throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, ptype, right.getType ()));
        }

        let sizeType = copy IntType (loc, signed-> false, size-> 0u16);
        let sizeValue = context:.getCastValidator ().validateCast (alias context,
                                                                   context:.getSizeofValidator ():.validate (alias context, loc, retType),
                                                                   sizeType);

        // Index is cast into a usize (as it will have to, for pointer arithmetic)
        let index = match right.getType ().asOf!{&IntType} ().getSize () {
            0us => { right }
            _ => { context:.getCastValidator ().validateCast (alias context, right, sizeType) }
        }

        let shiftedIndex = copy BinaryMathPointerOperatorValue (loc, sizeType, BinaryOperators::STAR, index, sizeValue);
        let pointerValue = copy BinaryMathPointerOperatorValue (loc, ptype, BinaryOperators::PLUS, left, shiftedIndex);
        return copy DereferencerValue (loc, retType, pointerValue);
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ======================================          MAP          =======================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Validate the index operator on a map value
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - left: the left operand (assumed of type map)
     *    - rights the right operands
     *    - rTypes: the types of the right operands
     * @returns: the access operation
     * @throws:
     *    - &ErrorMsg: if the validation failed
     * */
    fn validateMap (self, dmut context : &Validator, loc : &Word, left : &Value, rights : [&Value], rTypes : [&Type])-> &Value
        throws ErrorMsg
    {
        if (rTypes.len != 1us) { // only one compatible value can be used as a key index
            throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), rTypes));
        }

        let keyType = left.getType ().asOf!{&MapType} ().getInners () [0];
        let key = { // cast the key to the inner type of the map
            context:.verifyCompatibleTypeWithValue (loc, keyType, rights [0], byReference-> false)
        } catch {
            err : &ErrorMsg => {
                throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), rTypes),
                                       notes-> copy [err]);
            }
        };

        // return type from the map information
        let valueType = left.getType ().asOf!{&MapType} ().getInners () [1];

        let errType = context:.getExceptionFromName (loc-> loc, ExceptionUtils::KEY_ERR_MAP);
        let errInstance = context:.constructObjectInstance (loc, errType, []);
        let throwVal = copy ThrowValue (loc, errInstance); // if the map does not contain the key, we throw an exception

        copy MapAccessValue (loc, valueType, left, key, throwVal)
    }

    /**
     * Validate the assignement of a value in the map from an index assign operation (i.e. mp [key] = value)
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - op: the assign operator
     *    - mp: the map type being accessed
     *    - left: the left operand (assumed of type 'mp')
     *    - leftExpr: the index expression
     *    - right: the value to assign
     * @returns: the validated operation
     * @throws:
     *    - &ErrorMsg: if the validation failed
     * */
    pub fn validateMapIndexAssign (self, dmut context : &Validator, loc : &Word, op : BinaryOperators, mp : &MapType, left : &Value, leftExpr : &MultOperatorExpr, right : &Expression)-> &Value
        throws ErrorMsg
    {
        if (!mp.needExplicitAlias ()) { // map and inner values must be mutable for the map to borrow inner values
            throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::NOT_A_LVALUE));
        }

        context:.enterDollar (left); // Dollar operator on map ?
        let (indexRights, rTypes) = {
            self.validateRightOperands (alias context, leftExpr.getRights ())
        } exit {
            context:.exitDollar ();
        };

        if (rTypes.len != 1us) { // only one compatible value can be used as a key index
             throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), rTypes));
        }

        let keyType = mp.getInners () [0];
        let key = { // cast the key to the inner type of the map
            context:.verifyCompatibleTypeWithValue (loc, keyType, indexRights [0], byReference-> false)
        } catch {
            err : &ErrorMsg => {
                throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, left.getType (), rTypes),
                                       notes-> copy [err]);
            }
        };

        let valueType = mp.getInners () [1];
        let affRight = if (op != BinaryOperators::EQUAL) { // math operation, e.g. mp [key] += value
            let innerL = self.validateMap (alias context, loc, left, indexRights, rTypes);
            let innerR = context:.validateValue (right);
            if (op == Tokens::TILDE) { // mp [key] = mp [key] ~ value
                context:.getBinOpValidator ().validateConcatOperation (alias context, loc, op, innerL, innerR)
            } else { // mp [key] = mp [key] + value
                context:.getBinOpValidator ().validateMathOperation (alias context, loc, op, innerL, innerR)
            }
        } else {
            context:.validateValue (right) // simple affectation
        };

        // Implicit cast of the value to the inner type of the map
        let realAff = context:.verifyCompatibleTypeWithValue (loc, valueType, affRight, byReference-> false);

        // If there is a concat, then we can use an append for optimisation
        match (valueType, realAff) {
            (slc : &SliceType, s : &SliceConcatValue) => { // mp [key] = mp [key] ~ [1,2];
                let innerL = self.validateMap (alias context, loc, left, indexRights, rTypes);
                return context:.getBinOpValidator ().validateSliceAppend (alias context, loc, slc, innerL, s.getRight ());
            }
        }

        // Verification of the memory movement
        context.verifyMemoryOwner (loc, valueType, realAff, construct-> false, byReference-> false);
        copy MapInsertValue (loc, copy VoidType (loc), left, key, realAff)
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          CLASS INDEX          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Validate the index operator override on a class value
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - cptr: the class type of the left operand
     *    - rights: the parameter passed to the index operator
     * @returns: the call to the opIndex method
     * @throws:
     *    - &ErrorMsg: if the index operation failed
     * */
    fn validateClassIndex (self, dmut context : &Validator, loc : &Word, cptr : &ClassPtrType, left : &Value, rights : [&Value])-> &Value
        throws ErrorMsg
    {
        {
            let acc = context:.constructObjectMethodAcc (loc, cptr, left, OpOverrideNames::INDEX);
            return context:.getCallOpValidator ().validate (alias context, loc, acc, rights);
        } catch {
            err : &ErrorMsg => {
                let params = context:.getCallOpValidator ().formatParamsWithTypes (rights);
                throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, cptr, params),
                                       notes-> copy [ err ]);
            }
        }
    }

    /**
     * Validate the override of the opIndexAssign operator (e.g. a:[0] = 9)
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - leftIndex: the left operand
     *    - leftExpr: the left part of the operation (i.e. a:[0])
     *    - right: the value that is affected
     * @returns: the call to the opIndexAssign method
     * @throws:
     *    - &ErrorMsg: if the index operation is not valid
     * */
    pub fn validateClassIndexAssign (self, dmut context : &Validator, loc : &Word, op : BinaryOperators, cptr : &ClassPtrType, left : &Value, leftExpr : &MultOperatorExpr, right : &Expression)-> &Value
        throws ErrorMsg
    {
        let nAlias = match left {
            a : &ClassAliaserValue => { context:.enterDollar (a.getValue ()); a.getValue () }
            v : _ => { context:.enterDollar (v); v }
        };

        let (indexRights, _) = {
            self.validateRightOperands (alias context, leftExpr.getRights ())
        } exit {
            context:.exitDollar ();
        };

        let affRight = if (op != BinaryOperators::EQUAL) {
            let innerL = self.validateClassIndex (alias context, loc, cptr, nAlias, indexRights);
            let innerR = context:.validateValue (right);
            if (op == Tokens::TILDE) { // cl [key] ~= value
                context:.getBinOpValidator ().validateConcatOperation (alias context, loc, op, innerL, innerR)
            } else {
                context:.getBinOpValidator ().validateMathOperation (alias context, loc, op, innerL, innerR)
            }
        } else {
            context:.validateValue (right) // simple affectation
        };

        {
            let acc = context:.constructObjectMethodAcc (loc, cptr, left, OpOverrideNames::INDEX_ASSIGN);
            return context:.getCallOpValidator ().validate (alias context, loc, acc, indexRights ~ [affRight]);
        } catch {
            err : &ErrorMsg => {
                let params = context:.getCallOpValidator ().formatParamsWithTypes (indexRights ~ [affRight]);
                throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_INDEX_OP, cptr, params),
                                       notes-> copy [ err ]);
            }
        }
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          RIGHT OPERANDS          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Validate the right operands
     * @params: 
     *   - context: the context of the validation
     *   - rightOps: the list of right operands
     * @returns: the list of right operands
     */
    fn validateRightOperands (self, dmut context : &Validator, rightOps : [&Expression])-> ([&Value], [&Type])
        throws ErrorMsg
    {
        let mut errors : [&ErrorMsg] = [];
        let mut rights : [&Value] = [];
        let mut types : [&Type] = [];
        
        for r in rightOps {
            {
                let v = context:.validateValue (r);
                match v {
                    e : &ExpandValue => {
                        for i_v in e.getInnerValues () {
                            rights ~= [i_v];
                            types ~= [i_v.getType ()];
                        }
                    }
                    _ => {
                        rights ~= [v];
                        types ~= [v.getType ()];
                    }
                }            
            } catch {
                err : &ErrorMsg => {
                    errors ~= [err];
                }
            }
        }

        if (errors.len != 0us) throw copy ErrorMsg::list (errors);

        (rights, types)
    }

    
    
}
