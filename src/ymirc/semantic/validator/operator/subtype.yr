mod ymirc::semantic::validator::operator::subtype;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::declarator::errors;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::syntax::expression::_;
import ymirc::global::core_;

import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import ymirc::utils::bigint;
import ymirc::utils::bigfloat;
import ymirc::global::state;

import std::algorithm::comparison;
import std::collection::vec;
import std::io;

/**
 * The sub type validator validate the '::' operators with a type as left operand
 */
pub class SubTypeValidator {

    /**
     * Create an empty validator
     */
    pub self () {}

    /**
     * Validate a sub access operation on a type, that must return a value
     * @params: 
     *   - context: the context of the validation
     *   - loc: the location of the access
     *   - left: the left operand
     *   - right: the right operand
     * @returns: a value
     * @throws: 
     *  - &ErrorMsg: if the operation is not valid
     */
    pub fn validateValueFromType (self, dmut context : &Validator, loc : &Word, left : &Type, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            v : &VarExpr => {
                let field = v.getLoc ().str ();
                if (self.isBasic (field)) {
                    return self.validateBasicSub (alias context, loc, left, field);
                }
            }
        }

        match left {
            clRef : &ClassRefType => {
                return self.validateClassRefValue (alias context, loc, clRef, right);
            }
            f : &FloatType => {
                return self.validateFloatValue (alias context, loc, f, right);
            }
            i : &IntType => {
                return self.validateIntValue (alias context, loc, i, right);
            }
            b : &BoolType => {
                return self.validateBoolValue (alias context, loc, b, right);
            }
            c : &CharType => {
                return self.validateCharValue (alias context, loc, c, right);
            }
            en : &EnumType => {
                return self.validateEnumValue (alias context, loc, en, right);
            }
            p : &PointerType => {
                return self.validatePointerValue (alias context, loc, p, right);
            }
            t : &TupleType => {
                return self.validateTupleValue (alias context, loc, t, right);
            }
            r : &RangeType => {
                return self.validateRangeValue (alias context, loc, r, right);
            }
            a : &ArrayType => {
                return self.validateArrayValue (alias context, loc, a, right);
            }
            s : &SliceType => {
                return self.validateSliceValue (alias context, loc, s, right);
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), left, right));
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================            BASIC             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true if the sub element can be accessed for all kind of types
     */
    fn isBasic (self, name : [c8])-> bool {
        match name {
            Keys::TYPEID => { true }
            _ => { false }
        }
    }        

    /**
     * Validate a sub access that can be used for every type
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - left: the type that is accessed
     *    - right: the name of the sub element that is accessed
     */
    fn validateBasicSub (self, dmut _ : &Validator, loc : &Word, left : &Type, right : [c8])-> &Value
        //throws &ErrorMsg
    {
        match right {
            Keys::TYPEID => {
                let content = format ("%", left);
                makeStringSliceValue (loc, content)
            }
            _ => __pragma!panic ();            
        }
    }    

    /**
     * ================================================================================
     * ================================================================================
     * =========================             INT              =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Validate a sub access on an int type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the access
     *     - i: the int type being accessed
     *     - right: the right expression of the operation
     * @returns: the result value
     * @throws:
     *    - &ErrorMsg: if there is no valid sub access with 'right' on 'left'
     * */
    fn validateIntValue (self, dmut context : &Validator, loc : &Word, i : &IntType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    NativeTypeAttribute::INIT => {
                        return IntValue::new (loc, i, 0us);
                    }
                    NativeTypeAttribute::MAX => {
                        return IntValue::new (loc, i, context.getCompileTimeInterpreter ().createIntMaxValue (i));
                    }
                    NativeTypeAttribute::MIN => {
                        return IntValue::new (loc, i, context.getCompileTimeInterpreter ().createIntMinValue (i));
                    }
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), i, right));
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================             FLOAT              =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub access on a float type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - f: the floa type being accessed
     *    - right: the right expression of the operation
     * @returns: the result value
     * @throws:
     *    - &ErrorMsg: if there is no valid subaccess on 'f' with 'right'
     * */
    fn validateFloatValue (self, dmut context : &Validator, loc : &Word, f : &FloatType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    NativeTypeAttribute::INIT => {
                        return FloatValue::new (loc, f, context.getCompileTimeInterpreter ().createFloatNanValue (f));
                    }
                    NativeTypeAttribute::MAX => {
                        return FloatValue::new (loc, f, context.getCompileTimeInterpreter ().createFloatMaxValue (f));
                    }
                    NativeTypeAttribute::MIN => {
                        return FloatValue::new (loc, f, context.getCompileTimeInterpreter ().createFloatMinValue (f));
                    }
                    NativeTypeAttribute::NAN => {
                        return FloatValue::new (loc, f, context.getCompileTimeInterpreter ().createFloatNanValue (f));
                    }
                    NativeTypeAttribute::INF => {
                        return FloatValue::new (loc, f, context.getCompileTimeInterpreter ().createFloatInfValue (f));
                    }
                    NativeTypeAttribute::DIG => {
                        return IntValue::new (loc, IntType::new (loc, size-> 32u16, signed-> false), context.getCompileTimeInterpreter ().createFloatDigValue (f));
                    }
                    NativeTypeAttribute::MANT_DIG => {
                        return IntValue::new (loc, IntType::new (loc, size-> 32u16, signed-> false), context.getCompileTimeInterpreter ().createFloatMantDigValue (f));
                    }
                    NativeTypeAttribute::MAX_10_EXP => {
                        return IntValue::new (loc, IntType::new (loc, size-> 32u16, signed-> true), context.getCompileTimeInterpreter ().createFloatMax10ExpValue (f));
                    }
                    NativeTypeAttribute::MIN_10_EXP => {
                        return IntValue::new (loc, IntType::new (loc, size-> 32u16, signed-> true), BigInt::new (context.getCompileTimeInterpreter ().createFloatMin10ExpValue (f)));
                    }
                    NativeTypeAttribute::MAX_EXP => {
                        return IntValue::new (loc, IntType::new (loc, size-> 32u16, signed-> true), context.getCompileTimeInterpreter ().createFloatMax2ExpValue (f));
                    }
                    NativeTypeAttribute::MIN_EXP => {
                        return IntValue::new (loc, IntType::new (loc, size-> 32u16, signed-> true), BigInt::new (context.getCompileTimeInterpreter ().createFloatMin2ExpValue (f)));
                    }
                    NativeTypeAttribute::EPSILON => {
                        return FloatValue::new (loc, f, context.getCompileTimeInterpreter ().createFloatEpsilonValue (f));
                    }
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), f, right));
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             BOOL              ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub access on an bool type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the access
     *     - b: the bool type being accessed
     *     - right: the right expression of the operation
     * @returns: the result value
     * @throws:
     *    - &ErrorMsg: if there is no valid sub access with 'right' on 'left'
     * */
    fn validateBoolValue (self, dmut _ : &Validator, loc : &Word, b : &BoolType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    NativeTypeAttribute::INIT => {
                        return BoolValue::new (loc, b, false);
                    }
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), b, right));
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             CHAR              ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub access on an char type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the access
     *     - c: the char type being accessed
     *     - right: the right expression of the operation
     * @returns: the result value
     * @throws:
     *    - &ErrorMsg: if there is no valid sub access with 'right' on 'left'
     * */
    fn validateCharValue (self, dmut _ : &Validator, loc : &Word, c : &CharType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    NativeTypeAttribute::INIT => {
                        return CharValue::new (loc, c, 0u32);
                    }
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), c, right));
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================            CLASS             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub access on a class ref type (basically a constructor call, typeinfo, etc.)
     * @params: 
     *     - context: the context of the validation
     *     - loc: the location of the access
     *     - left: the left operand of the operation
     *     - right: the right operand of the operation
     * @returns: the result value
     * @throws:
     *    - &ErrorMsg: if there is no valid sub access with 'right' on 'left'
     */
    fn validateClassRefValue (self, dmut context : &Validator, loc : &Word, clRef : &ClassRefType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    Keys::TYPEID => { return self.validateTypeId (alias context, loc, clRef); }
                    Keys::TYPEINFO => { return self.validateClassTypeInfoFromType (clRef); }
                    _ => {
                        return self.validateClassCtors (alias context, loc, clRef, name-> var.getLoc ().str ());
                    }
                }
            }            
            _ => {
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), clRef, right));
            }
        }
    }

    /**
     * @params: 
     *    - clRef: the class ref type
     * @returns: the typeinfo value of the class
     */
    fn validateClassTypeInfoFromType (self, clRef : &ClassRefType)-> &Value {
        match clRef.getSymbol ().getTypeInfo () {
            v : &Value => { v }
            _ => {
                __pragma!panic (); // Class is incomplete, check that class validator correctly set typeinfo of the class
            }
        }
    }

    /**
     * Retreive the list of constructors of a class
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - clRef: the type of the class whose constructors are accessed
     *    - name: the name of the constructor to access (Keys::NEW or ""s8, means all of them)
     * @returns: the list of constructors (MultSymValue of CtorDelegateValue, or a single CtorDelegateValue)
     * @throws:
     *    - &ErrorMsg: if no constructor are found
     */
    fn validateClassCtors (self, dmut context : &Validator, loc : &Word, clRef : &ClassRefType, name : [c8] = ""s8)-> &Value
        throws &ErrorMsg
    {
        let prots = clRef.getCtorProtections ();
        let (inPrv, inProt) = context.getCurrentClassContextProtections (clRef);
        let ptrType = clRef.createInstance (true, true);
        
        let dmut results = Vec!{&Value}::new ();
        let dmut errors = Vec!{&ErrorMsg}::new ();
        for i, ctor in clRef.getCtors () {
            match ctor {
                proto : &CtorPrototypeValue => {
                    if (inPrv || (inProt && prots[i] != MethodProtection::PROT) || prots[i] == MethodProtection::PUB) {
                        if (name == ""s8 || name == Keys::NEW || name == proto.getRename ()) {
                            results:.push (CtorDelegateValue::new (loc, ptrType, proto));
                        }
                    } else if (name == ""s8 || name == Keys::NEW || name == proto.getRename ()) {
                        errors:.push (ErrorMsg::fatal (ctor.getLoc (), format (DeclareErrorMessage::PRIVATE_IN_THIS_CONTEXT, proto)));
                    }                                        
                }
                _ => __pragma!panic ();
            }
        }

        if (results.len () == 0us) {
            if (name != ""s8) {
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::NO_CTOR_FOUND, clRef), notes-> errors[]);   
            } else {
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::NO_CTOR_FOUND_NAME, name, clRef), notes-> errors[]);
            }
        }
        
        MultSymValue::new (loc, results[], prettyStr-> if (name != ""s8) { name } else { Keys::NEW })
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================             ENUM             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub access of an enum type (getting a value from the enumeration)
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - left: the left operand of the operation
     *    - right: the right operand of the operation
     * @returns: the result value
     * @throws: 
     *    - &ErrorMsg: if there is no valid sub access with 'right' on 'left'
     */
    fn validateEnumValue (self, dmut context : &Validator, loc : &Word, en : &EnumType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                {   // First check if there is a field with the correct name
                    return self.validateEnumField (alias context, loc, en, var.getLoc ().str ()); 
                } catch {
                    err : &ErrorMsg => { // If not, maybe it is a standard access
                        match self.removeUnders (var.getLoc ().str ()) {         // we remove the underscores 
                            Keys::TYPEID => { return self.validateTypeId (alias context, loc, en); }
                            Keys::MEMBERS => { return self.validateEnumMembers (alias context, loc, en); }
                            _ => throw err;
                        }
                    }       
                }
            }
            _ => {
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), en, right));
            }
        }
    }

    /**
     * Validate a field access from a enumeration
     * @params: 
     *     - context: the context of the validation
     *     - loc: the location of the access
     *     - en: the enumeration type
     *     - field: the name of the field that is accessed
     * @returns: the result value
     * @throws: 
     *    - &ErrorMsg: if the enum has no field named 'field'
     */
    pub fn validateEnumField (self, dmut context : &Validator, loc : &Word, en : &EnumType, field : [c8])-> &Value
        throws &ErrorMsg
    {
        context;
        let sym = en.getSymbol ();
        match sym.getField (field) {
            NoneValue () => { throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), en, field)); }
            val : &Value => { val } 
        }
    }

    /**
     * Create a literal containing all the values of the enumeration
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - en: the enumeration type
     * @returns: an slice literal (or an array depending on force type)
     * @throws: 
     *    - &ErrorMsg: if the transformation of the literal into a value did not succeed (should not be possible ?)
     */
    fn validateEnumMembers (self, dmut context : &Validator, loc : &Word, en : &EnumType)-> &Value
        throws &ErrorMsg
    {
        context;
        loc;
        en;
        __pragma!fake_throw (&ErrorMsg);
        __pragma!panic ();
    }

    /**
     * ================================================================================
     * ================================================================================
     * ========================             POINTER             =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub access of a pointer type that generates a value
     * @params:
     *     - context: the context of the validation
     *     - loc: the locaiton of the access
     *     - left: the left operand of the operation
     *     - right: the right operand of the operation
     * @returns: a value
     * @throws:
     *     - &ErrorMsg: if the access is not valid
     * */
    fn validatePointerValue (self, dmut _ : &Validator, loc : &Word, p : &PointerType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    NativeTypeAttribute::INIT => { return NullValue::new (loc, p); }
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), p, right));
    }

    /**
     * ================================================================================
     * ================================================================================
     * ==========================            TUPLE            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub access on a tuple type that generates a value
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the access
     *     - left: the tuple type, left operand
     *     - right: the right operand
     * @returns: a value
     * */
    fn validateTupleValue (self, dmut context : &Validator, loc : &Word, p : &TupleType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    NativeTypeAttribute::INIT => {
                        let dmut v = Vec!{&Value}::new ();
                        {
                            for i in p.getInners () {
                                let val = self.validateValueFromType (alias context, loc, i, right);
                                v:.push (val);
                            }
                        } catch {
                            err : &ErrorMsg => {
                                throw err.withNote ([ErrorMsg::note (loc, format (ValidateErrorMessage::FOR_TUPLE_TYPE, p))]);
                            }
                        }

                        return TupleValue::new (loc, p, v[]);
                    }
                    NativeTypeAttribute::ARITY => {
                        return makeIntValue (loc, p.getInners ().len);
                    }
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), p, right));
    }

    /**
     * ================================================================================
     * ================================================================================
     * ==========================            RANGE            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub access on a range type that generates a value
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - r: the range type
     *    - right: the right operand
     * @returns: a value
     * */
    fn validateRangeValue (self, dmut context : &Validator, loc : &Word, r : &RangeType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    NativeTypeAttribute::INIT => {
                        let val = self.validateValueFromType (alias context, loc, r.getInners ()[0], right);
                        let bin = BinaryExpr::new (Word::new (Tokens::DDOT, loc),
                                                   ValueWrapperExpr::new (loc, val),
                                                   ValueWrapperExpr::new (loc, val));

                        return context:.validateValue (bin);
                    }
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), r, right));
    }

    /**
     * ================================================================================
     * ================================================================================
     * ==========================            ARRAY            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub type access on an array type
     * @params:
     *    - loc: the location of the access
     *    - a: the array type being accessed
     *    - right: the right operand of the access
     * */
    fn validateArrayValue (self, dmut context : &Validator, loc : &Word, a : &ArrayType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    NativeTypeAttribute::INIT => {
                        let val = self.validateValueFromType (alias context, loc, a.getInners ()[0], right);
                        let tabSize = a.getLen ();

                        return ArrayAllocValue::stat (a.getLoc (), a, val, makeIntValue (loc, tabSize));
                    }
                    SliceKeys::LEN => {
                        return makeIntValue (loc, a.getLen ());
                    }
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), a, right));
    }

    /**
     * ================================================================================
     * ================================================================================
     * ==========================            SLICE            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a sub type access on an slice type
     * @params:
     *    - loc: the location of the access
     *    - s: the slice type being accessed
     *    - right: the right operand of the access
     * */
    fn validateSliceValue (self, dmut _ : &Validator, loc : &Word, s : &SliceType, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        match right {
            var : &VarExpr => {
                match var.getLoc ().str () {
                    NativeTypeAttribute::INIT => {
                        return SliceCtorValue::new (loc, s, NullValue::new (loc), makeIntValue (loc, 0us));
                    }
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::UNDEFINED_BIN_ACC_OP, loc.str (), s, right));
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================            COMMON            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Create a string literal containing the typeid of the type
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location of the literal creation
     *    - left: the type whose typeid is returned
     * @returns: a value containing the typeid
     * @throws: 
     *    - &ErrorMsg: if the transformation of the literal into a value did not succeed (should not be possible ?)
     */
    fn validateTypeId (self, dmut context : &Validator, loc : &Word, left : &Type)-> &Value
        throws &ErrorMsg
    {    
        let typeid = format ("%", left.clone (0u32)); // we don't wan't mutable information
        let stringLit = StringExpr::new (loc, end-> loc, typeid, suffix-> Word::new (StringSuffixes::UTF8, loc));

        context:.validateValue (stringLit)
    }


    /**
     * Remove the underscores around a name 
     * @params:
     *    - name: the name that will be transformed
     * @returns: the same name but stripped from '_' on left and right sides
     * @example: 
     * =======================
     * let x = "___test__"s8;
     * assert (self.removeUnders (x) == "test"s8);
     *
     * let y = "___test_2__"s8;
     * assert (self.removeUnders (y) == "test_2"s8);
     * =======================
     */
    fn removeUnders (self, name : [c8])-> [c8] {
        let dmut result = StringStream::new ();
        let mut started = false, mut nb = 0us;
        for i in name {
            if (i == '_'c8) {
                nb += 1us;
            } else {
                if (started) {
                    for _ in 0us .. nb {
                        result:.write ('_'c8);
                    }
                }
                result:.write (i);
                started = true;
                nb = 0us;            
            }
        }
        
        result[]
    }
    
    
}
