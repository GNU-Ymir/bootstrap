mod ymirc::semantic::validator::operator::subtype;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::syntax::expression::operator::binary;
import ymirc::global::core_;

import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;
import ymirc::syntax::expression::_;

import std::algorithm::comparison;
import std::collection::vec;
import std::io;

/**
 * The sub type validator validate the '::' operators with a type as left operand
 */
pub class SubTypeValidator {

    /**
     * Create an empty validator
     */
    pub self () {}

    /**
     * Validate a sub access operation on a type, that must return a value
     * @params: 
     *   - context: the context of the validation
     *   - loc: the location of the access
     *   - left: the left operand
     *   - right: the right operand
     * @returns: a value
     * @throws: 
     *  - &ErrorMsg: if the operation is not valid
     */
    pub def validateValue (self, dmut context : &Validator, loc : &Word, left : &Type, right : &Expression)-> &Value
        throws &ErrorMsg
    {
        context;
        loc;
        left;
        right;
        __pragma!fake_throw (&ErrorMsg);
        __pragma!panic ();
    }
            
    
}
