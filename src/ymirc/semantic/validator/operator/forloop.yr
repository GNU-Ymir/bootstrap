mod ymirc::semantic::validator::operator::forloop;

import std::io;
import std::collection::vec;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::validator::template::_;

import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::semantic::generator::value::_;
import ymirc::syntax::expression::_;
import ymirc::syntax::keys;
import ymirc::lexing::word;
import ymirc::lexing::tokens;

import ymirc::semantic::generator::type::_;
import ymirc::global::core_;
import ymirc::utils::bigint;

/**
 * The For loop validator is used to validate ForLoopExpr
 * It is a class validator because for loop operations are complex
 */
pub class ForLoopValidator {

    /**
     * Create an empty validator     
     */
    pub self () {}
    
    /**
     * Validate a for loop expression
     * @params: 
     *  - context: the context of the validation
     *  - f: the for loop to validate
     * @returns: a value
     * @throws:
     *   - &ErrorMsg: if the validation failed
     */
    pub fn validate (self, dmut context : &Validator, f : &ForLoopExpr) -> &Value
        throws &ErrorMsg
    {
        let mValue = context:.implicitEnumUnwrap (context:.getValueValidator ().validate (alias context, f.getValue (), canBeRef-> true));
        let (byMutRef, byAlias, fVal) = match mValue {
            r : &ReferencerValue => { (r.isMutable (), false, r.getValue ()) }
            a : &AliaserValue => { (false, true, a.getValue ()) }
            _ => { (false, false, mValue) }
        };

        let (value, innerUseRef, innerUseAlias) = match fVal.getType () {
            t : &TupleType => { self.validateTupleLoop (alias context, t, fVal, f, byMutRef, byAlias) }
            s : &SliceType => { self.validateSliceLoop (alias context, s, fVal, f, byMutRef, byAlias) }
            a : &ArrayType => { self.validateArrayLoop (alias context, a, fVal, f, byMutRef, byAlias) }
            r : &RangeType => { (self.validateRangeLoop (alias context, r, fVal, f), false, false) }
            c : &ClassPtrType => {
                let value = self.validateClassLoop (alias context, c, fVal, f, byAlias, mValue.getLoc ());
                (value, false, true) // by alias error would already be thrown inside the class loop method
            }
            _ => {
                throw ErrorMsg::fatal (f.getLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, f.getVariables ().len, fVal.getType ()));
            }
        }

        if (!innerUseRef && byMutRef) {
            throw ErrorMsg::fatal (mValue.getLoc (), ValidateErrorMessage::UNECESSARY_REFERENCE);
        } else if (!innerUseAlias && byAlias) {
            throw ErrorMsg::fatal (mValue.getLoc (), format (ValidateErrorMessage::UNECESSARY_ALIAS, mValue.getType ()));
        }

        value
    }

    /**
     * Validate a for loop expression that is unrolled at cte
     * @params:
     *    - context: the context of the compilation
     *    - f: the for loop to validate
     * @returns: a block containing the unrolled for loop
     * @throws:
     *    - &ErrorMsg: if the validation failed
     * */
    pub fn validateCteForLoop (self, dmut context : &Validator, f : &ForLoopExpr)-> &Value
        throws &ErrorMsg
    {
        let value = context:.implicitEnumUnwrap (context:.validateValue (f.getValue ()));
        match value.getType () {
            t : &TupleType => { self.validateTupleLoop (alias context, t, value, f, false, false)._0 }
            r : &RangeType => { self.validateCteRangeLoop (alias context, r, value, f) }
            _ => {
                throw ErrorMsg::fatal (f.getLoc (), format (ValidateErrorMessage::UNDEF_CTE_FOR_LOOP_OPERATOR, f.getVariables ().len, value.getType ()));
            }
        }
    }

    /**
     * Validate a slice for loop expression
     * @params:
     *    - context: the context of the validation
     *    - all: the slice allocator to validate
     * @returns: a value
     * @throws:
     *    - &ErrorMsg, if the validation failed
     * */
    pub fn validateListComprehension (self, dmut context : &Validator, all : &SliceForAllocatorExpr)-> &Value
        throws &ErrorMsg
    {
        let dynamic = context.isDynamic (all);
        let value = context:.implicitEnumUnwrap (context:.validateValue (all.getIter ()));
        let (byMutRef, byAlias) = match value {
            r : &ReferencerValue => { (r.isMutable (), false) }
            _ : &AliaserValue => { (false, true) }
            _ => { (false, false) }
        };

        if (byMutRef) { // list comprehension is always const, so not by mut ref, and not by alias
            throw ErrorMsg::fatal (value.getLoc (), ValidateErrorMessage::UNECESSARY_REFERENCE);
        }

        let (res, innerUseAlias) = match value.getType () {
            t : &TupleType => { (self.validateComprTuple (alias context, t, value, all), false) }
            s : &SliceType => { (self.validateComprSlice (alias context, s, value, all, dynamic), false) }
            a : &ArrayType => { (self.validateComprArray (alias context, a, value, all, dynamic), false) }
            r : &RangeType => { (self.validateComprRange (alias context, r, value, all, dynamic), false) }
            c : &ClassPtrType => {
                // by alias error would already be thrown inside the class loop method
                (self.validateComprClass (alias context, c, value, all, byAlias, value.getLoc (), dynamic), true)
            }
            _ => {
                throw ErrorMsg::fatal (all.getForLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, all.getVariables ().len, value.getType ()));
            }
        }

        if (byAlias && !innerUseAlias) {
            throw ErrorMsg::fatal (value.getLoc (), format (ValidateErrorMessage::UNECESSARY_ALIAS, value.getType ()));
        }

        res
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        LOOP ON TUPLES        =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a for loop on a tuple
     * @params: 
     *    - context: the context of the validation
     *    - type: the type of the tuple
     *    - value: the value to iterate
     *    - f: the for loop to validate
     * @throws: 
     *    - &ErrorMsg: if the validation failed
     * @returns: the validated loop
     */
    fn validateTupleLoop (self, dmut context : &Validator, type : &TupleType, value : &Value, f : &ForLoopExpr, byMutRef : bool, byAlias : bool)-> (&Value, bool, bool)
        throws &ErrorMsg
    {
        let vars = f.getVariables ();
        match vars.len {
            1us => {
                return self.validateTupleIteration (alias context, type, value, f, vars[0], EmptyExpression::new (), byMutRef, byAlias);
            }
            2us => {
                return self.validateTupleIteration (alias context, type, value, f, vars[0], vars[1], byMutRef, byAlias);
            }
            _ => {
                throw ErrorMsg::fatal (f.getLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, vars.len, type));
            }
        }
    }

    /**
     * Validate a for loop iteration on a tuple
     * @params:
     *     - context: the context of the validation
     *     - type: the type of the tuple
     *     - value: the value of the tuple (already uniq)
     *     - f: the for loop
     *     - iter1: the declaration of the first iteration variable
     *     - iter2: the declaration of the second iteration variable (might be EmptyExpression)
     * @throws:
     *     - &ErrorMsg: if the validation failed
     * @returns: the validated loop
     * */
    fn validateTupleIteration (self, dmut context : &Validator, type : &TupleType, value : &Value, f : &ForLoopExpr, iter1 : &Expression, iter2 : &Expression, byMutRef : bool, byAlias : bool)-> (&Value, bool, bool)
        throws &ErrorMsg
    {
        let mut useRef = false, mut useAlias = false;
        let dmut content = Vec!{&Value}::new ();
        context:.enterLoop (); // Even if it is unwinded at compile time, it should behave like a loop (so we can break in it)
        context:.setCurrentLoopType (VoidType::new (f.getLoc ())); // it has no type, (because there is no else part for the moment ?, in theory it is no necessary if we check that there is at least one value in the tuple?)
        {
            for i in 0us .. type.getInners ().len { // we validate the content of the loop for each type of the tuple
                let (value_, useRef_, useAlias_) = self.validateTupleInnerLoop (alias context, i, iter1, iter2, type, value, f.getBlock (), byMutRef, byAlias);
                content:.push (value_);
                useAlias = useAlias || useAlias_;
                useRef = useRef || useRef_;
            }
        } catch {
            err : &ErrorMsg => {
                context:.quitLoop (); // we must not forget to quit the loop
                throw err;
            }
        }

        context:.quitLoop ();
        let inner = BlockValue::new (f.getLoc (), VoidType::new (f.getLoc ()), content[]);
        (LoopValue::new (f.getLoc (), VoidType::new (f.getLoc ()), UNIT_VALUE, inner, false, isCteFor-> true), useRef, useAlias)
    }

    /**
     * Validate the inner content of a loop iteration over a tuple value
     * @params: 
     *     - context: the context of the validation
     *     - i: the index of the current iteration 
     *     - vdecl: the variable iterator to declare
     *     - type: the type of the tuple to iterate
     *     - value: the content of the tuple value
     *     - blk: the content of the for loop
     * @returns: the content of the for loop validated for th i-th iteration
     * @throws:
     *    - &ErrorMsg: if the validation failed
     */
    fn validateTupleInnerLoop (self, dmut context : &Validator, i : usize, iter1 : &Expression, iter2 : &Expression, type : &TupleType, value : &Value, blk : &Expression, byMutRef : bool, byAlias : bool, forLstCompr : bool = false)-> (&Value, bool, bool)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();        
        context:.enterBlock ();
        let (pre, res, useRef, useAlias) = { // Simply validate the content of a single iteration
            match (iter1, iter2) {
                (vdecl : &VarDeclExpr, EmptyExpression ()) => {
                    let (var, useRef, useAlias) = self.validateTupleIterDecl (alias context, vdecl, type, value, byMutRef, byAlias, i);
                    if (vdecl.getLoc () != Keys::UNDER) context:.insertLocal (vdecl.getLoc ().str (), var); // we declare the variable so we can retreive it inside the loop

                    let content = context:.validateValue (blk); // we validate the content of the loop
                    ([var], content, useRef, useAlias) // and we return the loop iteration block
                }
                (idecl : &VarDeclExpr, vdecl : &VarDeclExpr) => {
                    let (var, useRef, useAlias) = self.validateTupleIterDecl (alias context, vdecl, type, value, byMutRef, byAlias, i);
                    if (vdecl.getLoc () != Keys::UNDER) context:.insertLocal (vdecl.getLoc ().str (), var);

                    let indexType = IntType::new (idecl.getLoc (), size-> 0u16, signed-> false);
                    let indexVal = makeIntValue (idecl.getLoc (), i);
                    let index = self.validateIndexIterDecl (alias context, value.getLoc (), idecl, indexType, value-> indexVal, globType-> type, canCte-> true);
                    if (idecl.getLoc () != Keys::UNDER) context:.insertLocal (idecl.getLoc ().str (), index);

                    let content = context:.validateValue (blk); // we validate the content of the loop
                    ([var, index], content, useRef, useAlias)
                }
                _ => __pragma!panic ();
            }
        } catch {
            err: &ErrorMsg => {
                errors:.push (err);
                ([], UNIT_VALUE, false, false)
            }
        }

        {
            context:.quitBlock (warnUnused-> errors.len () == 0us); // if there was an error, we don't add the warn unused
        } catch { 
            err : &ErrorMsg => errors:.push (err); 
        }

        let blkRes = if (forLstCompr) {
            let innerType = context:.inferTypeImplicitMutability (res);

            BlockValue::new (blk.getLoc (), innerType, pre ~ [res])
        } else {
            BlockValue::new (blk.getLoc (), VoidType::new (blk.getLoc ()), pre ~ [res])
        };

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
        (blkRes, useRef, useAlias)
    }

    /**
     * Validate the iterator variable of a tuple iteration
     * @params:
     *    - context: the context of the validation
     *    - vdecl: the iterator variable declaration
     *    - type: the type of the tuple
     *    - value: the value being iterated
     *    - byMutRef: true if the value is passed by mutable reference
     *    - byAlias: true if the value was aliased
     *    - i: the current index
     * */
    fn validateTupleIterDecl (self, dmut context : &Validator, vdecl : &VarDeclExpr, type : &TupleType, value : &Value, byMutRef : bool, byAlias : bool, i : usize)-> (&Value, bool, bool)
        throws &ErrorMsg
    {
        let curTupleType = type.getInners()[i];

        let mut useRef = false, mut useAlias = false;
        let vType = if (!vdecl.getType ().isOf!{&EmptyExpression} ()) {
            let vtype = context:.validateTypeForVarDecl (vdecl.getType (), vdecl, canBeRef-> true);
            context:.verifyCompatibleType (vdecl.getType ().getLoc (), curTupleType.getLoc (), vtype, curTupleType);
            vtype
        } else {
            context:.validateTypeForVarDecl (TypeWrapperExpr::new (value.getLoc (), curTupleType), vdecl, canBeRef-> true)
        };

        if (vType.isMutable () && !vType.needExplicitAlias () && !vType.isMovable () && !vdecl.isRef ()) {
            throw ErrorMsg::fatal (vdecl.getMutOrDmutLocation (), ValidateErrorMessage::MUTABLE_CONST_ITERATOR);
        }

        let indexValue = context:.getBinOpValidator ().createTupleFieldAccess (vdecl.getLoc (), type.getInners ()[i], value, i, reduce-> false);
        let reducedValue = if (!byMutRef && !vdecl.isRef ()) { context:.getCompileTimeInterpreter ().reduce (indexValue) } else { indexValue };
        let iterValue = context:.verifyCompatibleTypeWithValue (vdecl.getLoc (), vType, reducedValue, byReference-> vdecl.isRef ());

        let access = if (byMutRef && vdecl.isRef () && curTupleType.isMutable () && iterValue.isLvalue ()) {
            useRef = true;
            cast!{&Value} (ReferencerValue::new (vdecl.getLoc (), iterValue.getType (), iterValue, isMutable-> true))
        } else if (!vdecl.isRef () && byAlias && curTupleType.isMutable () && vType.needExplicitAlias ()) {
            useAlias = true;
            cast!{&Value} (AliaserValue::new (vdecl.getLoc (), iterValue.getType (), iterValue))
        } else if (vdecl.isRef () && !byMutRef && iterValue.isLvalue ()) {
            cast!{&Value} (ReferencerValue::new (vdecl.getLoc (), iterValue.getType (), iterValue, isMutable-> false))
        } else {
            iterValue
        };

        context:.verifyMemoryOwner (vdecl.getLoc (), vType, access, construct-> true, byReference-> vdecl.isRef ());
        let decl = VarDeclValue::new (vdecl.getLoc (), vType, access, isMutable-> (vdecl.isMutable () || vdecl.isDeeplyMutable ()), isReference-> vdecl.isRef (), isIterator-> true);
        (decl, useRef, useAlias)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        LOOP ON ARRAYS        =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a for loop operation on an array value
     * @params:
     *    - context: the context of the validation
     *    - arrType: the type of the value
     *    - value: the value being iterated
     *    - content: the expression to validate
     * @returns: a validate value
     * @throws:
     *     - &ErrorMsg: if the validation failed
     * */
    fn validateArrayLoop (self, dmut context : &Validator, arrType : &ArrayType, value : &Value, content : &ForLoopExpr, byMutRef : bool, byAlias : bool)-> (&Value, bool, bool)
        throws &ErrorMsg
    {
        if (arrType.getInners () [0].isOf!{&VoidType} ()) {
            throw ErrorMsg::fatal (content.getLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, content.getVariables ().len, value.getType ()));
        }

        let vars = content.getVariables ();
        let uniqV = context.createSliceAliasFromArray (content.getLoc (), arrType, value, mutable-> (byMutRef || byAlias) && arrType.isMutable ());
        let slcT = uniqV.getType ().asOf!{&SliceType} ();

        match vars.len {
            1us => // only the value of the array
                return self.validateSliceIteration (alias context, slcT, uniqV, content, vars[0], EmptyExpression::new (), byMutRef, byAlias);
            2us => // The value of the array and the iterator
                return self.validateSliceIteration (alias context, slcT, uniqV, content, vars[0], vars[1], byMutRef, byAlias);
            _ => { // no iteration is possible with three variables
                throw ErrorMsg::fatal (content.getLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, vars.len, arrType));
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        LOOP ON SLICES        =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a for loop iterating through a slice value
     * @params: 
     *     - context: the context of the validation
     *     - slcType: the type of the iteration
     *     - value: the value that is iterated
     *     - content: the content of the iteration to validate
     */
    fn validateSliceLoop (self, dmut context : &Validator, slcType : &SliceType, value : &Value, content : &ForLoopExpr, byMutRef : bool, byAlias : bool)-> (&Value, bool, bool)
        throws &ErrorMsg
    {
        if (slcType.getInners () [0].isOf!{&VoidType} ()) {
            throw ErrorMsg::fatal (content.getLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, content.getVariables ().len, value.getType ()));
        }

        let vars = content.getVariables ();
        match vars.len {
            1us => // only the value of the array
                return self.validateSliceIteration (alias context, slcType, value, content, vars[0], EmptyExpression::new (), byMutRef, byAlias);
            2us => // The value of the array and the iterator
                return self.validateSliceIteration (alias context, slcType, value, content, vars[0], vars[1], byMutRef, byAlias);
            _ => { // no iteration is possible with three variables
                throw ErrorMsg::fatal (content.getLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, vars.len, slcType));
            }
        }
    }

    /**
     * Validate the iteration over the slice
     * @params: 
     *    - context: the context of the validation
     *    - slcType: the type of the slice of the iteration
     *    - value: the value of the slice of the iteration
     *    - content: the for loop containing the ocntent of the iteration
     *    - iter1: the first iteration variable (never empty)
     *    - iter2: the second iteration variable (might be empty)
     * @returns: the value of the iteration
     * @throws:
     *    - &ErrorMsg: if the iteration cannot be validated
     */
    fn validateSliceIteration (self, dmut context : &Validator, slcType : &SliceType, sliceValue : &Value, content : &ForLoopExpr, iter1 : &Expression, iter2 : &Expression, byMutRef : bool, byAlias : bool)-> (&Value, bool, bool)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        let dmut innerValues = Vec!{&Value}::new ();
        let dmut values = Vec!{&Value}::new ();
        let loc = content.getLoc ();
        let mut test : &Value = UNIT_VALUE;
        let mut useRef = false, mut useAlias = false;

        // => for index, value in S
        // ==
        // let array = S;
        // let index = 0;
        // while index < array.len {
        //    let value = array [index];
        //    {  } // content
        //    index += 1;
        // }

        context:.enterBlock ();
        {
            let sliceDecl = VarDeclValue::new (Word::new ("#_value"s8, sliceValue.getLoc ()), slcType, sliceValue, isMutable-> (byMutRef || byAlias) && slcType.isMutable ());
            let sliceRef = VarRefValue::new (sliceDecl.getLoc (), sliceDecl.getLoc (), slcType, sliceDecl.getUniqId (), isSelf-> false, canCte-> false);
            values:.push (sliceDecl);

            // First we create the iteration variables, that will store the value at the current array index, and the value of the index
            let vars = self.validateSliceIteratorVars (alias context, sliceValue.getLoc (), slcType, sliceRef, iter1, iter2, byMutRef, byAlias);
            let iter = vars._0; // the value of the current index

            values:.push (vars._1); // declare index iterator outside the content of the loop

            useRef = vars._3;
            useAlias = vars._4;

            let one = makeIntValue (loc, 1us); // used to increment the iterator
            // Compute the len from the initial value, because the generator #_value may lose the cte len (e.g. a [0 .. 2], [1, 2, 3], ...)
            let len = context:.getCompileTimeInterpreter ().reduce (StructFieldAccessValue::new (loc, one.getType (), sliceValue, SliceKeys::LEN)); // access the size of the array to verify test when to exit the loop

            test = CmpIntOperatorValue::new (loc, BinaryOperators::INF, iter, len); // if the iterator is greater than the value of the array the loop is stopped
            let increment = AffectValue::new (loc, iter.getType (), iter, BinaryMathIntOperatorValue::new (loc, iter.getType (), BinaryOperators::PLUS, iter, one)); // increment the iterator for the next iteration

            // the loop has three steps: value iterator declarations, content, increment
            innerValues:.push (vars._2);
            innerValues:.push (context:.validateValue (content.getBlock ())); // execute the content of the loop
            innerValues:.push (increment);
            // go to the next iteration
        } catch {
            err : &ErrorMsg => { errors:.push (err); } // we catch everything because we need to exit the block
        }
    
        let blkContent = BlockValue::new (loc, VoidType::new (loc), innerValues[]); // create the loop 
        let _loop = LoopValue::new (loc, VoidType::new (loc), test-> test, blkContent, isDo-> false);
        values:.push (_loop);

        {
            context:.quitBlock (warnUnused-> errors.len () == 0us); // we only warn if there was no error in the loop content
        } catch {
            err : &ErrorMsg => errors:.push (err); // some warn unused
        }

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
        (BlockValue::new (loc, VoidType::new (loc), values[]), useRef, useAlias)
    }

    /**
     * Create the iteration variable (and verify that they are correctly defined)
     * @params: 
     *    - context: the context of the validaiton
     *    - loc: the location of the value iterated
     *    - slcType: the type of the iteration
     *    - iter1: the iterator (value if iter2 is empty, index otherwise)
     *    - iter2: value if not empty
     * @returns:
     *    - .0: the ref to the index variable (even if iter2 is empty)
     *    - .1: the vardecl of the index variable (even if iter1 is empty)
     *    - .2: the vardecl of the value variable
     * @throws:
     *    - &ErrorMsg: if the variables are uncorrectly defined
     */
    fn validateSliceIteratorVars (self, dmut context : &Validator, loc : &Word, slcType : &SliceType, sliceRef : &Value, iter1 : &Expression, iter2 : &Expression, byMutRef : bool, byAlias : bool)-> (&Value, &Value, &Value, bool, bool)
        throws &ErrorMsg
    {
        // This function can seem a bit complex but isn't
        match (iter1, iter2) { // we have two cases, (with one variable, or with two)            
            (v : &VarDeclExpr, EmptyExpression ()) => { // 1. with one
                // And the variable for the iterator, with an name that cannot be taken elsewhere, but this is not important
                let iter = VarDeclValue::new (Word::new ("#_iter"s8, v.getLoc ()), IntType::new (v.getLoc (), size-> 0u16, signed-> false), makeIntValue (v.getLoc (), 0us), isMutable-> false, isIterator-> true);
                let vrefIter = VarRefValue::new (iter.getLoc (), iter.getLoc (), iter.getVarType (), iter.getUniqId (), isSelf-> false, canCte-> false, isIterator-> true);

                let (array, useRef, useAlias) = self.validateSliceIterDecl (alias context, v, slcType, sliceRef, vrefIter, byMutRef, byAlias);
                if (v.getLoc () != Keys::UNDER) context:.insertLocal (v.getLoc ().str (), array); // The variable must be retreivable, so we insert it inside the context, (but not the iterator that is hidden)

                return (vrefIter, iter, array, useRef, useAlias); // we return the variable for the loop validation
            }
            (i : &VarDeclExpr, v : &VarDeclExpr) => {
                let iter = self.validateIndexIterDecl (alias context, loc, i, IntType::new (i.getLoc (), size-> 0u16, signed-> false), value-> makeIntValue (i.getLoc (), 0us), slcType, canCte-> false);
                let vrefIter = VarRefValue::new (iter.getLoc (), iter.getLoc (), iter.getVarType (), iter.getUniqId (), isSelf-> false, canCte-> false, isIterator-> true);

                let (array, useRef, useAlias) = self.validateSliceIterDecl (alias context, v, slcType, sliceRef, vrefIter, byMutRef, byAlias);

                if (v.getLoc () != Keys::UNDER) context:.insertLocal (v.getLoc ().str (), array); // insert them, so we can retreive them
                if (i.getLoc () != Keys::UNDER) context:.insertLocal (i.getLoc ().str (), iter);

                return (vrefIter, iter, array, useRef, useAlias); // and we return them for the loop valiation
            }
            _ => __pragma!panic (); // panic if we get something else
        }
    }

    /**
     * Validate the iterator variable of a slice iteration
     * @params:
     *    - context: the context of the validation
     *    - vdecl: the iterator variable declaration
     *    - type: the type of the slice
     *    - value: the value being iterated
     *    - index: the variable reference to the index value
     *    - byMutRef: true if the value is passed by mutable reference
     *    - byAlias: true if the value was aliased
     * */
    fn validateSliceIterDecl (self, dmut context : &Validator, vdecl : &VarDeclExpr, type : &SliceType, sliceValue : &Value, index : &Value, byMutRef : bool, byAlias : bool)-> (&Value, bool, bool)
        throws &ErrorMsg
    {
        let innerType = type.getInners ()[0];

        let mut useRef = false, mut useAlias = false;

        let vType = if (!vdecl.getType ().isOf!{&EmptyExpression} ()) {
            let vtype = context:.validateTypeForVarDecl (vdecl.getType (), vdecl, canBeRef-> true);
            context:.verifyCompatibleType (vdecl.getType ().getLoc (), innerType.getLoc (), vtype, innerType);
            vtype
        } else {
            context:.validateTypeForVarDecl (TypeWrapperExpr::new (sliceValue.getLoc (), innerType), vdecl, canBeRef-> true)
        };

        if (vType.isMutable () && !vType.needExplicitAlias () && !vType.isMovable () && !vdecl.isRef ()) {
            throw ErrorMsg::fatal (vdecl.getMutOrDmutLocation (), ValidateErrorMessage::MUTABLE_CONST_ITERATOR);
        }

        let slAcc : &Value = SliceAccessValue::new (sliceValue.getLoc (), innerType, sliceValue, index);
        let reducedValue = if (!byMutRef && !vdecl.isRef ()) { context:.getCompileTimeInterpreter ().reduce (slAcc) } else { slAcc };
        let iterValue = context:.verifyCompatibleTypeWithValue (vdecl.getLoc (), vType, reducedValue, byReference-> vdecl.isRef ());

        let access = if (byMutRef && vdecl.isRef () && innerType.isMutable () && iterValue.isLvalue ()) {
            useRef = true;
            cast!{&Value} (ReferencerValue::new (vdecl.getLoc (), iterValue.getType (), iterValue, isMutable-> true))
        } else if (!vdecl.isRef () && byAlias && innerType.isMutable () && vType.needExplicitAlias ()) {
            useAlias = true;
            cast!{&Value} (AliaserValue::new (vdecl.getLoc (), iterValue.getType (), iterValue))
        } else if (vdecl.isRef () && !byMutRef && iterValue.isLvalue ()) {
            cast!{&Value} (ReferencerValue::new (vdecl.getLoc (), iterValue.getType (), iterValue, isMutable-> false))
        } else {
            iterValue
        };

        context:.verifyMemoryOwner (vdecl.getLoc (), vType, access, construct-> true, byReference-> vdecl.isRef ());
        let decl = VarDeclValue::new (vdecl.getLoc (), vType, access, isMutable-> (vdecl.isMutable () || vdecl.isDeeplyMutable ()), isReference-> vdecl.isRef (), isIterator-> true);
        (decl, useRef, useAlias)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        LOOP ON RANGES        =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Validate a for loop on a range value
     * @params: 
     *    - context: the context of the validation
     *    - rngType: the type of the range 
     *    - value: the value to iterate
     *    - f: the for loop to validate
     * @returns: the validated loop
     * @throws:
     *    - &ErrorMsg: if the validation fails
     */
    fn validateRangeLoop (self, dmut context : &Validator, rngType : &RangeType, value : &Value, f : &ForLoopExpr)-> &Value
        throws &ErrorMsg
    {        
        let vars = f.getVariables ();

        // We can iterate over range with only one variable
        if (vars.len != 1us) throw ErrorMsg::fatal (f.getLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, vars.len, rngType));

        let loc = f.getLoc ();
        let dmut values = Vec!{&Value}::new ();
        let interpret = context.getCompileTimeInterpreter ();

        let fst  = interpret.reduce (StructFieldAccessValue::new (loc, rngType.getInners ()[0], value, RangeKeys::FST));
        let scd  = interpret.reduce (StructFieldAccessValue::new (loc, rngType.getInners ()[0], value, RangeKeys::SCD));
        let step = interpret.reduce (StructFieldAccessValue::new (loc, rngType.getInners ()[1], value, RangeKeys::STEP));
        let contains = interpret.reduce (StructFieldAccessValue::new (loc, BoolType::new (loc), value, RangeKeys::CONTAIN));

        let iterDecl = VarDeclValue::new (Word::new ("#_iter"s8, loc), IntType::new (loc, signed-> false, size-> 0u16), makeIntValue (loc, 0us), isMutable-> true);
        let mut iterRef = VarRefValue::new (iterDecl.getLoc (), loc, iterDecl.getVarType (), iterDecl.getUniqId (), isSelf-> false, canCte-> false, isIterator-> true);
        values:.push (iterDecl);

        let nbIterRef = if (!interpret.isCte (fst) || !interpret.isCte (scd) || !interpret.isCte (step) || !interpret.isCte (contains)) {
            let nbIteration = self.validateComputeNbIterations (loc, alias context, fst, scd, step, contains);
            let nbIterDecl = VarDeclValue::new (Word::new ("#_nb_iter"s8, loc), IntType::new (loc, signed-> false, size-> 0u16), nbIteration, isMutable-> true);
            let mut nbIterRef = VarRefValue::new (nbIterDecl.getLoc (), loc, nbIterDecl.getVarType (), nbIterDecl.getUniqId (), isSelf-> false, canCte-> false);

            values:.push (nbIterDecl);
            nbIterRef
        } else {
            context:.getCompileTimeInterpreter ().reduce (self.validateComputeNbIterations (loc, alias context, fst, scd, step, contains))
        }

        let _loop = self.validateRangeInnerLoop (alias context, rngType, f, iterRef, nbIterRef, fst, step);

        values:.push (_loop); // push the loop after the declaration of the iterator variable
        BlockValue::new (loc, VoidType::new (loc), values[])
    }

    /**
     * Validate the inner part of the range loop
     * @returns: the loop
     * */
    fn validateRangeInnerLoop (self, dmut context : &Validator, rngType : &RangeType, f : &ForLoopExpr, iterRef : &Value, nbIterRef : &Value, fst : &Value, step : &Value)-> &Value
        throws &ErrorMsg
    {
        let loc = f.getLoc ();
        let dmut errors = Vec!{&ErrorMsg}::new ();
        let dmut values = Vec!{&Value}::new ();

        context:.enterLoop ();
        context:.setCurrentLoopType (VoidType::new (f.getLoc ()));
        context:.enterBlock ();
        let test = {
            let (varRef, varDecl) = self.validateRangeIteratorVar (alias context, loc, rngType, f.getVariables ()[0]);
            let (increment, setIndex, _test) = self.validateRangeIteratorIncrement (alias context, loc, iterRef, nbIterRef, varRef, fst, step);
            if (varRef.getLoc () != Keys::UNDER) {
                values:.push (varDecl); // push the var decl before the loop
                values:.push (setIndex);
            }

            values:.push (context:.validateValue (f.getBlock ())); // the loop content
            values:.push (increment); // the loop increment
            _test
        } catch {
            err : &ErrorMsg => {
                errors:.push (err);
                cast!{&Value} (UNIT_VALUE)
            }
        }

        {
            context:.quitLoop ();
            context:.quitBlock (warnUnused-> errors.len () == 0us);
        } catch {
            err : &ErrorMsg => errors:.push (err); // Some warn unused
        }

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
        let blkContent = BlockValue::new (loc, VoidType::new (loc), values[]);

        LoopValue::new (loc, VoidType::new (loc), test-> test, blkContent, isDo-> false)
    }


    /**
     * Validate the iterator variable
     * @params: 
     *    - context: the context of the validation
     *    - rngType: the type of the range value
     *    - iterDecl: the declaration of the iterator
     *    - rngValue: the value of the range
     * @returns:
     *    - .0: true iif cannot use only compile time values
     *    - .1: the variable declaration
     *    - .2: the variable ref value
     * @throws:
     *    - &ErrorMsg: if the validation fails
     */
    fn validateRangeIteratorVar (self, dmut context : &Validator, loc : &Word, rngType : &RangeType, iterDecl : &Expression)-> (&Value, &Value)
        throws &ErrorMsg
    {
        match iterDecl {
            v : &VarDeclExpr => {
                // We create the variable for the iterator
                let iterType = rngType.getInners ()[0].clone (0u32);
                let iterValue = self.validateIndexIterDecl (alias context, loc, v, iterType, rngType, canCte-> false);
                if (v.getLoc () != Keys::UNDER) context:.insertLocal (v.getLoc ().str (), iterValue);

                // And the variable ref so we can use it
                let vRefIter = VarRefValue::new (v.getLoc (), iterValue.getLoc (), iterType, iterValue.getUniqId (), isSelf-> false, canCte-> false, isIterator-> true);
                return (vRefIter, iterValue);
            }
            _ => __pragma!panic ();
        }
    }

    /**
     * * Validate the increment of the iterator during an iteration on a range value of integers
     * @params:
     *    - context: the context of the validation
     *    - iterRef: the validation containing the iterator
     *    - nbIter: the number of iteration
     *    - indexRef: the number of iteration
     * @returns:
     *    - .0: the increment value
     *    - .1: the affectation of index
     *    - .2: the test for the loop
     * */
    fn validateRangeIteratorIncrement (self, dmut context : &Validator, loc : &Word, iterRef : &Value, nbIter : &Value, indexRef : &Value, fst : &Value, step : &Value)-> (&Value, &Value, &Value)
        throws &ErrorMsg
    {
        let test = CmpIntOperatorValue::new (loc, BinaryOperators::INF, iterRef, nbIter);
        let increment = AffectValue::new (loc, iterRef.getType (), iterRef, BinaryMathIntOperatorValue::new (loc, iterRef.getType (), BinaryOperators::PLUS, iterRef, makeIntValue (loc, 1us)));

        let indexMul = BinaryMathIntOperatorValue::new (loc, iterRef.getType (), BinaryOperators::STAR, iterRef, CastValue::new (loc, iterRef.getType (), step));
        let currIndex = BinaryMathIntOperatorValue::new (loc, indexRef.getType (), // i = fst + #_iter * step
                                                         BinaryOperators::PLUS, fst,
                                                         CastValue::new (loc, indexRef.getType (), indexMul));
        let affectIndex = AffectValue::new (loc, indexRef.getType (), indexRef, context.getCompileTimeInterpreter ().reduce (currIndex));

        (increment, affectIndex, test)
    }

    /**
     * Compute the number of iterations of a for loop
     * */
    fn validateComputeNbIterations (self, loc : &Word, dmut context : &Validator, fst : &Value, scd : &Value, step : &Value, contains : &Value)-> &Value
        throws &ErrorMsg
    {
        let sizeType = IntType::new (loc, size-> 0u16, signed-> false);
        let max = context.getCompileTimeInterpreter ().createIntMaxValue (sizeType);

        match (fst, scd, step, contains) {
            (fstI : &IntValue, scdI : &IntValue, stepI : &IntValue, containsB : &BoolValue) =>
            {
                return IntValue::new (loc, sizeType, self.validateCteComputeNbIterations (fstI.getValue (), scdI.getValue (), stepI.getValue (), max, containsB.isTrue ()));
            }
            _ => {
                let val = if (step.isOf!{&IntValue} () && contains.isOf!{&BoolValue} ()) {
                    // Almost cte, we can infer some things as step and contains are known
                    self.validateAlmostCteComputeNbIterations (loc, fst, scd, step.asOf!{&IntValue} ().getValue (), max, contains.asOf!{&BoolValue} ().isTrue ())
                } else {
                    self.validateNonCteComputeNbIterations (loc, fst, scd, step, max, contains)
                };

                return context.getCompileTimeInterpreter ().reduce (val);
            }
        }
    }

    /**
     * Cte version of fun to compute the number of iterations of a range
     * @params:
     *     - fst: the cte fst value of the range
     *     - scd: the cte scd value of the range
     *     - step: the cte step value of the range
     *     - max: the maximal int value reprensentable in the target language
     *     - contains: the cte contains value of the range
     * @returns: the number of iterations of the range
     * */
    fn validateCteComputeNbIterations (self, fst : &BigInt, scd : &BigInt, step : &BigInt, max : &BigInt, contains : bool)-> &BigInt {
        let stepU = if (step < 0) { 0 - step } else { step };
        if (stepU == 0) return BigInt::new (0);

        let (fstU, scdU, subU) = if (fst > scd) {
            (scd, fst, fst - scd)
        } else {
            (fst, scd, scd - fst)
        };

        let nbAll = subU / stepU;

        if (nbAll == max) return nbAll;
        if (contains) return nbAll + 1us;

        // recompute, because is it not necessarily == scd since the division might trunc the value
        let last = (nbAll * stepU) + fstU;
        if (last != scdU) return nbAll + 1us;

        nbAll
    } catch {
        _ => __pragma!panic (); // stepU == 0
    }

    /**
     * Almost cte version of the function used to compute the number of iteration in a range
     * Almost because fst and scd are not cte, but step and contains are (it can happen a lot actually, ex: for i in 0 .. a.len, with a : [T])
     * @params:
     *     - fst: the fst value of the range
     *     - scd: the scd value of the range
     *     - step: the cte step value of the range
     *     - max: the maximal int value reprensentable in the target language
     *     - contains: the cte contains value of the range
     * @returns: an expression used to compute the number of iteration in the range
     * */
    fn validateAlmostCteComputeNbIterations (self, loc : &Word, fst : &Value, scd : &Value, step : &BigInt, max : &BigInt, contains : bool)-> &Value {
        let stepU = if (step < 0) { 0 - step } else { step };
        if (stepU == 0) return makeIntValue (0us);

        let rngType = fst.getType ().asOf!{&IntType} ();
        let (fstU, scdU, mut subU) = if (step < 0) {
            (scd, fst, BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::MINUS, fst, scd))
        } else {
            (fst, scd, BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::MINUS, scd, fst))
        };

        let stepI = IntValue::new (loc, rngType, stepU);
        let maxI = IntValue::new (loc, rngType, max);
        let nbAll = BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::DIV, subU, stepI);
        let nbAllP1 = BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::PLUS, nbAll, IntValue::new (loc, rngType, 1us));

        if (contains) {
            let cmp = CmpIntOperatorValue::new (loc, BinaryOperators::DEQUAL, nbAll, maxI);
            return ConditionalValue::new (loc, rngType, cmp, nbAll, nbAllP1); // if contains { return if (nbAll == max) { nbAll } else { nbAll + 1 } }
        }

        let mulNbAll = BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::STAR, nbAll, stepI);
        let last = BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::PLUS, mulNbAll, fstU);

        let cmp = CmpIntOperatorValue::new (loc, BinaryOperators::NOT_EQUAL, last, scdU);
        return ConditionalValue::new (loc, rngType, cmp, nbAllP1, nbAll); // return if (last == scdU) { nbAll } else { nbAll + 1 };
    }


    /**
     * Completely non cte version of the function used to compute the number of iteration in a range
     * * @params:
     *     - fst: the fst value of the range
     *     - scd: the scd value of the range
     *     - step: the step value of the range
     *     - max: the maximal int value reprensentable in the target language
     *     - contains: the contains value of the range
     * @returns: an expression used to compute the number of iteration in the range
     * */
    fn validateNonCteComputeNbIterations (self, loc : &Word, fstV : &Value, scdV : &Value, stepV : &Value, max : &BigInt, contains : &Value)-> &Value {
        let dmut lst = Vec!{&Value}::new ();

        let rngTuType = {
            TupleType::new (loc, [fstV.getType (), scdV.getType (), stepV.getType ()])
        } catch {
            _ => __pragma!panic ();
        };

        let vdecl = VarDeclValue::new (Word::new ("#_range"s8, loc), rngTuType, TupleValue::new (loc, rngTuType, [fstV, scdV, stepV]), isMutable-> false);
        let vref = VarRefValue::new (vdecl.getLoc (), loc, rngTuType, vdecl.getUniqId (), isSelf-> false, canCte-> true);

        lst:.push (vdecl);

        let fst = TupleFieldAccessValue::new (loc, rngTuType.getInners ()[0], vref, 0us);
        let scd = TupleFieldAccessValue::new (loc, rngTuType.getInners ()[1], vref, 1us);
        let step = TupleFieldAccessValue::new (loc, rngTuType.getInners ()[2], vref, 2us);

        let rngType = fst.getType ().asOf!{&IntType} ();
        let stepCmp = CmpIntOperatorValue::new (loc, BinaryOperators::INF, step, IntValue::new (loc, step.getType ().asOf!{&IntType} (), 0us));

        let tuType = {
            TupleType::new (loc, [rngType, rngType, rngType, rngType])
        } catch {
            _ => __pragma!panic ();
        };

        let valNeg = TupleValue::new (loc, tuType, [UnaryIntOperatorValue::new (loc, step.getType ().asOf!{&IntType} (), UnaryOperators::MINUS, step), scd, fst, BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::MINUS, fst, scd)]);
        let valPos = TupleValue::new (loc, tuType, [step, fst, scd, BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::MINUS, scd, fst)]);

        let valDecl = VarDeclValue::new (Word::new ("#_val"s8, loc), tuType, ConditionalValue::new (loc, tuType, stepCmp, valNeg, valPos), isMutable-> false);
        let val = VarRefValue::new (valDecl.getLoc (), loc, tuType, valDecl.getUniqId (), isSelf-> false, canCte-> true);
        lst:.push (valDecl);

        let maxI = IntValue::new (loc, rngType, max);
        let stepU = TupleFieldAccessValue::new (loc, rngType, val, 0us);
        let fstU = TupleFieldAccessValue::new (loc, rngType, val, 1us);
        let scdU = TupleFieldAccessValue::new (loc, rngType, val, 2us);
        let subU = TupleFieldAccessValue::new (loc, rngType, val, 3us);

        let nbAllDecl = VarDeclValue::new (Word::new ("#_nbAll"s8, loc), rngType, BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::DIV, subU, stepU), isMutable-> false);
        let nbAll = VarRefValue::new (nbAllDecl.getLoc (), loc, rngType, nbAllDecl.getUniqId (), isSelf-> false, canCte-> true);
        lst:.push (nbAllDecl);

        let valIfNoMax = {
            let mulNbAll = BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::STAR, nbAll, stepU);
            let last = BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::PLUS, mulNbAll, fstU);

            let nbAllP1 = BinaryMathIntOperatorValue::new (loc, rngType, BinaryOperators::PLUS, nbAll, IntValue::new (loc, rngType, 1us));
            let cmp = LogicalBinBoolOperatorValue::new (loc, BinaryOperators::DPIPE, CmpIntOperatorValue::new (loc, BinaryOperators::NOT_EQUAL, last, scdU), contains);
            ConditionalValue::new (loc, rngType, cmp, nbAllP1, nbAll)
        };

        // if (nbAll == max) { nbAll } else { let last = (nbAll * stepU) + fstU; if (last != scdU || contains) { nbAll + 1 } else { nbAll } };
        let cmp = CmpIntOperatorValue::new (loc, BinaryOperators::DEQUAL, nbAll, maxI);
        let cnd = ConditionalValue::new (loc, rngType, cmp, nbAll, valIfNoMax);
        lst:.push (cnd);

        return BlockValue::new (loc, rngType, lst[]);
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ===========================    LOOP ON CLASS            ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a loop operator overloading on a class type
     * @params:
     *    - context: the context of the validation
     *    - cptr: the class pointer being iterated
     *    - value: the value instance of the class
     *    - f: the for loop to validate
     *    - byAlias: true iif the class value is aliased
     * */
    fn validateClassLoop (self, dmut context : &Validator, cptr : &ClassPtrType, value : &Value, f : &ForLoopExpr, byAlias : bool, aliasLoc : &Word)-> &Value
        throws &ErrorMsg
    {
        let loc = f.getLoc ();
        let (useAlias, beginMeth, endMeth) = {
            let inst = if (byAlias) { ClassAliaserValue::new (loc, cptr, value) } else { value };
            let (beginMeth, useAliasBeg) = self.createIterOverCptrCall (alias context, loc, cptr, inst, OpOverrideNames::BEGIN_OP_OVERRIDE);
            let (endMeth, useAliasEnd) = self.createIterOverCptrCall (alias context, loc, cptr, inst, OpOverrideNames::END_OP_OVERRIDE);
            (useAliasEnd || useAliasBeg, beginMeth, endMeth)
        } catch {
            err : &ErrorMsg => throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::FOR_LOOP_CPTR, cptr), notes-> [err]);
        };

        let dmut outerLoop = Vec!{&Value}::new ();
        let dmut innerLoop = Vec!{&Value}::new ();
        let dmut errors = Vec!{&ErrorMsg}::new ();

        context:.enterBlock ();
        let _loop = {
            let (test, increment, _) = self.validateClassLoopIteratorVar (alias context, loc, cptr, beginMeth, endMeth, f.getVariables (), alias innerLoop, alias outerLoop);
            innerLoop:.push (context:.validateValue (f.getBlock ()));
            innerLoop:.push (increment);

            let blkContent = BlockValue::new (loc, VoidType::new (loc), innerLoop[]);
            let _loop = LoopValue::new (loc, VoidType::new (loc), test-> test, blkContent, isDo-> false);
            _loop
        } catch {
            err : &ErrorMsg => {
                errors:.push (err);
                UNIT_VALUE
            }
        };

        {
            context:.quitBlock (warnUnused-> errors.len () == 0us);
        } catch {
            err : &ErrorMsg => errors:.push (err);
        }

        if (errors.len () != 0us) throw ErrorMsg::fatal (f.getLoc (), format (ValidateErrorMessage::FOR_LOOP_CPTR, cptr), notes-> errors[]);
        self.verifyUseAliasCptrIter (loc, aliasLoc, cptr, beginMeth, endMeth, useAlias, byAlias);

        outerLoop:.push (_loop);
        BlockValue::new (loc, VoidType::new (loc), outerLoop[])
    }

    /**
     * Validate the iterator vars of a class loop
     * @params:
     *    - context: the context of the validation
     *    - loc : the location of the loop
     *    - cptr: the class type
     *    - beginMeth: the call to the begin meth
     *    - endMeth: the call to the end method
     *    - len: the len field (can be unit if it does not apply)
     *    - vars: the list of vars declared by the loop
     * @returns:
     *    - innerLoop: add the declaration of the iterators
     *    - outerLoop: add the declaration of the begin, end values
     *    - .0: the test that stop the loop
     *    - .1: the instruction used to increment the iterator to put after the content of the loop
     *    - .2: the iterator ref or unit value, depending wether lenField is set or not
     * @throws:
     *    - &ErrorMsg: if the loop is not valid
     * */
    fn validateClassLoopIteratorVar (self, dmut context : &Validator, loc : &Word, cptr : &ClassPtrType, beginMeth : &Value, endMeth : &Value, lenField : &Value = UNIT_VALUE, vars : [&Expression], dmut innerLoop : &Vec!{&Value}, dmut outerLoop : &Vec!{&Value})-> (&Value, &Value, &Value)
        throws &ErrorMsg
    {
        let iteratorDecl = VarDeclValue::new (Word::new ("#_iter"s8, beginMeth.getLoc ()), beginMeth.getType ().toDeeplyMutable (), beginMeth, isMutable-> true, isIterator-> true);
        let endDecl = VarDeclValue::new (Word::new ("#_end"s8, endMeth.getLoc ()), endMeth.getType ().clone (0u32), endMeth, isMutable-> false, isIterator-> false);
        let iteratorType = iteratorDecl.getVarType ();
        self.verifyCptrBeginIsValid (alias context, loc, cptr, iteratorDecl, beginMeth);

        let iteratorRef = VarRefValue::new (iteratorDecl.getLoc (), iteratorDecl.getLoc (), iteratorType, iteratorDecl.getUniqId (), isSelf-> false, canCte-> false);
        let endRef = VarRefValue::new (endDecl.getLoc (), endDecl.getLoc (), endDecl.getVarType (), endDecl.getUniqId (), isSelf-> false, canCte-> false);
        let aliasRef = ClassAliaserValue::new (iteratorDecl.getLoc (), iteratorType.asOf!{&ClassPtrType} (), iteratorRef);

        let mut test = context:.getBinOpValidator ().validateComparisonOperation (alias context, loc, BinaryOperators::NOT_EQUAL, iteratorRef, endRef);
        let mut increment = self.validateCptrIncrement (alias context, loc, iteratorType, aliasRef);
        let mut iterRef : &Value = UNIT_VALUE;

        match lenField {
            UnitValue () => {}
            _ => {
                let indexDecl = VarDeclValue::new (Word::new ("#_index"s8, lenField.getLoc ()), lenField.getType (), makeIntValue (loc, 0us), isMutable-> true, isIterator-> true);
                let indexRef = VarRefValue::new (indexDecl.getLoc (), indexDecl.getLoc (), indexDecl.getVarType (), indexDecl.getUniqId (), isSelf-> false, canCte-> false);
                outerLoop:.push (indexDecl);

                let indexTest = CmpIntOperatorValue::new (loc, BinaryOperators::INF, indexRef, lenField);
                let indexIncr = AffectValue::new (loc, indexRef.getType (), indexRef, BinaryMathIntOperatorValue::new (loc, indexRef.getType (), BinaryOperators::PLUS, indexRef, makeIntValue (loc, 1us)));

                test = LogicalBinBoolOperatorValue::new (loc, BinaryOperators::DAND, test, indexTest);
                increment = BlockValue::new (loc, increment.getType (), [increment, indexIncr]);

                iterRef = indexRef;
            }
        }

        outerLoop:.push (iteratorDecl);
        outerLoop:.push (endDecl);

        let nbVars = vars.len;
        for index, it in vars match it {
            v : &VarDeclExpr => {
                let iter = self.validateCptrIterDecl (alias context, loc, v, iteratorType, aliasRef, index, nbVars);
                if (v.getLoc ().str () != Keys::UNDER) context:.insertLocal (v.getLoc ().str (), iter);

                innerLoop:.push (iter);
            }
            _ => __pragma!panic ();
        }

        (test, increment, iterRef)
    }

    /**
     * Validate a the call the op overloading function
     * @params:
     *   - context: the context of the validation
     *   - cptr: the type of the class begin iterated
     *   - value: the instance being iterated
     *   - name: the name of the meth to call
     *   - mustBeMutable: true iif the return type of the call has to be mutable
     * */
    fn createIterOverCptrCall (self, dmut context : &Validator, loc : &Word, cptr : &ClassPtrType, value : &Value, name : [c8])-> (&Value, bool)
        throws &ErrorMsg
    {
        let meth = context:.constructObjectMethodAcc (loc, cptr, value, name, allowImmut-> true);
        let cl = context:.getCallOpValidator ().validate (alias context, loc, meth, []);

        let useAlias = match cl {
            c : &MethodCallValue => {
                c.getMethod ().getPrototype ().isMutable ()
            }
            _ => { false }
        };

        (cl, useAlias)
    }

    /**
     * Validate the declaration of an iterator variable within a for loop overloading on a class type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the loop
     *    - v: the iterator variable to declare
     *    - iteratorType: the type of the iterator (from begin call on the class)
     *    - iterRef: the variable of type iteratorType (containing the current class iterator)
     *    - index: the index of the variable decl
     * */
    fn validateCptrIterDecl (self, dmut context : &Validator, loc : &Word, vdecl : &VarDeclExpr, iteratorType : &Type, iterRef : &Value, index : usize, nbVars : usize)-> &Value
        throws &ErrorMsg
    {
        // let x = iter.get!{0, N} ();
        let getVal = self.validateCptrIterCallGet (alias context, vdecl.getLoc (), iteratorType, iterRef, index, nbVars)
        let (protoLoc, protoMsg) = match getVal {
            c : &MethodCallValue => { (c.getMethod ().getPrototype ().getLoc (),
                                       format ("%", c.getMethod ().getPrototype (), withTags-> ["withParams"s8]))
            }
            _ => { (loc, format ("%", getVal)) }
        };

        {
            return self.validateCptrIterValidateVDecl (alias context, vdecl, getVal);
        } catch {
            err : &ErrorMsg => {
                let note = ErrorMsg::note (loc, format (ValidateErrorMessage::CALL_GET_OP_ONE_LINE, vdecl.getLoc ().str (), iterRef, index, nbVars), oneLine-> true);
                let protoNote = ErrorMsg::note (protoLoc, format (ValidateErrorMessage::CALL_PROTO, protoMsg));
                throw ErrorMsg::fatal (vdecl.getLoc (), format (ValidateErrorMessage::USE_GET_OP_ITERATOR, protoMsg, iteratorType),
                                       notes-> [note, err.withNote ([protoNote])]);
            }
        }
    }


    /**
     * Validate the declaration of the iterator decl from a call to the get method (or function) of an iterator
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the call
     *    - vdecl: the variable to declare
     *    - val: the value (call of iter.get)
     * @returns: the validated declaration of the variable
     * */
    fn validateCptrIterValidateVDecl (self, dmut context : &Validator, vdecl : &VarDeclExpr, val : &Value)-> &Value
        throws &ErrorMsg
    {
        let vType = if (!vdecl.getType ().isOf!{&EmptyExpression} ()) {
            let vtype = context:.validateTypeForVarDecl (vdecl.getType (), vdecl, canBeRef-> false);
            context:.verifyCompatibleType (vdecl.getLoc (), val.getLoc (), vtype, val.getType ());
            vtype
        } else {
            context:.validateTypeForVarDecl (TypeWrapperExpr::new (vdecl.getLoc (), val.getType ()), vdecl, canBeRef-> false)
        };

        if (vType.isMutable () && !vType.needExplicitAlias () && !vType.isMovable ()) { // iterator cannot be a reference in that case
            throw ErrorMsg::fatal (vdecl.getMutOrDmutLocation (), ValidateErrorMessage::MUTABLE_CONST_ITERATOR);
        }

        let retTypeLoc = match val {
            c : &MethodCallValue => { c.getMethod ().getPrototype ().getRetType ().getLoc () }
            _ => { val.getLoc () }
        };

        context:.verifyMemoryOwner (retTypeLoc, vType, val, construct-> true, byReference-> false);
        let decl = VarDeclValue::new (vdecl.getLoc (), vType, val, isMutable-> (vdecl.isMutable () || vdecl.isDeeplyMutable ()), isReference-> false, isIterator-> true);
        decl
    }

    /**
     * Validate the call to the method "get" of the iterator value
     * @warning: assumes that the iterator type is a class or a struct
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of variable to declare
     *    - iteratorType: the type of the iterator
     *    - iterRef: the reference (class aliaser) of the iterator
     *    - index: the index of the variable to create
     *    - nbVars: the number of variables iterating the class
     * */
    fn validateCptrIterCallGet (self, dmut context : &Validator, loc : &Word, iteratorType : &Type, iterRef : &Value, index : usize, nbVars : usize)-> &Value
        throws &ErrorMsg
    {
        {
            match iteratorType {
                cptr : &ClassPtrType => {
                    let meth = context:.constructObjectMethodAcc (loc, cptr, iterRef, OpOverrideNames::GET_ITER_OVERRIDE, allowImmut-> true);
                    let templ = context:.getValueValidator ().validateTemplateCall (alias context, loc, meth, [makeIntValue (loc, index), makeIntValue (loc, nbVars)]);
                    return context:.getCallOpValidator ().validate (alias context, loc, templ, []);
                }
                _ => {
                    __pragma!panic ();
                }
            }
        } catch {
            err : &ErrorMsg => {
                let note = ErrorMsg::note (loc, format (ValidateErrorMessage::CALL_GET_OP_ONE_LINE, loc.str (), iterRef, index, nbVars), oneLine-> true);
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::CALL_GET_OP_ITERATOR, iteratorType, index, nbVars),
                                       notes-> [note, err]);
            }
        }
    }

    /**
     * Validate the increment on a iterator for a class ptr iteration, i.e., call to the "next" method
     * @warning: assumes that the iterator type is a class or a struct
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the for loop
     *    - iteratorType : the type of the iterator
     *    - iterRef: the reference to the iterator value (in a class aliaser)
     * * */
    fn validateCptrIncrement (self, dmut context : &Validator, loc : &Word, iteratorType : &Type, iterRef : &Value)-> &Value
        throws &ErrorMsg
    {
        {
            match iteratorType {
                cptr : &ClassPtrType => {
                    let meth = context:.constructObjectMethodAcc (loc, cptr, iterRef, OpOverrideNames::NEXT_OP_OVERRIDE);
                    return context:.getCallOpValidator ().validate (alias context, loc, meth, []);
                }
                _ => {
                    __pragma!panic ();
                }
            }
        } catch {
            err : &ErrorMsg => {
                let note = ErrorMsg::note (loc, format (ValidateErrorMessage::CALL_NEXT_OP_ONE_LINE, iterRef, iterRef), oneLine-> true);
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::CALL_NEXT_OP_ITERATOR, iteratorType), notes-> [note, err]);
            }
        }
    }

    /**
     * Verify that the begin method returns a valid iterator, and that the iterator is deeply mutable
     * @params:
     *    - context: the context of the validation
     *    - loc : the location of the for loop
     *    - cptr: the type being iterated
     *    - iteratorDecl: the declaration of the iterator variable
     *    - beginMeth: the call to the begin method
     * */
    fn verifyCptrBeginIsValid (self, dmut context : &Validator, loc : &Word, cptr : &ClassPtrType, iteratorDecl : &VarDeclValue, beginMeth : &Value)
        throws &ErrorMsg
    {
        let (protoLocBeg, retTypeProtoLog, protoMsg) = match beginMeth {
            c : &MethodCallValue => { (c.getMethod ().getPrototype ().getLoc (),
                                       c.getMethod ().getPrototype ().getRetType ().getLoc (),
                                       format ("%", c.getMethod ().getPrototype (), withTags-> ["withParams"s8]))
            }
            _ => { (loc, loc, format ("%", beginMeth)) }
        };

        {
            let iteratorTrait = context:.validateIteratorTrait (loc);
            context:.verifyImplement (retTypeProtoLog, beginMeth.getType (), iteratorTrait);
            context:.verifyMemoryOwner (retTypeProtoLog, iteratorDecl.getVarType (), beginMeth, byReference-> false, construct-> true, byLazy-> false);
        } catch {
            err : &ErrorMsg => {
                let noteBeg = ErrorMsg::note (protoLocBeg, format (ValidateErrorMessage::CALL_PROTO, protoMsg), notes-> [err]);
                let rewriteNote = ErrorMsg::note (loc, format (ValidateErrorMessage::CALL_BEGIN_ONE_LINE, cptr), oneLine-> true);
                throw ErrorMsg::list ([rewriteNote, noteBeg]);
            }
        }
    }


    /**
     * Verify that alias was not uselessly used on an iteration over a class pointer object
     * @params:
     *    - loc: the location of the for loop
     *    - cptr: the class pointer being iterated
     *    - beginMeth: the call to the begin method
     *    - endMeth: the call to the end method
     *    - useAlias: true if alias was used for at least one of the calls
     *    - byAlias: true if the value is passed by alias
     * @throws:
     *    - &ErrorMsg: the error message if the alias was used but is useless
     * */
    fn verifyUseAliasCptrIter (self, loc : &Word, valLoc : &Word, cptr : &ClassPtrType, beginMeth : &Value, endMeth : &Value, useAlias : bool, byAlias : bool)
        throws &ErrorMsg
    {
        if (!useAlias && byAlias) {
            let (protoLocBeg, _) = match beginMeth {
                c : &MethodCallValue => { (c.getMethod ().getPrototype ().getLoc (),
                                           format ("%", c.getMethod ().getPrototype (), withTags-> ["withParams"s8]))
                }
                _ => { (loc, format ("%", beginMeth)) }
            };

            let (protoLocEnd, _) = match endMeth {
                c : &MethodCallValue => { (c.getMethod ().getPrototype ().getLoc (),
                                           format ("%", c.getMethod ().getPrototype (), withTags-> ["withParams"s8]))
                }
                _ => { (loc, format ("%", endMeth)) }
            };

            let noteBeg = ErrorMsg::note (protoLocBeg, format (ValidateErrorMessage::CALL_PROTO, beginMeth), oneLine-> true, withLoc-> true);
            let noteEnd = ErrorMsg::note (protoLocEnd, format (ValidateErrorMessage::CALL_PROTO, endMeth), oneLine-> true, withLoc-> true);

            let unecessaryErr = ErrorMsg::fatal (valLoc, format (ValidateErrorMessage::UNECESSARY_ALIAS_CPTR_LOOP, cptr), notes-> [noteBeg, noteEnd]);
            throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::FOR_LOOP_CPTR, cptr), notes-> [unecessaryErr]);
        }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * ========================        COMPREHENSION SLICE        =====================
     * ================================================================================
     * ================================================================================
     */

    /**
     * validate a list comprehension from an array value
     * @params:
     *   - context: the context of the validation
     *   - arrType: the type of array being iterated
     *   - value: the value of the array being iterated
     *   - all: the slice for creating the list comprehension
     *   - canDynamic: if true, then the slice allocator is surrounded by a /copy/ operator, and therefore can be dynamically allocated
     * @returns: the generated slice/array/tuple
     * @throws:
     *    - &ErrorMsg: of the validated failed
     * */
    fn validateComprArray (self, dmut context : &Validator, arrType : &ArrayType, value : &Value, all : &SliceForAllocatorExpr, canDynamic : bool)-> &Value
        throws &ErrorMsg
    {
        let vars = all.getVariables ();
        let uniqV = context.createSliceAliasFromArray (all.getLoc (), arrType, value, mutable-> false); // create a slice from the address of the array
        let slcT = uniqV.getType ().asOf!{&SliceType} ();

        match vars.len {
            1us => // value iterator, _ in A
                return self.validateComprSliceIteration (alias context, slcT, uniqV, vars [0], EmptyExpression::new (), all, canDynamic);
            2us => // index iterator, value iterator in A
                return self.validateComprSliceIteration (alias context, slcT, uniqV, vars [0], vars [1], all, canDynamic);
            _ => { // not allowed
                throw ErrorMsg::fatal (all.getForLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, all.getVariables ().len, value.getType ()));
            }
        }
    }

    /**
     * Validate a list comprehension from a slice value
     * @params:
     *   - context: the context of the validation
     *   - slc: the slice type being iterated
     *   - iter: the value being iterated
     *   - all: the list comprehension to validate
     *   - canDynamic: if true, then the slice allocator is surrounded by a /copy/ operator, and therefore can be dynamically allocated
     * @returns: the generated slice/array/tuple
     * @throws:
     *   - &ErrorMsg: if the validation failed
     * */
    fn validateComprSlice (self, dmut context : &Validator, slcType : &SliceType, value : &Value, all : &SliceForAllocatorExpr, canDynamic : bool)-> &Value
        throws &ErrorMsg
    {
        let vars = all.getVariables ();
        match vars.len {
            1us => // value iterator, _ in A
                return self.validateComprSliceIteration (alias context, slcType, value, vars [0], EmptyExpression::new (), all, canDynamic);
            2us => // index iterator, value iterator in A
                return self.validateComprSliceIteration (alias context, slcType, value, vars [0], vars [1], all, canDynamic);
            _ => { // not allowed
                throw ErrorMsg::fatal (all.getForLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, all.getVariables ().len, value.getType ()));
            }
        }
    }

    /**
     * Validate a list comprehension from a slice value
     * @params:
     *   - context: the context of the validation
     *   - slcType: the type of the slice
     *   - value: the value of the slice
     *   - iter1: the index or value iterator (if iter2 is EmptyExpression)
     *   - iter2: the value iterator (or EmptyExpression)
     *   - all: the slice allocator to validate
     *   - canDynamic: if true, then the slice allocator is surrounded by a /copy/ operator, and therefore can be dynamically allocated
     * @returns: the generated slice/array/tuple
     * @throws:
     *   - &ErrorMsg: if the validation failed
     * */
    fn validateComprSliceIteration (self, dmut context : &Validator, slcType : &SliceType, value : &Value, iter1 : &Expression, iter2 : &Expression, all : &SliceForAllocatorExpr, canDynamic : bool)-> &Value
        throws &ErrorMsg
    {
        let dmut values = Vec!{&Value}::new ();
        let dmut errors = Vec!{&ErrorMsg}::new ();
        let loc = all.getLoc ();

        context:.enterBlock ();

        // put the slice into a value, to avoid validating it multiple times (not necessary since YIL, but more clear)
        let sliceDecl = VarDeclValue::new (Word::new ("#_value"s8, value.getLoc ()), slcType, value, isMutable-> false && slcType.isMutable ());
        let sliceRef = VarRefValue::new (sliceDecl.getLoc (), sliceDecl.getLoc (), slcType, sliceDecl.getUniqId (), isSelf-> false, canCte-> false);

        // Compute the len from the initial value, because the generator #_value may lose the cte len (e.g. a [0 .. 2], [1, 2, 3], ...)
        let len = context:.getCompileTimeInterpreter ().reduce (StructFieldAccessValue::new (loc, IntType::new (loc, size-> 0u16, signed-> false), value, SliceKeys::LEN));
        values:.push (sliceDecl); // insert the slice above the loop

        let retValue = if (all.isTuple ()) { // tuple iteration is unfolded, so need to be cte
            let lp = self.validateComprSliceInnerLoopTuple (alias context, slcType, sliceRef, all, iter1, iter2, len);
            values:.push (lp);

            cast!{&Value} (BlockValue::new (loc, lp.getType (), values[])) // return the tuple value
        } else { // array/slice creation are loops
            if (!canDynamic) {
                let size = context:.getCompileTimeInterpreter ().computeInt (len);
                size.to!u64 ();
            } catch {
                _ : &ErrorMsg => throw ErrorMsg::fatal (all.getIter ().getLoc (), format (ValidateErrorMessage::LIST_COMPR_SIZE_CTE, slcType),
                                                        notes-> [ErrorMsg::note (loc, format (ValidateErrorMessage::ENCLOSE_COPY_LST_COMPR))]);
                _ : &BigIntError => throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY, IntType::new (loc, size-> 0u16, signed-> false), len, u64::max));
            }

            let (lp, slcValueRef, slcValueDecl, sliceType, withoutLoop) = self.validateComprSliceInnerLoop (alias context, slcType, sliceRef, all, iter1, iter2, len, canDynamic);
            if (withoutLoop) {
                cast!{&Value} (BlockValue::new (loc, lp.getType (), [lp]))
            } else {

                values:.push (slcValueDecl); // declare the result value
                values:.push (lp); // fill the value
                values:.push (slcValueRef); // return it

                let innerBlock = ListComprValue::new (loc, sliceType, BlockValue::new (loc, sliceType, values[]));
                if (canDynamic) {
                    // If we are inside a copy, then we avoid unecessary copy as the slice alloc already makes an allocation
                    cast!{&Value} (CopierValue::new (loc, sliceType, isDone-> true, innerBlock))
                } else { // creation of an array, just return it
                    cast!{&Value} (innerBlock)
                }
            }
        } catch {
            err : &ErrorMsg => {
                errors:.push (err);
                cast!{&Value} (UNIT_VALUE)
            }
        };

        {
            context:.quitBlock (warnUnused-> errors.len () == 0us);
        } catch {
            err : &ErrorMsg => errors:.push (err);
        }

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
        retValue
    }

    /**
     * Validate a list comprehension on a slice value, that creates a tuple value
     * @info: the len of the slice/array must be cte
     * @params:
     *    - context: the context of the validation
     *    - slcType: the type of the slice being iterated
     *    - sliceRef: the reference to the uniq value containing the slice
     *    - all: the slice allocator to validate
     *    - iter1: the index iterator, or value iterator if iter2 is EmptyExpression
     *    - iter2: the value iterator or EmptyExpression
     *    - len: the length of the slice being iterated (throws an error if not cte)
     * @return: the created tuple value
     * @throws:
     *    - &ErrorMsg: if the validation failed
     * */
    fn validateComprSliceInnerLoopTuple (self, dmut context : &Validator, slcType : &SliceType, sliceRef : &Value, all : &SliceForAllocatorExpr, iter1 : &Expression, iter2 : &Expression, len : &Value)-> &Value
        throws &ErrorMsg
    {
        let loc = all.getLoc ();
        let dmut outerLoop = Vec!{&Value}::new ();
        let dmut values = Vec!{&Value}::new ();
        let dmut types = Vec!{&Type}::new ();

        let tabSize = { // compute the len of the slice at cte
            let size = context:.getCompileTimeInterpreter ().computeInt (len, signed-> false);
            size.to!usize ()
        } catch {
            _ : &ErrorMsg => throw ErrorMsg::fatal (all.getIter ().getLoc (), format (ValidateErrorMessage::LIST_COMPR_SIZE_CTE, slcType));
            _ : &BigIntError => {
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY, IntType::new (loc, size-> 0u16, signed-> false), len, u64::max));
            }
        };

        let (iterRef, valueIter) = match (iter1, iter2) { // construct the index iterator
            (v : &VarDeclExpr, EmptyExpression ()) => { // only one iterator, declare an implicit iterator
                let iter = VarDeclValue::new (Word::new ("#_iter"s8, v.getLoc ()), IntType::new (v.getLoc (), size-> 0u16, signed-> false), makeIntValue (v.getLoc (), 0us), isMutable-> false);
                let vrefIter = VarRefValue::new (iter.getLoc (), iter.getLoc (), iter.getVarType (), iter.getUniqId (), isSelf-> false, canCte-> false, isIterator-> true);
                outerLoop:.push (iter);

                (vrefIter, v)
            }
            (i : &VarDeclExpr, u : &VarDeclExpr) => { // two iterators, declare the index iterator using the provided name
                let iter = self.validateIndexIterDecl (alias context, loc, i, IntType::new (i.getLoc (), size-> 0u16, signed-> false), value-> makeIntValue (i.getLoc (), 0us), slcType, canCte-> false);
                let vrefIter = VarRefValue::new (iter.getLoc (), iter.getLoc (), iter.getVarType (), iter.getUniqId (), isSelf-> false, canCte-> false);

                if (i.getLoc () != Keys::UNDER) context:.insertLocal (i.getLoc ().str (), iter);
                outerLoop:.push (iter);
                (vrefIter, u)
            }
            _ => __pragma!panic ();
        };

        let dmut errors = Vec!{&ErrorMsg}::new ();
        let mut index = BigInt::new (0us);
        while (index < tabSize) { // unfolded iteratation over the slice
            context:.enterBlock ();
            let currValue = {
                // put the current index in the index iterator variable
                let currIndex = AffectValue::new (loc, iterRef.getType (), iterRef, IntValue::new (loc, iterRef.getType ().asOf!{&IntType} (), index));
                let (array, _, _) = self.validateSliceIterDecl (alias context, valueIter, slcType, sliceRef, iterRef, false, false); // use it to declare the value iterator
                if (valueIter.getLoc () != Keys::UNDER) context:.insertLocal (valueIter.getLoc ().str (), array);

                let value = context:.validateValue (all.getValue ()); // use those two variable to declare the value at given index

                BlockValue::new (loc, value.getType (), [currIndex, array, value]) // push it inside the tuple
            } catch {
                err : &ErrorMsg => {
                    errors:.push (err);
                    cast!{&Value} (UNIT_VALUE)
                }
            };

            {
                context:.quitBlock (warnUnused-> errors.len () == 0us);
            } catch {
                err : &ErrorMsg => errors:.push (err);
            }

            if (errors.len () != 0us) throw ErrorMsg::list (errors[]);

            context:.getLiteralValidator ().addTupleType (alias context, currValue, alias values, alias types);
            index += 1;
        }


        let type = TupleType::new (loc, types[], isMutable-> true);
        let tuV = TupleValue::new (loc, type, values[]); // create the tuple from the unfolded loop
        outerLoop:.push (tuV);

        // let #_iter = 0;
        // ...
        // {
        //    #_iter = 1;
        //    let v = #_value [#_iter];
        //    v
        // }
        // {
        //    #_iter = 2;
        //    let v = #_value [#_iter];
        //    v
        // }
        // ...
        BlockValue::new (loc, type, outerLoop[])
    }
    
    /**
     * Validate the inner part of a list comprehension on a slice value that creates a slice or an array
     * @params:
     *    - context: the context of the validation
     *    - slcType: the type of the slice being iterated
     *    - value: the value being iterated
     *    - all: the list comprehension to validate
     *    - iter1: the index iterator or value iterator if iter2 is EmptyExpression
     *    - iter2: the value iterator of EmptyExpression
     *    - len: the length of the slice (can be unknown at cte if canDynamic)
     *    - canDynamic: if true, then the slice allocator is surrounded by a /copy/ operator, and therefore can be dynamically allocated
     * @returns:
     *   - .0: the loop filling the generated array/slice
     *   - .1: the reference to the generated array/slice
     *   - .2: the var decl of the array/slice
     *   - .3: the type of the generated array/slice
     *   - .4: iif true, only the .0 is useful, no loop was created
     * @throws:
     *   - &ErrorMsg: if the validation failed
     * */
    fn validateComprSliceInnerLoop (self, dmut context : &Validator, slcType : &SliceType, value : &Value, all : &SliceForAllocatorExpr, iter1 : &Expression, iter2 : &Expression, len : &Value, canDynamic : bool)-> (&Value, &Value, &Value, &Type, bool)
        throws &ErrorMsg
    {
        let loc = all.getLoc ();
        let dmut outerLoop = Vec!{&Value}::new ();
        let dmut innerLoopValues = Vec!{&Value}::new ();

        let vars = self.validateSliceIteratorVars (alias context, value.getLoc (), slcType, value, iter1, iter2, false, false);
        let innerValue = context:.validateValue (all.getValue ());
        if (innerValue.isFullLiteral ()) {
            let fin = if (canDynamic) {
                context:.getLiteralValidator ().validateDynamicSliceAllocator (alias context, all.getLoc (), innerValue, len)
            } else {
                context:.getLiteralValidator ().validateStaticSliceAllocator (alias context, all.getLoc (), innerValue, len)
            };

            return (fin, UNIT_VALUE, UNIT_VALUE, VOID_TYPE, true);
        }

        let innerType = context:.inferTypeImplicitMutability (innerValue); // use the validated value to infer the type of the created slice

        // let x = {
        //     let #_iter = 0;
        //     let res : [i32] = new [#_value.len];
        //     while #_iter < len {
        //        let v = #_value [#_iter];
        //        res [#_iter] = v;
        //        #_iter += 1;
        //     }
        //     res
        // };
        let iter = vars._0;

        // Create the variable declaration of the result value
        let (slcValueDecl, slcValueRef, slcIndex, sliceType) = self.validateComprSliceValueDecl (alias context, all.getLoc (), slcType, innerType, iter, len, canDynamic);
        outerLoop:.push (vars._1); // declare the index iterator

        let one = makeIntValue (loc, 1us);
        let test = CmpIntOperatorValue::new (loc, BinaryOperators::INF, iter, len); // if the iterator is greater than the value of the array the loop is stopped
        let increment = AffectValue::new (loc, iter.getType (), iter, BinaryMathIntOperatorValue::new (loc, iter.getType (), BinaryOperators::PLUS, iter, one));

        innerLoopValues:.push (vars._2); // declare the value iterator
        innerLoopValues:.push (AffectValue::new (loc, innerType, slcIndex, innerValue)); // affect the current iteration
        innerLoopValues:.push (increment); // increment the index iterator

        let blkContent = BlockValue::new (loc, VoidType::new (loc), innerLoopValues[]);
        let lp = LoopValue::new (loc, VoidType::new (loc), test-> test, blkContent, isDo-> false);

        outerLoop:.push (lp);

        let retLp = BlockValue::new (loc, VoidType::new (loc), outerLoop[]);
        (retLp, slcValueRef, slcValueDecl, sliceType, false)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ========================        COMPREHENSION TUPLE        =====================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a list comprehension from a tuple value
     * @params:
     *   - context: the context of the validation
     *   - tu: the tuple type being iterated
     *   - iter: the value being iterated
     *   - all: the list comprehension to validate
     *   - canDynamic: if true then a slice is created, thus the size can be unknown at cte
     * @returns: the generated slice/array
     * @throws:
     *   - &ErrorMsg: if the validation failes
     * */
    fn validateComprTuple (self, dmut context : &Validator, type : &TupleType, value : &Value, all : &SliceForAllocatorExpr)-> &Value
        throws &ErrorMsg
    {
        let vars = all.getVariables ();
        match vars.len {
            1us => {
                return self.validateComprTupleIteration (alias context, type, value, all, vars[0], EmptyExpression::new ());
            }
            2us => {
                return self.validateComprTupleIteration (alias context, type, value, all, vars[0], vars[1]);
            }
            _ => {
                throw ErrorMsg::fatal (all.getLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, vars.len, type));
            }
        }
    }

    /**
     * Validate the list comprehension from a tuple value
     * @params:
     *    - context: the context of the validation
     *    - type: the type of the tuple being iterated
     *    - value: the
     * */
    fn validateComprTupleIteration (self, dmut context : &Validator, type : &TupleType, value : &Value, all : &SliceForAllocatorExpr, iter1 : &Expression, iter2 : &Expression)-> &Value
        throws &ErrorMsg
    {
        let dmut content = Vec!{&Value}::new ();
        let mut arrType : &Type = NoneType::new (all.getLoc ());
        let dmut tuTypes = Vec!{&Type}::new ();


        for i in 0us .. type.getInners ().len { // we validate the content of the loop for each type of the tuple
            let (value_, _, _) = self.validateTupleInnerLoop (alias context, i, iter1, iter2, type, value, all.getValue (), false, false, forLstCompr-> true);
            if (all.isTuple ()) {
                context:.getLiteralValidator ().addTupleType (alias context, value_, alias content, alias tuTypes);
            } else {
                arrType = context:.getLiteralValidator ().addArrayType (alias context, value_, alias content, arrType);
            }
        }

        if (all.isTuple ()) {
            let tu = TupleType::new (all.getLoc (), tuTypes[], isMutable-> true);
            cast!{&Value} (TupleValue::new (all.getLoc (), tu, content[]))
        } else {
            if (content.len () == 0us && arrType.isOf!{&NoneType} ()) arrType = VoidType::new (all.getLoc ());

            let finType = ArrayType::new (all.getLoc (), arrType, content.len (), isMutable-> true);
            cast!{&Value} (ArrayValue::new (all.getLoc (), finType, content[]))
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ========================        COMPREHENSION RANGE        =====================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a list comprehension from a range value
     * @params:
     *   - context: the context of the validation
     *   - ra: the range type being iterated
     *   - iter: the value being iterated
     *   - all: the list comprehension to validate
     *   - canDynamic: if true then a slice is created, thus the size can be unknown at cte
     * @returns: the generated slice/array
     * @throws:
     *   - &ErrorMsg: if the validation failes
     * */
    fn validateComprRange (self, dmut context : &Validator, rngType : &RangeType, value : &Value, all : &SliceForAllocatorExpr, canDynamic : bool)-> &Value
        throws &ErrorMsg
    {
        let vars = all.getVariables ();

        if (vars.len != 1us) throw ErrorMsg::fatal (all.getLoc (), format (ValidateErrorMessage::UNDEF_FOR_LOOP_OPERATOR, vars.len, rngType));

        let loc = all.getLoc ();
        let dmut values = Vec!{&Value}::new ();
        let interpret = context.getCompileTimeInterpreter ();

        let fst  = interpret.reduce (StructFieldAccessValue::new (loc, rngType.getInners ()[0], value, RangeKeys::FST));
        let scd  = interpret.reduce (StructFieldAccessValue::new (loc, rngType.getInners ()[0], value, RangeKeys::SCD));
        let step = interpret.reduce (StructFieldAccessValue::new (loc, rngType.getInners ()[1], value, RangeKeys::STEP));
        let contains = interpret.reduce (StructFieldAccessValue::new (loc, BoolType::new (loc), value, RangeKeys::CONTAIN));

        let iterDecl = VarDeclValue::new (Word::new ("#_iter"s8, loc), IntType::new (loc, signed-> false, size-> 0u16), makeIntValue (loc, 0us), isMutable-> true, isIterator-> true);
        let mut iterRef = VarRefValue::new (iterDecl.getLoc (), loc, iterDecl.getVarType (), iterDecl.getUniqId (), isSelf-> false, canCte-> false, isIterator-> true);
        values:.push (iterDecl);

        let nbIterRef = if (!interpret.isCte (fst) || !interpret.isCte (scd) || !interpret.isCte (step) || !interpret.isCte (contains)) {
            let nbIteration = self.validateComputeNbIterations (scd.getLoc (), alias context, fst, scd, step, contains);
            let nbIterDecl = VarDeclValue::new (Word::new ("#_nb_iter"s8, scd.getLoc ()), IntType::new (loc, signed-> false, size-> 0u16), nbIteration, isMutable-> true);
            let mut nbIterRef = VarRefValue::new (nbIterDecl.getLoc (), loc, nbIterDecl.getVarType (), nbIterDecl.getUniqId (), isSelf-> false, canCte-> false);

            values:.push (nbIterDecl);
            nbIterRef
        } else {
            context:.getCompileTimeInterpreter ().reduce (self.validateComputeNbIterations (loc, alias context, fst, scd, step, contains))
        };


        let dmut errors = Vec!{&ErrorMsg}::new ();

        context:.enterBlock ();
        let retValue = if (all.isTuple ()) {
            let lp = self.validateComprRangeInnerLoopTuple (alias context, rngType, all, vars [0], nbIterRef, fst, step);
            values:.push (lp);
            cast!{&Value} (BlockValue::new (loc, lp.getType (), values[]))
        } else {
            if (!canDynamic) {
                let size = context:.getCompileTimeInterpreter ().computeInt (nbIterRef);
                size.to!u64 ();
            } catch {
                _ : &ErrorMsg => throw ErrorMsg::fatal (all.getIter ().getLoc (), format (ValidateErrorMessage::LIST_COMPR_SIZE_CTE, rngType),
                                                        notes-> [ErrorMsg::note (loc, format (ValidateErrorMessage::ENCLOSE_COPY_LST_COMPR))]);
                _ : &BigIntError => throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY, IntType::new (loc, size-> 0u16, signed-> false), nbIterRef, u64::max));
            }

            let (lp, slcValueRef, slcValueDecl, sliceType, withoutLoop) = self.validateComprRangeInnerLoopArray (alias context, rngType, all, vars [0], iterRef, nbIterRef, fst, step, canDynamic);
            if (withoutLoop) {
                cast!{&Value} (BlockValue::new (loc, lp.getType (), [lp]))
            } else {

                // Declare the value
                values:.push (slcValueDecl);
                values:.push (lp); // iterate to fill its content
                values:.push (slcValueRef); // return the generated value

                // Put inside a copier, because it is already allocated, so first level copy should not be done again
                let innerBlock = ListComprValue::new (loc, sliceType, BlockValue::new (loc, sliceType, values[]));
                if (canDynamic) {
                    cast!{&Value} (CopierValue::new (loc, sliceType, isDone-> true, innerBlock))
                } else {
                    cast!{&Value} (innerBlock)
                }
            }
        } catch {
            err : &ErrorMsg => {
                errors:.push (err);
                cast!{&Value} (UNIT_VALUE)
            }
        };

        {
            context:.quitBlock (warnUnused-> errors.len () == 0us);
        } catch {
            err : &ErrorMsg => errors:.push (err);
        }

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
        retValue
    }

    /**
     * Validate the inner value of a list comprehension iterating over a range value
     * @params:
     *    - context: the context of the validation
     *    - rngType: the type of the iterated value
     *    - all: the slice for allocator
     *    - var: the value iterator (not yet validated)
     *    - nbIterRef: the value containing the number of iteration to perform
     *    - fst: the first value of the range
     *    - step: the step of the range
     * @returns:
     *    - .0: the loop filling the result value
     *    - .1: the refrence to the created value
     *    - .2: the declaration of the created value
     *    - .3: the type of the created value
     * @throws:
     *    - &ErrorMsg: if the validation failed
     * */
    fn validateComprRangeInnerLoopTuple (self, dmut context : &Validator, rngType : &RangeType, all : &SliceForAllocatorExpr, var : &Expression, nbIterRef : &Value, fst : &Value, step : &Value)-> &Value
        throws &ErrorMsg
    {
        let loc = all.getLoc ();
        let dmut values = Vec!{&Value}::new ();
        let dmut types = Vec!{&Type}::new ();

        let tabSize = {
            let size = context:.getCompileTimeInterpreter ().computeInt (nbIterRef, signed-> false);
            size.to!usize ()
        } catch {
            _ : &ErrorMsg => throw ErrorMsg::fatal (all.getIter ().getLoc (), format (ValidateErrorMessage::LIST_COMPR_SIZE_CTE, rngType));
            _ : &BigIntError => throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY, IntType::new (loc, size-> 0u16, signed-> false), nbIterRef, u64::max));
        };

        let st = context:.getCompileTimeInterpreter ().computeInt (step);
        let fs = context:.getCompileTimeInterpreter ().computeInt (fst);

        let mut index = BigInt::new (0us);
        while (index < tabSize) {
            let current = IntValue::new (loc, rngType.getInners ()[0].asOf!{&IntType} (), index * st + fs);
            let innerValue = context:.validateValue (self.createCurrentCteBlock (alias context, all.getValue (), rngType, [var], [current]));

            context:.getLiteralValidator ().addTupleType (alias context, innerValue, alias values, alias types);
            index += 1;
        }

        let type = TupleType::new (loc, types[], isMutable-> true);
        TupleValue::new (loc, type, values[])
    }

    /**
     * Validate the inner value of a list comprehension iterating over a range value
     * @params:
     *    - context: the context of the validation
     *    - rngType: the type of the iterated value
     *    - all: the slice for allocator
     *    - var: the value iterator (not yet validated)
     *    - iterRef: the reference to the index iterator
     *    - nbIterRef: the value containing the number of iteration to perform
     *    - fst: the first value of the range
     *    - step: the step of the range
     *    - canDynamic: true if the result is a slice, false if the result is an array
     * @returns:
     *    - .0: the loop filling the result value
     *    - .1: the refrence to the created value
     *    - .2: the declaration of the created value
     *    - .3: the type of the created value
     *    - .4: iif true, only the .0 is useful, no loop was created
     * @throws:
     *    - &ErrorMsg: if the validation failed
     * */
    fn validateComprRangeInnerLoopArray (self, dmut context : &Validator, rngType : &RangeType, all : &SliceForAllocatorExpr, var : &Expression, iterRef : &Value, nbIterRef : &Value, fst : &Value, step : &Value, canDynamic : bool)-> (&Value, &Value, &Value, &Type, bool)
        throws &ErrorMsg
    {
        let loc = all.getLoc ();
        let dmut innerLoopValues = Vec!{&Value}::new ();

        let (varRef, varDecl) = self.validateRangeIteratorVar (alias context, loc, rngType, var); // validate the value iterator
        let innerValue = context:.validateValue (all.getValue ()); // Validate the value using the declared iterator
        if (innerValue.isFullLiteral ()) {
            let fin = if (canDynamic) {
                context:.getLiteralValidator ().validateDynamicSliceAllocator (alias context, all.getLoc (), innerValue, nbIterRef)
            } else {
                context:.getLiteralValidator ().validateStaticSliceAllocator (alias context, all.getLoc (), innerValue, nbIterRef)
            };

            return (fin, UNIT_VALUE, UNIT_VALUE, VOID_TYPE, true);
        }

        let innerType = context:.inferTypeImplicitMutability (innerValue); // use the validated value to infer the type of the created slice
        let (slcValueDecl, slcValueRef, slcIndex, sliceType) = self.validateComprSliceValueDecl (alias context, all.getLoc (), rngType, innerType, iterRef, nbIterRef, canDynamic);

        // Loop incrementation
        let (increment, setIndex, test) = self.validateRangeIteratorIncrement (alias context, loc, iterRef, nbIterRef, varRef, fst, step);
        if (varRef.getLoc () != Keys::UNDER) {
            innerLoopValues:.push (varDecl);
            innerLoopValues:.push (setIndex);
        }

        // Content of the loop
        innerLoopValues:.push (AffectValue::new (loc, innerType, slcIndex, innerValue));
        innerLoopValues:.push (increment);

        let blkContent = BlockValue::new (loc, VoidType::new (loc), innerLoopValues[]);
        let lp = LoopValue::new (loc, VoidType::new (loc), test-> test, blkContent, isDo-> false);

        (lp, slcValueRef, slcValueDecl, sliceType, false)
    }


    /*!
     * ================================================================================
     * ================================================================================
     * ========================        COMPREHENSION CLASS        =====================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a list comprehension over a class value
     * @params:
     *     - context: the context of the validation
     *     - cptr: the type being iterated
     *     - value: the value being iterated
     *     - all: the for loop
     *     - canDynamic: if not true, throws an error the len cannot be cte
     * @throws:
     *    - &ErrorMsg: if the class is not iterable, or has no len or tries to create a tuple/array
     * @returns: the generated slice value
     * */
    fn validateComprClass (self, dmut context : &Validator, cptr : &ClassPtrType, value : &Value, all : &SliceForAllocatorExpr, byAlias : bool, aliasLoc : &Word, canDynamic : bool)-> &Value
        throws &ErrorMsg
    {
        let loc = all.getLoc ();
        let (useAlias, beginMeth, endMeth, lenField) = {
            let inst = if (byAlias) { ClassAliaserValue::new (loc, cptr, value) } else {value};
            let (beginMeth, useAliasBeg) = self.createIterOverCptrCall (alias context, loc, cptr, inst, OpOverrideNames::BEGIN_OP_OVERRIDE);
            let (endMeth, useAliasEnd) = self.createIterOverCptrCall (alias context, loc, cptr, inst, OpOverrideNames::END_OP_OVERRIDE);
            let (lenField, useAliasLen) = self.createLenCptrCall (alias context, loc, cptr, inst);
            (useAliasEnd || useAliasBeg || useAliasLen, beginMeth, endMeth, lenField)
        } catch {
            err : &ErrorMsg => throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::FOR_LOOP_CPTR, cptr), notes-> [err]);
        };

        if (!canDynamic || all.isTuple ()) {
            throw ErrorMsg::fatal (all.getIter ().getLoc (), format (ValidateErrorMessage::LIST_COMPR_SIZE_CTE, cptr),
                                   notes-> [ErrorMsg::note (loc, format (ValidateErrorMessage::ENCLOSE_COPY_LST_COMPR))]);
        }

        let dmut outerLoop = Vec!{&Value}::new ();
        let dmut innerLoop = Vec!{&Value}::new ();
        let dmut errors = Vec!{&ErrorMsg}::new ();

        context:.enterBlock ();
        let (_loop, slcValueDecl, slcValueRef, slcType, iterRef) = {
            let (test, increment, iterRef) = self.validateClassLoopIteratorVar (alias context, loc, cptr, beginMeth, endMeth, lenField-> lenField, all.getVariables (), alias innerLoop, alias outerLoop);
            let innerValue = context:.validateValue (all.getValue ());
            let innerType = context:.inferTypeImplicitMutability (innerValue);
            let (slcValueDecl, slcValueRef, slcIndex, sliceType) = self.validateComprSliceValueDecl (alias context, all.getLoc (), cptr, innerType, iterRef, lenField, true);

            innerLoop:.push (AffectValue::new (loc, innerType, slcIndex, innerValue));
            innerLoop:.push (increment);

            let blkContent = BlockValue::new (loc, VoidType::new (loc), innerLoop[]);
            let _loop = LoopValue::new (loc, VoidType::new (loc), test-> test, blkContent, isDo-> false);
            (_loop, slcValueDecl, slcValueRef, sliceType, iterRef)
        } catch {
            err : &ErrorMsg => {
                errors:.push (err);
                (UNIT_VALUE, UNIT_VALUE, UNIT_VALUE, NONE_TYPE, UNIT_VALUE)
            }
        };

        {
            context:.quitBlock (warnUnused-> errors.len () == 0us);
        } catch {
            err : &ErrorMsg => errors:.push (err);
        }

        if (errors.len () != 0us) throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::FOR_LOOP_CPTR, cptr), notes-> errors[]);
        self.verifyUseAliasCptrIter (loc, aliasLoc, cptr, beginMeth, endMeth, useAlias, byAlias);

        outerLoop:.push (slcValueDecl);
        outerLoop:.push (_loop);
        outerLoop:.push (self.recutSliceClassCompr (alias context, loc, slcType, slcValueRef, iterRef));

        let innerBlock = ListComprValue::new (loc, slcType, BlockValue::new (loc, slcType, outerLoop[]));
        CopierValue::new (loc, slcType, isDone-> true, innerBlock)
    }

    /**
     * Recut the slice to make it the correct size, maybe the indicative len that was return by the field was too big, and the loop stoped early
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the for loop
     *    - slcType: the type of the returned slice
     *    - slcValueRef: the slice value
     *    - len: the actual number of iteration that were made
     * @returns: the recutted slice (no realloc)
     * */
    fn recutSliceClassCompr (self, dmut _ : &Validator, loc : &Word, slcType : &Type, slcValueRef : &Value, len : &Value)-> &Value {
        let innerType = slcType.asOf!{&SliceType} ().getInners ()[0];
        let ptrType = PointerType::new (loc, innerType, isMutable-> innerType.isMutable ());
        let nPtr = StructFieldAccessValue::new (loc, ptrType, slcValueRef, SliceKeys::PTR);

        SliceCtorValue::new (loc, slcType, nPtr, len, isImplicitAlias-> false)
    }

    /**
     * Create the call to the len field for class lst compr
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - cptr: the class being accessed
     *    - value: the value being used
     * @
     * */
    fn createLenCptrCall (self, dmut context : &Validator, loc : &Word, cptr : &ClassPtrType, value : &Value)-> (&Value, bool)
        throws &ErrorMsg
    {
        let fieldAcc = context:.constructObjectMethodAcc (loc, cptr, value, OpOverrideNames::LEN_OP_OVERRIDE, allowImmut-> true);
        {
            let lenField = context:.getCallOpValidator ().validate (alias context, loc, fieldAcc, []);
            let useAlias = match lenField {
                c : &MethodCallValue => {
                    c.getMethod ().getPrototype ().isMutable ()
                }
                _ => { false }
            };

            let lenType = IntType::new (loc, size-> 0u16, signed-> false);
            (context:.getCastValidator ().validateCast (alias context, loc-> lenField.getLoc (), lenField, lenType), useAlias)
        } catch {
            err : &ErrorMsg => {
                let noteBeg = ErrorMsg::note (loc, format (ValidateErrorMessage::CALL_PROTO, fieldAcc, withTags-> ["withParams"s8]), notes-> [err]);
                let rewriteNote = ErrorMsg::note (loc, format (ValidateErrorMessage::CALL_LEN_ONE_LINE, cptr), oneLine-> true);
                throw ErrorMsg::list ([rewriteNote, noteBeg]);
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =============================        CTE RANGE        ==========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a cte for loop operation on an range value
     * @params:
     *    - context: the context of the validation
     *    - rngType: the type of the value
     *    - value: the value being iterated
     *    - content: the expression to validate
     * @returns: a validate value
     * @throws:
     *     - &ErrorMsg: if the validation failed
     * */
    fn validateCteRangeLoop (self, dmut context : &Validator, rngType : &RangeType, value : &Value, f : &ForLoopExpr)-> &Value
        throws &ErrorMsg
    {
        let vars = f.getVariables ();
        if (vars.len != 1us) throw ErrorMsg::fatal (f.getLoc (), format (ValidateErrorMessage::UNDEF_CTE_FOR_LOOP_OPERATOR, vars.len, rngType));

        let dmut errors = Vec!{&ErrorMsg}::new ();
        let dmut innerValues = Vec!{&Value}::new ();
        let loc = f.getLoc ();

        context:.enterBlock ();
        {
            let start = context:.getCompileTimeInterpreter ().computeInt (StructFieldAccessValue::new (loc, rngType.getInners ()[0], value, RangeKeys::FST));
            let step = context:.getCompileTimeInterpreter ().computeInt (StructFieldAccessValue::new (loc, rngType.getInners ()[1], value, RangeKeys::STEP));
            let contains = context:.getCompileTimeInterpreter ().computeBool (StructFieldAccessValue::new (loc, BoolType::new (loc), value, RangeKeys::CONTAIN));
            let end = context:.getCompileTimeInterpreter ().computeInt (StructFieldAccessValue::new (loc, rngType.getInners ()[0], value, RangeKeys::SCD));

            let sizeType = IntType::new (loc, size-> 0u16, signed-> false);
            let max = context.getCompileTimeInterpreter ().createIntMaxValue (sizeType);
            let nbIterations = self.validateCteComputeNbIterations (start, end, step, max, contains);

            if (nbIterations > global::state::instance ().getMaxCteLoopIter ()) {
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::MAX_LOOP_ITERATIONS, nbIterations, global::state::instance ().getMaxCteLoopIter ()));
            }

            let mut index = BigInt::new (0us);
            while (index < nbIterations) {
                let current = IntValue::new (loc, rngType.getInners ()[0].asOf!{&IntType} (), index * step + start);

                let block = self.createCurrentCteBlock (alias context, f.getBlock (), rngType, vars, [current]);
                innerValues:.push (context:.validateValue (block));
                index += 1;
            }
        } catch {
            err : &ErrorMsg => { errors:.push (err); }
        }

        {
            context:.quitBlock (warnUnused-> errors.len () == 0us);
        } catch {
            err : &ErrorMsg => errors:.push (err); // Some warn unused
        }

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
        BlockValue::new (loc, VoidType::new (loc), innerValues[])
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =============================        COMMON        =============================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a variable decl from iteration variable
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the iteration
     *     - vdecl: the variable being declared
     *     - type: the expected type of the resutl value
     *     - globType: the type being iterated
     *     - withDeco: true if the variable can have decorators
     * @returns: a vardecl value
     * */
    fn validateIndexIterDecl (self, dmut context : &Validator, loc : &Word, vdecl : &VarDeclExpr, type : &Type, value : &Value = UNIT_VALUE, globType : &Type, canCte : bool = true)-> &VarDeclValue
        throws &ErrorMsg
    {
        if (!vdecl.getLazyOrRefLocation ().isEof ()) {
            throw ErrorMsg::fatal (vdecl.getLazyOrRefLocation (), end-> loc, format (ValidateErrorMessage::FORBID_DECO_FOR_LOOP, globType));
        }

        if (!vdecl.getMutOrDmutLocation ().isEof ()) {
            throw ErrorMsg::fatal (vdecl.getMutOrDmutLocation (), end-> loc, format (ValidateErrorMessage::FORBID_DECO_FOR_LOOP, globType));
        }

        let vType = if (!vdecl.getType ().isOf!{&EmptyExpression} ()) {
            let vtype = context:.validateType (vdecl.getType (), parentMutable-> false);
            context:.verifyCompatibleType (vdecl.getType ().getLoc (), loc, vtype, type);
            vtype
        } else {
            context:.validateType (TypeWrapperExpr::new (value.getLoc (), type), parentMutable-> false)
        };

        if (vdecl.getLoc () != Keys::UNDER) context:.verifyShadow (vdecl.getLoc ());
        VarDeclValue::new (vdecl.getLoc (), vType, value, isMutable-> false, isCte-> canCte, isIterator-> true)
    }

    /**
     * Create the block of a for loop that has to be validated at cte time
     * @params:
     *    - context: the context of the validation
     *    - block: the block template
     *    - globType: the type being iterated
     *    - vars: the list of variables used to iterate (assuming its len is equal to the len of values)
     *    - values: the list of values to assign to vars
     * @returns: an expression
     * */
    fn createCurrentCteBlock (self, dmut context : &Validator, block : &Expression, globType : &Type, vars : [&Expression], values : [&Value])-> &Expression
        throws &ErrorMsg
    {
        let dmut mapper = TemplateMapper::new ();
        for i in 0us .. vars.len match vars [i] {
            v : &VarDeclExpr => {
                if (!v.getLazyOrRefLocation ().isEof ()) {
                    throw ErrorMsg::fatal (v.getLazyOrRefLocation (), format (ValidateErrorMessage::FORBID_DECO_FOR_LOOP, globType));
                }

                if (!v.getMutOrDmutLocation ().isEof ()) {
                    throw ErrorMsg::fatal (v.getMutOrDmutLocation (), format (ValidateErrorMessage::FORBID_DECO_FOR_LOOP, globType));
                }

                if (!v.getType ().isOf!{&EmptyExpression} ()) {
                    let vtype = context:.validateTypeForVarDecl (v.getType (), v, canBeRef-> false);
                    context:.verifyCompatibleType (v.getType ().getLoc (), values [i].getLoc (), vtype, values [i].getType ());
                }

                mapper:.insert (v.getLoc ().str (), ValueWrapperExpr::new (values [i].getLoc (), values [i]));
            }
            _ => __pragma!panic ();
        }

        // We directly rewrite without using the template declarator
        // Template declarator is mandatory for complex template mapper, but here we only have value wrapper
        // There is no lambda or inlining to perform, thus there is no need for complexity
        let rewriter = TemplateRewriter::new (mapper);
        rewriter.rewrite (block)
    }

    /**
     * Validate the variable declaration of the value result of a list comprehension
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the slice for
     *    - iterType: the type being iterated
     *    - innerType: the innerType of the result slice/array
     *    - iterRef: the reference to the index iterator
     *    - len: the length of the result array/slice
     *    - canDynamic: if true return an allocated slice, an array otherwise
     * @return:
     *   - .0: the variable declaration of the result
     *   - .1: the reference to the declared variable
     *   - .2: value indexing the declared variable to put as a left operand in the loop validation (e.g. #_value [#_iter])
     *   - .3: the type of the result variable
     * */
    pub fn validateComprSliceValueDecl (self, dmut context : &Validator, loc : &Word, iterType : &Type, innerType : &Type, iterRef : &Value, len : &Value, canDynamic : bool)-> (&Value, &Value, &Value, &Type)
        throws &ErrorMsg
    {
        let (sliceType, sliceInitValue) = if (canDynamic) {
            let type = SliceType::new (loc, innerType, isMutable-> true);
            (type, ArrayAllocValue::dyn (loc, type, UNIT_VALUE, len)) // allocate a slice to be filled without setting a default value that will be replace anyway
        } else {
            let tabSize = { // if it is not dynamic, then we must know the size at cte
                let size = context:.getCompileTimeInterpreter ().computeInt (len, signed-> false);
                size.to!usize ()
            } catch {
                _ : &ErrorMsg => throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::LIST_COMPR_SIZE_CTE, iterType));
                _ : &BigIntError => throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY, IntType::new (loc, size-> 0u16, signed-> false), len, u64::max));
            };

            if (tabSize > 1048576us) { // 1MB
                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY_ARRAY, tabSize, 1048576us));
            }

            let type = ArrayType::new (loc, innerType, tabSize, isMutable-> true);
            (type, UNIT_VALUE) // no need to allocate, the variable declaration will be enough
        };

        // Declaration of the variable that will store the result of the list comprehension
        let slcValueDecl = VarDeclValue::new (Word::new ("#_value"s8, loc), sliceType, sliceInitValue, isMutable-> true);
        let slcValueRef = VarRefValue::new (slcValueDecl.getLoc (), loc, slcValueDecl.getVarType (), slcValueDecl.getUniqId (), isSelf-> false, canCte-> false);

        let slcIndex = if (canDynamic) { // affecting at each index
            SliceAccessValue::new (loc, innerType, slcValueRef, iterRef)
        } else {
            ArrayAccessValue::new (loc, innerType, slcValueRef, iterRef)
        };

        (slcValueDecl, slcValueRef, slcIndex, sliceType)
    }

}
