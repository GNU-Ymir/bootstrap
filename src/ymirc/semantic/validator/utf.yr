in utf;

use ymirc::semantic::generator::value::literal::string;
use ymirc::semantic::validator::{visitor, errors};
use ymirc::lexing::word;
use ymirc::errors::_;
use ymirc::utils::format;
use std::stream;

lazy dmut __instance__ : &UtfVisitor = copy UtfVisitor ();
pub fn instance () -> dmut &UtfVisitor {
    alias __instance__
}

/**
 * The utf visitor class is used to validate literal strings and chars
 */
pub class UtfVisitor {

    // The list of escape chars
    let _escape = copy ['a' => 7u8,
                        'b' => 8u8,
                        'f' => 12u8,
                        'n' => 10u8,
                        'r' => 13u8,
                        't' => 9u8,
                        'v' => 11u8,
                        '\\' => 92u8,
                        '\'' => 39u8,
                        '\"' => 34u8];

    // The list of escape chars
    let _unescape = copy [7u8 => 'a',
                          8u8 => 'b',
                          12u8 => 'f',
                          10u8 => 'n',
                          13u8 => 'r',
                          9u8 => 't',
                          11u8 => 'v',
                          92u8 => '\\',
                          39u8 => '\'',
                          34u8 => '\"'];

    
    /**
     * Create an empty visitor
     */
    pub self () {}

    /*!
     * ================================================================================
     * ================================================================================
     * ========================            ENCODING             =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Convert an unescaped literal string into an escaped string in utf-8
     * In other words, transfrom \n, \r, etc. into their utf-8 encoding
     * */
    pub fn escape (self, loc : &Word, content : [c8])-> [c8]
        throws ErrorMsg
    {
        self.escapeChars (loc, content)
    }

    /**
     * Convert an escape char into an unescaped string (with \n, \r visible)
     * @params:
     *     - value: the utf8 string to unescape
     *     - squote: true iif \' values have to be unescaped
     *     - dquote: true iif \" values have to be unescaped
     * @returns: the unescaped string
     */
    pub fn unescape (self, value : [c8], squote : bool = true, dquote : bool = true)-> [c8] {
        let mut res : [c8] = [];
        for c in value {
            if (c == '\'' && !squote) { res ~= [c]; }
            else if (c == '\"' && !dquote) { res ~= [c]; }
            else match self._unescape [cast!u8 (c)]? {
                Ok (x) => {
                    res ~= ['\\'];
                    res ~= [x];
                }
                _ => { res ~= [c]; }
            }
        }

        res
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ========================            ESCAPING             =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Traverse the string and transform the escape char into the correct int values
     * @params:
     *   - loc: the location of the string
     *   - content: the content of the string
     * @throws: &ErrorMsg: if the literal has malformed escaped chars
     * @returns: a string literal without any escape chars
     */
    fn escapeChars (self, loc : &Word, content : [c8])-> [c8]
        throws ErrorMsg
    {
        let mut col = 0us, mut line = 0us;
        let mut it = 0us;
        let dmut stream : [c8] = [];
        
        while it < content.len {
            if (content [it] == '\n') {
                line += 1us;
                col = 0us;
            } else col += 1us;

            if (content [it] == '\\') {
                if (it + 1us < content.len) {
                    if (content [it + 1us] == 'u') {
                        it += 1us;
                        let (it_, code) = self.escapeUnicode (loc, content [it + 1us .. $], line, col + 1us);
                        it += it_;
                        col += it_ + 1us;
                        for c in code {
                            stream ~= [c];
                        }
                    } else {
                        let pos = self._escape [content [it + 1us]]?;
                        match pos {
                            Ok (x) => {
                                it += 1us;
                                stream ~= [cast!c8 (x)];
                            }
                            _ => {
                                let realLoc = copy Word (content[it .. $], loc, addLine-> cast!u64 (line), addCol-> cast!u64 (col + 1us));
                                throw copy ErrorMsg::fatal (realLoc, ValidateErrorMessage::UNDEFINED_ESCAPE);
                            }
                        }

                        col += 1us;
                    }
                } else {
                    let realLoc = copy Word (content [it .. $], loc, addLine-> cast!u64 (line), addCol-> cast!u64 (col));
                    throw copy ErrorMsg::fatal (realLoc, ValidateErrorMessage::UNTERMINATED_ESCAPE);
                }
            } else {
                stream ~= [content [it]];
            }
            
            it += 1us;
        }

        stream
    }

    /**
     * Convert a escape unicode into the correct string
     * @params: 
     *    - loc: the location of the string literal
     *    - content: the content of the string
     *    - line: the current line
     *    - col: the current column
     */
    fn escapeUnicode (self, loc : &Word, content : [c8], line : usize, col : usize)-> (usize, [c8])
        throws ErrorMsg
    {
        let realLoc = copy Word (content, loc, addLine-> cast!u64 (line), addCol-> cast!u64 (col + 1us));
        let mut n_pos = 0us;
        if (content.len == 0us) throw copy ErrorMsg::fatal (realLoc, ValidateErrorMessage::UNTERMINATED_ESCAPE);
        else if (content [0us] != '{') {
            throw copy ErrorMsg::fatal (realLoc, ValidateErrorMessage::UNDEFINED_ESCAPE);
        }
        
        for i in 1us .. content.len {
            if (content [i] == '}') {
                n_pos = i;
                break {}
            }
        }
        
        if (n_pos == 0us) {
            throw copy ErrorMsg::fatal (realLoc, ValidateErrorMessage::UNTERMINATED_ESCAPE);
        }

        let valueStr = content [1us .. n_pos];
        let realLocStr = copy Word (valueStr, loc, addLine-> cast!u64 (line), addCol-> cast!u64 (col + 2us));
        let inner = {
            if (valueStr.len > 2us && valueStr[0us .. 2us] == "0x") {
                std::conv::to!{u32, "x"} (valueStr)
            } else if (valueStr.len > 2us && valueStr[0us .. 2us] == "0b") {
                std::conv::to!{u32, "b"} (valueStr)
            } else if (valueStr.len > 2us && valueStr[0us .. 2us] == "0o") {
                std::conv::to!{u32, "o"} (valueStr)
            } else {
                std::conv::to!{u32} (valueStr)
            }
        } catch {
            _ => {
                throw copy ErrorMsg::fatal (realLocStr, format (ValidateErrorMessage::MALFORMED_INT_LITERAL, valueStr));
            }
        }

        (n_pos + 1us, self.toUtf8 (inner))
    }


    /*!
     * ================================================================================
     * ================================================================================
     * ========================            DECODING             =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Decode a string value content to utf8
     * */
    pub fn decode (self, size : u16, value : StringValueContent)-> [c8] {
        match size {
            8u16 => { self.decode (value.utf8) }
            16u16 => { self.decode (value.utf16) }
            _ => { self.decode (value.utf32) }
        }
    }

    /**
     * Decode an utf-8 list of bytes into a utf-8 string
     * */
    pub fn decode (self, value : [u8])-> [c8] {
        copy [cast!c8 (i) for i in value]
    }

    /**
     * Decode an utf-16 list of bytes into a utf-8 string
     * */
    pub fn decode (self, value : [u16])-> [c8] {
        let mut res : [c8] = [];
        let mut i = 0us;
        while i < value.len {
            let (nb, codes) = self.toUtf8 (value [i .. $]);
            res ~= codes;
            i += nb;
        }

        res
    }

    /**
     * Decode an utf-32 list of bytes into a utf-8 string
     * */
    pub fn decode (self, value : [u32])-> [c8] {
        let mut res : [c8] = [];
        for i in value {
            let codes = self.toUtf8 (i);
            res ~= codes;
        }

        res
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            UTF-8             ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Encode a utf-8 string into a utf-8 list of bytes
     * */
    pub fn encodeUtf8 (self, str : [c8])-> [u8] {
        copy [cast!u8 (i) for i in str]
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            UTF-16             ========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Convert a utf8 encoded string into a u16
     * @returns:
     *    - .0: the number of c8 read
     *    - .1: the decoded value
     * */
    fn toUtf16Char (self, content : [c8])-> (usize, [u16]) {
        let nb = self.getUtf8CodePointSize (content [0us]);
        match nb {
            4u32 => {
                let a = cast!u32 (cast!u8 (content [0]) & 0x07u8) << 18u32;
                let b = cast!u32 (cast!u8 (content [1]) & 0x3fu8) << 12u32;
                let c = cast!u32 (cast!u8 (content [2]) & 0x3fu8) << 6u32;
                let d = cast!u32 (cast!u8 (content [3]) & 0x3fu8);

                let cp = (a | b | c | d) - 0x10000u32;
                let high = 0xD800u16 + (cast!u16 (cp >> 10u32) & 0x3FFu16);
                let low = 0xDC00u16 + (cast!u16 (cp & 0x3FFu32));

                (4us, copy [high, low])
            }
            3u32 => {
                let a = cast!u16 (cast!u8 (content [0]) & 0x0fu8) << 12u16;
                let b = cast!u16 (cast!u8 (content [1]) & 0x3fu8) << 6u16;
                let c = cast!u16 (cast!u8 (content [2]) & 0x3fu8);

                (3us, copy [a | b | c])
            }
            2u32 => {
                let a = cast!u16 (cast!u8 (content [0]) & 0x1fu8) << 6u16;
                let b = cast!u16 (cast!u8 (content [1]) & 0x3fu8);

                (2us, copy [a | b])
            }
            _ => {
                let a = cast!u16 (cast!u8 (content [0]) & 0x7fu8);
                (1us, copy [a])
            }
        }
    }

    /**
     * Convert a [c8] encoded in utf-8 into [u16] encoded in utf16
     * */
    pub fn encodeUtf16 (self, content : [c8])-> [u16] {
        let mut res : [u16] = [];
        let mut i = 0us;
        while i < content.len {
            let (nb, val) = self.toUtf16Char (content [i .. $]);
            res ~= val;
            i += nb;
        }

        res
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            UTF-32             ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Convert a utf8 encoded string into a u32
     * @returns:
     *    - .0: the number of c8 read
     *    - .1: the decoded value
     * */
    fn toUtf32Char (self, content : [c8])-> (usize, u32) {
        let nb = self.getUtf8CodePointSize (content [0us]);
        match nb {
            4u32 => {
                let a = cast!u32 (cast!u8 (content [0]) & 0x07u8) << 18u32;
                let b = cast!u32 (cast!u8 (content [1]) & 0x3fu8) << 12u32;
                let c = cast!u32 (cast!u8 (content [2]) & 0x3fu8) << 6u32;
                let d = cast!u32 (cast!u8 (content [3]) & 0x3fu8);

                (4us, (a | b | c | d))
            }
            3u32 => {
                let a = cast!u32 (cast!u8 (content [0]) & 0x0fu8) << 12u16;
                let b = cast!u32 (cast!u8 (content [1]) & 0x3fu8) << 6u16;
                let c = cast!u32 (cast!u8 (content [2]) & 0x3fu8);

                (3us, a | b | c)
            }
            2u32 => {
                let a = cast!u32 (cast!u8 (content [0]) & 0x1fu8) << 6u16;
                let b = cast!u32 (cast!u8 (content [1]) & 0x3fu8);

                (2us, a | b)
            }
            _ => {
                let a = cast!u32 (cast!u8 (content [0]) & 0x7fu8);
                (1us, a)
            }
        }
    }

    /**
     * Convert a string encoded in utf-8 into a slice of bytes encoded in utf32
     * */
    pub fn encodeUtf32 (self, content : [c8])-> [u32] {
        let mut res : [u32] = [];
        let mut i = 0us;
        while i < content.len {
            let (nb, val) = self.toUtf32Char (content [i .. $]);
            res ~= [val];
            i += nb;
        }

        res
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            COMMON             ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * From a c8 char, get the number of c8 belonging to the same utf-32 code
     * */
    fn getUtf8CodePointSize (self, c : c8)-> u32 {
        let code = cast!u8 (c);
        if((code & 0x80u8) == 0u8) {
            1u32
        } else if((code & 0xe0u8) == 0xc0u8) {
            2u32
        } else if((code & 0xf0u8) == 0xe0u8) {
            3u32
        } else {
            4u32
        }
    }

    /**
     * Transform a unicode code into a list of chars encoded in utf8
     * @returns: the utf8 encoded unicode
     */
    fn toUtf8 (self, code : u32)-> [c8] {
        if (code < 0x7Fu32) {
            copy [cast!c8 (cast!u8 (code) & 0x7Fu8)]
        } else if (code <= 0x7FFu32) {
            let dmut ret = copy ['\u{0}' ; 2];
            ret [1] = cast!c8 (0x80u8 | (cast!u8 (code) & 0x3Fu8));
            let c2 = code >> 6u32;
            ret [0] = cast!c8 (0xC0u8 | (cast!u8 (c2) & 0x1Fu8));
            ret
        } else if (code <= 0xFFFFu32) {
            let dmut ret = copy ['\u{0}' ;  3];
            ret [2] = cast!c8 (0x80u8 | (cast!u8 (code) & 0x3Fu8));
            let c2 = code >> 6u32;
            ret [1] = cast!c8 (0x80u8 | (cast!u8 (c2) & 0x3Fu8));
            let c3 = c2 >> 6u32;
            ret [0] = cast!c8 (0xE0u8 | (cast!u8 (c3) & 0xFu8));
            ret
        } else if (code <= 0x10FFFFu32) {
            let dmut ret = copy ['\u{0}' ; 4];
            ret [3] = cast!c8 (0x80u8 | (cast!u8 (code) & 0x3Fu8));
            let c2 = code >> 6u32;
            ret [2] = cast!c8 (0x80u8 | (cast!u8 (c2) & 0x3Fu8));
            let c3 = c2 >> 6u32;
            ret [1] = cast!c8 (0x80u8 | (cast!u8 (c3) & 0x3Fu8));
            let c4 = c3 >> 6u32;
            ret [0] = cast!c8 (0xF0u8 | (cast!u8 (c4) & 0x7u8));
            ret
        } else {
            copy [cast!c8 (0xBDu8), cast!c8 (0xBFu8), cast!c8 (0xEFu8)]
        }
    }

    /**
     * Transform a unicode code into a list of chars encoded in utf8
     * @returns: the utf8 encoded unicode
     */
    fn toUtf8 (self, code : [u16])-> (usize, [c8]){
        let high = code[0];
        if ((high & 0xF800u16) != 0xD800u16) {
            return (1us, self.toUtf8 (cast!u32 (high)));
        }

        let low = code[1];
        let a = cast!u32 (high & 0x03FFu16) << 10u32;
        let b = cast!u32 (low & 0x03FFu16);

        return (2us, self.toUtf8 ((a | b) + 0x10000u32));
    }


}
