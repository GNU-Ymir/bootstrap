mod ymirc::semantic::validator::type;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;

import ymirc::syntax::declaration::protection;
import ymirc::syntax::expression::_;

import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;

import std::collection::vec;
import std::io;

/**
 * The type validator is the class responsible for type expression validation
 */
pub class TypeValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}


    /**
     * Validate an expression assuming its a type
     * @params: 
     *    - context: the context of the validation
     *    - type: the expression to validate
     * @throws: &ErrorMsg, if the expression is not valid
     * @returns: a generator containing the validated type
     */
    pub def validate (self, dmut context : &Validator, type : &Expression)-> &Type
        throws &ErrorMsg
    {
        context;
        match type {
            UnitExpr () => { NoneType::new (loc-> type.getLoc ()) }
            EmptyExpression () => { NoneType::new (loc-> type.getLoc ()) }
            _ => {
                throw ErrorMsg::fatal (type.getLoc (), ""s8);
            }
        }
    }
        
    
    
}
