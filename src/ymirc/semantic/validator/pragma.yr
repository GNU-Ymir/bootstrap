mod ymirc::semantic::validator::pragma;

import ymirc::syntax::expression::_;
import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::declarator::errors;

import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import std::collection::vec;

import std::algorithm::searching;
import std::io;
import std::conv;

/**
 * The validator responsible for the validation of '__pragma' expressions
 */
pub class PragmaValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}


    /**
     * Validate a pragma expression that produces a value
     * @params:
     *    - context: the context of the validation
     *    - p: the pragma expression to validate
     * @returns: the validated expression
     */
    pub fn validateValue (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws &ErrorMsg
    {
        match p.getLoc ().str () {
            PragmaKeys::COMPILE => {
                self.validateCompile (alias context, p)
            }
            PragmaKeys::MSG => {
                self.validateMessage (alias context, p)
            }
            PragmaKeys::OPERATOR => {
                self.validateOperator (alias context, p)
            }
            PragmaKeys::FIELD => {
                self.validateFieldAccess (alias context, p)
            }
            PragmaKeys::FIELD_INFOS => {
                self.validateFieldInfos (alias context, p)
            }
            _ => {
                throw ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::UNKNOWN_PRAGMA, p.getLoc ().str ()));
            }
        }
    }

    /**
     * Validate a pragma expression that produces a type
     * @params:
     *    - context: the context of the validation
     *    - p: the pragma expression to validate
     * @returns: the validated expression
     */
    pub fn validateType (self, dmut context : &Validator, p : &PragmaExpr)-> &Type
        throws &ErrorMsg
    {
        match p.getLoc ().str () {
            PragmaKeys::FIELD_TYPE => {
                self.validateFieldType (alias context, p)
            }
            _ => {
                throw ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::UNKNOWN_PRAGMA, p.getLoc ().str ()));
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            VALUES             =======================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * Tries to validate the content of the pragma 
     * @params:
     *    - context: the context of the validation
     *    - p: the pragma to validate
     * @returns: a bool value containing true iif the inner values compiles, containing false otherwise
     */
    fn validateCompile (self, dmut context : &Validator, p : &PragmaExpr)-> &Value {
        
        for v in p.getParameters () {
            let succValue = {
                context:.getValueValidator ().validate (alias context, v, canBeRef-> true, canBeLazy-> true);
                true
            } catch {
                _ => { false }
            };

            let succ = if (!succValue) {
                context:.validateType (v);
                true
            } catch {
                _ => false
            } else { true };

            if (!succ) return BoolValue::new (p.getLoc (), false);
        }
        
        BoolValue::new (p.getLoc (), true)
    }

    /**
     * Validate a message printing at compilation time
     * @params:
     *    - context: the context of the validation
     *    - p: the expression to validate
     * @returns: en none value
     */
    fn validateMessage (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws &ErrorMsg
    {
        for v in p.getParameters () {
            let mut msg = context:.validateValue (v);
            match msg {
                s : &StringValue => {
                    match s.getEncodingSize () {
                        8u16 => { println (utf::instance ().decode (s.getValue ().utf8)); }
                        16u16 => { println (utf::instance ().decode (s.getValue ().utf16)); }
                        _ => { println (utf::instance ().decode (s.getValue ().utf32)); }
                    }
                }             
                m : _ => {
                    println (format ("%", m));
                }
            }
        }

        UNIT_VALUE
    }    


    /**
     * Validate a pragma 'operator' to check the existence of an operator between two types (e.g. __pragma!"operator" ("==", i32, i32))
     * @params:
     *     - context: the context of the validation
     *     - p: the pragma to validate
     * @returns: a bool value
     */
    fn validateOperator (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws &ErrorMsg
    {
        if (p.getParameters ().len != 2us && p.getParameters ().len != 3us) {
            throw ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str ()));
        }

        let opStr = context:.getCompileTimeInterpreter ().decodeString (context:.validateValue (p.getParameters ()[0]));
        let syntOp = if (p.getParameters ().len == 2us) {
            let v = FakeValue::new (context:.validateType (p.getParameters ()[1]));
            UnaryExpr::new (Word::new (opStr, p.getLoc ()), ValueWrapperExpr::new (p.getLoc (), v))
        } else {
            let vl = FakeValue::new (context:.validateType (p.getParameters ()[1]));
            let vr = FakeValue::new (context:.validateType (p.getParameters ()[2]));

            BinaryExpr::new (Word::new (opStr, p.getLoc ()),
                             ValueWrapperExpr::new (p.getLoc (), vl),
                             ValueWrapperExpr::new (p.getLoc (), vr))
        };            


        let b = match context:.validateValue (syntOp)? {
            Ok () => { true }
            _ => { false }
        };
        
        BoolValue::new (p.getLoc (), b)
    }

    /**
     * Validate a binary operator on two types
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - op: the operator to validate
     *    - left: the left type in the operation
     *    - right: the right type in the operation
     * @returns: the validate operation
     * @throws:
     *    - &ErrorMsg: if the operation does not exist
     * */
    pub fn validateBinOperator (self, dmut context : &Validator, loc : &Word, op : [c8], left : &Type, right : &Type)-> &Value
        throws &ErrorMsg
    {
        let vl = FakeValue::new (left);
        let vr = FakeValue::new (right);

        let bin = BinaryExpr::new (Word::new (op, loc),
                                   ValueWrapperExpr::new (loc, vl),
                                   ValueWrapperExpr::new (loc, vr));

        context:.validateValue (bin)
    }

    /**
     * Validate a "field" access pragma (e.g. __pragma!field (x, "a"))
     * */
    fn validateFieldAccess (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws &ErrorMsg
    {
        if (p.getParameters ().len != 2us) {
            throw ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str ()));
        }

        let str = context:.implicitEnumUnwrap (context:.validateValue (p.getParameters ()[0]));
        let field = context:.getCompileTimeInterpreter ().decodeString (context:.validateValue (p.getParameters ()[1]));


        match str.getType () {
            c : &ClassPtrType => {
                let (inPrv, inProt) = context:.getCurrentClassContextProtections (c.getInner ());
                let var = VarExpr::new (Word::new (field, p.getParameters ()[1].getLoc ()));
                return context:.getBinOpValidator ().validateClassFieldAccess (alias context, p.getLoc (), str, var, c.getInner (), inProt, inPrv, withAncestor-> false);
            }
        }

        throw ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::TYPE_NO_FIELD, str.getType (), field));
    }


    /**
     * Validate a "field_infos" access pragma (e.g. __pragma!field_infos (x))
     * */
    fn validateFieldInfos (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws &ErrorMsg
    {
        if (p.getParameters ().len != 1us) {
            throw ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str ()));
        }

        let str = context:.validateType (p.getParameters ()[0]);
        {
            return context:.getTypeInfoValidator ().validateFieldInfos (alias context, p.getLoc (), str);
        } catch {
            err : &ErrorMsg => {
                throw ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str ()), notes-> [err]);
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            TYPES             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a field type access (e.g. __pragma!field_type (A, "a"))
     * @params:
     *    - context: the context of the validation
     *    - p: the pragma to validate
     * @returns: the type of the field
     * */
    fn validateFieldType (self, dmut context : &Validator, p : &PragmaExpr)-> &Type
        throws &ErrorMsg
    {
        if (p.getParameters ().len != 2us) {
            throw ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str ()));
        }

        let str = context:.validateType (p.getParameters ()[0]);
        let field = context:.getCompileTimeInterpreter ().decodeString (context:.validateValue (p.getParameters ()[1]));

        match str {
            c : &ClassPtrType => { return self.validateFieldTypeClass (alias context, p.getLoc (), c.getInner (), field); }
            c : &ClassRefType => { return self.validateFieldTypeClass (alias context, p.getLoc (), c, field); }
        }

        throw ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::TYPE_NO_FIELD, str, field));
    }

    /**
     * Validate a field type access on a class type (e.g. __pragma!field_type (A, "a"))
     * @params:
     *    - context: the context of the validation
     *    - p: the pragma to validate
     * @returns: the type of the field
     * */
    fn validateFieldTypeClass (self, dmut context : &Validator, loc : &Word, c : &ClassRefType, field : [c8])-> &Type
        throws &ErrorMsg
    {
        let (inPrv, inProt) = context.getCurrentClassContextProtections (c);
        for f in c.getLocalFields () match f {
            v : &VarDeclValue => {
                if (v.getLoc ().str () == field) {
                    if (c.getSymbol ().isFieldPrivate (field) && !inPrv) { // The field exists but is private, and we don't have access to private fields (outside class, or ancestor)
                        throw ErrorMsg::fatal (loc, format (DeclareErrorMessage::PRIVATE_IN_THIS_CONTEXT, field),
                                               notes-> [ErrorMsg::note (v.getLoc (), ValidateErrorMessage::DECLARED_HERE)]);
                    } else if (c.getSymbol ().isFieldProtected (field) && !inPrv && !inProt) { // The field exists but we are outside the class definition
                        throw ErrorMsg::fatal (loc, format (DeclareErrorMessage::PRIVATE_IN_THIS_CONTEXT, field),
                                               notes-> [ErrorMsg::note (v.getLoc (), ValidateErrorMessage::DECLARED_HERE)]);
                    }

                    return v.getVarType ();
                }
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TYPE_NO_FIELD, c, field));
    }




}
