in pragma;

use ymirc::syntax::expression::_;
use ymirc::semantic::validator::{errors, visitor};
use ymirc::semantic::declarator::errors;
use ymirc::semantic::generator::_;

use ymirc::syntax::{_,
                    declaration::_,
                    expression::{_, literal::_, macro_::_, operator::_, template::_}};

use ymirc::errors::_;
use ymirc::utils::format;
use ymirc::lexing::{word, tokens};

use ymirc::utils::{math, bigint};

use std::{io, conv, algorithm::searching};

use ymirc::semantic::generator::type::{_,
                                       custom::_,
                                       native::{_, scalar::_, compound::_},
                                       temporary::_};

use ymirc::semantic::generator::value::{_,
                                        construct::{_, delegate::_},
                                        literal::_,
                                        memory::_,
                                        operator::{_, binary::_, call::_, fields::_, map::_, slice::_, unary::_},
                                        operator::map::iteration::_,
                                        prototypes::_,
                                        scope::_,
                                        syntax::_,
                                        template::_};


/**
 * The validator responsible for the validation of '__pragma' expressions
 */
pub record PragmaValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}


    /**
     * Validate a pragma expression that produces a value
     * @params:
     *    - context: the context of the validation
     *    - p: the pragma expression to validate
     * @returns: the validated expression
     */
    pub fn validateValue (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws ErrorMsg
    {
        match p.getLoc ().str {
            PragmaKeys::COMPILE => {
                self.validateCompile (alias context, p)
            }
            PragmaKeys::MSG => {
                self.validateMessage (alias context, p)
            }
            PragmaKeys::OPERATOR => {
                self.validateOperator (alias context, p)
            }
            PragmaKeys::FIELD => {
                self.validateFieldAccess (alias context, p)
            }
            PragmaKeys::FIELD_INFOS => {
                self.validateFieldInfos (alias context, p)
            }
            PragmaKeys::HAS_ANCESTOR => {
                self.validateHasAncestor (alias context, p)
            }
            _ => {
                throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::UNKNOWN_PRAGMA, p.getLoc ().str));
            }
        }
    }

    /**
     * Validate a pragma expression that produces a type
     * @params:
     *    - context: the context of the validation
     *    - p: the pragma expression to validate
     * @returns: the validated expression
     */
    pub fn validateType (self, dmut context : &Validator, p : &PragmaExpr)-> &Type
        throws ErrorMsg
    {
        match p.getLoc ().str {
            PragmaKeys::FIELD_TYPE => {
                self.validateFieldType (alias context, p)
            }
            PragmaKeys::UNPROXIED => {
                self.validateEnumUnwrap (alias context, p)
            }
            PragmaKeys::ROOT_ANCESTOR => {
                self.validateRootAncestor (alias context, p)
            }
            PragmaKeys::ANCESTOR => {
                self.validateAncestor (alias context, p)
            }
            _ => {
                throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::UNKNOWN_PRAGMA, p.getLoc ().str));
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            VALUES             =======================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * Tries to validate the content of the pragma 
     * @params:
     *    - context: the context of the validation
     *    - p: the pragma to validate
     * @returns: a bool value containing true iif the inner values compiles, containing false otherwise
     */
    fn validateCompile (self, dmut context : &Validator, p : &PragmaExpr)-> &Value {
        
        for v in p.getParameters () {
            let succValue = {
                context:.getValueValidator ().validate (alias context, v, canBeRef-> true, canBeLazy-> true);
                true
            } catch {
                _ => { false }
            };

            let succ = if (!succValue) {
                context:.validateType (v);
                true
            } catch {
                _ => false
            } else { true };

            if (!succ) return copy BoolValue (p.getLoc (), false);
        }
        
        copy BoolValue (p.getLoc (), true)
    }

    /**
     * Validate a message printing at compilation time
     * @params:
     *    - context: the context of the validation
     *    - p: the expression to validate
     * @returns: en none value
     */
    fn validateMessage (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws ErrorMsg
    {
        for v in p.getParameters () {
            let mut msg = context:.validateValue (v);
            match msg {
                s : &StringValue => {
                    match s.getEncodingSize () {
                        8u16 => { println (utf::instance ().decode (s.getValue ().utf8)); }
                        16u16 => { println (utf::instance ().decode (s.getValue ().utf16)); }
                        _ => { println (utf::instance ().decode (s.getValue ().utf32)); }
                    }
                }             
                m : _ => {
                    println (format ("%", m));
                }
            }
        }

        UNIT_VALUE
    }

    /**
     * Validate a pragma 'operator' to check the existence of an operator between two types (e.g. __pragma!"operator" ("==", i32, i32))
     * @params:
     *     - context: the context of the validation
     *     - p: the pragma to validate
     * @returns: a bool value
     */
    fn validateOperator (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws ErrorMsg
    {
        if (p.getParameters ().len != 2us && p.getParameters ().len != 3us) {
            throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str));
        }

        let opStr = context:.getCompileTimeInterpreter ():.decodeString (context:.validateValue (p.getParameters ()[0]));
        let syntOp = if (p.getParameters ().len == 2us) {
            let v = copy FakeValue (context:.validateType (p.getParameters ()[1]));
            copy UnaryExpr (copy Word (opStr, p.getLoc ()), copy ValueWrapperExpr (p.getLoc (), v))
        } else {
            let vl = copy FakeValue (context:.validateType (p.getParameters ()[1]));
            let vr = copy FakeValue (context:.validateType (p.getParameters ()[2]));

            copy BinaryExpr (copy Word (opStr, p.getLoc ()),
                             copy ValueWrapperExpr (p.getLoc (), vl),
                             copy ValueWrapperExpr (p.getLoc (), vr))
        };            


        let b = match context:.validateValue (syntOp)? {
            Ok () => { true }
            _ => { false }
        };
        
        copy BoolValue (p.getLoc (), b)
    }

    /**
     * Validate a binary operator on two types
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the validation
     *    - op: the operator to validate
     *    - left: the left type in the operation
     *    - right: the right type in the operation
     * @returns: the validate operation
     * @throws:
     *    - &ErrorMsg: if the operation does not exist
     * */
    pub fn validateBinOperator (self, dmut context : &Validator, loc : &Word, op : [c8], left : &Type, right : &Type)-> &Value
        throws ErrorMsg
    {
        let vl = copy FakeValue (left);
        let vr = copy FakeValue (right);

        let bin = copy BinaryExpr (copy Word (op, loc),
                                   copy ValueWrapperExpr (loc, vl),
                                   copy ValueWrapperExpr (loc, vr));

        context:.validateValue (bin)
    }

    /**
     * Validate a "field" access pragma (e.g. __pragma!field (x, "a"))
     * */
    fn validateFieldAccess (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws ErrorMsg
    {
        if (p.getParameters ().len != 2us) {
            throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str));
        }

        let str = context.implicitEnumUnwrap (context:.validateValue (p.getParameters ()[0]));
        let field = context:.getCompileTimeInterpreter ():.decodeString (context:.validateValue (p.getParameters ()[1]));


        match str.getType () {
            c : &ClassPtrType => {
                let (inPrv, inProt) = context.getCurrentClassContextProtections (c.getInner ());
                let var = copy VarExpr (copy Word (field, p.getParameters ()[1].getLoc ()));
                return context:.getBinOpValidator ().validateClassFieldAccess (alias context, p.getLoc (), str, var, c.getInner (), inProt, inPrv, withAncestor-> false);
            }
            DelegateType () => {
                match field {
                    DelegateKeys::FUNC => {
                        return copy StructFieldAccessValue (p.getLoc (), copy PointerType (p.getLoc (), VOID_TYPE), str, name-> field, isReduced-> true);
                    }
                    DelegateKeys::CLOSURE => {
                        return copy StructFieldAccessValue (p.getLoc (), copy PointerType (p.getLoc (), VOID_TYPE), str, name-> field, isReduced-> true);
                    }
                }
            }
        }

        throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::TYPE_NO_FIELD, str.getType (), field));
    }


    /**
     * Validate a "field_infos" access pragma (e.g. __pragma!field_infos (x))
     * */
    fn validateFieldInfos (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws ErrorMsg
    {
        if (p.getParameters ().len != 1us) {
            throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str));
        }

        let str = context:.validateType (p.getParameters ()[0]);
        {
            return context:.getTypeInfoValidator ().validateFieldInfos (alias context, p.getLoc (), str);
        } catch {
            err : &ErrorMsg => {
                throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str), notes-> copy [err]);
            }
        }
    }

    /**
     * Validate a 'has_super' access pragma
     * */
    fn validateHasAncestor (self, dmut context : &Validator, p : &PragmaExpr)-> &Value
        throws ErrorMsg
    {
        if p.getParameters ().len != 1 {
            throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str));
        }

        let ty = context:.validateType (p.getParameters ()[0]);
        let inner = context.implicitEnumUnwrap (ty);
        let mut cl = match inner {
            c : &ClassPtrType => { c.getInner () }
            c : &ClassRefType => {
                if !c.isStruct () {
                    let loc = p.getParameters ()[0].getLoc ();
                    let notes = copy [copy ErrorMsg::note (loc, format (ValidateErrorMessage::FORGET_AND_CLASS), oneLine-> true)];
                    throw copy ErrorMsg::fatal (p.getLoc (), end-> loc, format (ValidateErrorMessage::INCOMPLETE_TYPE_CLREF, inner), notes-> notes);
                } else {
                    throw copy ErrorMsg::fatal (p.getParameters ()[0].getLoc (), format (ValidateErrorMessage::NOT_A_CLASS, inner));
                }
            }
            _ => throw copy ErrorMsg::fatal (p.getParameters ()[0].getLoc (), format (ValidateErrorMessage::NOT_A_CLASS, inner));
        }

        copy BoolValue (p.getLoc (), cl.getAncestor ().hasValue)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            TYPES             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a field type access (e.g. __pragma!field_type (A, "a"))
     * @params:
     *    - context: the context of the validation
     *    - p: the pragma to validate
     * @returns: the type of the field
     * */
    fn validateFieldType (self, dmut context : &Validator, p : &PragmaExpr)-> &Type
        throws ErrorMsg
    {
        if (p.getParameters ().len != 2us) {
            throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str));
        }

        let str = context:.validateType (p.getParameters ()[0]);

        match str {
            c : &ClassPtrType => {
                let field = context:.getCompileTimeInterpreter ():.decodeString (context:.validateValue (p.getParameters ()[1]));
                return self.validateFieldTypeClass (alias context, p.getLoc (), c.getInner (), field);
            }
            c : &ClassRefType => {
                let field = context:.getCompileTimeInterpreter ():.decodeString (context:.validateValue (p.getParameters ()[1]));
                return self.validateFieldTypeClass (alias context, p.getLoc (), c, field);
            }
            t : &TupleType => {
                let field = context:.getCompileTimeInterpreter ():.computeInt (context:.validateValue (p.getParameters ()[1]));
                return self.validateFieldTypeTuple (alias context, p.getLoc (), t, field);
            }
        }

        let field = context:.validateValue (p.getParameters ()[1]);
        throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::TYPE_NO_FIELD, str, field));
    }

    /**
     * Validate a field type access on a class type (e.g. __pragma!field_type (A, "a"))
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the pragma
     *    - c: the class being accessed
     *    - field: the field being accessed
     * @returns: the type of the field
     * */
    fn validateFieldTypeClass (self, dmut context : &Validator, loc : &Word, c : &ClassRefType, field : [c8])-> &Type
        throws ErrorMsg
    {
        let (inPrv, inProt) = context.getCurrentClassContextProtections (c);
        for f in c.getLocalFields () match f {
            v : &VarDeclValue => {
                if (v.getLoc ().str == field) {
                    if (c.getSymbol ().isFieldPrivate (field) && !inPrv) { // The field exists but is private, and we don't have access to private fields (outside class, or ancestor)
                        throw copy ErrorMsg::fatal (loc, format (DeclareErrorMessage::PRIVATE_IN_THIS_CONTEXT, field),
                                                    notes-> copy [copy ErrorMsg::note (v.getLoc (), ValidateErrorMessage::DECLARED_HERE)]);
                    } else if (c.getSymbol ().isFieldProtected (field) && !inPrv && !inProt) { // The field exists but we are outside the class definition
                        throw copy ErrorMsg::fatal (loc, format (DeclareErrorMessage::PRIVATE_IN_THIS_CONTEXT, field),
                                                    notes-> copy [copy ErrorMsg::note (v.getLoc (), ValidateErrorMessage::DECLARED_HERE)]);
                    }

                    return v.getVarType ();
                }
            }
        }

        throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::TYPE_NO_FIELD, c, field));
    }

    /**
     * Validate a field type access on a tuple type (e.g. __pragma!field_type (A, 0))
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the pragma
     *    - t: the type being accessed
     *    - field: the index of the field
     * @returns: the type of the field
     * */
    fn validateFieldTypeTuple (self, dmut _ : &Validator, loc : &Word, t : &TupleType, val : &BigInt)-> &Type
        throws ErrorMsg
    {
        let arity = t.getInners ().len;
        {
            let acc = if (val < 0) {
                let _abs : usize = cast!usize (math::abs (val.to!isize ()));
                if (arity < _abs) throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::TUPLE_ARITY_OVERFLOW, _abs, arity));
                arity - _abs
            } else {
                let res = val.to!usize ();
                if (arity <= res) throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::TUPLE_ARITY_OVERFLOW, val, arity));
                res
            };

            return t.getInners ()[acc];
        }  catch {
            x : &ErrorMsg => throw x;
            _ => throw copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::OVERFLOW_CAPACITY, copy IntType (loc, size-> 0u16, signed-> false), val, u64::max));
        }
    }

    /**
     * Validate the enum unwrapping
     * */
    fn validateEnumUnwrap (self, dmut context : &Validator, p : &PragmaExpr)-> &Type
        throws ErrorMsg
    {
        if (p.getParameters ().len != 1us) {
            throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str));
        }

        let ty = context:.validateType (p.getParameters ()[0]);
        context.implicitEnumUnwrap (ty)
    }


    /**
     * Validate the access to the root type of a class type
     * */
    fn validateRootAncestor (self, dmut context : &Validator, p : &PragmaExpr)-> &Type
        throws ErrorMsg
    {
        if p.getParameters ().len != 1 {
            throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str));
        }

        let ty = context:.validateType (p.getParameters ()[0]);
        let inner = context.implicitEnumUnwrap (ty);
        let mut cl = match inner {
            c : &ClassPtrType => { c.getInner () }
            c : &ClassRefType => {
                if !c.isStruct () {
                    let loc = p.getParameters ()[0].getLoc ();
                    let notes = copy [copy ErrorMsg::note (loc, format (ValidateErrorMessage::FORGET_AND_CLASS), oneLine-> true)];
                    throw copy ErrorMsg::fatal (p.getLoc (), end-> loc, format (ValidateErrorMessage::INCOMPLETE_TYPE_CLREF, inner), notes-> notes);
                } else {
                    throw copy ErrorMsg::fatal (p.getParameters ()[0].getLoc (), format (ValidateErrorMessage::NOT_A_CLASS, inner));
                }
            }
            _ => throw copy ErrorMsg::fatal (p.getParameters ()[0].getLoc (), format (ValidateErrorMessage::NOT_A_CLASS, inner));
        }

        while let Ok (c) = cl.getAncestor () {
            cl = c;
        }

        return cl.createInstance (loc-> p.getLoc (), isMutable-> false, isInnerMutable-> false);
    }

    /**
     * Validate the access to the ancestor of a class type
     * */
    fn validateAncestor (self, dmut context : &Validator, p : &PragmaExpr)-> &Type
        throws ErrorMsg
    {
        if p.getParameters ().len != 1 {
            throw copy ErrorMsg::fatal (p.getLoc (), format (ValidateErrorMessage::MALFORMED_PRAGMA, p.getLoc ().str));
        }

        let ty = context:.validateType (p.getParameters ()[0]);
        let inner = context.implicitEnumUnwrap (ty);
        let mut cl = match inner {
            c : &ClassPtrType => { c.getInner () }
            c : &ClassRefType => {
                if !c.isStruct () {
                    let loc = p.getParameters ()[0].getLoc ();
                    let notes = copy [copy ErrorMsg::note (loc, format (ValidateErrorMessage::FORGET_AND_CLASS), oneLine-> true)];
                    throw copy ErrorMsg::fatal (p.getLoc (), end-> loc, format (ValidateErrorMessage::INCOMPLETE_TYPE_CLREF, inner), notes-> notes);
                } else {
                    throw copy ErrorMsg::fatal (p.getParameters ()[0].getLoc (), format (ValidateErrorMessage::NOT_A_CLASS, inner));
                }
            }
            _ => throw copy ErrorMsg::fatal (p.getParameters ()[0].getLoc (), format (ValidateErrorMessage::NOT_A_CLASS, inner));
        }

        if let Ok (c) = cl.getAncestor () {
            return c.createInstance (loc-> p.getLoc (), isMutable-> false, isInnerMutable-> false);
        }

        throw copy ErrorMsg::fatal (p.getParameters ()[0].getLoc (), format (ValidateErrorMessage::NO_SUPER_CLASS, inner));
    }

}
