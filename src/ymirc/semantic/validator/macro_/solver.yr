mod ymirc::semantic::validator::macro_::solver;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::validator::scores;

import ymirc::errors::_;
import ymirc::utils::format;

import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::value::_;
import ymirc::semantic::generator::type::_;

import ymirc::lexing::word;
import ymirc::lexing::tokens;

import ymirc::syntax::keys;
import ymirc::syntax::declaration::_;
import ymirc::syntax::expression::_;

import std::collection::vec;
import std::fs::path;
import std::io;

/**
 * Validator used to validate macro calls
 */
pub class MacroSolver {

    /**
     * Create an empty validator
     * */
    pub self () {}

    /**
     * Validate a macro call expression
     * @params:
     *    - context: the context of the validation
     *    - m: the call expression to validate
     * @returns: the validated value
     * @throws:
     *    - &ErrorMsg: if the validation failed
     *  */
    pub fn validate (self, dmut context : &Validator, m : &MacroCallExpr)-> &Value
        throws &ErrorMsg
    {
        context;
        m;
        __pragma!fake_throw (&ErrorMsg);
        __pragma!panic ();
    }

}
