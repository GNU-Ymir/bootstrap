mod ymirc::semantic::validator::macro_::mapper;

import std::collection::map;
import std::collection::vec;
import std::collection::set;
import std::io;

import ymirc::syntax::expression::_;
import ymirc::errors::_;
import ymirc::utils::format;


/**
 * The macro mapper class is a class containing a validation of a macro specialization
 * It is constructed by a macro resolution, and used to perform the rewrite of the macro symbol into a value
 */
pub class MacroMapper {

    // The content of the mapper
    let mut _consumed : [c8];

    // The content of the mapper
    let dmut _mapping = HashMap!{[c8], dmut &Vec!{&MacroMapper}}::new ();

    /**
     * @params:
     *    - consumed: the content of the mapper
     * */
    pub self (consumed : [c8])
        with _consumed = consumed
    {}

    /**
     * Insert an inner mapper
     * @params:
     *    - key: the name of the inner mapper
     *    - content: the content of the inner mapper
     * */
    pub fn insert (mut self, key : [c8], content : &MacroMapper) {
        let dmut f = self._mapping:.find (key);
        match ref f {
            Ok (dmut x : _) => x:.push (content);
            _ => {
                let dmut v = Vec!{&MacroMapper}::new ();
                v:.push (content);
                self._mapping:.insert (key, alias v);
            }
        }
    }

    /**
     * Insert an inner mapper
     * @params:
     *    - key: the name of the inner mapper
     *    - content: the content of the inner mapper
     * */
    pub fn insert (mut self, key : [c8], content : [&MacroMapper]) {
        for j in content {
            self:.insert (key, j);
        }
    }

    /**
     * Find an inner mapper
     * @params:
     *    - key: the key association of the mapper
     * */
    pub fn find (self, key : [c8])-> (&Vec!{&MacroMapper})? {
        self._mapping.find (key)
    }

    /**
     * @returns: the text associated with the mapper
     * */
    pub fn getValue (self)-> [c8] {
        self._consumed
    }

    /**
     * Merge other into self (at the end)
     * */
    pub fn merge (mut self, other : &MacroMapper, replace : bool = false) {
        for k, v in other._mapping {
            let insert = match self._mapping.find (k) {
                Ok () => { replace }
                _ => { true }
            };

            if insert {
                let dmut result = Vec!{&MacroMapper}::new ();
                for i in v {
                    result:.push (i);
                }

                self._mapping:.insert (k, alias result);
            }
        }

        self._consumed ~= other._consumed;
    }

    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("[", self._consumed, "]", " as {");
            let mut index = 0us;
            for i, j in self._mapping {
                if index != 0us {
                    stream:.write (", ");
                }

                stream:.write (i,  " => ");
                for z in j {
                    z.format (alias stream);
                }

                index += 1us;
            }

            stream:.write ("}");
        }
    }

}
