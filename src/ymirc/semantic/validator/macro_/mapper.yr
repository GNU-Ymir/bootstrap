mod ymirc::semantic::validator::macro_::mapper;

import std::collection::map;
import std::collection::vec;
import std::collection::set;
import std::io;

import ymirc::syntax::expression::_;
import ymirc::errors::_;
import ymirc::utils::format;


/**
 * The macro mapper class is a class containing a validation of a macro specialization
 * It is constructed by a macro resolution, and used to perform the rewritte of the macro symbol into a value
 */
pub class MacroMapper {

    // True of the mapper is successful
    let mut _succeed : bool;

    // The content of the mapper
    let _consumed : [c8];

    // The content of the mapper
    let dmut _mapping = HashMap!{[c8], &MacroMapper}::new ();

    /**
     * @params:
     *    - succeed: true iif the mapper is successful
     *    - consumed: the content of the mapper
     * */
    pub self (succeed : bool, consumed : [c8])
        with _succeed = succeed
        , _consumed = consumed
    {}

    /**
     * Insert an inner mapper
     * @params:
     *    - key: the name of the inner mapper
     *    - content: the content of the inner mapper
     * */
    pub fn insert (mut self, key : [c8], content : &MacroMapper) {
        self._mapping:.insert (key, content);
    }

    /**
     * Find an inner mapper
     * @params:
     *    - key: the key association of the mapper
     * */
    pub fn find (self, key : [c8])-> (&MacroMapper)? {
        self._mapping.find (key)
    }

    /**
     * @returns: the text associated with the mapper
     * */
    pub fn getValue (self)-> [c8] {
        self._consumed
    }

}
