in mapper;

use std::stream;
use ymirc::syntax::expression::_;
use ymirc::errors::_;
use ymirc::utils::format;


/**
 * The macro mapper class is a class containing a validation of a macro specialization
 * It is constructed by a macro resolution, and used to perform the rewrite of the macro symbol into a value
 */
pub record MacroMapper {

    // The content of the mapper
    let mut _consumed : [c8];

    // The content of the mapper
    let mut _mapping : [[c8] => mut [MacroMapper]] = [];

    /**
     * @params:
     *    - consumed: the content of the mapper
     * */
    pub self (consumed : [c8])
        with _consumed = consumed
    {}

    /**
     * Insert an inner mapper
     * @params:
     *    - key: the name of the inner mapper
     *    - content: the content of the inner mapper
     * */
    pub fn insert (mut self, key : [c8], content : MacroMapper) {
        if let Ok (x) = self._mapping [key] {
            let r = x ~ [content];
            self._mapping [key] = r;
        } else {
            self._mapping [key] = copy [content];
        }
    }

    /**
     * Insert an inner mapper
     * @params:
     *    - key: the name of the inner mapper
     *    - content: the content of the inner mapper
     * */
    pub fn insert (mut self, key : [c8], content : [MacroMapper]) {
        if let Ok (x) = self._mapping [key] {
            let r = x ~ content;
            self._mapping [key] = r;
        } else {
            self._mapping [key] = content;
        }
    }

    /**
     * Find an inner mapper
     * @params:
     *    - key: the key association of the mapper
     * */
    pub fn find (self, key : [c8])-> ([MacroMapper])? {
        self._mapping [key]
    }

    /**
     * @returns: the text associated with the mapper
     * */
    pub fn getValue (self)-> [c8] {
        self._consumed
    }

    /**
     * Merge other into self (at the end)
     * */
    pub fn merge (mut self, other : MacroMapper, replace : bool = false) {
        for k, v in other._mapping {
            let insert = (if k in self._mapping { replace } else { true });
            if insert {
                self._mapping [k] = v;
            }
        }

        self._consumed ~= other._consumed;
    }

    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("[", self._consumed, "]", " as {");
            let mut index = 0us;
            for i, j in self._mapping {
                if index != 0us {
                    stream:.write (", ");
                }

                stream:.write (i,  " => ");
                for z in j {
                    z.format (alias stream);
                }

                index += 1us;
            }

            stream:.write ("}");
        }
    }

}
