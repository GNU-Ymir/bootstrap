mod ymirc::semantic::validator::typeinfo_;

import ymirc::syntax::expression::_;
import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::declarator::errors;

import ymirc::semantic::symbol::base;
import ymirc::global::core_;

import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::utils::bigint;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::syntax::keys;

import std::collection::vec;
import std::algorithm::searching;
import std::io;
import std::conv;

/**
 * The validator responsible for the validation of 'typeinfo' expressions
 */
pub class TypeInfoValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}


    /**
     * Validate a typeinfo expression
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the typeinfo access
     *    - type: the type being accessed
     * @returns: the validated expression
     */
    pub fn validate (self, dmut context : &Validator, loc : &Word, type : &Type)-> &Value
        throws &ErrorMsg
    {
        let ti = context:.validateTypeInfo (loc);
        let tiCtor = context:.getSubTypeValidator ().validateClassCtors (alias context, loc, ti.getInner ());

        self.validate (alias context, loc, ti, tiCtor, type)
    }

    /**
     * Validate the field infos of a type
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the field info access
     *     - type: the type being accessed
     * @returns: the validated expression
     * */
    pub fn validateFieldInfos (self, dmut context : &Validator, loc : &Word, type : &Type)-> &Value
        throws &ErrorMsg
    {
        let fi = context:.validateFieldInfo (loc);
        let fiCtor = context:.getSubTypeValidator ().validateClassCtors (alias context, loc, fi.getInner ());
        match type {
            c : &ClassRefType => {
                return self.validateFieldInfoClass (alias context, loc, fi, fiCtor, c);
            }
            c : &ClassPtrType => {
                return self.validateFieldInfoClass (alias context, loc, fi, fiCtor, c.getInner ());
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TYPE_HAS_NO_FIELDINFO, type));
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ========================            TYPEINFO             =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate a typeinfo expression
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the typeinfo access
     *    - ti: the typeinfo struct type for std core::typeinfo
     *    - type: the type being accessed
     * @returns: the validated expression
     */
    fn validate (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, type : &Type)-> &Value
        throws &ErrorMsg
    {


        match type {
            b : &BoolType => {
                return self.validateScalarType (alias context, loc, ti, tiCtor, b, TypeInfoIDS::BOOL);
            }
            it : &IntType => {
                if (it.isSigned ()) {
                    return self.validateScalarType (alias context, loc, ti, tiCtor, it, TypeInfoIDS::SIGNED_INT);
                } else {
                    return self.validateScalarType (alias context, loc, ti, tiCtor, it, TypeInfoIDS::UNSIGNED_INT);
                }
            }
            c : &CharType => {
                return self.validateScalarType (alias context, loc, ti, tiCtor, c, TypeInfoIDS::CHAR);
            }
            f : &FloatType => {
                return self.validateScalarType (alias context, loc, ti, tiCtor, f, TypeInfoIDS::FLOAT);
            }
            v : &VoidType => {
                return self.validateScalarType (alias context, loc, ti, tiCtor, v, TypeInfoIDS::VOID);
            }

            d : &DelegateType => {
                return self.validateDelegateType (alias context, loc, ti, tiCtor, d);
            }
            f : &FuncPtrType => {
                return self.validateFuncPtrType (alias context, loc, ti, tiCtor, f);
            }
            a : &ArrayType => {
                return self.validateArrayType (alias context, loc, ti, tiCtor, a);
            }
            p : &PointerType => {
                return self.validatePointerType (alias context, loc, ti, tiCtor, p);
            }
            r : &RangeType => {
                return self.validateRangeType (alias context, loc, ti, tiCtor, r);
            }
            s : &SliceType => {
                return self.validateSliceType (alias context, loc, ti, tiCtor, s);
            }
            tu : &TupleType => {
                return self.validateTupleType (alias context, loc, ti, tiCtor, tu);
            }
            c : &ClassPtrType => {
                return self.validateClassPtrType (alias context, loc, ti, tiCtor, c);
            }
            c : &ClassRefType => {
                return self.validateClassRefType (alias context, loc, ti, tiCtor, c);
            }
            o : &OptionType => {
                return self.validateOptionType (alias context, loc, ti, tiCtor, o);
            }

            e : &EnumType => {
                return self.validate (alias context, loc, e.getProxy ());
            }
        }

        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TYPE_HAS_NO_TYPEINFO, type));
    }

    /**
     * Validate the typeinfo of a scalar
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - scal: the scalar type
     * @returns: a typeinfo value
     * */
    fn validateScalarType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtors : &Value, scal : &Type, code : [c8])-> &Value
        throws &ErrorMsg
    {
        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, code);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, scal);

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, []);
        let name = format ("%", scal);
        params [3] = makeStringSliceValue (loc, name);

        context:.getCallOpValidator ().validate (alias context, loc, tiCtors, params)
    }

    /**
     * Validate the typeinfo of a delegate type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - d: the delegate type
     * @returns: a typeinfo value
     * */
    fn validateDelegateType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, d : &DelegateType)-> &Value
        throws &ErrorMsg
    {
        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, TypeInfoIDS::DELEGATE);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, d);

        let name = format ("%", d);
        params [3] = makeStringSliceValue (loc, name);

        let dmut inners = Vec!{&Value}::new ();
        inners:.push (self.validate (alias context, loc, ti, tiCtor, d.getRetType ()));
        for i in d.getParameters () {
            inners:.push (self.validate (alias context, loc, ti, tiCtor, i));
        }

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, inners[]);
        context:.getCallOpValidator ().validate (alias context, loc, tiCtor, params)
    }

    /**
     * Validate the typeinfo of a function pointer type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - f: the function pointer type
     * @returns: a typeinfo value
     * */
    fn validateFuncPtrType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, f : &FuncPtrType)-> &Value
        throws &ErrorMsg
    {
        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, TypeInfoIDS::FPTR);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, f);

        let name = format ("%", f);
        params [3] = makeStringSliceValue (loc, name);

        let dmut inners = Vec!{&Value}::new ();
        inners:.push (self.validate (alias context, loc, ti, tiCtor, f.getRetType ()));
        for i in f.getParameters () {
            inners:.push (self.validate (alias context, loc, ti, tiCtor, i));
        }

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, inners[]);
        context:.getCallOpValidator ().validate (alias context, loc, tiCtor, params)
    }

    /**
     * Validate the typeinfo of an array type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - a: the array type
     * @returns: a typeinfo value
     * */
    fn validateArrayType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, a : &ArrayType)-> &Value
        throws &ErrorMsg
    {
        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, TypeInfoIDS::ARRAY);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, a);

        let name = format ("%", a);
        params [3] = makeStringSliceValue (loc, name);

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, [self.validate (alias context, loc, ti, tiCtor, a.getInners ()[0])]);
        context:.getCallOpValidator ().validate (alias context, loc, tiCtor, params)
    }

    /**
     * Validate the typeinfo of a pointer type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - p: the pointer type
     * @returns: a typeinfo value
     * */
    fn validatePointerType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, p : &PointerType)-> &Value
        throws &ErrorMsg
    {
        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, TypeInfoIDS::POINTER);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, p);

        let name = format ("%", p);
        params [3] = makeStringSliceValue (loc, name);

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, [self.validate (alias context, loc, ti, tiCtor, p.getInners ()[0])]);
        context:.getCallOpValidator ().validate (alias context, loc, tiCtor, params)
    }

    /**
     * Validate the typeinfo of a range type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - r: the range type
     * @returns: a typeinfo value
     * */
    fn validateRangeType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, r : &RangeType)-> &Value
        throws &ErrorMsg
    {
        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, TypeInfoIDS::RANGE);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, r);

        let name = format ("%", r);
        params [3] = makeStringSliceValue (loc, name);

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, [self.validate (alias context, loc, ti, tiCtor, r.getInners ()[0])]);
        context:.getCallOpValidator ().validate (alias context, loc, tiCtor, params)
    }

    /**
     * Validate the typeinfo of a slice type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - s: the slice type
     * @returns: a typeinfo value
     * */
    fn validateSliceType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, s : &SliceType)-> &Value
        throws &ErrorMsg
    {
        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, TypeInfoIDS::SLICE);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, s);

        let name = format ("%", s);
        params [3] = makeStringSliceValue (loc, name);

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, [self.validate (alias context, loc, ti, tiCtor, s.getInners ()[0])]);
        context:.getCallOpValidator ().validate (alias context, loc, tiCtor, params)
    }

    /**
     * Validate the typeinfo of a tuple type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - t: the tuple type
     * @returns: a typeinfo value
     * */
    fn validateTupleType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, t : &TupleType)-> &Value
        throws &ErrorMsg
    {
        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, TypeInfoIDS::TUPLE);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, t);

        let name = format ("%", t);
        params [3] = makeStringSliceValue (loc, name);
        let dmut inners = Vec!{&Value}::new ();
        for i in t.getInners () {
            inners:.push (self.validate (alias context, loc, ti, tiCtor, i));
        }

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, inners[]);
        context:.getCallOpValidator ().validate (alias context, loc, tiCtor, params)
    }

    /**
     * Validate the typeinfo of a class pointer type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - c: the class pointer
     * @returns: a typeinfo value
     * */
    fn validateClassPtrType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, c : &ClassPtrType)-> &Value
        throws &ErrorMsg
    {
        if (c.getSymbol ().isStruct ()) return self.validateClassRefType (alias context, loc, ti, tiCtor, c.getInner ());

        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, TypeInfoIDS::POINTER);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, c);

        let name = format ("%", c);
        params [3] = makeStringSliceValue (loc, name);

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, [self.validate (alias context, loc, ti, tiCtor, c.getInner ())]);
        context:.getCallOpValidator ().validate (alias context, loc, tiCtor, params)
    }

    /**
     * Validate the typeinfo of a class ref type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - c: the class ref type
     * @returns: a typeinfo value
     * */
    fn validateClassRefType (self, dmut _ : &Validator, _ : &Word, _ : &ClassPtrType, _ : &Value, c : &ClassRefType)-> &Value {
        match c.getTypeInfo () {
            v : &Value => { v }
            _ => __pragma!panic ();
        }
    }

    /**
     * Validate the typeinfo of an option type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the operation
     *    - ti: the typeinfo type
     *    - o: the option pointer
     * @returns: a typeinfo value
     * */
    fn validateOptionType (self, dmut context : &Validator, loc : &Word, ti : &ClassPtrType, tiCtor : &Value, o : &OptionType)-> &Value
        throws &ErrorMsg
    {
        let mut params : [mut &Value] = [UNIT_VALUE ; new 4us];
        params [0] = context:.validateTypeIDs (loc, TypeInfoIDS::OPTION);
        params [1] = context:.getSizeofValidator ():.validate (alias context, loc, o);

        let name = format ("%", o);
        params [3] = makeStringSliceValue (loc, name);

        params [2] = self.createArrayFromTypeInfoValues (alias context, loc, ti, [self.validate (alias context, loc, ti, tiCtor, o.getInners ()[0])]);
        context:.getCallOpValidator ().validate (alias context, loc, tiCtor, params)
    }


    /**
     * Create the slice type that contains the typeinfo values from a list of typeinfo values
     * */
    fn createArrayFromTypeInfoValues (self, dmut _ : &Validator, loc : &Word, ti : &ClassPtrType, values : [&Value])-> &Value {
        let arrType = ArrayType::new (loc, ti, values.len);
        let arrVal = ArrayValue::new (loc, arrType, values);

        let slcType = SliceType::new (loc, ti, isMutable-> false);
        let addr = AddressValue::new (loc, PointerType::new (loc, ti), arrVal);

        let ctor = SliceCtorValue::new (loc, slcType, addr, makeIntValue (loc, values.len), isImplicitAlias-> true);
        CopierValue::new (loc, slcType, ctor, isDeep-> false)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =======================            FIELD INFOS             =====================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate the field informations value of a class type
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the access
     *    - fi: the struct core::typeinfo::FieldInfo
     *    - c: the class being accessed
     * @returns: an array value with field informations
     * @throws:
     *    - &ErrorMsg: if an error occurs during the validation
     * */
    fn validateFieldInfoClass (self, dmut context : &Validator, loc : &Word, fi : &ClassPtrType, fiCtor : &Value, c : &ClassRefType)-> &Value
        throws &ErrorMsg
    {
        let (inPrv, _) = context.getCurrentClassContextProtections (c);
        if (!inPrv) throw ErrorMsg::fatal (loc, format (DeclareErrorMessage::PRIVATE_IN_THIS_CONTEXT, Keys::FIELDINFO));

        let sizes = context:.getSizeofValidator ():.computeSizeAndAligns (c);
        let offset = (c.getFields ().len - c.getLocalFields ().len) + 2us; // vtable, monitor, and ancestor fields

        let dmut values = Vec!{&Value}::new ();

        for i, f in c.getLocalFields () match f {
            v : &VarDeclValue => {
                values:.push (context:.getCallOpValidator().validate (alias context, loc, fiCtor,
                                                                      [makeStringSliceValue (loc, v.getLoc ().str ()),
                                                                       makeIntValue (loc, sizes [i + offset].0),
                                                                       makeIntValue (sizes [i + offset].1),
                                                                       BoolValue::new (loc, true)]));
            }
        }

        let arrType = ArrayType::new (loc, fi, values.len ());
        ArrayValue::new (loc, arrType, values[])
    }


}
