in module;

use ymirc::semantic::validator::{visitor, errors};
use ymirc::semantic::declarator::errors;
use ymirc::semantic::{symbol, symbol::{module, lazy_module}};

use ymirc::syntax::{expression::_, declaration::_};
use ymirc::syntax::keys;
use ymirc::lexing::word;
use ymirc::errors::_;
use ymirc::utils::{format, log};

use std::{stream, io, fs::path};

use ymirc::semantic::generator::type::{_,
                                       custom::_,
                                       native::{_, scalar::_, compound::_},
                                       temporary::_};

use ymirc::semantic::generator::value::{_,
                                        construct::{_, delegate::_},
                                        literal::_,
                                        memory::_,
                                        operator::{_, binary::_, call::_, fields::_, map::_, slice::_, unary::_},
                                        operator::map::iteration::_,
                                        prototypes::_,
                                        scope::_,
                                        syntax::_,
                                        template::_};

/**
 * The module validator is the class responsible for module symbol validation
 */
pub record ModuleValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}


    /**
     * Validate a module
     * @params: 
     *   - context: the context of the current validation 
     *   - sym: the symbol to validate
     */
    pub fn validate (self, dmut context : &Validator, dmut sym : &ModuleSymbol)
        throws ErrorMsg
    {

        if context.getCacheManager ().isCached (Path (sym.getLoc ().filename)) {
            self.validateWithCache (alias context, alias sym);
        } else {
            self.validateNoCache (alias context, alias sym);
        }
    }

    /**
     * Partially validate a module that is already validated in cache
     * */
    fn validateWithCache (self, dmut context : &Validator, dmut sym : &ModuleSymbol)
        throws ErrorMsg
    {
        if (sym.getPath ().parts () != []) {
            logging::info ("Skip module validation %", sym.getPath ());
        }

        let mut errors : [&ErrorMsg] = [];
        context:.pushReferent (alias sym);
        if (!sym.isExtern ()) {
            if (errors.len == 0us) {
                let dmut inner = sym:.getAllLocalSymbols (protection-> Protection::PRIVATE);
                {
                    for i in 0us .. inner.len match alias inner [i] {
                        dmut m : &ModuleSymbol => {
                            self.validate (alias context, alias m);
                        }
                        dmut l : &LazyModuleSymbol => {
                            context:.validate (alias l);
                        }
                        _ => {
                            // Don't validate local syms that are cached as they are necessarily written in the same file as the module
                        }
                    }
                } catch {
                    err => { errors ~= [err]; }
                }
            }
        }
        context:.popReferent ();

        if (errors.len != 0us) {
            throw copy ErrorMsg::list (errors);
        }
    }

    /**
     * Validate the module without cache
     * */
    fn validateNoCache (self, dmut context : &Validator, dmut sym : &ModuleSymbol)
        throws ErrorMsg
    {
        if (sym.getPath ().parts () != []) {
            logging::info ("Validate module %", sym.getPath ());
        }

        let mut errors : [&ErrorMsg] = [];
        context:.pushReferent (alias sym);
        if (!sym.isExtern ()) {
            if (errors.len == 0us) {
                let dmut inner = sym:.getAllLocalSymbols (protection-> Protection::PRIVATE);
                for i in 0us .. inner.len {
                    {
                        context:.validate (alias inner [i]);
                    } catch {
                        err : &ErrorMsg => { errors ~= [err]; }
                    }
                }

                let dmut tests = sym:.getUnitTests ();
                for i in 0us .. tests.len {
                    {
                        context:.getFunctionValidator ().validateTest (alias context, alias tests [i], i);
                    } catch {
                        err : &ErrorMsg => { errors ~= [err]; }
                    }
                }
            }
        }
        context:.popReferent ();

        if (errors.len != 0us) {
            throw copy ErrorMsg::list (errors);
        }
    }
}
