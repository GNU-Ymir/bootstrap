mod ymirc::semantic::validator::symbol::module;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::symbol::module;
import ymirc::syntax::declaration::protection;
import ymirc::errors::_;
import ymirc::utils::format;

import std::collection::vec;

/**
 * The module validator is the class responsible for module symbol validation
 */
pub class ModuleValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}


    /**
     * Validate a module
     * @params: 
     *   - context: the context of the current validation 
     *   - sym: the symbol to validate
     */
    pub fn validate (self, dmut context : &Validator, dmut sym : &ModuleSymbol)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        
        context:.pushReferent (alias sym);
        if (!sym.isExtern ()) {
            let dmut inner = sym:.getAllLocalSymbols (protection-> Protection::PRIVATE);
            for i in 0us .. inner.len {                
                {
                    context:.validate (alias inner [i]);
                } catch {
                    err : &ErrorMsg => { errors:.push (err); }
                }
            }           
        }        
        context:.popReferent ();
        
        if (errors.len () != 0us) {
            throw ErrorMsg::list (errors[]);
        }
    }

    
}
