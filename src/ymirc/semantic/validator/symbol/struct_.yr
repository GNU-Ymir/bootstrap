mod ymirc::semantic::validator::symbol::struct_;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::symbol::struct_;
import ymirc::semantic::symbol::base;

import ymirc::syntax::declaration::protection;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;

import ymirc::syntax::keys;
import ymirc::semantic::generator::_;
import ymirc::semantic::generator::type::native::compound::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::lexing::word;

import std::collection::vec;
import std::collection::set;
import std::collection::map;
import std::io, std::fs::path;

/**
 * The struct validator is the struct responsible for struct symbol validation
 */
pub class StructValidator {

    // The list of struct symbols currently in validation to avoid infinite recursion,
    // and validating multiple times the same symbol
    let dmut _validation = HashSet!{&Symbol}::new ();

    /**
     * Create a new empty validator
     */
    pub self () {}

    /**
     * Validate an struct symbol
     * @params: 
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     * @returns: the type of the struct
     * @throws: &ErrorMsg, if the struct is malformed
     */
    pub fn validate (mut self, dmut context : &Validator, dmut sym : &StructSymbol)-> &Type
        throws &ErrorMsg
    {
        if (!self.checkValidation (sym)) {
            self:.validateStructContent (alias context, alias sym);
        }

        match sym.getStructRef () {
            r : &StructType => {
                r
            }
            err : &ErrorGenerator => {
                // The struct was validated by self.validateStructContent, but it failed so the generator is an error
                // we simply throw it, unfortunately it will leads to printing the same error multiple times, but I don't see any way to avoid that efficiently (while making sure the error is at least printed one time)
                // Maybe add a uniq identifier to errors, and perform the verification directly in the error printing part

                throw err.getErrorMessage ();
            }
            _ => {
                __pragma!panic ();
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================       INNER VALIDATION       =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate the context of a struct (fields)
     * @warning: the method does not throw on error, byt rather put a error generator in the symbol
     * @params:
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     * */
    fn validateStructContent (mut self, dmut context : &Validator, dmut sym : &StructSymbol) {
        sym:.setStructRef (ErrorGenerator::new (sym.getLoc (), ErrorMsg::fatal (sym.getLoc (), ValidateErrorMessage::FORWARD_REFERENCE_TYPE)));

        self._validation:.insert (sym);
        {
            sym:.setStructRef (StructType::new (sym.getLoc (), sym));

            // Validate the fields of the struct
            self.validateFields (alias context, alias sym);

        } catch {
            err : &ErrorMsg => {
                // If there is an error in the validation, then write it in the type validation
                // Then each time a validation is tried, the same error is sent without needing a new validation
                sym:.setStructRef (ErrorGenerator::new (sym.getLoc (), ErrorMsg::fatal (sym.getLoc (), ValidateErrorMessage::VALIDATING, notes-> [err])));
            }
        }

        self._validation:.remove (sym);
    }

    /**
     * Validate the fields of the structure
     * @params:
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     * */
    fn validateFields (self, dmut context : &Validator, dmut sym : &StructSymbol)
        throws &ErrorMsg
    {
        context:.pushReferent (alias sym); // Fields are declared inside the struct
        context:.enterForeign (isFnBody-> false); // A new foreign, we don't want to add the fields inside the current scope
        context:.enterBlock (); // Because we add variable definitions

        let dmut errors = Vec!{&ErrorMsg}::new ();
        let dmut fields = Vec!{&Value}::new ();
        let dmut names = HashMap!{[c8], &Word}::new ();
        for it in sym.getFields () {
            match it {
                f : &VarDeclExpr => {
                    {
                        // Fields are just like variable decls
                        let field = context:.getValueValidator ().validateVarDecl (alias context, f, needInitValue-> false);

                        // There are two reasons for clearing local space
                        // 1) we don't want warnings about unused fields
                        // 2) fields cannot refer to other fields in the value definition (e.g. "let a = 12, b = a;" is invalid)
                        context:.clearLocalScope ();

                        // We need to verify shadow ourselves, since we removed all locals at each iteration
                        self.verifyShadow (alias names, field);

                        // We add the validated field
                        fields:.push (field);
                    } catch {
                        err : &ErrorMsg => { errors:.push (err); }
                    }
                }
                _ => { // syntax should only allow vardecl to be defined in a struct
                    __pragma!panic ();
                }
            }
        }

        context:.quitBlock (warnUnused-> false); // We entered a block at the beginning of the function
        context:.exitForeign (); // We entered a foreign
        context:.popReferent (); // And we pushed a referent

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);

        match sym.getStructRef () {
            old : &StructType => {
                let dmut strRef = StructType::withFields (old, fields[]);
                sym:.setStructRef (alias strRef);

                let size = context:.getSizeofValidator ():.validateType (sym.getLoc (), strRef);
                strRef = StructType::withSize (strRef, size);
                sym:.setStructRef (alias strRef);
            }
            _  => __pragma!panic ();
        }
    }

    /**
     * Verify that there is no shadowing in field declarations
     * @params:
     *    - dones: the list of already declared fields
     *    - field: the newly declared field
     * @throws:
     *    - &ErrorMsg: if there is a shadowing problem
     * */
    fn verifyShadow (self, dmut dones : &HashMap!{[c8], &Word}, field : &Value)
        throws &ErrorMsg
    {
        match field {
            v : &VarDeclValue => {
                match dones.find (v.getLoc ().str ()) {
                    Ok (l : &Word) => {
                        throw ErrorMsg::fatal (v.getLoc (), format (ValidateErrorMessage::SHADOWING_DECL, v.getLoc ().str ()),
                                               notes-> [ErrorMsg::note (l, ValidateErrorMessage::FIRST_DEFINED)]);
                    }
                }

                dones:.insert (v.getLoc ().str (), v.getLoc ());
            }
            _ => { // only vardecl are defined as fields
                __pragma!panic ();
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           CHECKING           =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true if the class was already validated, or is currently in validation
     */
    fn checkValidation (self, sym : &StructSymbol)-> bool {
        match sym.getStructRef () {
            EmptyGenerator () => { // The struct has no typeinfo, but maybe it is currently in validation (recursive struct validation)
                for it in self._validation {
                    if it is sym {
                        return true; // Indeed it is
                    }
                }

                false
            }
            _ => { true }
        }
    }

}
