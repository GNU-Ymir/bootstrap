mod ymirc::semantic::validator::symbol::trait_;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::symbol::trait_;
import ymirc::syntax::declaration::protection;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;

import ymirc::syntax::keys;
import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::lexing::word;

import std::collection::vec;
import std::io, std::fs::path;

/**
 * The trait validator is the trait responsible for trait symbol validation
 */
pub class TraitValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}

    /**
     * Validate an trait symbol
     * @params: 
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     * @returns: the type of the trait
     * @throws: &ErrorMsg, if the trait is malformed
     */
    pub def validate (self, dmut context : &Validator, dmut sym : &TraitSymbol)-> &Type
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();

        // Trait validation is really simple, because we don't really validate the inner symbols
        // They are validated when implemented, they requires elements that are defined inside classes (i.e. fields, and other methods)
        if (sym.getAssertions ().len != 0us) {
            context:.pushReferent (alias sym);
            context:.enterForeign (isFnBody-> false);
            for a in sym.getAssertions () {
                context:.validateCteValue (a);
            } catch {
                err : &ErrorMsg => errors:.push (err);
            }
        } exit {
            context:.popReferent ();
            context:.exitForeign ();
        }

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);

        // Return a ref type, that can be used in class validator
        TraitRefType::new (sym.getLoc (), sym)
    }

}
