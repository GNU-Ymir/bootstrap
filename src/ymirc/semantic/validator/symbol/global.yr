mod ymirc::semantic::validator::symbol::global;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::syntax::declaration::protection;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;
import ymirc::semantic::symbol::_;
import ymirc::semantic::declarator::visitor;
import ymirc::semantic::validator::utf;


import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::syntax::keys;
import ymirc::lexing::tokens;


import std::collection::set;
import std::collection::vec;
import std::io, std::fs::path;

/**
 * The global validator is the class responsible for the validation of global variable
 */
pub class GlobalValidator {

    /**
     * Create a new empty validator
     * */
    pub self () {}

    /**
     * Validate a global symbol
     * @params:
     *    - context: the context of the validation
     *    - glb: the global variable to validate
     * @throws: &ErrorMsg, if the validation failed
     * @returns: a
     * */
    pub def validate (self, dmut context : &Validator, dmut glb : &GlobalSymbol)-> &Value
        throws &ErrorMsg
    {
        context;
        glb;
        __pragma!fake_throw (&ErrorMsg);
        __pragma!panic ();
    }

}
