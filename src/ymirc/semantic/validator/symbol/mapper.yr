mod ymirc::semantic::validator::symbol::mapper;

import std::collection::map;
import std::collection::vec;
import std::io;

import ymirc::syntax::expression::_;


/**
 * The template mapper class is a class containing a validation of a template specialization
 * It is constructed by a template resolution, and used to perform the rewritte of the template symbol into another symbol
 */
pub class TemplateMapper {

    /// The score of the specialization
    let _score : u32 = 0u32;

    /// True iif the mapper is valid
    let _succeed : bool = true;

    /// The association between identifier to expression rewritte
    let dmut _mapping = HashMap!{[c8], &Expression}::new ();

    /// The order of the name (order of the _mapping map, that has no guaranteed order)
    let _nameOrder = Vec!{[c8]}::new ();

    /**
     * Create an empty mapper
     */
    pub self (succeed : bool = true, score : u32 = 0u32)
        with _score = score, _succeed = succeed
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the score of the mapper
     */
    pub def getScore (self)-> u32 {
        self._score
    }


    pub def isSucceed (self)-> bool {
        self._succeed
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
        
}
