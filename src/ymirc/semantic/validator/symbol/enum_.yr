mod ymirc::semantic::validator::symbol::enum_;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::symbol::_;
import ymirc::syntax::declaration::protection;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;

import ymirc::syntax::keys;
import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::lexing::word;

import std::collection::vec;
import std::collection::set;
import std::io, std::fs::path;

/**
 * The enum validator is the enum responsible for enum symbol validation
 */
pub class EnumValidator {

    /// The list of enum symbols currently in validation to avoid infinite recursion, and validating multiple times the same symbol
    let dmut _validation = HashSet!{&Symbol}::new ();
    
    /**
     * Create a new empty validator
     */
    pub self () {}

    /**
     * Validate an enum symbol
     * @params: 
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     * @returns: the value of the enum
     * @throws: &ErrorMsg, if the enum is malformed
     */
    pub def validate (mut self, dmut context : &Validator, dmut sym : &EnumSymbol)-> &EnumType
        throws &ErrorMsg
    {
        if (!self.checkValidation (sym)) {
            self:.validateEnumContent (alias context, alias sym);
        }

        match sym.getGenerator () {
            r : &EnumType => {
                return r;
            }
            err : &ErrorGenerator => { // The enum was validated by self.validateEnumContent but it failed
                throw err.getErrorMessage ();
            }
            _ => {
                __pragma!panic ();
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================      CONTENT VALIDATOR       =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Validate the fields of an enumeration
     * @info: in case of error, put an ErrorGenerator in the symbol instead of a valid type
     * @params:
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     */
    def validateEnumContent (mut self, dmut context : &Validator, dmut sym : &EnumSymbol) {
        // The validation of the enum is not finished
        // a recursive reference to itsel will lead to infinite loop, we want to avoid that
        sym:.setGenerator (ErrorGenerator::new (sym.getLoc (), ErrorMsg::fatal (sym.getLoc (), ValidateErrorMessage::FORWARD_REFERENCE_TYPE)));

        // We add the symbol to the validation to avoid infinite loops
        self._validation:.insert (sym);
        
        {
            // first we nned to validate the type of the enum (if any)
            let forceType = self.validateForceType (alias context, alias sym);

            // And then validate the fields of the enumeration
            self:.validateEnumFields (alias context, alias sym, forceType);        
        } catch {
            err : &ErrorMsg => {

                // If there was an error in the validation, then write it in the type validation
                // Then each time a validation is tried, the same error is sent without needing a new validation
                sym:.setGenerator (ErrorGenerator::new (sym.getLoc (), ErrorMsg::fatal (sym.getLoc (), ValidateErrorMessage::VALIDATING, notes-> [err])));
            }
        }
        
        self._validation:.remove (sym);
    } 

    /**
     * Validate the force type of an enumeration (the type written on the definition of the enum)
     * @params: 
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     * @returns: the validated type (NONE_TYPE, if no force type is defined)
     * @throws:
     *    - &ErrorMsg: if the force type is not valid
     */
    def validateForceType (self, dmut context : &Validator, dmut sym : &EnumSymbol)-> &Type
        throws &ErrorMsg
    {
        match sym.getContent ().getType () {
            EmptyExpression () => { cast!{&Type} (NONE_TYPE) }
            x : _ => { context:.validateType (x) }
        }
    }

    /**
     * Validate the fields of the enumeration
     * @params: 
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     *    - forceType: the type to force
     */
    def validateEnumFields (self, dmut context : &Validator, dmut sym : &EnumSymbol, forceType : &Type)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        context:.pushReferent (alias sym);
        context:.enterForeign (isFnBody-> false);
        context:.enterBlock ();
        
        let mut realForceType = forceType;
        for field in sym.getContent ().getValues () {
            {
                let value = context:.validateValue (field.getLoc (), field.getValue (), type-> forceType, verif-> false);
                match forceType {
                    NoneType () => {
                        realForceType = context.inferTypeBranchingWithValue (value.getLoc (), realForceType, value);
                        context:.verifyMemoryOwner (field.getLoc (), realForceType, value, checkTypes-> true, construct-> true);
                    }
                    _ => {
                        context:.verifyMemoryOwner (field.getLoc (), forceType, value, checkTypes-> true, construct-> true);
                    }
                };

                sym:.insertField (field.getLoc ().str (), value);
                context:.insertLocal (field.getLoc ().str (), value);
            } catch {
                err : &ErrorMsg => { errors:.push (err); }
            }
        }

        // Finalize the type of the enumeration
        sym:.setGenerator (EnumType::new (sym.getLoc (), sym, realForceType));        
    
        context:.quitBlock (warnUnused-> false); // We entered a block at the beginning of the function        
        context:.exitForeign (); // We entered a foreign
        context:.popReferent (); // And we pushed a referent
        
        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
    } 
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           CHECKING           =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true if the class was already validated, or is currently in validation
     */
    def checkValidation (self, sym : &EnumSymbol)-> bool {
        match sym.getGenerator () {
            EmptyGenerator () => { // The enum has no typeinfo, but maybe it is currently in validation (recursive enum validation)
                for it in self._validation {
                    if it is sym {
                        return true; // Indeed it is
                    }
                }
                
                false
            }
            _ => { true }            
        }
    }


}
