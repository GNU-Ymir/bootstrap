mod ymirc::semantic::validator::symbol::template;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::semantic::symbol::template;
import ymirc::syntax::declaration::protection;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;

import ymirc::syntax::keys;
import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::lexing::word;

import std::collection::vec;
import std::io, std::fs::path;

/**
 * The template validator is the template responsible for template symbol validation
 */
pub class TemplateValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}

    /**
     * Validate an template symbol as a type
     * @params: 
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     * @returns: the value of the template
     * @throws: &ErrorMsg, if the template is malformed or a value
     */
    pub def validateType (self, dmut context : &Validator, sym : &TemplateSymbol)-> &Type
        throws &ErrorMsg
    {
        context;
        sym;
        __pragma!fake_throw (&ErrorMsg);
        __pragma!panic ();
    }

    /**
     * Validate an template symbol as a value
     * @params: 
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     * @returns: the value of the template
     * @throws: &ErrorMsg, if the template is malformed or a type
     */
    pub def validateValue (self, dmut context : &Validator, sym : &TemplateSymbol)-> &Value
        throws &ErrorMsg
    {
        context;
        sym;
        __pragma!fake_throw (&ErrorMsg);
        __pragma!panic ();
    }

    /**
     * Validate a template call that creates a value (function for example, or aka, etc.)
     * @params: 
     *    - context: the context of the validation
     *    - left: the value that is template called
     *    - rights: the template arguments passed to the template
     * @returns: 
     *    - .0: the value
     *    - .1: the score of the call
     * @throws:
     *    - &ErrorMsg: if the call is impossible (for example left is not a valid template)    
     */
    pub def validateCallValue (self, dmut context : &Validator, left : &Value, rights : [&Generator])-> (&Value, u32)
        throws &ErrorMsg
    {
        context;
        left;
        rights;
        __pragma!fake_throw (&ErrorMsg);
        __pragma!panic ();        
    }

}
