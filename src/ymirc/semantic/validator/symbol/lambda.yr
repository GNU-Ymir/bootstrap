mod ymirc::semantic::validator::symbol::lambda;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::syntax::declaration::protection;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;

import ymirc::semantic::symbol::path;
import ymirc::syntax::keys;
import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;
import ymirc::lexing::word;
import ymirc::lexing::tokens;
import ymirc::global::core_;

import std::collection::vec;
import std::collection::set;
import std::io, std::fs::path;


/**
 * The lambda validator is the class responsible for lambda symbol validation
 */
pub class LambdaValidator {

    // List of validated lambdas already inserted
    let dmut _inserted = HashSet!{[c8]}::new ();

    // The list of function created to cast fptr to dg
    let dmut _fptrCasted = HashSet!{[c8]}::new ();

    /**
     * Create a new empty validator
     */
    pub self () {}

    /**
     * Validate a lambda symbol
     * @params: 
     *    - context: the context of the validation
     *    - sym: the symbol to validate
     * @returns: the value of the lambda
     * @throws: &ErrorMsg, if the lambda is malformed
     */
    pub fn validate (mut self, dmut context : &Validator, sym : &LambdaValueExpr, isClosure : bool = false, forLazy : bool = false, copyLoc : &Word = EOF_WORD)-> &Value
        throws &ErrorMsg
    {
        let name = format ("_%_%", sym.getLoc ().line (), sym.getLoc ().col ());
        let frameName = context:.getReferent ().getPath ().push (name);

        // We start by validating the prototype of the lambda
        // Unlike function prototype it can be uncomplete (missing some var decl type)
        let (paramVars, paramTypes, retType, uncomplete) = self.validateLambdaPrototype (alias context, sym.getFunctionProtoDecl ());

        // Each lambda has a uniq index, to be identified for closure in addition to there name
        let index = context:.getCurrentClosingIndex ();
        let proto = LambdaValue::new (sym.getLoc (),
                                      LambdaType::new (sym.getLoc (), paramTypes, retType),
                                      frameName,
                                      paramVars,
                                      retType,
                                      sym.getValue (),
                                      isClosure,
                                      index,
                                      copyLoc-> copyLoc);
        
        if (uncomplete) { // Missing some types
            proto
        } else { // Have all the type we can validate it as a function
            let (retProto, frame) = self:.validateLambdaBody (alias context, proto, paramTypes, forLazy-> forLazy);
            self.insertGenerator (alias context, frame);

            retProto
        }
    }

    /**
     * Create a delegate that calls a function pointer to cast a function pointer to a delegate
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the casting
     *    - fptrType: the type to cast
     *    - func: the function to call (assuming its type is 'fptrType')
     * @returns: the prototype of the delegate
     * @throws:
     *    - &ErrorMsg: if the validation failed
     * */
    pub fn createDelegateFromFptr (mut self, dmut context : &Validator, loc : &Word, fptrType : &FuncPtrType, func : &Value)-> &Value {
        let frameName = SymbolPath::new (DelegateUtils::CAST_FPTR_TO_DG.toStr (sep-> "::"s8));
        let closureValue = func;
        let fstParam = ProtoVarValue::new (Word::new ("#{CLOSURE-VARREF}"s8, loc),
                                           fptrType,
                                           UNIT_VALUE,
                                           false,
                                           isSelf-> false,
                                           isReference-> false,
                                           isLazy-> false);

        let closureRef = VarRefValue::new (fstParam.getLoc (),
                                           fstParam.getLoc (),
                                           fptrType,
                                           fstParam.getUniqId (),
                                           isSelf-> false,
                                           isParam-> true,
                                           isReference-> false,
                                           isLazy-> false);

        let (paramVars, paramTypes, retType, body) = self.validateLambdaDGFromFptr (alias context, loc, fptrType, closureRef);
        let frameProto = NamePrototypeValue::new (loc, frameName, ([fstParam] ~ paramVars), retType, isLambda-> true);
        let retProto = NameDelegateValue::new (loc, frameProto, closure-> closureValue,
                                               fptrType.getReferences (),
                                               fptrType.getLazys (),
                                               paramTypes, retType, fromFptr-> true);

        let mnglName = Mangler::new ().mangle (frameProto);
        if (mnglName !in self._fptrCasted) {
            let frame = FrameGenerator::new (loc, frameName, parameters-> ([fstParam] ~ paramVars), retType, body, FrameKind::LMBD, isWeak-> true);
            self.insertGenerator (alias context, frame);
            self._fptrCasted:.insert (mnglName);
        }

        retProto
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ===============================          LAMBDA PARAMETERS          ================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Validate the prototype of a lambda expression
     * @params: 
     *   - context: the context of the validation
     *   - proto: the prototype of the lambda expression
     * @returns:
     *    - .0: the list of parameters of the lambda (ParamVar)
     *    - .1: the list of the types of the parameters (might be full of NoneType, if the lambda is not complete)
     *    - .2: the return type of the lambda (NoneType is possible even if the lambda is complete)
     *    - .3: true iif the lambda is complete and that the body can be validated
     * @throws: &ErrorMsg: if the lambda is malformed
     */
    fn validateLambdaPrototype (self, dmut context : &Validator, proto : &FunctionProtoDecl)-> ([&Value], [&Type], &Type, bool)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        let mut uncomplete = false;
        let dmut parameters = Vec!{&Value}::new ();
        let dmut types = Vec!{&Type}::new ();        

        // Enter a foreign because we don't want to pollute the current function scope (but this is only for the proto)
        context:.enterForeign (isFnBody-> false, clContext-> context:.getCurrentClassContext ()); 
        context:.enterBlock ();
        
        for v in proto.getParameters () {
            {
                if (v.getType ().isOf!{&EmptyExpression} ()) { // If no type has been given in the definition of the lambda, then it is validated by calling it
                    uncomplete = true;
                    parameters:.push (ExprWrapperValue::new (v.getLoc (), v));
                    types:.push (NoneType::new (v.getLoc ()));
                } else {
                    let (isRef, isLazy, type) = self.validateTypeParam (alias context, v); // Otherwise we can already make some validation

                    let paramGen = ProtoVarValue::new (v.getLoc (), type, UNIT_VALUE, type.isMutable (), isSelf-> false, isReference-> isRef, isLazy-> isLazy);
                    parameters:.push (paramGen);
                    types:.push (type);

                    if (v.getLoc ().str () != Keys::UNDER) {
                        context:.verifyShadow (paramGen.getLoc ());
                        context:.insertLocal (paramGen.getLoc ().str (), paramGen);
                    }
                }
            } catch {
                err : &ErrorMsg => errors:.push (err);
            }
        }
                
        let r : &Type = {        
            match proto.getRetType () {
                EmptyExpression () => {
                    cast!{&Type} (NoneType::new (proto.getLoc ())) // If no type is given as return type, it will take the type of the body (unlike normal function definition)
                }
                x : _ => { context:.validateType (x) }
            }
        } catch {
            err : &ErrorMsg => {
                errors:.push (err);
                cast!{&Type} (NONE_TYPE)
            }           
        };
        
        context:.quitBlock (warnUnused-> false);
        context:.exitForeign (); // Of course we exit the foreign a get back to the parent function definition

        if (errors.len () != 0us) {
            throw ErrorMsg::list (errors[]);
        }
        return (parameters [], types[], r, uncomplete);
    }


    /**
     * Validate the type composant of a VarDeclExpr assuming it is not an EmptyExpression
     * @params: 
     *   - context: the context of the validation
     *   - v: the var decl whose type we have to validate
     * @returns: the type of the vardecl with correct mutable level
     * @throws: 
     *  - &ErrorMsg: if the type is not valid
     */
    fn validateTypeParam (self, dmut context : &Validator, vdecl : &VarDeclExpr)-> (bool, bool, &Type)
        throws &ErrorMsg
    {
        let type = {
            context:.validateTypeForVarDecl (vdecl.getType (), vdecl, canBeRef-> true, canBeLazy-> true)
        } catch {
            err : &ErrorMsg => throw ErrorMsg::note (vdecl.getLoc (), ValidateErrorMessage::VALIDATING, notes-> [err]);
        };
        
        if (type.isMutable () && !type.needExplicitAlias () && !type.isMovable () && !vdecl.isRef ()) { // Verification that the value is mutable iif it is aliasable
            throw ErrorMsg::fatal (vdecl.getLoc (), ValidateErrorMessage::MUTABLE_CONST_PARAM);
        }

        context.verifyNonVoidType (vdecl.getType ().getLoc (), type, true);
        (vdecl.isRef (), vdecl.isLazy (), type)
    }

    /*!
     * ====================================================================================================
     * ====================================================================================================
     * ==================================          LAMBDA BODY          ===================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Validate the body of a lambda expression, assuming that the lambda is complete
     * @params: 
     *    - context: the context of the validation
     *    - proto: the prototype of the lambda to validate
     *    - paramTypes: the type of the parameters of the lambda
     *    - declare: if true, finalize the validation and insert the frame generator
     * @throws: &ErrorMsg: if the lambda is malformed
     */
    pub fn validateLambdaBody (mut self, dmut context : &Validator, lmbd : &LambdaValue, paramTypes : [&Type], forLazy : bool = false, castClosure : bool = false)-> (&Value, &FrameGenerator)
        throws &ErrorMsg        
    {
        context:.enterForeign (isLambda-> true, isFnBody-> true, clContext-> context:.getCurrentClassContext ()); // Enter a foreign because we don't want to pollute the current function scope
        context:.enterBlock ();
        {
            let mut error = ((&ErrorMsg)?)::__err__;
            let (proto, frame) = {
                // Validate the parameters with the correct types
                // insert them in context, and set the return type of the lambda
                let (references, lazys, types, params) = self.validateFinalParameters (alias context, lmbd, paramTypes);

                let refId = generator::base::generateUniqID ();
                // Validate the body of the lambda
                let (body, closure, retType) = self.validateLambdaBody (alias context, refId, lmbd, forLazy-> forLazy, castClosure-> castClosure);

                match closure {
                    cl : &ClosureType => {
                        let closureType = TupleType::new (cl.getLoc (), cl.getInnerTypes ());
                        let ptrType = PointerType::new (cl.getLoc (), closureType, isMutable-> false);

                        // We override the uniq Id of the next variable, so all the varref to closure are refering to this proto variable
                        let fstParam = ProtoVarValue::new (Word::new ("#{CLOSURE-VARREF}"s8, cl.getLoc ()), ptrType, refId-> refId);
                        let frame = FrameGenerator::new (lmbd.getLoc (), lmbd.getName (), parameters-> ([fstParam] ~ params), retType, body, FrameKind::LMBD, isWeak-> true);
                        let closureValue = if (cl.getInnerTypes ().len != 0us) {
                            cast!{&Value} (CopierValue::new (cl.getLoc (),
                                                             ptrType,
                                                             TupleValue::new (cl.getLoc (), closureType, cl.getInnerValues ())))
                        } else {
                            cast!{&Value} (NullValue::new (cl.getLoc (), ptrType))
                        }

                        let proto = NamePrototypeValue::new (lmbd.getLoc (), lmbd.getName (), [fstParam] ~ params, retType, isLambda-> true);
                        let dgValue : &Value = NameDelegateValue::new (lmbd.getLoc (), proto, closure-> closureValue, references, lazys, types, retType, fromFptr-> (castClosure && !lmbd.isClosure ()));
                        (dgValue, frame)
                    }
                    _ => {
                        let frame = FrameGenerator::new (lmbd.getLoc (), lmbd.getName (), parameters-> params, retType, body, FrameKind::LMBD, isWeak-> true);
                        let proto = NamePrototypeValue::new (lmbd.getLoc (), lmbd.getName (), params, retType, isLambda-> true);
                        (cast!{&Value} (ProtoFuncPtrValue::new (lmbd.getLoc (), proto, references, lazys, types, retType)), frame)
                    }
                }
            } catch {
                err : &ErrorMsg => {
                    let dmut stream = Formatter::new ();

                    if (!forLazy) {
                        stream:.write ('{');
                        for i, ti in paramTypes {
                            if (i != 0us) stream:.write (", ");
                            stream:.write (format ("%", ti));
                        }
                        stream:.write ('}');

                        throw ErrorMsg::fatal (lmbd.getLoc (), format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS_SIMPLE, stream[]),
                                               notes-> [err]);
                    } else {
                        for i, ti in paramTypes {
                            if (i != 0us) stream:.write (", ");
                            stream:.write (format ("%", ti));
                        }

                        throw ErrorMsg::fatal (lmbd.getLoc (), format (ValidateErrorMessage::LAZY_VALIDATION, stream[]),
                                               notes-> [err]);
                    }
                }
            } exit {
                {
                    context:.quitBlock (warnUnused-> match error { Ok () => { false }
                                                                   _ => { true }});
                } catch {
                    err : &ErrorMsg => {
                        error = err?;
                    }
                }
            }
            
            match error {
                Ok (msg : _) => throw msg;
            }
            
            (proto, frame)
        } exit {        
            context:.exitForeign (); // Of course we exit the foreign a get back to the parent function definition
        }
    }     

    /**
     * Insert the frame generator (if the frame does not already exist)
     * */
    pub fn insertGenerator (self, dmut context : &Validator, frame : &FrameGenerator) {
        let name = Mangler::new ().mangle (frame); // .getName ().toStr ();
        if !context:.hasCustomGenerator (name) {
            context:.insertNamedGenerator (name, alias context:.getReferent (), frame);
        }
    }

    /**
     * Validate the uncomplete parameters of the lambda, with the given paramTypes
     * @warning: complete var decl must have the same types as the corresponding paramTypes
     * @info: update the context by inserting param var decl in the current scope and setting current return type of function
     * @assume: a new foreign is entered, and there is at least one scope to fill
     * @params: 
     *   - context: the context of the validation
     *   - proto: the proto lambda to validate
     *   - paramTypes: the types of the var decls 
     * @returns: the list of parameters
     * @throws: 
     *   - &ErrorMsg: if there is a incompatibility between paramTypes and proto
     */
    fn validateFinalParameters (self, dmut context : &Validator, proto : &LambdaValue, paramTypes : [&Type])-> ([bool], [bool], [&Type], [&ProtoVarValue])
        throws &ErrorMsg
    {
        if (proto.getParameters ().len != paramTypes.len) __pragma!panic ();
        
        let dmut parameters = Vec!{&ProtoVarValue}::new ();
        let dmut types = Vec!{&Type}::new ();
        let dmut references = Vec!{bool}::new ();
        let dmut lazys = Vec!{bool}::new ();
        let dmut errors = Vec!{&ErrorMsg}::new ();
        
        for i, param in proto.getParameters () {
            {
                match param {
                    v : &ProtoVarValue => {
                        context:.verifyCompatibleType (v.getLoc (), paramTypes[i].getLoc (), v.getType (), paramTypes[i]);                        
                        parameters:.push (v);
                        references:.push (v.isReference ());
                        lazys:.push (v.isLazy ());
                        types:.push (v.getType ());
                        
                        if (v.getLoc ().str () != Keys::UNDER) {
                            // Useless ? Is there a way for the var to avoid the shadowing verif made by the lambda validation ?
                            context:.verifyShadow (v.getLoc ()); 
                            context:.insertLocal (v.getLoc ().str (), v);
                        }                    
                    }
                    w : &ExprWrapperValue => { // prototype value is not finished, we need to validate it
                        match w.getContent () {
                            inner : &VarDeclExpr => {
                                let vdecl = VarDeclExpr::new (w.getLoc (), inner.getName (), inner.getValue (), TypeWrapperExpr::new (inner.getLoc (), paramTypes [i]), isLazyOrRef-> inner.getLazyOrRefLocation (), isMutOrDmut-> inner.getMutOrDmutLocation ());
                                let (isRef, isLazy, type) = self.validateTypeParam (alias context, vdecl);
                                context:.verifyCompatibleType (vdecl.getLoc (), paramTypes[i].getLoc (), type, paramTypes[i]);
                                let paramGen = ProtoVarValue::new (inner.getLoc (), type, UNIT_VALUE, type.isMutable (), isSelf-> false, isReference-> isRef, isLazy-> isLazy);

                                parameters:.push (paramGen);
                                types:.push (type);
                                references:.push (isRef);
                                lazys:.push (isLazy);

                                if (param.getLoc ().str () != Keys::UNDER) {
                                    context:.verifyShadow (paramGen.getLoc ());
                                    context:.insertLocal (paramGen.getLoc ().str (), paramGen);
                                }
                            }
                            _ => __pragma!panic ();
                        }
                    }
                    _ => __pragma!panic ();
                }
            } catch {
                err : &ErrorMsg => errors:.push (err);
            }
        }

        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
        context:.setFunctionReturn (proto.getRetType ());


        (references[], lazys[], types [], parameters[])
    }

    /**
     * Validate the body of a lambda value
     * @assume: a new foreign is entered, and there is at least one scope to fill
     * @params: 
     *   - context: the context of the validation
     *   - lmbd: the lambda to finish validating
     *   - params: the list of parameters of the lambda proto
     * @returns: 
     *   - .0: the body of the lambda
     *   - .1: the closure type
     *   - .2: the return type of the lambda
     * @throws:
     *   - &ErrorMsg: if the lambda was no valid
     */
    fn validateLambdaBody (self, dmut context : &Validator, refId : usize, lmbd : &LambdaValue, forLazy : bool = false, castClosure : bool = false)-> (&Value, &Type, &Type)
        throws &ErrorMsg
    {
        if (lmbd.isClosure ()) {
            context:.enterClosure (lmbd.getLoc (), refId, lmbd.getClosureIndex ());
        }
        
        let mut body = {
            context:.validateValue (lmbd.getContent ())
        } catch {
            err : &ErrorMsg => {
                if (lmbd.isClosure ()) context:.exitClosure ();
                throw err;
            }
        }
        
        let mut retType = context:.getFunctionReturn ();
        
        let closure = if (lmbd.isClosure ()) {
            let ret = context:.exitClosure ();
            if (ret.getInnerTypes ().len == 0us && !forLazy) throw ErrorMsg::fatal (lmbd.getCopyLoc (), format (ValidateErrorMessage::UNECESSARY_LMBD_COPY));

            ret
        } else {
            if (castClosure) {
                ClosureType::empty (EOF_WORD, refId)
            } else {
                cast!{&Type} (NoneType::new (lmbd.getLoc ()))
            }
        };

        let mut need = false;
        if (!body.isReturner ()) { // If there is a path in the body that leads to an exit with no return
            match retType {
                NoneType () => { // There is no return in the body
                    if (forLazy) {
                        retType = VoidType::new (lmbd.getLoc ());
                    } else {
                        retType = body.getType ();
                        need = !retType.isOf!{&VoidType} () && !retType.isOf!{&NoneType} ();
                    }
                }
                _ => { // There is a return, and we need to check the type mutability
                    body = context:.verifyCompatibleTypeWithValue (retType.getLoc (), retType, body, byReference-> false);
                    context:.verifyMemoryOwner (retType.getLoc (), retType, body, construct-> true, byReference-> false);
                }
            }
        }

        if (body.getThrowers ().len != 0us) {
            let dmut list = Vec!{&ErrorMsg}::new ();
            for it in body.getThrowers () {
                list:.push (ErrorMsg::note (it._0, format ("%", it._1)));
            }

            throw ErrorMsg::fatal (lmbd.getLoc (), notes-> list[], ValidateErrorMessage::THROWS_IN_LAMBDA);
        }

        if (need) {
            (ReturnValue::new (body.getLoc (), body), closure, retType)
        } else {
            (body, closure, retType)
        }
    }


    /*!
     * ====================================================================================================
     * ====================================================================================================
     * =================================          LAMBDA CASTING          =================================
     * ====================================================================================================
     * ====================================================================================================
     */

    /**
     * Validate a lambda prototype and body calling a function pointer to cast a fptr to a dg
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the casting
     *    - fptrType: the type to cast
     *    - func: the function to call (assuming its type is 'fptrType')
     * @returns:
     *    - .0: the parameters of the function
     *    - .1: the types of the parameters
     *    - .2: the return type of the function
     *    - .3: the body of the function
     * @throws:
     *    - &ErrorMsg: if the validation failed
     * */
    fn validateLambdaDGFromFptr (self, dmut context : &Validator, loc : &Word, fptrType : &FuncPtrType, closureRef : &Value)-> ([&ProtoVarValue], [&Type], &Type, &Value) {
        let dmut parameters = Vec!{&ProtoVarValue}::new ();
        let dmut usedCall = Vec!{&Value}::new ();
        let dmut types = Vec!{&Type}::new ();

        context:.enterForeign (isFnBody-> false, clContext-> context:.getCurrentClassContext ());
        context:.enterBlock ();

        for i in 0us .. fptrType.getParameters ().len {
            let type = fptrType.getParameters ()[i];
            let paramGen = ProtoVarValue::new (Word::new (format ("v_%", i), loc),
                                               type,
                                               UNIT_VALUE,
                                               type.isMutable (),
                                               isSelf-> false,
                                               isReference-> fptrType.getReferences ()[i],
                                               isLazy-> fptrType.getLazys ()[i]);
            parameters:.push (paramGen);
            types:.push (type);
            context:.insertLocal (paramGen.getLoc ().str (), paramGen);
        }

        context:.enterFunctionBody ();

        for i in 0us .. fptrType.getParameters ().len {
            let pgen = parameters [i];
            let var : &Value = VarRefValue::new (pgen.getLoc (),
                                                 pgen.getLoc (),
                                                 pgen.getType (),
                                                 pgen.getUniqId (),
                                                 isSelf-> false,
                                                 isParam-> true,
                                                 isReference-> pgen.isReference (),
                                                 isLazy-> pgen.isLazy ());

            let p = if (pgen.isLazy ()) {
                cast!{&Value} (LazyValue::new (var.getLoc (),
                                               var.getType (),
                                               var,
                                               UNIT_VALUE,
                                               byAlias-> false,
                                               isDone-> true))
            } else {
                if (pgen.isReference ()) {
                    cast!{&Value} (ReferencerValue::new (pgen.getLoc (), var.getType (), var))
                } else { var }
            };

            usedCall:.push (p);
        }

        let r = fptrType.getRetType ();
        let mut cl : &Value = FuncPtrCallValue::new (loc, r, closureRef, usedCall[]);
        if (!r.isOf!{&VoidType} () && !r.isOf!{&NoneType} ()) {
            cl = ReturnValue::new (loc, cl);
        }

        {
            context:.quitBlock (warnUnused-> false);
        } catch { _ => __pragma!panic (); }

        context:.exitForeign ();

        return (parameters[], types[], r, cl);
    }

}
