mod ymirc::semantic::validator::errors;

/**
 * All the error messages that can occur in symbol validation
 */
pub enum
| AKA_CLASS_CTOR                            = "a name alias cannot be created to alias class ctors"s8
| ALREADY_CAUGHT                            = "Exception type %(y) is already caught by another catching pattern of type %(y)"s8
| ALREADY_INIT_BY_CTOR_REDIRECT             = "field %(y) was already initialized by ctor redirection"s8
| ARRAY_OVERFLOW                            = "slice access, index overflow %(y) (len) <= %(y) (index)"s8
| ARRAY_PATTERN_SIZE                        = "array pattern match len %(y) never matches the value len %(y)"s8
| ATOMIC_NEEDS_MONITOR                      = "@(r=atomic) operation can only monitor object instances"s8
| BRANCHING_VALUE                           = "when validating conditional value"s8
| BREAK_NO_LOOP                             = "break statement is not within a loop"s8
| BREAK_SCOPE_GUARD                         = "cannot break loop inside a scope guard"s8
| CALL_BEGIN_ONE_LINE                       = "rewritten into let @(r=dmut) @(y=#_iter) = %(y).begin ()"s8
| CALL_GET_OP_ITERATOR                      = "calling the @(y=get) method for iterator %(y) with template parameters {%(y), %(y)}"s8
| CALL_GET_OP_ONE_LINE                      = "rewritten into %(y) = %(y).get!{%(y), %(y)} ()"s8
| CALL_LEN_ONE_LINE                         = "rewritten into let @(y=#_len) = %(y).len ()"s8
| CALL_NEXT_OP_ITERATOR                     = "calling the @(y=next) method for iterator %(y)"s8
| CALL_NEXT_OP_ONE_LINE                     = "rewritten into %(y) = %(y).next ()"s8
| CALL_PROTO                                = "calling %(y)"s8
| CANDIDATE_ARE                             = "candidate %(y)"s8
| CANNOT_CASTTO_BASE_CLASS                  = "cannot cast derived type %(y) to base class type %(y) in that context"s8
| CATCH_NOTHING                             = "Catching pattern of type %(y) catch no exceptions"s8
| CATCH_PATTERN_MULT_OR_VDECL               = "The pattern of a catch scope guard must start with a variable declaration or a field deconstructor"s8
| CATCH_VALIDATION                          = "when validating catching pattern with type %(y)"s8
| CLASS_ALIAS_FIELD                         = "class alias operator @(y=:.) is not usable to access fields"s8
| CLASS_ALIAS_FIELD_NO_CLASS                = "alias operator @(y=:.) is only usable on class, record, entity or map types, not %(y)"s8
| CLASS_ALIAS_INDEX_NO_CLASS                = "class alias operator @(y=:[) is only usable on class, record or entity types, not %(y)"s8
| CLASS_FIELD_NOT_INIT_YET                  = "field %(y) has not yet been initialized"s8
| CLASS_NOT_IMPL                            = "class type %(y) does not implement trait %(y)"s8
| CLASS_NO_FIELD                            = "class %(y) has no field named %(y)"s8
| CLASS_NO_METHOD                           = "class %(y) has no method named %(y)"s8
| CLASS_THROW_PTR                           = "class type excepted, not the class object instance type %(y) (i.e. the @(y=&) is useless)"s8
| CLOSURE_TEMPLATE_LAMBDA                   = "closure functions cannot be used as template values"s8
| COLLIDING_METHOD_DEFINITION               = "colliding method definitions %(y) and %(y)"s8
| CONFLIT_DECORATORS                        = "conflicting decorators %(y) and %(y)"s8
| CONSTRUCT_ABSTRACT_CLASS                  = "cannot construct an instance of class %(y) that is abstract"s8
| CONST_METHOD                              = "method %(y) is defined as constant"s8
| CONTAIN_MOVABLE_TYPE                      = "movable type %(y) cannot be embedded within another type"s8
| CONTAIN_MOVABLE_TYPE_NOTE                 = "only an entity type can contain another entity type"s8
| CONTAIN_MOVABLE_TYPE_RECORD               = "the structure is defined as a record but must be an entity to store movable values"s8
| CTE_ASSERT_NO_MSG                         = "cte assertion failed"s8
| CTE_ASSERT_WITH_MSG                       = "cte assertion failed %(y)"s8
| CTE_IGNORED                               = "%(y) values contained in block scope are ignored at compile time execution"s8
| CTOR_CLASS_DCOPY                          = "using deep copy instead of on level copy is prohibited when constructing class %(y)"s8
| CTOR_CLASS_STACK                          = "creating an instance of class %(y) on the stack is prohibited"s8
| CTOR_INFINITE_REDIRECTION                 = "infinite constructor redirection calls when calling %(y)"s8
| CTOR_MAP_DCOPY                            = "using deep copy instead of on level copy is prohibited when constructing a map %(y)"s8
| CTOR_MAP_STACK                            = "creating an instance of map %(y) on the stack is prohibited"s8
| DECLARED_HERE                             = "declared here"s8
| DECLARED_NOT_USED                         = "the symbol %(y) was declared but never used"s8
| DECLARE_VOID_VAR                          = "cannot declare a variable of type %(y)"s8
| DECREASING_RANGE_ACCESS                   = "range index cannot be decreasing for type %(y), but goes from %(y) to %(y)"s8
| DEEPLY_INNER_TYPE                         = "decorator is not applicable on inner types, already deeply mutable"s8
| DEFAULT_VAR_NO_NAME                       = "parameter with a default value must have a referencaable name"s8
| DEFINED_HERE                              = "defined here"s8
| DISCARD_CONST                             = "discard the constant property is prohibited"s8
| DISCARD_CONST_LEVEL_TYPES                 = "from %(y) to %(y)"s8
| DIVISION_BY_ZERO                          = "division by 0"s8
| DOLLAR_OUTSIDE_CONTEXT                    = "'$' is usable only inside an index operation"s8
| DTOR_SELF_NOT_MUT                         = "the @(y=self) parameter must be mutable in the destructor"s8
| EMPTY_ARRAY_INNER                         = "array inner type cannot be %(y)"s8
| EMPTY_METHOD_NO_ABSTRACT                  = "%(y) is empty"s8
| ENCLOSE_COPY_CLASS_CTOR                   = "did you mean to enclose the constructor call within a @(y=copy) ?"s8
| ENCLOSE_COPY_LST_COMPR                    = "did you mean to enclose it within a @(y=copy) ?"s8
| ENCLOSE_INCOMPLETE_TYPE                   = "the type %(y) cannot be enclosed because it is not complete"s8
| ENCLOSE_MOVABLE_TYPE                      = "movable type %(y) cannot be enclosed within a closure function"s8
| ERROR_PARAM                               = "value %(y) is of type %(y)"s8
| EXCEPTION_NOT_CAUGHT                      = "scope guard does not catch exceptions of type %(y)"s8
| EXITING_SCOPE_HERE                        = "exiting scope here"s8
| EXIT_SCOPE_NO_THROW                       = "%(y) guard cannot be used when guarding a scope that cannot throw"s8
| EXIT_SCOPE_VALUE_TYPE                     = "%(y) scope guard value must be of type @(y=void), not %(y)"s8
| EXTERN_GLOBAL_NO_TYPE                     = "external global variable must be declared with a type"s8
| EXTERN_GLOBAL_WITH_VALUE                  = "external global variable cannot be declared with a value"s8
| FIELD_MATCHER_NO_NAME                     = "expected a name expression"s8
| FIELD_METHOD_PARAMS                       = "field method cannot have parameters"s8
| FIRST_DEFINED                             = "defined here"s8
| FORBID_DECO_FOR_LOOP                      = "decorators are forbidden for index iterator, on %(y) iteration"s8
| FORGET_AND_CLASS                          = "did you forget @(y=&) ?"s8
| FORGET_AND_PROTO                          = "or did you forget @(y=&)?"s8
| FORGET_PAR_PROTO_CALL                     = "did you forget %(y)?"s8
| FORWARD_REFERENCE_AKA                     = "the name alias %(y) cannot be validated due to forward reference"s8
| FORWARD_REFERENCE_TYPE                    = "the type cannot be validated due to forward reference"s8
| FORWARD_REFERENCE_VALUE                   = "the value cannot be computed, as it depends on a forward reference"s8
| FORWARD_REFERENCE_VAR                     = "the type cannot be infered, as it depends on a forward reference"s8
| FOR_FIELD                                 = "for the field %(y)"s8
| FOR_LOOP_CPTR                             = "overriding the for loop operation on a class type %(y)"s8
| FOR_PATTERN_FIELD                         = "for pattern field access %(y) on type %(y)"s8
| FOR_TYPE                                  = "within type %(y)"s8
| FUNCTION_TO_FPTR_THROWING                 = "cannot create a function pointer from the throwing function %(y)"s8
| FUNCTION_TO_FPTR_UNSAFE                   = "cannot create a function pointer from the unsafe function %(y)"s8
| GLOBAL_NO_VALUE                           = "local global variable must be declared with a value"s8
| HERE                                      = "here"s8
| IF_COND_NOT_COMPLETE                      = "the if condition has no else value, so it must produce a @(y=void) value not a %(y)"s8
| IMMUTABLE_LVALUE                          = "left operand of type %(y) is immutable"s8
| IMMUTABLE_PARENT                          = "type must be immutable"s8
| IMPLICIT_ADDRESS_FUNCTION                 = "cannot create of a function pointer from %(y) implicitly"s8
| IMPLICIT_ADDRESS_METHOD                   = "cannot create of a delegate from the method %(y) implicitly"s8
| IMPLICIT_ALIAS                            = "implicit @(r=alias) of type %(y) is prohibited, it implicitly gives up on borrowings of mutable values"s8
| IMPLICIT_CONST_REFERENCE                  = "@(r=ref) of type %(y) must be const, but is mutable"s8
| IMPLICIT_LAZY                             = "cannot construct a lazy value of type %(y) implicitely"s8
| IMPLICIT_MOVE                             = "implicit @(r=move) of type %(y) is prohibited"s8
| IMPLICIT_MUT_REFERENCE                    = "@(r=ref) of type %(y) must be mutable, but is const"s8
| IMPLICIT_OVERRIDE                         = "method %(y) implicitly override method %(y)"s8
| IMPLICIT_OVERRIDE_BY_TRAIT                = "implicit override of method %(y) by trait @(y=impl)"s8
| IMPLICIT_REFERENCE                        = "cannot pass value of type %(y) as @(r=ref)"s8
| IMPL_MULTIPLE_TIMES                       = "trait %(y) is implemented multiple times by %(y)"s8
| IMPL_NO_TRAIT                             = "@(r=impl) statement must be followed by a trait, not %(y)"s8
| INCOMPATIBLE_TYPE                         = "incompatible types %(y) and %(y)"s8
| INCOMPATIBLE_VALUES                       = "incompatible values %(y) and %(y)"s8
| INCOMPLETE_TYPE                           = "the type %(y) is not complete"s8
| INCOMPLETE_TYPE_CLASS                     = "the type %(y) is not complete due to previous errors"s8
| INCOMPLETE_TYPE_CLREF                     = "type %(y) is a class"s8
| INDEX_ASSIGN_REWRITE                      = "when rewritting as index assign operator"s8
| INFINITE_LOOP                             = "infinite loop with always @(y=true) test is not allowed, rather use a @(y=loop) construct"s8
| INHERIT_FINAL_CLASS                       = "the base class %(y) is marked as final"s8
| INHERIT_NO_CLASS                          = "the base of a class must be a class, not a %(y)"s8
| INLINE_VIRTUAL_METHOD                     = "method %(y) cannot be inline as it is virtual (overridable or inherited)"s8
| INVALID_SYMBOLS                           = "symbol %(y) has errors"s8
| IN_MACRO_FINALIZATION                     = "during finalization of macro content: \n%\n%\n%"s8
| IS_AN_ENTITY                              = "%(y) is an entity type"s8
| IS_A_METHOD                               = "%(y) is a method and must be called from an instance"s8
| IS_A_RECORD                               = "%(y) is a record type"s8
| IS_NATIVE_TYPE                            = "the identifier %(y) describes a native type but has no meaning within this context"s8
| IS_NOT_CALLABLE                           = "call operator is not defined for value %(y)"s8
| LAZY_VALIDATION                           = "validation of lazy closure function fails to generate value of type %(y)"s8
| LIST_COMPR_SIZE_CTE                       = "The size of the list comprehension, constructed from type %(y), must be determinable at compile time"s8
| MACRO_CALL_VALIDATION_FAILED              = "validation of macro call failed"s8
| MACRO_DOES_NOT_MATCH                      = "macro call with \"%(y)\" does not match the rule \"%(y)\""s8
| MACRO_IN_CTOR                             = "in validation of macro constructor"s8
| MACRO_IN_RULE                             = "in validation of macro rule %(y)"s8
| MACRO_REST                                = "macro validation is not complete, rest some unassociated tokens \n%\n%\n%"s8
| MAIN_FUNCTION_ONE_ARG                     = "main function takes at most one argument"s8
| MAIN_INLINE                               = "main function cannot be inline"s8
| MALFORMED_CHAR                            = "malformed literal, number of %(y) is %(y)"s8
| MALFORMED_CORE                            = "core module is malformed"s8
| MALFORMED_FLOAT_LITERAL                   = "malformed float literal %(y)"s8
| MALFORMED_INT_LITERAL                     = "malformed int literal %(y)"s8
| MALFORMED_PRAGMA                          = "malformed __pragma %(y)"s8
| MAP_KEY_MUTABLE                           = "the type %(y) that is used as a map key must always be immutable"s8
| MAP_KEY_NOT_COMPARABLE                    = "the type %(y) cannot be used as a key, it is not comparable"s8
| MAP_KEY_NOT_HASHABLE                      = "the type %(y) cannot be used as a key, it is not hashable"s8
| MATCH_NOT_COMPLETE                        = "the pattern matching has no default case, so each branch must produce a @(y=void) value not a %(y)"s8
| MATCH_VALIDATION                          = "when validating pattern matching with value %(y) of type %(y)"s8
| MAX_LOOP_ITERATIONS                       = "reached the maximum number of cte iterations %(y) > %(y)"s8
| MAYBE_TYPE_AKA                            = "maybe a type name alias was meant (i.e. using the token @(y=:) instead of @(y==))"s8
| MISMATCH_ALIAS_EXPAND                     = "cannot alias an expand value, maybe @(y=alias) and @(y=expand) keywords are inverted ? (@(y=expand alias) V)"s8
| MISMATCH_ALIAS_LAZY                       = "cannot alias a lazy value, maybe @(y=alias) and @(y=lazy) keywords are inverted ? (@(y=lazy alias) V)"s8
| MISMATCH_COPY_EXPAND                      = "cannot copy an expand value, maybe @(y=copy) and @(y=expand) keywords are inverted ? (@(y=expand copy) V)"s8
| MISMATCH_COPY_LAZY                        = "cannot copy a lazy value, maybe @(y=copy) and @(y=lazy) keywords are inverted ? (@(y=lazy copy) V)"s8
| MISMATCH_DCOPY_EXPAND                     = "cannot copy an expand value, maybe @(y=dcopy) and @(y=expand) keywords are inverted ? (@(y=expand dcopy) V)"s8
| MISMATCH_DCOPY_LAZY                       = "cannot copy a lazy value, maybe @(y=dcopy) and @(y=lazy) keywords are inverted ? (@(y=lazy dcopy) V)"s8
| MISMATCH_TUPLE_ARITY                      = "mismatch tuple arity %(y) and %(y)"s8
| MULTIPLE_DECORATORS                       = "decorator %(y) is specified multiple times"s8
| MULTIPLE_FIELD_INIT                       = "field %(y) is initialized multiple times"s8
| MULTIPLE_NAMED_PARAM                      = "named parameter %(y) is set multiple times"s8
| MULTIPLE_SYMBOL_TYPES                     = "expression refers to multiple symbols that generate types"s8
| MULTIPLE_UNSAFE                           = "context is already unsafe"s8
| MUTABLE_CONST_ITERATOR                    = "an iterator cannot be mutable, if it is not a reference or does not borrow mutable data"s8
| MUTABLE_CONST_PARAM                       = "a parameter cannot be mutable, if it is not a reference or does not borrow mutable data"s8
| MUTABLE_LAMBDA_VAR                        = "a lambda variable cannot be mutable"s8
| MUTABLE_LAZY_VAR                          = "a lazy variable cannot be mutable, if it does not borrow mutable data"s8
| MUTABLE_METHOD                            = "method %(y) is defined as mutable"s8
| NEGATIVE_INT_INDEX                        = "index cannot be negative for type %(y), but is %(y)"s8
| NEVER_ENTERED_LOOP                        = "loop test is always @(y=false), loop is never entered"s8
| NON_ABSTRACT_NOT_COMPLETE                 = "class %(y) is not abstract but have empty methods"s8
| NOTHING_TO_CATCH                          = "nothing to catch"s8
| NOT_ALIASABLE                             = "%(y) is not an aliasable type"s8
| NOT_ANCESTOR                              = "%(y) is not an ancestor type of %(y)"s8
| NOT_AN_ARRAY                              = "%(y) is not an array type"s8
| NOT_AN_EXCEPTION_CLASS                    = "class type %(y) does not inherit from exception type %(y)"s8
| NOT_A_CLASS                               = "%(y) is not a class type"s8
| NOT_A_LVALUE                              = "not a lvalue"s8
| NOT_A_LVALUE_CLOSURE                      = "%(y) is enclosed, and cannot be used as a lvalue"s8
| NOT_A_LVALUE_ITERATOR                     = "%(y) is a value iterator, and cannot be used as a lvalue"s8
| NOT_A_LVALUE_LAZY                         = "%(y) is a lazy variable, and cannot be used as a lvalue"s8
| NOT_A_LVALUE_PARAM                        = "%(y) is a value parameter, and cannot be used as a lvalue"s8
| NOT_A_LVALUE_TYPE                         = "value of type %(y) is not a lvalue"s8
| NOT_A_MAP                                 = "%(y) is not a map type"s8
| NOT_A_RECORD                              = "%(y) is not a record type"s8
| NOT_A_SLICE                               = "%(y) is not a slice type"s8
| NOT_A_STRUCT                              = "%(y) is not an entity type"s8
| NOT_A_TRAIT                               = "%(y) is not a trait"s8
| NOT_A_TUPLE                               = "%(y) is not a tuple type"s8
| NOT_CALLABLE                              = "call operator is not defined for type %(y)"s8
| NOT_MOVABLE                               = "type %(y) is not a movable type"s8
| NOT_UNSAFE                                = "an unsafe context is entered, but no unsafe operations are made"s8
| NO_ALIAS_PATTERN                          = "there is no pattern that requires the value to be passed by @(y=alias)"s8
| NO_COPY_EXIST                             = "no copy exists for type %(y)"s8
| NO_CTOR_FOUND                             = "no constructor found for class %(y)"s8
| NO_CTOR_FOUND_NAME                        = "no constructor named %(y) found for class %(y)"s8
| NO_DEFAULT_CTOR_MOVE_STRUCT               = "type %(y) is an entity, but has no default ctor @(r=self)()"s8
| NO_LAZY_PATTERN                           = "there is no pattern that requires the value to be lazy"s8
| NO_PARAMETER_NAMED                        = "no parameter is named %(y)"s8
| NO_REFERENCE_PATTERN                      = "there is no pattern that requires the value to be passed by mutable reference"s8
| NO_SIZE_FORWARD_REF                       = "record or entity type %(y) has no size due to forward references"s8
| NO_SUPER_CLASS                            = "class %(y) has no ancestor"s8
| ONE_ITER_LOOP                             = "do while loop test is always @(y=false), the loop is always entered just one time, so the branching construct is useless"s8
| OPTION_HAS_NO_ERROR                       = "option of type %(y) has no error"s8
| OPTION_HAS_NO_VALUE                       = "option of type %(y) has no value"s8
| OPTION_MATCHER                            = "option matcher %(y) only applies to option values not %(y)"s8
| OVERFLOW_CAPACITY                         = "overflow capacity for type %(y) = %(y), maximum value is %(y)"s8
| OVERFLOW_CAPACITY_ARRAY                   = "static array size %(y) exceeds limits %(y)"s8
| OVERFLOW_CAPACITY_MIN                     = "overflow capacity for type %(y) = %(y), minimum value is %(y)"s8
| OVERRIDE_EMPTY                            = "method %(y) must have a body to override %(y)"s8
| OVERRIDE_FIELD_NO_FIELD                   = "method %(y) must be a field method to override %(y)"s8
| OVERRIDE_FINAL                            = "cannot override final method %(y)"s8
| OVERRIDE_MISMATCH_PROTECTION              = "the protection %(y) of the overriden method %(y) does not match with the definition of the ancestor class %(y)"s8
| OVERRIDE_MISMATCH_THROWERS                = "the throwers of the overriden method %(y) are not compatible with the throwers of the ancestor method %(y)"s8
| OVERRIDE_MULTIPLE_TIMES_TRAIT             = "trait method %(y) was already overriden"s8
| OVERRIDE_NON_TRAIT_INSIDE                 = "cannot override a non trait method %(y) with %(y) inside impl"s8
| OVERRIDE_NOTHING                          = "method %(y) overrides nothing"s8
| OVERRIDE_NO_FIELD_BY_FIELD                = "field method %(y) cannot override the non field method %(y)"s8
| OVERRIDE_PRIVATE                          = "cannot override private method %(y)"s8
| OVERRIDE_TRAIT_OUTSIDE                    = "cannot override trait method %(y) with %(y) outside impl"s8
| PARAMETER_NAME                            = "for parameter %(y)"s8
| PATTERN_IS_REFUTABLE                      = "the pattern %(y) with value %(y) is refutable"s8
| PRAGMA_FIELD_NO_DEFAULT                   = "field %(y) from type %(y) has no default value"s8
| RANGE_ON_ARRAY_NO_COPY                    = "the index operator on %(y) with an dynamic operand of type %(y) is allowed only in the context of a copy statement"s8
| RETURN_NO_FUNCTION                        = "return statement is not within a function"s8
| RETURN_SCOPE_GUARD                        = "cannot return inside a scope guard"s8
| SHADOWING_DECL                            = "declaration of %(y) shadows another declaration"s8
| SIMPLE_ALIAS_NOT_CLASS                    = "using basic alias instead of class alias operator (i.e. @(y=:.), @(y=:[)) is prohibited"s8
| SIMPLE_COPY_CLASS_CTOR                    = "replace @(y=dcopy) by the simple @(y=copy) operator"s8
| SUPER_NO_SELF_CLASS                       = "the superclass proxy of %(y) is only accessible through @(y=self)"s8
| TEMPLATE_REST                             = "template validation incomplete, rest : {%(y)}"s8
| TEMPLATE_SPE                              = "with %(y)"s8
| TEMPLATE_SPECIALIZATION_FAILS             = "template specialization for %(y) fails with %(y)"s8
| TEMPLATE_SPECIALIZATION_FAILS_SIMPLE      = "template specialization fails with %(y)"s8
| TEMPLATE_TEST_FAILED                      = "the test of the template specialization failed"s8
| TEMPLATE_VALUE_TRY                        = "when trying template value resolution"s8
| THROWING                                  = "throwing %(y)"s8
| THROWS_IN_LAMBDA                          = "a lambda function must be safe, but there are exceptions that are not caught"s8
| THROWS_NOT_DECLARED                       = "the function %(y) might throw an exception of type %(y), but that is not declared in its prototype"s8
| THROWS_NOT_DECLARED_OVER                  = "the method might throw an exception of type %(y), but that is not covered by the method of the ancestor class"s8
| THROWS_NOT_USED                           = "the function %(y) prototype informs about a possible throw of an exception of type %(y), but this is not true"s8
| THROW_NO_FUNCTION                         = "throw statement is not within a function"s8
| THROW_SCOPE_GUARD                         = "cannot throw exception inside a scope guard"s8
| THROW_SCOPE_GUARD_RETHROW                 = "Rethrowing an exception of type %(y) inside a scope guard is forbidden"s8
| TOO_FEW_PARAMETERS                        = "%(y) parameters % expected, but %(y) % provided"s8
| TUPLE_ARITY_OVERFLOW                      = "tuple access out of bound (%(y)), tuple arity is %(y)"s8
| TUPLE_MATCHER                             = "tuple matcher only applies to tuple values not %(y)"s8
| TUPLE_PATTERN                             = "pattern %(y) only matches tuple values, not %(y)"s8
| TYPE_HAS_NO_FIELDINFO                     = "type %(y) has no fields"s8
| TYPE_HAS_NO_SIZE                          = "temporary type %(y) has no size"s8
| TYPE_HAS_NO_TYPEINFO                      = "temporary type %(y) has no type information"s8
| TYPE_NO_FIELD                             = "type %(y) has no field named %(y)"s8
| UFC_REWRITING                             = "when using uniform function call syntax"s8
| UNDEFINED_ATTRIBUTE                       = "attribute %(y) is not usable in this context"s8
| UNDEFINED_BIN_ACC_OP                      = "undefined operator %(y) for type %(y) and field %(y)"s8
| UNDEFINED_BIN_MOD_OP                      = "undefined module operator %(y) for %(y) and field %(y)"s8
| UNDEFINED_BIN_OP                          = "undefined operator %(y) for types %(y) and %(y)"s8
| UNDEFINED_BIN_OP_TOK                      = "undefined binary operator %(y)"s8
| UNDEFINED_CALL_OP                         = "the call operator is not defined for %(y) and %"s8
| UNDEFINED_CAST_OP                         = "cannot cast value of type %(y) into a value of type %(y)"s8
| UNDEFINED_CTOR_MACRO                      = "macro %(y) has no accessible constructors in that context"s8
| UNDEFINED_DOLLAR_OP                       = "operator @(y=$) is not defined for type %(y)"s8
| UNDEFINED_ESCAPE                          = "undefined escape sequence"s8
| UNDEFINED_INDEX_OP                        = "the index operator is not defined for type %(y) and %(y)"s8
| UNDEFINED_MACRO_CALL                      = "macro call is undefined for %(y)"s8
| UNDEFINED_REDIRECT_CALL_CTOR              = "no constructor is callable with the parameters %(y)"s8
| UNDEFINED_RULE_MACRO                      = "macro symbol %(y) has no rule named %(y)"s8
| UNDEFINED_SUPER_CALL_CTOR                 = "no constructor of the super class is callable with the parameters %(y)"s8
| UNDEFINED_TEMPLATE_CALL                   = "undefined template call for %(y) with %(y)"s8
| UNDEFINED_UN_OP                           = "undefined operator %(y) for type %(y)"s8
| UNDEFINED_UN_OP_TOK                       = "undefined operator unary operator %(y)"s8
| UNDEF_CTE_FOR_LOOP_OPERATOR               = "undefine cte for loop operator with %(y) iterator for type %(y)"s8
| UNDEF_DECORATOR_HERE                      = "decorator %(y) is not applicable in that context"s8
| UNDEF_DECORATOR_TEMPLATE                  = "decorator %(y) is not applicable in template specialization"s8
| UNDEF_DECORATOR_TYPE                      = "decorator %(y) is not applicable for types"s8
| UNDEF_DECORATOR_VALUE                     = "decorator %(y) is not applicable for values"s8
| UNDEF_FOR_LOOP_OPERATOR                   = "undefine for loop operator with %(y) iterator for type %(y)"s8
| UNDEF_VAR                                 = "undefined symbol %(y)"s8
| UNECESSARY_ADDRESS_METHOD                 = "the creation of a delegate from a method has no effect"s8
| UNECESSARY_ALIAS                          = "aliasing the value of type %(y) to create a constant borrowing is prohibited"s8
| UNECESSARY_ALIAS_CPTR_LOOP                = "aliasing the value of type %(y) to call @(y=begin) and @(y=end) iterator constant methods is useless"s8
| UNECESSARY_LAZY                           = "the construction of a lazy value has not effect"s8
| UNECESSARY_LMBD_COPY                      = "copy the lambda closure has no effect, no values are enclosed"s8
| UNECESSARY_MOVE                           = "the move has no effect"s8
| UNECESSARY_REFERENCE                      = "referencing the value has no effect"s8
| UNINIT_FIELD                              = "the field %(y) has no initial value"s8
| UNKNOWN_AT_COMPILE_TIME                   = "value of type %(y) is needed but unknown at compilation time"s8
| UNKNOWN_LENGTH_OF_EXPANSION               = "unknown length of expansion for type %(y)"s8
| UNKNOWN_PRAGMA                            = "unknown __pragma expression %(y)"s8
| UNREACHABLE_MATCHER                       = "matcher expression is never evaluated"s8
| UNREACHBLE_STATEMENT                      = "unreachable statement"s8
| UNRESOLVED_TEMPLATE                       = "unresolved template"s8
| UNSAFE_CALL                               = "call of unsafe function outside unsafe context"s8
| UNSAFE_OPERATION                          = "unsafe operation outside unsafe context"s8
| UNTERMINATED_ESCAPE                       = "unterminated escape sequence"s8
| USELESS_COND_FALSE                        = "conditional test is always evaluated to @(y=false), branch is never entered"s8
| USELESS_COND_TRUE                         = "conditional test is always evaluated to @(y=true), branch is always entered"s8
| USELESS_RUNTIME_ASSERT                    = "useless runtime assertion for a test that is always @(y=true)"s8
| USE_AS_TYPE                               = "expression produces a value, but is used as a type"s8
| USE_AS_TYPE_TEMPLATE                      = "template specialization expected a type not the value %(y)"s8
| USE_AS_TYPE_VAL                           = "expression produces a value of type %(y), but is used as a type"s8
| USE_AS_VALUE                              = "expression produces a type, but is used as a value"s8
| USE_AS_VALUE_TEMPLATE                     = "template specialization expected a value not the type %(y)"s8
| USE_AS_VALUE_TYPE                         = "expression produces the type %(y), but is used as a value"s8
| USE_GET_OP_ITERATOR                       = "calling the %(y) method for iterator %(y)"s8
| VALIDATING                                = "when validating"s8
| VALIDATING_SYMBOL                         = "when validating %(y)"s8
| VAR_DECL_WITHOUT_VALUE                    = "var declared without value, when necessary"s8
| VAR_DECL_WITH_NOTHING                     = "var declaration must at least have a type or a value"s8
| VOID_VALUE                                = "void expression cannot be used as a value"s8
| VOID_VAR                                  = "cannot create a variable of type void"s8
| WHEN_CREATING_VALUE                       = "when creating the value %(y)"s8
| WITHIN_TYPE                               = "within type %(y)"s8
| WORKS_WITH_BOTH                           = "%(y) called with %(y) works with multiple candidates"s8
 -> ValidateErrorMessage;
