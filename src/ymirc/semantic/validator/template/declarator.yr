mod ymirc::semantic::validator::template::declarator;

import std::collection::map;
import std::collection::vec;
import std::io;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::template::mapper;
import ymirc::semantic::validator::template::rewrite;
import ymirc::semantic::validator::errors;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::lexing::word;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;
import ymirc::errors::_;
import ymirc::utils::format;

import std::time::_;

/**
 * This class apply a template rewriter on a template value to finalize a template specialization and declare the templates
 * It also stores the template resolution, in order to avoid to declare the same template specialization multiple times
 */
pub class TemplateDeclarator {

    /// The list of template specialization that were already 
    let dmut _declaredKeys = HashMap!{[c8], dmut &Vec!{(&TemplateRewriter, &Word, usize)}}::new ();

    /// The list of template values that were declared
    let dmut _declaredValues = Vec!{dmut &Symbol}::new ();

    /**
     * Create an empty template declarator
     */
    pub self () {}


    /**
     * Declare a symbol generated from a template resolution
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location where the template specialization was required
     *    - rewriter: the rewriter that is used to rewrite the template syntax symbol
     *    - value: the symbol of the template to rewrite and declare
     * @returns: the symbol that have been declared
     * @throws:
     *   - &ErrorMsg: if the template rewrite, or declaration fails for some reason
     */
    pub fn declare (mut self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &Value)-> dmut &Symbol
        throws &ErrorMsg
    {
        match value {
            m : &TemplateRefMethodValue => {
                return self:.declareMethodSymbol (alias context, loc, rewriter, m);
            }
            c : &TemplateRefCtorValue => {
                return self:.declareCtorSymbol (alias context, loc, rewriter, c);
            }
            x : &TemplateRefValue => {
                return self:.declareStandardSymbol (alias context, loc, rewriter, x);
            }
            z : _ => { // What are you passing to the template declaration ??
                println ("TODO ? : ", z::typeinfo.name);
                __pragma!panic ();
            }
        }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * ========================            STANDARD             =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Declare a template symbol that was declared inside a module (in contrast to method and constructor templates)
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the specialization
     *    - rewriter: the rewriter constructed by the solver
     *    - value: the template reference value to declare
     * */
    fn declareStandardSymbol (mut self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &TemplateRefValue)-> dmut &Symbol
        throws &ErrorMsg
    {
        let dmut search = self:.find (value, rewriter);
        match ref search {
            Ok (dmut s : &Symbol) => return alias s;
            _ => {
                {
                    // Declare the template symbols in the symbol tree
                    let dmut ret = self.declareTemplateRefValue (alias context, loc, rewriter, value);
                    self:.registerTemplate (rewriter, value.getSymbol (), alias ret);

                    // Validate the symbol that was declared
                    context:.validate (alias ret);

                    return alias ret;
                } catch {
                    err : &ErrorMsg => {
                        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, value, rewriter), notes-> [err]);
                    }
                }
            }
        }
    }

    /**
     * Declare a template value that was never declared before
     * @params:
     *    - context: the context of the validation
     *    - loc: the location where the template specialization was required
     *    - rewriter: the rewriter that is used to rewrite the template syntax symbol
     *    - value: the symbol of the template to rewrite and declare
     * @returns: the symbol that have been declared
     * @throws:
     *   - &ErrorMsg: if the template rewrite, or declaration fails for some reason
     */
    fn declareTemplateRefValue (self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &TemplateRefValue)-> dmut &Symbol
        throws &ErrorMsg
    {
        let (toDeclare, finalRewriter) = self.performTemplateRewrite (alias context, loc, rewriter, value);

        let dmut declarator = alias context:.getDeclarator ();

        let dmut referent = context:.getSymbolFromRef (value.getSymbol ().getReferent ());
        let dmut ret = match (toDeclare, value) {
            (c : &ConstructorDecl, tmp : &TemplateRefCtorValue) => {
                let dmut cl = context:.getSymbolFromRef (tmp.getClassSymbol ());
                match ref cl  {
                    dmut classSym : &ClassSymbol => {
                        alias declarator:.declareConstructor (c, alias classSym, value.getSymbol ().getProtection ())
                    }
                    _ => __pragma!panic ();
                }
            }
            _ => {
                alias declarator:.declare (toDeclare, parent-> alias referent)
            }
        };

        declarator:.finalizeDeclaration (alias ret);
        ret:.setFromTemplate (finalRewriter.getTemplateMapper ()); // template symbols have a different name and are weak

        alias ret
    }

    /**
     * Perform the template rewriting and finalization of the template specialization
     * @info: this operation is performed just before the declaration of the newly created symbols
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the rewritting operation
     *    - rewriter: the rewriter created by template solving
     *    - value: the value to rewrite
     * @returns:
     *    - .0: the syntax declaration that was rewritten
     *    - .1: the template rewriter with all finalized symbols
     * */
    fn performTemplateRewrite (self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &TemplateRefValue)-> (&Declaration, &TemplateRewriter)
        throws &ErrorMsg
    {
        let mut mergedRewriter = match value.getSymbol ().getTemplateMapper () {
            Ok (map : _) => { TemplateRewriter::new (map.cloneMerge (rewriter.getTemplateMapper ())) }
            _ => { rewriter }
        };

        let mut templates = mergedRewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        let mut finalized = (templates.len == 0us);
        if (templates.len != 0us) { // maybe rest some templates but lambda validation will solve the rest
            {
                let (auxRewritter, _) = self.finalizeRewriter (alias context, mergedRewriter, templates);
                let rewrittenTemplates = auxRewritter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
                if (rewrittenTemplates.len == 0us) { finalized = true; } // it did, but we got only prototype, this is just a test
            } catch { _ => {} }
        }

        let syntaxSymbol = value.getSymbol ().getContent ().getContent ();

        let (toDeclare, finalRewriter) = if (!finalized) { // rest some unvalidated templates, so we need to return a template ref value
            (TemplateDecl::new (syntaxSymbol.getLoc (), ""s8, templates, test-> value.getSymbol ().getContent ().getTest (), syntaxSymbol), mergedRewriter)
        } else { // The templates are fully validated so we return a complete symbol
            let (newRewriter, frames) = self.finalizeRewriter (alias context, mergedRewriter, templates); // we finalize the rewritten for real this time
            for f in frames {
                context:.getLambdaValidator ():.insertGenerator (alias context, f);
            }

            let test = newRewriter.rewrite (value.getSymbol ().getContent ().getTest ());
            self.validateTemplateTest (alias context, loc, value, test); // Validation of the test

            (newRewriter.rewrite (syntaxSymbol), newRewriter)
        }

        (toDeclare, finalRewriter)
    }


    /**
     * Finalize the prototype of a function from a template rewritter (including older template specialization from TemplateRef is any)
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the rewritting
     *    - value: the template ref that has been specialized using the template rewritter
     *    - rewriter: the rewritter that successfully specialized the function
     *    - func: the function syntax to rewrite
     * @returns:
     *    - .0: the validated prototype of the function
     *    - .1: true if the function has a template test, and has passed it
     * */
    pub fn finalizeFunctionPrototype (mut self, dmut context : &Validator, loc : &Word, value : &TemplateRefValue, rewriter : &TemplateRewriter, func : &FunctionDecl)-> (&PrototypeValue, bool)
        throws &ErrorMsg
    {
        let (decl, test, finalRewriter) = self:.finalizePrototypeRewrite (alias context, loc, value, rewriter, func);
        let dmut sym = context:.getSymbolFromRef (value.getSymbol ());

        let funcProto = match decl {
            funcRewritten : &FunctionDecl => { // rewritten a function, and its test has passed
                match value { // validate only the prototype not the body
                    m : &TemplateRefMethodValue => {
                        cast!{&PrototypeValue} (context:.getFunctionValidator ():.validateMethodPrototypeFromTemplate (alias context, alias sym, funcRewritten,
                                                                                                                       m.getClassSymbol ().getClassRef ().asOf!{&ClassRefType} (),
                                                                                                                       finalRewriter))
                    }
                    _ => {
                        context:.getFunctionValidator ():.validateFuncPrototypeFromTemplate (alias context, alias sym, funcRewritten, finalRewriter)
                    }
                }
            }
            _ => __pragma!panic (); // this is not a function ?? so how do you expect a prototype
        };

        let hasTest = match test {
            EmptyExpression () => { false } // no test has been checked, so no additional score
            UnitExpr () => { false }
            _ => { true } // There was a test, so need to add some value to the specialization score
        };

        (funcProto, hasTest)
    }

    /**
     * Finalize the prototype of a ctor template that was specialized using the template solver
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the rewritting
     *    - value: the template ref that has been specialized using the template rewritter
     *    - rewriter: the rewritter that successfully specialized the function
     *    - ctor: the ctor syntax to rewrite
     * @returns:
     *    - .0: the validated prototype of the function
     *    - .1: true if the ctor has a template test, and has passed it
     * */
    pub fn finalizeCtorPrototype (mut self, dmut context : &Validator, loc : &Word, value : &TemplateRefCtorValue, rewriter : &TemplateRewriter, ctor : &ConstructorDecl)-> (&CtorPrototypeValue, bool)
        throws &ErrorMsg
    {
        let (decl, test, finalRewriter) = self:.finalizePrototypeRewrite (alias context, loc, value, rewriter, ctor);

        let dmut sym = context:.getSymbolFromRef (value.getSymbol ());
        let funcProto = match decl {
            ctorDecl : &ConstructorDecl => {
                context:.getFunctionValidator ():.validateCtorPrototypeFromTemplate (alias context, alias sym, ctorDecl,
                                                                                     value.getClassSymbol ().getClassRef ().asOf!{&ClassRefType} (),
                                                                                     finalRewriter)
            }
            _ => __pragma!panic ();
        };


        let hasTest = match test {
            EmptyExpression () => { false } // no test has been checked, so no additional score
            UnitExpr () => { false }
            _ => { true } // There was a test, so need to add some value to the specialization score
        };

        (funcProto, hasTest)
    }

    /**
     * Finalize the rewritting of the prototype of a function or a ctor that was specialized with a template solver
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the rewritting
     *    - value: the template ref that has been specialized using the template rewritter
     *    - rewriter: the rewritter that successfully specialized the function
     *    - decl: the declaration syntax to rewrite
     * @returns:
     *    - .0: the rewritten declaration
     *    - .1: the test expression that was rewritten
     *    - .2: the rewritten finalized (lambda, and stuff.)
     * */
    fn finalizePrototypeRewrite (mut self, dmut context : &Validator, loc : &Word, value : &TemplateRefValue, rewriter : &TemplateRewriter, decl : &Declaration)-> (&Declaration, &Expression, &TemplateRewriter)
        throws &ErrorMsg
    {
        let mergedRewriter = match value.getSymbol ().getTemplateMapper () {
            Ok (map : _) => { TemplateRewriter::new (map.cloneMerge (rewriter.getTemplateMapper ())) }
            _ => { rewriter }
        };

        let templates = mergedRewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        let (finalRewriter, _) = self.finalizeRewriter (alias context, mergedRewriter, templates);
        self.checkComplete (finalRewriter, value);

        let test = finalRewriter.rewrite (value.getSymbol ().getContent ().getTest ());
        self.validateTemplateTest (alias context, loc, value, test);

        let finalDecl = finalRewriter.rewrite (decl);

        (finalDecl, test, finalRewriter)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ========================            METHODS             ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Declare a static method that was declared as a template in a class symbol
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the specialization
     *     - rewriter: the rewriter defined during the template specialization
     *     - value: the method template ref to finalize
     * @returns: the symbol that was declared (a template method, or a )
     * */
    fn declareMethodSymbol (mut self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &TemplateRefMethodValue)-> dmut &Symbol
        throws &ErrorMsg
    {
        let dmut search = self:.find (value, rewriter);
        match ref search {
            Ok (dmut s : &Symbol) => return alias s;
            _ => {
                {
                    // Declare the template symbols in the symbol tree
                    let dmut ret = self.declareTemplateRefValue (alias context, loc, rewriter, value);
                    self:.registerTemplate (rewriter, value.getSymbol (), alias ret);

                    let clRef = value.getClassSymbol ().getClassRef ().asOf!{&ClassRefType} ();
                    match ref ret {
                        dmut f : &FunctionSymbol => {
                            context:.getFunctionValidator ():.validateMethod (alias context, alias f, clRef);
                        }
                    }

                    return alias ret;
                } catch {
                    err : &ErrorMsg => {
                        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, value, rewriter), notes-> [err]);
                    }
                }
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            CTORS             =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Declare a static ctor that was declared as a template in a class symbol
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the specialization
     *     - rewriter: the rewriter defined during the template specialization
     *     - value: the ctor template ref to finalize
     * @returns: the symbol that was declared (a template ctor, or a )
     * */
    fn declareCtorSymbol (mut self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &TemplateRefCtorValue)-> dmut &Symbol
        throws &ErrorMsg
    {
        let dmut search = self:.find (value, rewriter);
        match ref search {
            Ok (dmut s : &Symbol) => return alias s;
            _ => {
                {
                    // Declare the template symbols in the symbol tree
                    let dmut ret = self.declareTemplateRefValue (alias context, loc, rewriter, value);
                    self:.registerTemplate (rewriter, value.getSymbol (), alias ret);

                    let clRef = value.getClassSymbol ().getClassRef ().asOf!{&ClassRefType} ();
                    match ref ret {
                        dmut c : &ConstructorSymbol => {
                            context:.getFunctionValidator ():.validateConstructor (alias context, alias c, clRef);
                        }
                    }

                    return alias ret;
                } catch {
                    err : &ErrorMsg => {
                        throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, value, rewriter), notes-> [err]);
                    }
                }
            }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            COMMON             ========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Check if the template ref value is complete and can be used to call a function
     * @params:
     *     - context: the context of the validation
     *     - rewriter: the template specialization rewriter
     *     - value: the template ref being specialized
     * @throws:
     *     - &ErrorMsg: if there are still template parameters
     * */
    fn checkComplete (self, rewriter : &TemplateRewriter, value : &TemplateRefValue)
        throws &ErrorMsg
    {
        let templates = rewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        if (templates.len != 0us) {
            let dmut list = Vec!{&ErrorMsg}::new ();
            for i in templates {
                list:.push (ErrorMsg::fatal (i.getLoc (), ValidateErrorMessage::UNRESOLVED_TEMPLATE));
            }
            throw ErrorMsg::list (list[]);
        }
    }


    /**
     * Validate the test of template (assumed to be rewritten)
     * @params: 
     *    - context: the context of the specialization
     *    - loc: the location of the template specialization
     *    - value: the template that has been specialized
     *    - test: the rewritten test to check
     * @throws:
     *    - &ErrorMsg: if the test does not pass 
     */
    pub fn validateTemplateTest (self, dmut context : &Validator, loc : &Word, value : &TemplateRefValue, test : &Expression)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        if (!test.isOf!{&EmptyExpression} () && !test.isOf!{&UnitExpr} ())
        {
            context:.pushReferent (alias context:.getSymbolFromRef (value.getSymbol ()));
            context:.enterForeign (isFnBody-> true);
            context:.enterBlock ();
            
            {
                let val = context:.validateValue (test);
                if (!context:.getCompileTimeInterpreter ().computeBool (val)) {
                    errors:.push (ErrorMsg::fatal (loc, ValidateErrorMessage::TEMPLATE_TEST_FAILED));                
                }                
            } catch {
                err : &ErrorMsg => errors:.push (err);
            }        
            
            context:.quitBlock (warnUnused-> false);
            context:.popReferent ();
            context:.exitForeign ();
        }
        
        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
    }

    /**
     * Finalize a rewritter that is completed
     * The rewritter may contains some lambda values, that have to be finalized to complete the rewritter
     * @params :
     *    - context: the context of the finalization
     *    - rewriter: the rewriter to finalize
     * */
    fn finalizeRewriter (self, dmut context : &Validator, rewriter : &TemplateRewriter, rest : [&Expression])-> (&TemplateRewriter, [&FrameGenerator])
        throws &ErrorMsg
    {
        let oldMapper = rewriter.getTemplateMapper ();
        let dmut resultMapper = TemplateMapper::new (score-> oldMapper.getScore ());
        let oldMapping = oldMapper.getMapping ();
        let oldMutable = oldMapper.getMutables ();
        let oldDMutable = oldMapper.getDeeplyMutables ();
        let mut syntTemplate = rest;
        let auxRewriter = TemplateRewriter::new (resultMapper);
        let dmut frames = Vec!{&FrameGenerator}::new ();

        for n in oldMapper.getNameOrder () {
            match oldMapping.find (n) {
                Ok (lmbd : &LambdaValueWrapperExpr) => {
                    let (proto, retMapper, frame) = self.finalizeLambdaProto (alias context, rewriter.rewrite (lmbd.getType ()), lmbd.getValue (), syntTemplate);

                    frames:.push (frame);
                    resultMapper:.merge (retMapper);
                    resultMapper:.insert (n, ValueWrapperExpr::new (proto.getLoc (), proto), mutable-> false, deeplyMut-> false);

                    syntTemplate = auxRewriter.replaceSyntaxTempl (syntTemplate);
                }
                Ok (expr : &Expression) => {
                    resultMapper:.insert (n, expr, mutable-> n in oldMutable, deeplyMut-> n in oldDMutable);
                }
                _ => __pragma!panic ();
            }
        }

        (TemplateRewriter::new (resultMapper), frames[])
    }

    /**
     * Finalize a lambda value from the template rewriter
     * */
    fn finalizeLambdaProto (self, dmut context : &Validator, type : &Expression, value : &Value, templates : [&Expression])-> (&Value, &TemplateMapper, &FrameGenerator)
        throws &ErrorMsg
    {
        match type {
            f : &FunctionPtrTypeExpr => {
                let dmut paramTypes = Vec!{&Type}::new ();
                for i in f.getParameters () {
                    match i {
                        v : &VarDeclExpr => {
                            paramTypes:.push (context:.validateTypeForVarDecl (v.getType (), v, canBeRef-> true, canBeLazy-> true));
                        }
                        _ => __pragma!panic ();
                    }
                }

                let lmbd = value.asOf!{&LambdaValue} ();
                if (lmbd.getParameters ().len != paramTypes.len ()) {
                    throw ErrorMsg::fatal (value.getLoc (), format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, type, value),
                                           notes-> [ErrorMsg::fatal (f.getLoc (), format (ValidateErrorMessage::INCOMPATIBLE_VALUES, f, value))]);
                }

                let (proto, frame) = context:.getLambdaValidator ().validateLambdaBody (alias context, value.asOf!{&LambdaValue} (), paramTypes[]);
                let returnType = proto.getType ().asOf!{&FuncPtrType} ().getRetType ();
                let (retMapper, _) = context:.getTemplateSolver ().validateOfVarExprFromExplicit (alias context, templates, f.getReturn (), [returnType]);

                return (proto, retMapper, frame);
            }
            _ => __pragma!panic ();
        }
    }

    /**
     * Register a template symbol to avoid validating the same template specialization twice
     * @params:
     *    - rewriter: the rewriter used to specialize the template
     *    - sym: the template symbol that was specialized
     *    - ret: the rewriten, and validated symbol that was generated from the specialization
     * */
    fn registerTemplate (mut self, rewriter : &TemplateRewriter, sym : &Symbol, dmut ret : &Symbol) {
        self._declaredValues:.push (alias ret);
        let dmut fnd = self._declaredKeys:.find (sym.getLoc ().str ());
        match ref fnd {
            Ok (dmut lst : _) => {
                lst:.push ((rewriter, sym.getLoc (), self._declaredValues.len () - 1us));
            }
            _ => {
                let dmut v = Vec!{(&TemplateRewriter, &Word, usize)}::new ();
                v:.push ((rewriter, sym.getLoc (), self._declaredValues.len () - 1us));
                self._declaredKeys:.insert (sym.getLoc ().str (), alias v);
            }
        }
    }

    /**
     * Search in the list of old template validation if the given template specilalization was not already declared
     * @params: 
     *    - value: the value to rewrite
     *    - rewriter: the specialization    
     * @returns: the symbol, or Err (), if the template was never seen before
     */
    fn find (mut self, value : &TemplateRefValue, rewriter : &TemplateRewriter)-> dmut (&Symbol)? {
        match self._declaredKeys.find (value.getSymbol ().getLoc ().str ()) {
            Ok (lst : _) => {
                for it in 0us .. lst.len () {
                    if (lst [it]._1.isSame (value.getSymbol ().getLoc ()) &&
                        lst [it]._0 == rewriter) {
                        return (alias (alias self._declaredValues) [lst [it]._2])?;
                    }
                }
            }
        }

        return (dmut (&Symbol)?)::__err__;
    }
    
    
}
