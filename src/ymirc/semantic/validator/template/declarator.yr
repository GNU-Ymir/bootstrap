mod ymirc::semantic::validator::template::declarator;

import std::collection::map;
import std::collection::vec;
import std::io;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::template::mapper;
import ymirc::semantic::validator::template::rewrite;
import ymirc::semantic::validator::errors;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::lexing::word;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;
import ymirc::errors::_;
import ymirc::utils::format;

import std::time::_;

/**
 * This class apply a template rewriter on a template value to finalize a template specialization and declare the templates
 * It also stores the template resolution, in order to avoid to declare the same template specialization multiple times
 */
pub class TemplateDeclarator {

    /// The list of template specialization that were already 
    let dmut _declaredKeys = Vec!{(&TemplateRewriter, &Word)}::new ();

    /// The list of template values that were declared
    let dmut _declaredValues = Vec!{dmut &Symbol}::new ();

    /**
     * Create an empty template declarator
     */
    pub self () {}


    /**
     * Declare a symbol generated from a template resolution
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location where the template specialization was required
     *    - rewriter: the rewriter that is used to rewrite the template syntax symbol
     *    - value: the symbol of the template to rewrite and declare
     * @returns: the symbol that have been declared
     * @throws:
     *   - &ErrorMsg: if the template rewrite, or declaration fails for some reason
     */
    pub fn declare (mut self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &Value)-> dmut &Symbol
        throws &ErrorMsg
    {
        match value {
            x : &TemplateRefValue => {
                let dmut search = self:.find (x, rewriter);
                match ref search {
                    Ok (dmut s : &Symbol) => return alias s;
                    _ => {
                        {
                            // Declare the template symbols in the symbol tree
                            let dmut ret = self.declareTemplateRefValue (alias context, loc, rewriter, x);
                            self._declaredKeys:.push ((rewriter, x.getSymbol ().getLoc ())); // Store it so we declare/validate it only one time
                            self._declaredValues:.push (alias ret);

                            // Validate the symbol that was declared
                            context:.validate (alias ret);
 
                            return alias ret;
                        } catch {
                            err : &ErrorMsg => {
                                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, value, rewriter), notes-> [err]);
                            }
                        }
                    }
                }
            }
            m : &MethodTemplateValue => {
                println ("TODO ? : ", format ("%", m));
                __pragma!panic ();
            }
            z : _ => { // What are you passing to the template declaration ??
                println ("TODO ? : ", z::typeinfo.name);
                __pragma!panic ();
            }
        }
    }

    /**
     * Declare a template value that was never declared before
     * @params:
     *    - context: the context of the validation
     *    - loc: the location where the template specialization was required
     *    - rewriter: the rewriter that is used to rewrite the template syntax symbol
     *    - value: the symbol of the template to rewrite and declare
     * @returns: the symbol that have been declared
     * @throws:
     *   - &ErrorMsg: if the template rewrite, or declaration fails for some reason
     */
    fn declareTemplateRefValue (self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &TemplateRefValue)-> dmut &Symbol
        throws &ErrorMsg
    {
        let mut mergedRewriter = match value.getSymbol ().getTemplateMapper () {
            Ok (map : _) => { TemplateRewriter::new (map.cloneMerge (rewriter.getTemplateMapper ())) }
            _ => { rewriter }
        };

        let mut templates = mergedRewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        let mut finalized = (templates.len == 0us);
        if (templates.len != 0us) { // maybe rest some templates but lambda validation will solve the rest
            {
                let (auxRewritter, _) = self.finalizeRewriter (alias context, mergedRewriter, templates);
                let rewrittenTemplates = auxRewritter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
                if (rewrittenTemplates.len == 0us) { finalized = true; } // it did, but we got only prototype, this is just a test
            } catch { _ => {} }
        }

        let syntaxSymbol = value.getSymbol ().getContent ().getContent ();

        let (toDeclare, finalRewriter) = if (!finalized) { // rest some unvalidated templates, so we need to return a template ref value
            (TemplateDecl::new (syntaxSymbol.getLoc (), ""s8, templates, test-> value.getSymbol ().getContent ().getTest (), syntaxSymbol), mergedRewriter)
        } else { // The templates are fully validated so we return a complete symbol
            let (newRewriter, frames) = self.finalizeRewriter (alias context, mergedRewriter, templates); // we finalize the rewritten for real this time
            for f in frames {
                context:.getLambdaValidator ():.insertGenerator (alias context, f);
            }

            let test = newRewriter.rewrite (value.getSymbol ().getContent ().getTest ());
            self.validateTemplateTest (alias context, loc, value, test); // Validation of the test

            (newRewriter.rewrite (syntaxSymbol), newRewriter)
        }

        let dmut declarator = alias context:.getDeclarator ();
        let dmut referent = context:.getSymbolFromRef (value.getSymbol ().getReferent ());
        let dmut ret = alias declarator:.declare (toDeclare, parent-> alias referent);
        declarator:.finalizeDeclaration (alias ret);

        ret:.setFromTemplate (finalRewriter.getTemplateMapper ()); // template symbols have a different name and are weak
        alias ret
    }

    /**
     * Finalize the prototype of a function from a template rewritter (including older template specialization from TemplateRef is any)
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the rewritting
     *    - value: the template ref that has been specialized using the template rewritter
     *    - rewriter: the rewritter that successfully specialized the function
     *    - func: the function syntax to rewrite
     * @returns:
     *    - .0: the validated prototype of the function
     *    - .1: true if the function has a template test, and has passed it
     * */
    pub fn finalizeFunctionPrototype (mut self, dmut context : &Validator, loc : &Word, value : &TemplateRefValue, rewriter : &TemplateRewriter, func : &FunctionDecl)-> (&PrototypeValue, bool)
        throws &ErrorMsg
    {
        let mergedRewriter = match value.getSymbol ().getTemplateMapper () {
            Ok (map : _) => { TemplateRewriter::new (map.cloneMerge (rewriter.getTemplateMapper ())) }
            _ => { rewriter }
        };

        let templates = mergedRewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        let (finalRewriter, _) = self.finalizeRewriter (alias context, mergedRewriter, templates);
        self.checkComplete (finalRewriter, value);

        let test = finalRewriter.rewrite (value.getSymbol ().getContent ().getTest ());
        self.validateTemplateTest (alias context, loc, value, test);

        let decl = finalRewriter.rewrite (func);

        let (funcProto, hasTest) = match decl {
            funcRewritten : &FunctionDecl => { // rewritten a function, and its test has passed
                let dmut sym = context:.getSymbolFromRef (value.getSymbol ());
                let proto = match value { // validate only the prototype not the body
                    m : &TemplateMethodRefValue => {
                        cast!{&PrototypeValue} (context:.getFunctionValidator ():.validateMethodPrototypeFromTemplate (alias context, alias sym, funcRewritten,
                                                                                                                       m.getClassSymbol ().getClassRef ().asOf!{&ClassRefType} (),
                                                                                                                       finalRewriter))
                    }
                    _ => {
                        context:.getFunctionValidator ():.validateFuncPrototypeFromTemplate (alias context, alias sym, funcRewritten, finalRewriter)
                    }
                };

                (proto, match test {
                    EmptyExpression () => { false } // no test has been checked, so no additional score
                    _ => { true } // There was a test, so need to add some value to the specialization score
                })
            }
            _ => __pragma!panic (); // this is not a function ?? so how do you expect a prototype
        };

        return (funcProto, hasTest);
    }

    /**
     * Check if the template ref value is complete and can be used to call a function
     * @params:
     *     - context: the context of the validation
     *     - rewriter: the template specialization rewriter
     *     - value: the template ref being specialized
     * @throws:
     *     - &ErrorMsg: if there are still template parameters
     * */
    fn checkComplete (self, rewriter : &TemplateRewriter, value : &TemplateRefValue)
        throws &ErrorMsg
    {
        let templates = rewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        if (templates.len != 0us) {
            let dmut list = Vec!{&ErrorMsg}::new ();
            for i in templates {
                list:.push (ErrorMsg::fatal (i.getLoc (), ValidateErrorMessage::UNRESOLVED_TEMPLATE));
            }
            throw ErrorMsg::list (list[]);
        }
    }


    /**
     * Validate the test of template (assumed to be rewritten)
     * @params: 
     *    - context: the context of the specialization
     *    - loc: the location of the template specialization
     *    - value: the template that has been specialized
     *    - test: the rewritten test to check
     * @throws:
     *    - &ErrorMsg: if the test does not pass 
     */
    pub fn validateTemplateTest (self, dmut context : &Validator, loc : &Word, value : &TemplateRefValue, test : &Expression)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        if (!test.isOf!{&EmptyExpression} () && !test.isOf!{&UnitExpr} ())
        {
            context:.pushReferent (alias context:.getSymbolFromRef (value.getSymbol ()));
            context:.enterForeign (isFnBody-> true);
            context:.enterBlock ();
            
            {
                let val = context:.validateValue (test);
                if (!context:.getCompileTimeInterpreter ().computeBool (val)) {
                    errors:.push (ErrorMsg::fatal (loc, ValidateErrorMessage::TEMPLATE_TEST_FAILED));                
                }                
            } catch {
                err : &ErrorMsg => errors:.push (err);
            }        
            
            context:.quitBlock (warnUnused-> false);
            context:.popReferent ();
            context:.exitForeign ();
        }
        
        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
    }

    /**
     * Finalize a rewritter that is completed
     * The rewritter may contains some lambda values, that have to be finalized to complete the rewritter
     * @params :
     *    - context: the context of the finalization
     *    - rewriter: the rewriter to finalize
     * */
    fn finalizeRewriter (self, dmut context : &Validator, rewriter : &TemplateRewriter, rest : [&Expression])-> (&TemplateRewriter, [&FrameGenerator])
        throws &ErrorMsg
    {
        let oldMapper = rewriter.getTemplateMapper ();
        let dmut resultMapper = TemplateMapper::new (score-> oldMapper.getScore ());
        let oldMapping = oldMapper.getMapping ();
        let oldMutable = oldMapper.getMutables ();
        let oldDMutable = oldMapper.getDeeplyMutables ();
        let mut syntTemplate = rest;
        let auxRewriter = TemplateRewriter::new (resultMapper);
        let dmut frames = Vec!{&FrameGenerator}::new ();

        for n in oldMapper.getNameOrder () {
            match oldMapping.find (n) {
                Ok (lmbd : &LambdaValueWrapperExpr) => {
                    let (proto, retMapper, frame) = self.finalizeLambdaProto (alias context, rewriter.rewrite (lmbd.getType ()), lmbd.getValue (), syntTemplate);

                    frames:.push (frame);
                    resultMapper:.merge (retMapper);
                    resultMapper:.insert (n, ValueWrapperExpr::new (proto.getLoc (), proto), mutable-> false, deeplyMut-> false);

                    syntTemplate = auxRewriter.replaceSyntaxTempl (syntTemplate);
                }
                Ok (expr : &Expression) => {
                    resultMapper:.insert (n, expr, mutable-> n in oldMutable, deeplyMut-> n in oldDMutable);
                }
                _ => __pragma!panic ();
            }
        }

        (TemplateRewriter::new (resultMapper), frames[])
    }

    /**
     * Finalize a lambda value from the template rewriter
     * */
    fn finalizeLambdaProto (self, dmut context : &Validator, type : &Expression, value : &Value, templates : [&Expression])-> (&Value, &TemplateMapper, &FrameGenerator)
        throws &ErrorMsg
    {
        match type {
            f : &FunctionPtrTypeExpr => {
                let dmut paramTypes = Vec!{&Type}::new ();
                for i in f.getParameters () {
                    match i {
                        v : &VarDeclExpr => {
                            paramTypes:.push (context:.validateTypeForVarDecl (v.getType (), v, canBeRef-> true, canBeLazy-> true));
                        }
                        _ => __pragma!panic ();
                    }
                }

                let lmbd = value.asOf!{&LambdaValue} ();
                if (lmbd.getParameters ().len != paramTypes.len ()) {
                    throw ErrorMsg::fatal (value.getLoc (), format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, type, value),
                                           notes-> [ErrorMsg::fatal (f.getLoc (), format (ValidateErrorMessage::INCOMPATIBLE_VALUES, f, value))]);
                }

                let (proto, frame) = context:.getLambdaValidator ().validateLambdaBody (alias context, value.asOf!{&LambdaValue} (), paramTypes[]);
                let returnType = proto.getType ().asOf!{&FuncPtrType} ().getRetType ();
                let (retMapper, _) = context:.getTemplateSolver ().validateOfVarExprFromExplicit (alias context, templates, f.getReturn (), [returnType]);

                return (proto, retMapper, frame);
            }
            _ => __pragma!panic ();
        }
    }

    /**
     * Search in the list of old template validation if the given template specilalization was not already declared
     * @params: 
     *    - value: the value to rewrite
     *    - rewriter: the specialization    
     * @returns: the symbol, or Err (), if the template was never seen before
     */
    fn find (mut self, value : &TemplateRefValue, rewriter : &TemplateRewriter)-> dmut (&Symbol)? {
        for it in 0us .. self._declaredKeys.len () {            
            if (self._declaredKeys[it]._1.isSame (value.getSymbol ().getLoc ()) &&
                self._declaredKeys[it]._0 == rewriter) {
                return (alias (alias self._declaredValues) [it])?;
            }
        }

        return (dmut (&Symbol)?)::__err__;
    }
    
    
}
