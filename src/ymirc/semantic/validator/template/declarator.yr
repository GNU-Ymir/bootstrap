mod ymirc::semantic::validator::template::declarator;

import std::collection::map;
import std::collection::vec;
import std::io;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::template::mapper;
import ymirc::semantic::validator::template::rewrite;
import ymirc::semantic::validator::errors;
import ymirc::semantic::symbol::_;
import ymirc::semantic::generator::_;

import ymirc::lexing::word;
import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;
import ymirc::errors::_;
import ymirc::utils::format;

import std::time::_;

/**
 * This class apply a template rewriter on a template value to finalize a template specialization and declare the templates
 * It also stores the template resolution, in order to avoid to declare the same template specialization multiple times
 */
pub class TemplateDeclarator {

    /// The list of template specialization that were already 
    let dmut _declaredKeys = Vec!{(&TemplateRewriter, &Word)}::new ();

    /// The list of template values that were declared
    let dmut _declaredValues = Vec!{dmut &Symbol}::new ();
   
    /**
     * Create an empty template declarator
     */
    pub self () {}


    /**
     * Declare a symbol generated from a template resolution
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location where the template specialization was required
     *    - rewriter: the rewriter that is used to rewrite the template syntax symbol
     *    - value: the symbol of the template to rewrite and declare
     * @returns: the symbol that have been declared
     * @throws:
     *   - &ErrorMsg: if the template rewrite, or declaration fails for some reason
     */
    pub fn declare (mut self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &Value)-> dmut &Symbol
        throws &ErrorMsg
    {
        match value {
            x : &TemplateRefValue => {
                let dmut search = self:.find (x, rewriter);
                match ref search {
                    Ok (dmut s : &Symbol) => return alias s;
                    _ => {
                        {
                            // Declare the template symbols in the symbol tree
                            let dmut ret = self.declareTemplateRefValue (alias context, loc, rewriter, x);
                            self._declaredKeys:.push ((rewriter, x.getSymbol ().getLoc ())); // Store it so we declare/validate it only one time
                            self._declaredValues:.push (alias ret);

                            // Validate the symbol that was declared
                            context:.validate (alias ret);
 
                            return alias ret;
                        } catch {
                            err : &ErrorMsg => {
                                throw ErrorMsg::fatal (loc, format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, value, rewriter), notes-> [err]);
                            }
                        }
                    }
                }
            }
            _ => { // What are you passing to the template declaration ??
                __pragma!panic ();
            }
        }
    }

    /**
     * Declare a template value that was never declared before
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location where the template specialization was required
     *    - rewriter: the rewriter that is used to rewrite the template syntax symbol
     *    - value: the symbol of the template to rewrite and declare
     * @returns: the symbol that have been declared
     * @throws:
     *   - &ErrorMsg: if the template rewrite, or declaration fails for some reason
     */
    fn declareTemplateRefValue (self, dmut context : &Validator, loc : &Word, rewriter : &TemplateRewriter, value : &TemplateRefValue)-> dmut &Symbol
        throws &ErrorMsg
    {
        let templates = rewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        let syntaxSymbol = rewriter.rewrite (value.getSymbol ().getContent ().getContent ());
        let toDeclare = if (templates.len != 0us) { // rest some unvalidated templates, so we need to return a template ref value
            TemplateDecl::new (syntaxSymbol.getLoc (), ""s8, templates, test-> value.getSymbol ().getContent ().getTest (), syntaxSymbol)
        } else { // The templates are fully validated so we return a complete symbol
            let test = rewriter.rewrite (value.getSymbol ().getContent ().getTest ());
            self.validateTemplateTest (alias context, loc, value, test); // Validation of the test
            syntaxSymbol
        };

        let dmut declarator = alias context:.getDeclarator ();
        let dmut referent = context:.getSymbolFromRef (value.getSymbol ().getReferent ());

        let start = instant::now ();
        let dmut ret = alias declarator:.declare (toDeclare, parent-> alias referent);
        let end = instant::now ();
        context:.removeTime (end - start);

        //ret:.setReferent (alias referent);
        
        ret:.setFromTemplate (rewriter.simpleFormat (), rewriter.getTemplateMapper ()); // template symbols have a different name and are weak
        alias ret
    }

    /**
     * Validate the test of template (assumed to be rewritten)
     * @params: 
     *    - context: the context of the specialization
     *    - loc: the location of the template specialization
     *    - value: the template that has been specialized
     *    - test: the rewritten test to check
     * @throws:
     *    - &ErrorMsg: if the test does not pass 
     */
    pub fn validateTemplateTest (self, dmut context : &Validator, loc : &Word, value : &TemplateRefValue, test : &Expression)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        if (!test.isOf!{&EmptyExpression} () && !test.isOf!{&UnitExpr} ())
        {
            context:.pushReferent (alias context:.getSymbolFromRef (value.getSymbol ()));
            context:.enterForeign (isFnBody-> true);
            context:.enterBlock ();
            
            {
                let val = context:.validateValue (test);
                if (!context:.getCompileTimeInterpreter ().computeBool (val)) {
                    errors:.push (ErrorMsg::fatal (loc, ValidateErrorMessage::TEMPLATE_TEST_FAILED));                
                }                
            } catch {
                err : &ErrorMsg => errors:.push (err);
            }        
            
            context:.quitBlock (warnUnused-> false);
            context:.popReferent ();
            context:.exitForeign ();
        }
        
        if (errors.len () != 0us) throw ErrorMsg::list (errors[]);
    }
    

    /**
     * Search in the list of old template validation if the given template specilalization was not already declared
     * @params: 
     *    - value: the value to rewrite
     *    - rewriter: the specialization    
     * @returns: the symbol, or Err (), if the template was never seen before
     */
    fn find (mut self, value : &TemplateRefValue, rewriter : &TemplateRewriter)-> dmut (&Symbol)? {
        for it in 0us .. self._declaredKeys.len () {            
            if (self._declaredKeys[it]._1.isSame (value.getSymbol ().getLoc ()) &&
                self._declaredKeys[it]._0 == rewriter) {
                return (alias (alias self._declaredValues) [it])?;
            }
        }

        return (dmut (&Symbol)?)::__err__;
    }
    
    
}
