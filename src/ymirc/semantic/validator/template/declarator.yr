in declarator;

use std::{io, stream};
use ymirc::syntax::{_,
                    declaration::_,
                    expression::{_, literal::_, macro_::_, operator::_, template::_}};

use ymirc::semantic::validator::visitor;
use ymirc::semantic::validator::template::{mapper, rewrite};
use ymirc::semantic::validator::errors;
use ymirc::semantic::symbol::_;
use ymirc::semantic::generator::_;

use ymirc::lexing::word;
use ymirc::syntax::expression::_;
use ymirc::syntax::declaration::_;
use ymirc::errors::_;
use ymirc::utils::format;
use ymirc::semantic::generator::type::{_,
                                       syntax::_,
                                       custom::_,
                                       native::{_, scalar::_, compound::_},
                                       temporary::_};

use ymirc::semantic::generator::value::{_,
                                        construct::{_, delegate::_},
                                        literal::_,
                                        memory::_,
                                        syntax::_,
                                        operator::{_, binary::_, call::_, fields::_, map::_, slice::_, unary::_},
                                        operator::map::iteration::_,
                                        prototypes::_,
                                        scope::_,
                                        syntax::_,
                                        template::_};


/**
 * This class apply a template rewriter on a template value to finalize a template specialization and declare the templates
 * It also stores the template resolution, in order to avoid to declare the same template specialization multiple times
 */
pub class TemplateDeclarator {

    // The list of template specialization that were already
    // name => list (Templates, location, referent, index in self._declaredValues)
    let mut _declaredKeys : [[c8] => mut [(TemplateRewriter, &Word, usize, &Symbol)]] = copy [];

    // The list of template values that were declared
    let mut _declaredValues : [dmut &Symbol] = [];

    /**
     * Create an empty template declarator
     */
    pub self () {}

    /**
     * Declare a symbol generated from a template resolution
     * @params: 
     *    - context: the context of the validation
     *    - loc: the location where the template specialization was required
     *    - rewriter: the rewriter that is used to rewrite the template syntax symbol
     *    - value: the symbol of the template to rewrite and declare
     * @returns: the symbol that have been declared
     * @throws:
     *   - &ErrorMsg: if the template rewrite, or declaration fails for some reason
     */
    pub fn declare (mut self, dmut context : &Validator, loc : &Word, rewriter : TemplateRewriter, value : &Value)-> dmut &Symbol
        throws ErrorMsg
    {
        match value {
            m : &TemplateRefMethodValue => {
                return self:.declareMethodSymbol (alias context, loc, rewriter, m);
            }
            c : &TemplateRefCtorValue => {
                return self:.declareCtorSymbol (alias context, loc, rewriter, c);
            }
            x : &TemplateRefValue => {
                return self:.declareStandardSymbol (alias context, loc, rewriter, x);
            }
            z : _ => { // What are you passing to the template declaration ??
                println ("TODO ? : ", z.__typeinfo__.name);
                panic;
            }
        }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * ========================            STANDARD             =======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Declare a template symbol that was declared inside a module (in contrast to method and constructor templates)
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the specialization
     *    - rewriter: the rewriter constructed by the solver
     *    - value: the template reference value to declare
     * */
    fn declareStandardSymbol (mut self, dmut context : &Validator, loc : &Word, rewriter : TemplateRewriter, value : &TemplateRefValue)-> dmut &Symbol
        throws ErrorMsg
    {
        // Declare the template symbols in the symbol tree
        let (toDeclare, finalRewriter) = self.performTemplateRewrite (alias context, loc, rewriter, value);
        let dmut ret = alias self:.declareTemplateRefValue (alias context, loc, finalRewriter, value, toDeclare);
        if (ret._1) {
            {
                // Validate the symbol that was declared
                context:.validate (alias ret._0);
            } catch {
                err : &ErrorMsg => {
                    let fErr = copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, value, finalRewriter), notes-> copy [err]);;
                    self:.replace (finalRewriter, value.getSymbol (), copy ErrorSymbol (fErr));
                    throw fErr;
                }
            }
        }

        return alias ret._0;
    }

    /**
     * Declare a template value that was never declared before
     * @params:
     *    - context: the context of the validation
     *    - loc: the location where the template specialization was required
     *    - rewriter: the rewriter that is used to rewrite the template syntax symbol
     *    - value: the symbol of the template to rewrite and declare
     * @returns:
     *    - .0: the symbol that have been declared
     *    - .1: true, iif this is a new symbol
     * @throws:
     *   - &ErrorMsg: if the template rewrite, or declaration fails for some reason
     */
    fn declareTemplateRefValue (mut self, dmut context : &Validator, loc : &Word, finalRewriter : TemplateRewriter, value : &TemplateRefValue, toDeclare : &Declaration)-> dmut (&Symbol, bool)
        throws ErrorMsg
    {
        let dmut search = self:.find (value, finalRewriter);
        match alias search {
            Ok (dmut err : &ErrorSymbol) => throw err.getMessage ();
            Ok (dmut s : &Symbol) => {
                return (alias s, false);
            }
        }

        {
            let dmut declarator = alias context:.getDeclarator ();
            let dmut referent = context:.getSymbolFromRef (value.getSymbol ().getReferent ());
            let dmut ret = match (toDeclare, value) {
                (c : &ConstructorDecl, tmp : &TemplateRefCtorValue) => {
                    let dmut cl = context:.getSymbolFromRef (tmp.getClassSymbol ());
                    match alias cl  {
                        dmut classSym : &ClassSymbol => {
                            alias declarator.declareConstructor (c, alias classSym, value.getSymbol ().getProtection ())
                        }
                        _ => panic;
                    }
                }
                (c : &ClassDecl, _) => {
                    alias declarator:.declareClass (c, parent-> alias referent, value.getSymbol ().getProtection (), fromTemplate-> true)
                }
                _ => {
                    alias declarator:.declare (toDeclare, parent-> alias referent)
                }
            };

            declarator:.finalizeDeclaration (alias ret);
            ret:.setFromTemplate (finalRewriter.getTemplateMapper ()); // template symbols have a different name and are weak

            self:.registerTemplate (finalRewriter, value.getSymbol (), alias ret);
            return (alias ret, true);
        }  catch {
            err : &ErrorMsg => {
                let fErr = copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, value, finalRewriter), notes-> copy [err]);
                self:.replace (finalRewriter, value.getSymbol (), copy ErrorSymbol (fErr));
                throw fErr;
            }
        }
    }

    /**
     * @returns: true if all the template values are associated to a specialization
     * */
    pub fn isFinalized (self, rewriter : TemplateRewriter, value : &TemplateRefValue)-> bool {
        let mut mergedRewriter = match value.getSymbol ().getTemplateMapper () {
            Ok (map) => { TemplateRewriter (map.cloneMerge (rewriter.getTemplateMapper ())) }
            _ => { rewriter }
        };

        let mut templates = mergedRewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        (templates.len == 0us)
    }

    /**
     * Perform the template rewriting and finalization of the template specialization
     * @info: this operation is performed just before the declaration of the newly created symbols
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the rewritting operation
     *    - rewriter: the rewriter created by template solving
     *    - value: the value to rewrite
     * @returns:
     *    - .0: the syntax declaration that was rewritten
     *    - .1: the template rewriter with all finalized symbols
     * */
    fn performTemplateRewrite (self, dmut context : &Validator, loc : &Word, rewriter : TemplateRewriter, value : &TemplateRefValue)-> (&Declaration, TemplateRewriter)
        throws ErrorMsg
    {
        let mut mergedRewriter = match value.getSymbol ().getTemplateMapper () {
            Ok (map) => { TemplateRewriter (map.cloneMerge (rewriter.getTemplateMapper ())) }
            _ => { rewriter }
        };

        let mut templates = mergedRewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        let mut finalized = (templates.len == 0us);
        if (templates.len != 0us) { // maybe rest some templates but lambda validation will solve the rest
            {
                let (auxRewriter, _) = self.finalizeRewriter (alias context, mergedRewriter, templates);
                let rewrittenTemplates = auxRewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
                if (rewrittenTemplates.len == 0us) { finalized = true; } // it did, but we got only prototype, this is just a test
            } catch { _ => {} }
        }

        let syntaxSymbol = value.getSymbol ().getContent ().getContent ();

        let (toDeclare, finalRewriter) = if (!finalized) { // rest some unvalidated templates, so we need to return a template ref value
            (copy TemplateDecl (syntaxSymbol.getLoc (), "", templates, test-> value.getSymbol ().getContent ().getTest (), syntaxSymbol), mergedRewriter)
        } else { // The templates are fully validated so we return a complete symbol
            let (newRewriter, frames) = self.finalizeRewriter (alias context, mergedRewriter, templates); // we finalize the rewritten for real this time
            for f in frames {
                context:.getLambdaValidator ().insertGenerator (alias context, f);
            }

            let test = newRewriter.rewrite (value.getSymbol ().getContent ().getTest ());
            self.validateTemplateTest (alias context, loc, value, test); // Validation of the test

            (newRewriter.rewrite (syntaxSymbol), newRewriter)
        }

        (toDeclare, finalRewriter)
    }


    /**
     * Finalize the prototype of a function from a template rewriter (including older template specialization from TemplateRef is any)
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the rewritting
     *    - value: the template ref that has been specialized using the template rewriter
     *    - rewriter: the rewriter that successfully specialized the function
     *    - func: the function syntax to rewrite
     * @returns:
     *    - .0: the validated prototype of the function
     *    - .1: true if the function has a template test, and has passed it
     * */
    pub fn finalizeFunctionPrototype (mut self, dmut context : &Validator, loc : &Word, value : &TemplateRefValue, rewriter : TemplateRewriter, func : &FunctionDecl)-> (&PrototypeValue, bool)
        throws ErrorMsg
    {
        let (decl, test, finalRewriter) = self:.finalizePrototypeRewrite (alias context, loc, value, rewriter, func);
        let dmut sym = context:.getSymbolFromRef (value.getSymbol ());

        let funcProto = if let funcRewritten : &FunctionDecl = decl { // rewritten a function, and its test has passed
            if let m : &TemplateRefMethodValue = value { // validate only the prototype not the body
                cast!{&PrototypeValue} (context:.getFunctionValidator ():.validateMethodPrototypeFromTemplate (alias context, alias sym, funcRewritten,
                                                                                                               m.getClassSymbol ().getClassRef ().asOf!{&ClassRefType} (),
                                                                                                               finalRewriter))
            } else {
                context:.getFunctionValidator ():.validateFuncPrototypeFromTemplate (alias context, alias sym, funcRewritten, finalRewriter)
            }
        } else panic; // this is not a function ?? so how do you expect a prototype

        (funcProto, (test !of EmptyExpression))
    }

    /**
     * Finalize the prototype of a ctor template that was specialized using the template solver
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the rewritting
     *    - value: the template ref that has been specialized using the template rewriter
     *    - rewriter: the rewriter that successfully specialized the function
     *    - ctor: the ctor syntax to rewrite
     * @returns:
     *    - .0: the validated prototype of the function
     *    - .1: true if the ctor has a template test, and has passed it
     * */
    pub fn finalizeCtorPrototype (mut self, dmut context : &Validator, loc : &Word, value : &TemplateRefCtorValue, rewriter : TemplateRewriter, ctor : &ConstructorDecl)-> (&CtorPrototypeValue, bool)
        throws ErrorMsg
    {
        let (decl, test, finalRewriter) = self:.finalizePrototypeRewrite (alias context, loc, value, rewriter, ctor);

        let dmut sym = context:.getSymbolFromRef (value.getSymbol ());
        let funcProto = if let ctorDecl : &ConstructorDecl = decl {
            context:.getFunctionValidator ():.validateCtorPrototypeFromTemplate (alias context, alias sym, ctorDecl,
                                                                                 value.getClassSymbol ().getClassRef ().asOf!{&ClassRefType} (),
                                                                                 finalRewriter)
        } else panic;

        (funcProto, (test !of EmptyExpression))
    }

    /**
     * Finalize the rewritting of the prototype of a function or a ctor that was specialized with a template solver
     * @params:
     *    - context: the context of the validation
     *    - loc: the location of the rewritting
     *    - value: the template ref that has been specialized using the template rewriter
     *    - rewriter: the rewriter that successfully specialized the function
     *    - decl: the declaration syntax to rewrite
     * @returns:
     *    - .0: the rewritten declaration
     *    - .1: the test expression that was rewritten
     *    - .2: the rewritten finalized (lambda, and stuff.)
     * */
    fn finalizePrototypeRewrite (mut self, dmut context : &Validator, loc : &Word, value : &TemplateRefValue, rewriter : TemplateRewriter, decl : &Declaration)-> (&Declaration, &Expression, TemplateRewriter)
        throws ErrorMsg
    {
        let mergedRewriter = match value.getSymbol ().getTemplateMapper () {
            Ok (map) => {
                TemplateRewriter (map.cloneMerge (rewriter.getTemplateMapper ()))
            }
            _ => { rewriter }
        };

        let templates = mergedRewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        let (finalRewriter, _) = self.finalizeRewriter (alias context, mergedRewriter, templates);
        self.checkComplete (finalRewriter, value);

        let test = finalRewriter.rewrite (value.getSymbol ().getContent ().getTest ());
        self.validateTemplateTest (alias context, loc, value, test);

        let finalDecl = finalRewriter.rewrite (decl);

        (finalDecl, test, finalRewriter)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ========================            METHODS             ========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Declare a static method that was declared as a template in a class symbol
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the specialization
     *     - rewriter: the rewriter defined during the template specialization
     *     - value: the method template ref to finalize
     * @returns: the symbol that was declared (a template method, or a )
     * */
    fn declareMethodSymbol (mut self, dmut context : &Validator, loc : &Word, rewriter : TemplateRewriter, value : &TemplateRefMethodValue)-> dmut &Symbol
        throws ErrorMsg
    {
        // Declare the template symbols in the symbol tree
        let (toDeclare, finalRewriter) = self.performTemplateRewrite (alias context, loc, rewriter, value);
        let dmut ret = alias self:.declareTemplateRefValue (alias context, loc, finalRewriter, value, toDeclare);
        if (ret._1) {
            if let clRef : &ClassRefType = value.getClassSymbol ().getClassRef () {
                {
                    if let dmut f : &FunctionSymbol = alias ret._0 {
                        context:.getFunctionValidator ():.validateMethod (alias context, alias f, clRef);
                    }
                } catch {
                    err : &ErrorMsg => {
                        let fErr = copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, value, finalRewriter), notes-> copy [err]);
                        self:.replace (finalRewriter, value.getSymbol (), copy ErrorSymbol (fErr));
                        throw fErr;
                    }
                }
            } else panic;
        }

        return alias ret._0;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            CTORS             =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Declare a static ctor that was declared as a template in a class symbol
     * @params:
     *     - context: the context of the validation
     *     - loc: the location of the specialization
     *     - rewriter: the rewriter defined during the template specialization
     *     - value: the ctor template ref to finalize
     * @returns: the symbol that was declared (a template ctor, or a )
     * */
    fn declareCtorSymbol (mut self, dmut context : &Validator, loc : &Word, rewriter : TemplateRewriter, value : &TemplateRefCtorValue)-> dmut &Symbol
        throws ErrorMsg
    {
        // Declare the template symbols in the symbol tree
        let (toDeclare, finalRewriter) = self.performTemplateRewrite (alias context, loc, rewriter, value);
        let dmut ret = self:.declareTemplateRefValue (alias context, loc, finalRewriter, value, toDeclare);
        if (ret._1) {
            if let clRef : &ClassRefType = value.getClassSymbol ().getClassRef () {
                {
                    if let dmut c : &ConstructorSymbol = alias ret._0 {
                        context:.getFunctionValidator ():.validateConstructor (alias context, alias c, clRef);
                    }
                } catch {
                    err : &ErrorMsg => {
                        let fErr = copy ErrorMsg::fatal (loc, format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, value, finalRewriter), notes-> copy [err]);
                        self:.replace (finalRewriter, value.getSymbol (), copy ErrorSymbol (fErr));
                        throw fErr;
                    }
                }
            } else panic;
        }

        return alias ret._0;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            COMMON             ========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Check if the template ref value is complete and can be used to call a function
     * @params:
     *     - context: the context of the validation
     *     - rewriter: the template specialization rewriter
     *     - value: the template ref being specialized
     * @throws:
     *     - &ErrorMsg: if there are still template parameters
     * */
    fn checkComplete (self, rewriter : TemplateRewriter, value : &TemplateRefValue)
        throws ErrorMsg
    {
        let templates = rewriter.replaceSyntaxTempl (value.getSymbol ().getContent ().getParameters ());
        if (templates.len != 0us) {
            throw copy ErrorMsg::list (copy [copy ErrorMsg::fatal (i.getLoc (), ValidateErrorMessage::UNRESOLVED_TEMPLATE) for i in templates]);
        }
    }

    /**
     * Validate the test of template (assumed to be rewritten)
     * @params: 
     *    - context: the context of the specialization
     *    - loc: the location of the template specialization
     *    - value: the template that has been specialized
     *    - test: the rewritten test to check
     * @throws:
     *    - &ErrorMsg: if the test does not pass 
     */
    pub fn validateTemplateTest (self, dmut context : &Validator, loc : &Word, value : &TemplateRefValue, test : &Expression)
        throws ErrorMsg
    {
        let mut errors : [mut &ErrorMsg] = [];
        if (test !of EmptyExpression) {
            context:.pushReferent (alias context:.getSymbolFromRef (value.getSymbol ()));
            context:.enterForeign (isFnBody-> true);
            context:.enterBlock ();
            
            {
                let val = context:.validateValue (test);
                if (!context:.getCompileTimeInterpreter ():.computeBool (val)) {
                    errors ~= [copy ErrorMsg::fatal (loc, end-> test.getLoc (), ValidateErrorMessage::TEMPLATE_TEST_FAILED)];
                }                
            } catch {
                err : &ErrorMsg => { errors ~= [err] };
            }        
            
            context:.quitBlock (warnUnused-> false);
            context:.popReferent ();
            context:.exitForeign ();
        }
        
        if (errors.len != 0us) throw copy ErrorMsg::list (errors);
    }

    /**
     * Finalize a rewriter that is completed
     * The rewriter may contains some lambda values, that have to be finalized to complete the rewriter
     * @params :
     *    - context: the context of the finalization
     *    - rewriter: the rewriter to finalize
     * */
    fn finalizeRewriter (self, dmut context : &Validator, rewriter : TemplateRewriter, rest : [&Expression])-> (TemplateRewriter, [&FrameGenerator])
        throws ErrorMsg
    {
        let oldMapper = rewriter.getTemplateMapper ();
        let dmut resultMapper = TemplateMapper (score-> oldMapper.getScore ());
        let oldMapping = oldMapper.getMapping ();
        let oldMutable = oldMapper.getMutables ();
        let oldDMutable = oldMapper.getDeeplyMutables ();
        let mut syntTemplate = rest;
        let auxRewriter = TemplateRewriter (resultMapper);
        let mut frames : [mut &FrameGenerator] = [];

        for n in oldMapper.getNameOrder () match oldMapping [n] {
            Ok (lmbd : &LambdaValueWrapperExpr) => {
                let (proto, retMapper, frame) = self.finalizeLambdaProto (alias context, rewriter.rewriteFuncPtrType (lmbd.getType ()), lmbd.getValue (), syntTemplate);

                frames ~= [frame];
                resultMapper:.merge (retMapper);
                resultMapper:.insert (n, copy ValueWrapperExpr (proto.getLoc (), proto), mutable-> false, deeplyMut-> false);

                syntTemplate = auxRewriter.replaceSyntaxTempl (syntTemplate);
            }
            Ok (expr : &Expression) => {
                resultMapper:.insert (n, expr, mutable-> n in oldMutable, deeplyMut-> n in oldDMutable);
            }
            _ => panic;
        }

        (TemplateRewriter (resultMapper), frames)
    }

    /**
     * Finalize a lambda value from the template rewriter
     * */
    fn finalizeLambdaProto (self, dmut context : &Validator, f : &FunctionPtrTypeExpr, value : &Value, templates : [&Expression])-> (&Value, TemplateMapper, &FrameGenerator)
        throws ErrorMsg
    {
        let mut paramTypes : [mut &Type] = copy [context:.validateTypeForVarDecl (v.getType (), v, canBeRef-> true, canBeLazy-> true) for v in f.getParameters ()];
        if let lmbd : &LambdaValue = value {
            if (lmbd.getParameters ().len != paramTypes.len) {
                throw copy ErrorMsg::fatal (value.getLoc (), format (ValidateErrorMessage::TEMPLATE_SPECIALIZATION_FAILS, f, value),
                                            notes-> copy [copy ErrorMsg::fatal (f.getLoc (), format (ValidateErrorMessage::INCOMPATIBLE_VALUES, f, value))]);
            }

            let (proto, frame) = context:.getLambdaValidator ():.validateLambdaBody (alias context, value.asOf!{&LambdaValue} (), paramTypes);
            if let returnType : &FuncPtrType = proto.getType () {
                let (retMapper, _) = context:.getTemplateSolver ().validateOfVarExprFromExplicit (alias context, templates, f.getReturn (), copy [returnType.getRetType ()]);
                return (proto, retMapper, frame);
            }
        }

        panic;
    }

    /**
     * Register a template symbol to avoid validating the same template specialization twice
     * @params:
     *    - rewriter: the rewriter used to specialize the template
     *    - sym: the template symbol that was specialized
     *    - ret: the rewritten, and validated symbol that was generated from the specialization
     * */
    fn registerTemplate (mut self, rewriter : TemplateRewriter, sym : &Symbol, dmut ret : &Symbol) {
        let referent = sym.getReferent ();
        self._declaredValues ~= [alias ret];
        if let Ok (lst) = self._declaredKeys [sym.getLoc ().str] {
            let r = (lst ~ [(rewriter, sym.getLoc (), self._declaredValues.len - 1, referent)]);
            self._declaredKeys [sym.getLoc ().str] = r;
        } else {
            self._declaredKeys [sym.getLoc ().str] = copy [(rewriter, sym.getLoc (), self._declaredValues.len - 1us, referent)];
        }
    }

    /**
     * Search in the list of old template validation if the given template specilalization was not already declared
     * @params:
     *    - value: the value to rewrite
     *    - rewriter: the specialization
     * @returns: the symbol, or Err (), if the template was never seen before
     */
    fn find (mut self, value : &TemplateRefValue, rewriter : TemplateRewriter)-> dmut (&Symbol)? {
        let referent = value.getSymbol ().getReferent ();
        if let Ok (lst) = self._declaredKeys [value.getSymbol ().getLoc ().str] {
            for i in 0 .. lst.len {
                if (lst [i]._1.isSame (value.getSymbol ().getLoc ()) &&
                    lst [i]._0 == rewriter &&
                    lst [i]._3 is referent) {
                    return (alias self._declaredValues [lst [i]._2])?;
                }
            }
        }

        none
    }

    fn replace (mut self, rewriter : TemplateRewriter, sym : &Symbol, dmut ret : &Symbol) {
        let referent = sym.getReferent ();
        if let Ok (lst) = self._declaredKeys [sym.getLoc ().str] {
            for i in 0 .. lst.len {
                if (lst [i]._1.isSame (sym.getLoc ()) &&
                    lst [i]._0 == rewriter &&
                    lst [i]._3 is referent) {
                    self._declaredValues [lst [i]._2] = alias ret;
                }
            }
        }
    }
    
}
