mod ymirc::semantic::validator::template::mapper;

import std::collection::map;
import std::collection::vec;
import std::io;

import ymirc::syntax::expression::_;
import ymirc::errors::_;
import ymirc::utils::format;

pub enum
| VAR = 1u32
| TYPE = 2u32
| VALUE = 3u32
 -> TemplateScore;


/**
 * The template mapper class is a class containing a validation of a template specialization
 * It is constructed by a template resolution, and used to perform the rewritte of the template symbol into another symbol
 */
pub class TemplateMapper {

    /// The score of the specialization
    let mut _score : u32 = 0u32;

    /// The association between identifier to expression rewritte
    let dmut _mapping = HashMap!{[c8], &Expression}::new ();

    /// The order of the name (order of the _mapping map, that has no guaranteed order)
    let dmut _nameOrder = Vec!{[c8]}::new ();

    /**
     * Create an empty mapper
     */
    pub self (score : u32 = 0u32)
        with _score = score
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the score of the mapper
     */
    pub def getScore (self)-> u32 {
        self._score
    }

    /**
     * @returns: the list of mapping association (name to syntax expression)
     */
    pub def getMapping (self)-> &HashMap!{[c8], &Expression} {
        self._mapping
    }

    pub def hasValidated (self, name : [c8])-> bool {
        match self._mapping.find (name) {
            Ok () => { true }
            _ => { false }
        }
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Insert a new template specialization in the mapper
     * @params: 
     *    - name: the name of the specialization
     *    - expr: the associated expr
     */
    pub def insert (mut self, name : [c8], expr : &Expression) {
        self._nameOrder:.push (name);
        self._mapping:.insert (name, expr);
    }
    
    /**
     * ================================================================================
     * ================================================================================
     * =========================          OPERATION           =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * Merge the template mapper with another template mapper
     * @params: 
     *    - other: the other mapper that will include information in self
     * @returns: self
     */
    pub def merge (mut self, other : &TemplateMapper)-> dmut &TemplateMapper {    
        for i, j in other._mapping {
            match self._mapping.find (i) {
                Ok () => { __pragma!panic (); }
                _ => {
                    self._mapping:.insert (i, j);
                }
            }
        }

        for i in other._nameOrder {
            self._nameOrder:.push (i);
        }
        
        self._score += other._score;

        alias self
    }

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('{'c8);
            let mut z = 0us;
            for i in self._nameOrder {
                match self._mapping.find (i) {
                    Ok (x : _) => {
                        if (z != 0us) stream:.write (", "s8);
                        stream:.write (i, "=> "s8, x);
                        z += 1us;
                    }
                }
            }
            stream:.write ('}'c8);
        }
    }
    
}
