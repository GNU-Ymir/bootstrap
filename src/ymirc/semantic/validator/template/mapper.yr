mod ymirc::semantic::validator::template::mapper;

import std::collection::map;
import std::collection::vec;
import std::collection::set;
import std::io;

import ymirc::syntax::expression::_;
import ymirc::errors::_;
import ymirc::utils::format;


pub enum
| VAR = 1u32
| TYPE = 2u32
| VALUE = 3u32
 -> TemplateScore;


/**
 * The template mapper class is a class containing a validation of a template specialization
 * It is constructed by a template resolution, and used to perform the rewrite of the template symbol into another symbol
 */
pub class TemplateMapper {

    /// The score of the specialization
    let mut _score : u32 = 0u32;

    /// The association between identifier to expression rewritte
    let dmut _mapping = HashMap!{[c8], &Expression}::new ();

    /// The order of the name (order of the _mapping map, that has no guaranteed order)
    let dmut _nameOrder = Vec!{[c8]}::new ();

    // The list of templates that are mutable
    let dmut _mutable = HashSet!{[c8]}::new ();

    // The list of templates that are deeply mutable
    let dmut _deeplyMutable = HashSet!{[c8]}::new ();

    /**
     * Create an empty mapper
     */
    pub self (score : u32 = 0u32)
        with _score = score
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the score of the mapper
     */
    pub fn getScore (self)-> u32 {
        self._score
    }

    /**
     * @returns: the list of mapping association (name to syntax expression)
     */
    pub fn getMapping (self)-> &HashMap!{[c8], &Expression} {
        self._mapping
    }

    /**
     * @returns: the name order of the templates
     * */
    pub fn getNameOrder (self)-> [[c8]] {
        self._nameOrder[]
    }

    /**
     * @returns: the list of mapper sorted by name order
     * */
    pub fn getMapperSorted (self)-> [&Expression] {
        let dmut vec = Vec!{&Expression}::new ();
        for i in self._nameOrder match self._mapping.find (i) {
            Ok (x : _) => vec:.push (x);
        }

        vec[]
    }

    pub fn getMutables (self)-> &HashSet!{[c8]} {
        self._mutable
    }

    pub fn getDeeplyMutables (self)-> &HashSet!{[c8]} {
        self._deeplyMutable
    }

    pub fn hasValidated (self, name : [c8])-> bool {
        match self._mapping.find (name) {
            Ok () => { true }
            _ => { false }
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Insert a new template specialization in the mapper
     * @params: 
     *    - name: the name of the specialization
     *    - expr: the associated expr
     */
    pub fn insert (mut self, name : [c8], expr : &Expression, mutable : bool = false, deeplyMut : bool = false) {
        self._nameOrder:.push (name);
        self._mapping:.insert (name, expr);

        if (deeplyMut) self._deeplyMutable:.insert (name);
        else if (mutable) self._mutable:.insert (name);
    }

    /**
     * Remove a template mapper name from the mapper
     * @params:
     *    - name: the mapper to remove
     * */
    pub fn remove (mut self, name : [c8]) {
        match self._mapping.find (name) {
            Ok () => {
                self._mapping:.remove (name);
                self._mutable:.remove (name);
                self._deeplyMutable:.remove (name);

                let dmut order = Vec!{[c8]}::new ();
                for j in self._nameOrder {
                    if j != name { order:.push (j); }
                }

                self._nameOrder = alias order;
            }
        }
    }

    /**
     * Add some score to the template mapper
     * */
    pub fn addScore (mut self, score : u32) {
        self._score += score;
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          OPERATION           =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * Merge the template mapper with another template mapper
     * @params:
     *    - other: the other mapper that will include information in self
     *    - replace: true iif replace association when key is already in self
     * @returns: self
     */
    pub fn merge (mut self, other : &TemplateMapper, replace : bool = false)-> dmut &TemplateMapper {
        for i in other._nameOrder {
            let insert = match self._mapping.find (i) {
                Ok () => { replace }
                _ => { true }
            };

            if (insert) {
                match other._mapping.find (i) {
                    Ok (v : _) => {
                        self._nameOrder:.push (i);
                        self._mapping:.insert (i, v);
                    }
                    _ => __pragma!panic ();
                }

                if (i in other._mutable) self._mutable:.insert (i);
                if (i in other._deeplyMutable) self._deeplyMutable:.insert (i);

            };
        }

        self._score += other._score;
        alias self
    }

    /**
     * Clone self and merge it with another template mapper
     * @params:
     *    - other: the other mapper that will include information in the clone of self
     * @returns: self
     */
    pub fn cloneMerge (self, other : &TemplateMapper)-> dmut &TemplateMapper {
        let dmut newM = TemplateMapper::new (score-> self._score);
        for i in self._nameOrder {
            newM._nameOrder:.push (i);
        }
        for i in self._mutable {
            newM._mutable:.insert (i);
        }
        for i in self._deeplyMutable {
            newM._deeplyMutable:.insert (i);
        }
        for i, j in self._mapping {
            newM._mapping:.insert (i, j);
        }

        return alias newM:.merge (other);
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true iif self and other are strictly equivalent
     */
    pub fn opEquals (self, other : &TemplateMapper)-> bool {
        if (self._nameOrder.len () != other._nameOrder.len ()) return false;
        if (self._mapping.len () != other._mapping.len ()) return false;

        for i in self._nameOrder {
            match (self._mapping.find (i), other._mapping.find (i)) {
                (Ok (x : _), Ok (y : _)) => {
                    if (x != y) return false;
                }
                _ => { return false; }
            }
        }

        true
    }
    
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MISC             =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {

        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('{'c8);
            let mut z = 0us;
            for i in self._nameOrder {
                match self._mapping.find (i) {
                    Ok (x : _) => {
                        if (z != 0us) stream:.write (", "s8);
                        if (i in self._mutable) stream:.write ("mut ");
                        else if (i in self._deeplyMutable) stream:.write ("dmut ");

                        stream:.write (i, "=> "s8, x);
                        z += 1us;
                    }
                }
            }
            stream:.write ('}'c8);
        }
    }

    /**
     * @returns: the mapper into a string (with less information than using format)
     */
    pub fn simpleFormat (self)-> [c8] {
        let dmut stream = Formatter::new ();
        stream:.write ('{'c8);
        let mut z = 0us;
        for i in self._nameOrder {
            match self._mapping.find (i) {
                Ok (x : _) => {
                    if (z != 0us) stream:.write (", "s8);
                    if (i in self._mutable) stream:.write ("mut ");
                    else if (i in self._deeplyMutable) stream:.write ("dmut ");

                    stream:.write (x);
                    z += 1us;
                }
            }
        }
        stream:.write ('}'c8);
        stream[]
    }
    
}
