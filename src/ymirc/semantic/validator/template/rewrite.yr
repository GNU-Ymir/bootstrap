mod ymirc::semantic::validator::template::rewrite;

import std::collection::map;
import std::collection::vec;
import std::io;

import ymirc::syntax::expression::_;
import ymirc::syntax::declaration::_;
import ymirc::errors::_;

import ymirc::semantic::validator::template::mapper;

/**
 * This class is used to apply a template mapper to expressions, declarations, etc.
 */
pub class TemplateRewriter {

    /// The mapper that will be applied to expressions
    let _mapper : &TemplateMapper;
    
    /**
     * Create an empty rewritter
     */
    pub self (mapper : &TemplateMapper)
        with _mapper = mapper
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           SYMBOLS            =========================
     * ================================================================================
     * ================================================================================
     */

    
    /**
     * ================================================================================
     * ================================================================================
     * =========================         DECLARATIONS         =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Rewrite a declaration
     * @params: 
     *    - d: the declaration to rewrite
     * @returns: the rewritten declaration
     */
    pub def rewrite (self, d : &Declaration)-> &Declaration {
        d;
        __pragma!panic ();
    }
    

    /**
     * ================================================================================
     * ================================================================================
     * =========================         EXPRESSIONS          =========================
     * ================================================================================
     * ================================================================================
     */    
    
    /**
     * Rewrite the expression using the mapper of the rewriter
     * @params: 
     *    - expr: the expression to rewrite
     * @returns: the rewritten expression
     */
    pub def rewrite (self, expr : &Expression)-> &Expression {
        match expr {
            a : &AssertExpr => { self.rewriteAssert (a) }
            a : &AtomicExpr => { self.rewriteAtomic (a) }
            b : &BlockExpr  => { self.rewriteBlock (b) }
            e : &EmptyExpression => { cast!{&Expression} (e) }
            todo : _ => {
                println (todo);
                __pragma!panic (); }
        }
    }

    /**
     * Rewrite an assert expression
     * @params: 
     *    - a: the assert expression
     * @returns: the rewritten expression
     */
    def rewriteAssert (self, a : &AssertExpr)-> &Expression {
        AssertExpr::new (a.getLoc (),
                         self.rewrite (a.getTest ()),
                         self.rewrite (a.getMessage ()))
    }
    

    /**
     * Rewrite an atomic expression
     * @params:
     *    - a: the atomic expression
     * @returns: the rewritten expression
     */
    def rewriteAtomic (self, a : &AtomicExpr)-> &Expression {
        AtomicExpr::new (a.getLoc (),
                         monitor-> self.rewrite (a.getMonitor ()),
                         self.rewrite (a.getValue ()))
    }
    
    /**
     * Rewrite a block expr
     * @params:
     *    - b: the block expression to rewrite
     * @returns: the rewritten expression
     */
    def rewriteBlock (self, b : &BlockExpr)-> &Expression {
        let dmut scopes = Vec!{&ScopeGuardExpr}::new ();
        let dmut exprs = Vec!{&Expression}::new ();
        let module = self.rewrite (b.getModule ());
        let catcher = self.rewrite (b.getCatcher ());
        for it in b.getExpressions () { exprs:.push (self.rewrite (it)); }
        for it in b.getGuards () { scopes:.push (self.rewriteScopeGuard (it)); }

        return BlockExpr::new (b.getLoc (), b.getEndLocation (), module-> module, content-> exprs[], catcher-> catcher, guards-> scopes[]);
    }


    def rewriteScopeGuard (self, sc : &ScopeGuardExpr)-> &ScopeGuardExpr {
        sc;
        __pragma!panic ();
    }
    
}
