mod ymirc::semantic::validator::value;

import ymirc::semantic::validator::visitor;
import ymirc::semantic::validator::errors;
import ymirc::syntax::declaration::protection;
import ymirc::syntax::expression::_;

import ymirc::semantic::generator::_;
import ymirc::errors::_;
import ymirc::utils::format;

import std::collection::vec;
import std::io;

/**
 * The value validator is the class responsible for value expression validation
 */
pub class ValueValidator {

    /**
     * Create a new empty validator
     */
    pub self () {}


    /**
     * Validate an expression assuming its a value
     * @params: 
     *    - context: the context of the validation
     *    - value: the expression to validate
     * @throws: &ErrorMsg, if the expression is not valid
     * @returns: a generator containing the validated value
     */
    pub def validate (self, dmut context : &Validator, value : &Expression)-> &Value
        throws &ErrorMsg
    {
        context;
        //throw ErrorMsg::fatal (value.getLoc (), ""s8);
        __pragma!fake_throw (&ErrorMsg);
        UnitValue::new (loc-> value.getLoc ())
    }
        
    
    
}
