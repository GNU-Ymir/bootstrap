in generator;

pub mod ::empty;
pub mod ::error;
pub mod ::frame;
pub mod ::globvar;
pub mod ::mangler;
pub mod ::mapinfo;
pub mod ::unittest;
pub mod ::type;
pub mod ::value;

use ymirc::lexing::word;
use ymirc::utils::format;

use std::stream;

lazy dmut __ID__ : [usize] = copy [0us];

/**
 * @returns: a uniq identifier
 */
pub fn generateUniqID ()-> usize {
    __ID__ [0] += 1us;
    __ID__ [0]
}

/**
 * Element that can be sent to the back for final transformation
 *
 */
@abstract
pub class Generator {

    // The location of the generator
    let _loc : &Word;

    // The uniq id of the generator
    let _uniqId : usize;

    /**
     * @params:
     *   - loc: the location of the generator
     */
    pub self (loc : &Word)
        with _loc = loc
        , _uniqId = generateUniqID ()
    {}

    /**
     * @params:
     *   - loc: the location of the generator
     *   - refId: the override of the uniq Id (can be usefull for forward references)
     */
    pub self (loc : &Word, refId : usize)
        with _loc = loc
        , _uniqId = refId
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the location of the generator
     */
    @final
    pub fn getLoc (self)-> &Word {
        self._loc
    }

    /**
     * @returns: the uniq id of the generator
     */
    pub fn getUniqId (self)-> usize {
        self._uniqId
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two generators
     * @returns: true, iif the two generators are strictly identical
     */
    pub fn opEquals (self, o : &Generator)-> bool;

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable;
}
