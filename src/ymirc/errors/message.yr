mod ymirc::errors::message;

import std::io;
import ymirc::lexing::word;
import ymirc::errors::format;
import ymirc::global::state;
import ymirc::utils::_;
import std::collection::vec;
import std::collection::set;
import std::conv;
import std::env, std::fs::path;

extern (C) fn _yrt_exc_resolve_stack_trace (trc : [&void])-> [c8];

static mut __GLOB_ERR_ID__ = 0us;


fn generateUniqErrorId ()-> usize {
    __GLOB_ERR_ID__ += 1us;
    __GLOB_ERR_ID__
}

/**
 * This class store a list of error message
 * This list is used to display readable message for the user
 * @example: 
 * ================
 * let loc = Word::new ("("s8, filename, "(test )!\\n"s8, 1u64, 1u64, 0u64, 0u64);
 * let loc3 = Word::new (")!"s8, filename, "(test )!\\n"s8, 400000u64, 7u64, 0u64, 0u64);
 * let sub_note = ErrorMsg::note (loc, "Message3"s8, oneLine-> false);
 * let note = ErrorMsg::warn (loc, end-> loc3, "Message"s8, oneLine-> false, notes-> [sub_note]);
 * let dmut notes = Vec!(&ErrorMsg)::new ();
 * notes:.push (note);
 * notes:.push (sub_note);
 * throw ErrorMsg::fatal (loc, end-> loc3, "Message2"s8, notes-> notes[]);    
 * ================
 */
pub class @final ErrorMsg over Exception {

    /// The stack trace of the error
    let mut _movingTrace : [&(void)] = [];
    
    /// The sub note of the error
    let _notes : [&ErrorMsg];

    /// The location of the error
    let _begin : &Word = EOF_WORD;

    /// The end location of the error
    let _end : &Word = EOF_WORD;

    /// The message 
    let _msg : [c8] = ""s8;

    /// If true, only prints an error on one line
    let _oneLine = false;

    /// True iif its a note
    let _isNote = false;

    /// True iif its a warning
    let _isWarning = false;

    /// True iif this is just a list of errors
    let _isList = false;

    // The id of the error
    let _id : usize;
    
    /**
     * A fatal error, is an error that print the message "Error : " ~ msg
     */
    pub self fatal (loc : &Word, end : &Word = EOF_WORD, notes : [&ErrorMsg] = [], oneLine : bool = false, msg : [c8])        
        with _msg = msg
        , _notes = flattening (notes)
        , _begin = { if (loc.isBefore (end)) loc else end }
        , _end = { if (loc.isBefore (end)) end else loc }
        , _oneLine = oneLine
        , _id = generateUniqErrorId ()
    {
        self._movingTrace = self::super.trace;
    }

    /**
     * A note error, is an error that print the message "Note : " ~ msg
     */
    pub self note (loc : &Word, end : &Word = EOF_WORD, notes : [&ErrorMsg] = [], oneLine : bool = false, msg : [c8])
        with _msg = msg
        , _begin = { if (loc.isBefore (end)) loc else end }
        , _end = { if (loc.isBefore (end)) end else loc }
        , _notes = flattening (notes)
        , _oneLine = oneLine
        , _isNote = true
        , _id = generateUniqErrorId ()
    {
        self._movingTrace = self::super.trace;
    }

    /**
     * A warn error, is an error that print the message "Warning : " ~ msg
     */
    pub self warn (loc : &Word, end : &Word = EOF_WORD, notes : [&ErrorMsg] = [], oneLine : bool = false, msg : [c8])
        with _msg = msg
        , _begin = { if (loc.isBefore (end)) loc else end }
        , _end = { if (loc.isBefore (end)) end else loc }
        , _notes = flattening (notes)
        , _oneLine = oneLine
        , _isWarning = true
        , _id = generateUniqErrorId ()
    {
        self._movingTrace = self::super.trace;
    }

    /**
     * Internal constructor to specifiy all fields
     */
    prv self all (loc : &Word, end : &Word, notes : [&ErrorMsg], oneLine : bool, msg : [c8], isNote : bool, isWarning : bool, isList : bool)
        with _msg = msg
        , _begin = { if (loc.isBefore (end)) loc else end }
        , _end = { if (loc.isBefore (end)) end else loc }
        , _notes = flattening (notes)
        , _oneLine = oneLine
        , _isNote = isNote
        , _isWarning = isWarning
        , _isList = isList
        , _id = generateUniqErrorId ()
    {
        self._movingTrace = self::super.trace;
    }

    /**
     * An error without message, that is just a list of sub errors
     */
    pub self list (lst : [&ErrorMsg])
        with _notes = flattening (lst)
        , _isList = true
        , _id = generateUniqErrorId ()
    {
        self._movingTrace = self::super.trace;
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the list of sub errors 
     */
    pub fn getNotes (self) -> [&ErrorMsg] {
        self._notes
    }

    /**
     * @returns: the message of the error
     */
    pub fn getMessage (self)-> [c8] {
        self._msg 
    }

    /**
     * @returns: the begin location of the error
     */
    pub fn getLocation (self) -> &Word {
        self._begin
    }

    /**
     * @returns: the end location of the error
     */
    pub fn getEndLocation (self)-> &Word {
        self._end
    }

    /**
     * @returns: true iif this is just a list of errors
     */
    pub fn isList (self)-> bool {
        self._isList
    }

    /**
     * @returns: all the stack traces of the errors
     */
    pub fn getRecursiveTrace (self)-> [[c8]] {
        import std::collection::vec;
        
        let dmut traces = Vec!{[c8]}::new ();
        for i in self._notes {
            let inner = i.getRecursiveTrace ();            
            for j in inner {
                traces:.push (j);
            }
            break {}
        }

        if (traces.len () == 0us) {
            traces:.push (_yrt_exc_resolve_stack_trace (self._movingTrace));
        }
        
        traces[]
    }

    

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          SUB NOTES           =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * @returns: a new error message with more notes
     */
    pub fn withNote (self, notes : [&ErrorMsg], alone : bool = false)-> &ErrorMsg {
        if !alone {
            let dmut ret = ErrorMsg::all (self._begin, self._end, self._notes ~ notes, self._oneLine, self._msg, self._isNote, self._isWarning, self._isList);
            ret._movingTrace = self._movingTrace;
            ret
        } else {
            let dmut ret = ErrorMsg::all (self._begin, self._end, notes, self._oneLine, self._msg, self._isNote, self._isWarning, self._isList);
            ret._movingTrace = self._movingTrace;
            ret
        }
    }

    /**
     * Add a sub note, that will contain the note of self
     * @example: 
     * =========
     * let loc = ...
     * let errB = ErrorMsg::fatal (loc, "B");
     * let errX = ErrorMsg::fatal (loc, "C");
     * let errA = ErrorMsg::fatal (loc, "A", notes-> [errB]);
     * // We have an error A-> [B, C]
     * // We add an intermidiate error D, as a note of A, containing the notes [B, C]
     * let errD = errA.subbingNote (ErrorMsg::fatal (loc, "D"));
     *
     * // Errors are now D = A-> [D-> [B, C]]
     * assert (errD.getMessage () == "A"s8);  
     * assert (errD.getNotes ()[0].getMessage () == "D"s8);
     * assert (errD.getNotes ()[0].getNotes ()[0].getMessage () == "B"s8);
     * assert (errD.getNotes ()[0].getNotes ()[1].getMessage () == "C"s8);
     * =========
     */
    pub fn subbingNote (self, note : &ErrorMsg)-> &ErrorMsg {
        let dmut ret = ErrorMsg::all (self._begin, self._end, [note.withNote (self._notes, alone-> true)], self._oneLine, self._msg, self._isNote, self._isWarning, self._isList);
        ret._movingTrace = self._movingTrace;
        ret
    }

    /**
     * Append a note at the end of the list of notes (always at first index)
     * @example: 
     * ============
     * let loc = ...
     * let errB = ErrorMsg::fatal (loc, "B");
     * let errX = ErrorMsg::fatal (loc, "C");
     * let errA = ErrorMsg::fatal (loc, "A", notes-> [errB]);
     * // We have an error A-> [B, C]
     * // We add an intermidiate error D, as a note of A, containing the notes [B, C]
     * let errD = errA.appendNotes ([ErrorMsg::fatal (loc, "D")]);
     *
     * // Errors are now D = A-> [B-> [D], C]
     * assert (errD.getMessage () == "A"s8);  
     * assert (errD.getNotes ()[0].getMessage () == "B"s8);
     * assert (errD.getNotes ()[1].getMessage () == "C"s8);
     * assert (errD.getNotes ()[0].getNotes ()[0].getMessage () == "D"s8);
     * =========
     */
    pub fn appendNotes (self, notes : [&ErrorMsg])-> &ErrorMsg {
        if (self._notes.len == 0u64) {
            let dmut ret = ErrorMsg::all (self._begin, self._end, notes, self._oneLine, self._msg, self._isNote, self._isWarning, self._isList);
            ret._movingTrace = self._movingTrace;
            ret
        } else {            
            let aux = self._notes [0].appendNotes (notes);
            let dmut ret =  ErrorMsg::all (self._begin, self._end, [aux] ~ self._notes [1us .. $], self._oneLine, self._msg, self._isNote, self._isWarning, self._isList);
            ret._movingTrace = self._movingTrace;
            ret            
        }           
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    fn formatNotes (self, dmut stream : &Formatter, root : bool, depth : u32)-> (bool, u64) {
        let mut notOneLine = true;
        let mut max_padd = 0u64;

        let mut j = 0us;
        let verbose = if (self._notes.len > 4us) {  global::state::instance ().isVerboseActive () || stream.forceVerbose () } else { true };
        for  i in self._notes {
            if (!verbose && j == 3us) {
                stream:.write ('\n'c8);
                stream:.writef ("%(b) : other errors, user -v or --verbose to show them", "Note"s8);
                stream:.write ('\n'c8, ' 'c8);
            } else if (verbose || j < 3us) {
                if (j != 0us) stream:.write ('\n'c8);

                i.format (alias stream, root-> root, depth-> depth + 1u32);
                notOneLine = !i._oneLine || i._notes.len != 0u64;

                max_padd = i._begin.line ();
                if (i._end.line () > max_padd) {
                    max_padd = i._end.line ();
                }
            }

            j += 1us;
        }
        (notOneLine, max_padd)
    }


    fn formatText (self, dmut stream : &Formatter, root : bool, depth : u32) {
        root;
        depth;

        if (stream.withErrorIds ()) {
            if (self._isNote) stream:.writef ("%(b) (#%(B)) : %"s8, "Note"s8, self._id.to!{[c8], 36us} (), self._msg);
            else if (self._isWarning) stream:.writef ("%(y) (#%(B)) : %"s8, "Warning"s8, self._id.to!{[c8], 36us} (), self._msg);
            else if (self._msg != ""s8) stream:.writef ("%(r) (#%(B)) : %"s8, "Error"s8, self._id.to!{[c8], 36us} (), self._msg);
        } else {
            if (self._isNote) stream:.writef ("%(b) : %"s8, "Note"s8, self._msg);
            else if (self._isWarning) stream:.writef ("%(y) : %"s8, "Warning"s8, self._msg);
            else if (self._msg != ""s8) stream:.writef ("%(r) : %"s8, "Error"s8, self._msg);
        }

        if (!self._oneLine) {
            if (self._end.isEof ()) {
                stream:.formatLocation (self._begin);
            } else {
                stream:.formatLocation (self._begin, self._end);
            }
        }
    }

    impl Streamable;    
    impl ErrorFormattable {

        /**
         * Pretty print of the error, that can directly written into stderr for averting the user of an error
         */
        pub over format (self, dmut stream : &Formatter, root : bool, depth : u32) {
            if (stream.hasWrittenError (self._id)) {
                if (!root) {
                    if (stream.withErrorIds ()) {
                        stream:.writef ("%(b) : previous error (#%(B))"s8, "Note"s8, self._id.to!{[c8], 36us}());
                    } else {
                        stream:.writef ("%(b) : previous error"s8, "Note"s8);
                    }
                }
                return {}
            }

            stream:.registerError (self._id);
            if (self._isList) {
                self.formatNotes (alias stream, root-> root, depth-> depth);
                return {}
            }

            self.formatText (alias stream, root, depth);

            let max_line = if (self._end.isEof ()) { self._begin.line () } else { self._end.line () };
            let leftLine = center (format ("%"s8, max_line), 3u64);
            let padd = center (""s8, leftLine.len);
            let l = format ("%% ┃ %"s8, Colors::BOLD, padd, Colors::RESET);

            stream:.entabing (txt-> l);
            let (notOneLine, max_padd) = if (self._notes.len != 0us) {
                stream:.write ('\n'c8);
                self.formatNotes (alias stream, root-> root, depth-> depth)
            } else {
                (false, 0u64)
            };
            stream:.detabing ();
            
            if (self._notes.len != 0u64) {
                let leftLine2 = center (format ("%"s8, max_padd), 3u64);
                let padd2 = center (""s8, leftLine2.len, "━"s8);
                
                if (notOneLine) {
                    stream:.writef ("\n%% ┗━%━┻━ %", Colors::BOLD, padd, padd2, Colors::RESET);
                } else {
                    stream:.writef ("\n%% ┗━%━━ %", Colors::BOLD, padd, padd2, Colors::RESET);
                }
            } else if (!self._oneLine) {
                stream:.writef ("\n%% ┗━━━━━━━ %", Colors::BOLD, padd, padd, Colors::RESET);
            }
        }
        
    }


    
}

fn flattening (notes : [&ErrorMsg])-> [&ErrorMsg] {
    let dmut res = Vec!{&ErrorMsg}::new ();
    for i in notes {
        if (i.isList ()) {
            let d = flattening (i.getNotes ());
            for j in d { res:.push (j); }
        } else {
            res:.push (i);
        }            
    }
    
    res[]
}
