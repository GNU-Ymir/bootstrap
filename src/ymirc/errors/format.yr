mod ymirc::errors::format;

import ymirc::lexing::word;
import ymirc::utils::_;

import std::io;

/**
 * Write the formatted information about the error location inside the buffer
 * This function is used for pretty error printing
 */
pub fn formatLocation (dmut stream : &Formatter, loc : &Word) -> dmut &Formatter {
    if (loc.isEof ()) {        
        formatEof (alias stream, loc);
        return alias stream;
    }
            
    let line = getLineAtLoc (loc);
    {
        if (line.len > 0us) {
            let leftLine = center (format ("%"s8, loc.line ()), 3u64);
            let padd = center (""s8, leftLine.len);
            stream:.writef ("\n% --> %:(%,%)%\n"s8,
                           Colors::BOLD,
                            loc.filename (),
                           loc.line (),
                           loc.col (),
                           Colors::RESET
                       );

            let mut col = cast!usize (loc.col ());
            let len = if (loc.len () != 0u64 && line [col - 1us] != loc.str () [0]) {
                1us
            } else {
                loc.len ()
            }
                        
            let begin = shorten (line [0us .. col - 1us]);
            let wstr = shorten (line [col - 1us .. col + len - 1us]);
            let between = shorten (line [col + len - 1us .. $]);
            col = begin.len + 1us;
            stream:.writef ("%% ┃ %%%%(y)%%"s8,
                            Colors::BOLD, leftLine, Colors::RESET,
                            begin,
                            Colors::UNDERLINE,
                            wstr,
                            Colors::RESET,
                            between
                        );
            
            if (line [$ - 1us] != '\n'c8) stream:.write ('\n'c8);
            stream:.writef ("%% ╋ %"s8, Colors::BOLD, padd, Colors::RESET);
            for i in 0us .. col - 1us {
                if (line [i] == '\t'c8) {
                    stream:.write ('\t'c8);
                } else stream:.write (' 'c8);
            }
            
            stream:.write (center (""s8, wstr.len, concat -> '^'c8));  
        } else {
            formatEof (alias stream, loc);
        }
    }
    
    alias stream
}

/**
 * Format the location of locations that are not on the same line, but referes to the same error
 */
pub fn formatLocationTwoLines (dmut stream : &Formatter, begin : &Word, end : &Word) -> dmut &Formatter {
    let leftLine = center (format ("%"s8, begin.line ()), 3us);
    let padd = center (""s8, leftLine.len);
    stream:.formatLocation (begin);
    stream:.writef ("\n%%...%"s8, Colors::BOLD, padd, Colors::RESET);
    stream:.formatLocation (end);
    alias stream
}

/**
 * Format the line of an error containing two locations (for example (), [], {}, etc.) that are located one the same line
 */
pub fn formatLocationOneLine (dmut stream : &Formatter, begin : &Word, end : &Word) -> dmut &Formatter {
    let line = getLineAtLoc (begin);
    {
        if (line.len > 0us) {
            let leftLine = center (format ("%"s8, begin.line ()), 3us);
            let padd = center (""s8, leftLine.len);
            stream:.writef ("\n% --> %:(%,%)%\n"s8,
                            Colors::BOLD,
                            begin.filename (),
                            begin.line (),
                            begin.col (),
                            Colors::RESET
                       );

            let col = cast!usize (begin.col ()), mut col2 = cast!usize (end.col ());
            let wstr = shorten (line [col - 1us .. col + begin.len () - 1us]);
            let between = shorten (line [col + begin.len () - 1us .. col2 - 1us]);
            let wstr2 = shorten (line [col2 - 1us .. col2 + end.len () - 1us]);
            let estr = shorten (line [col2 + end.len () - 1us .. $]);
            stream:.writef ("%% ┃ %%%%(y)%%%%(y)%%"s8,
			    Colors::BOLD, leftLine, Colors::RESET,
			    line [0us .. col - 1us], 
			    Colors::UNDERLINE,
			    wstr,
			    Colors::RESET,
			    between,
			    Colors::UNDERLINE,
			    wstr2,
			    Colors::RESET,
                            estr
		);

            if (line [$ - 1us] != '\n'c8) stream:.write ('\n'c8);
            stream:.writef ("%% ╋ %"s8, Colors::BOLD, padd, Colors::RESET);
            for i in 0us .. col - 1us {
                if (line [i] == '\t'c8) {
                    stream:.write ('\t'c8);
                } else stream:.write (' 'c8);
            }
            
            stream:.write (center (""s8, wstr.len, concat -> '^'c8));
            col2 = col + between.len + wstr.len - 1us;
            for i in col + wstr.len - 1us .. col2 {
                if (line [i] == '\t'c8) {
                    stream:.write ('\t'c8);
                } else stream:.write (' 'c8);
            }
            stream:.write (center (""s8, wstr2.len, concat -> '^'c8));
        } else {
            stream:.formatEof (begin);
        }
    }
    
    alias stream
}

/**
 * Format the error line of an error containing two locations (for example (), [], {}, etc.)
 */
pub fn formatLocation (dmut stream : &Formatter, begin : &Word, end : &Word) -> dmut &Formatter {
    if (begin.line () != end.line ()) {
        stream:.formatLocationTwoLines (begin, end);
    } else if (end.col () <= begin.col ()) {
        stream:.formatLocation (begin);
    } else {
        stream:.formatLocationOneLine (begin, end);
    }
    alias stream
}

/**
 * Format an error message line for an eof location
 */
pub fn formatEof (dmut stream : &Formatter, loc : &Word) -> dmut &Formatter {
    let leftLine = center (format ("%", 0us), 3us);
    let padd = center (""s8, leftLine.len);
    stream:.writef ("\n% --> %%\n%% ┃ %\tEOF"s8,
                    Colors::BOLD,
                    loc.filename (),
                    Colors::RESET,
                    Colors::BOLD,
                    padd,
                    Colors::RESET
                    );
    alias stream
}

/**
 * Get a slice containing the line in which the word can be found
 * This does not open files, we assume that the word contain the slice of the content of the file
 * @info: if the content of the file is empty in the word, we assume the word as eof, and return an empty line string
 * @info: if the line is finishing with a \n, it is contained in the returned slice
 */
pub fn getLineAtLoc (loc : &Word) -> [c8] {
    let res = loc.fileContent () [loc.lineSeek () .. $];
    let mut max = 0us;
    for i in res {
        if (i == '\n'c8) return res [0us .. max + 1us];
        else
            max += 1us;
    }
    return res;
}
