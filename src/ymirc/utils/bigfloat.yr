mod ymirc::utils::bigfloat;

import std::io, std::conv;
import std::traits;
import ymirc::utils::gmp;

pub class BigFloatError over Exception {

    pub let msg : [c32];

    pub self (msg : [c32]) with msg = msg {}

    impl stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }

}

pub class @final BigFloat {

    /// lib gmp content
    let dmut _content = mpf_t ();

    /**
     * Private ctor to construct a big gloat from an already init content
     * */
    prv self (content : mpf_t)
        with _content = content
    {}

    /**
     * Create a bigfloat containing the value 0
     * */
    pub self ()
        with self (0.0)
    {}

    /**
     * Create a big float from a float value
     * */
    pub self (x : f32)
        with self (cast!f64 (x))
    {}

    /**
     * Create a big float from a float value
     * */
    pub self (x : f64) {
        __gmpf_init (alias &self._content);
        __gmpf_set_d (alias &self._content, x);
    }

    /**
     * Create a big float from a string
     * */
    pub self (x : [c8], base : u32 = 10u32) {
        __gmpf_init (alias &self._content);
        __gmpf_set_str (alias &self._content, x.toStringZ (), base);
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================             ADD              =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Add two bigfloats
     * @example:
     * ===========================
     * let a = BigFloat::new (1230.0), b = BigFloat::new (-230489.0);
     * println (a + b);
     * ===========================
     */
    pub def opBinary {"+"} (self, o : &BigFloat)-> &BigFloat {
        let dmut res = mpf_t ();
        __gmpf_init (alias &res);
        __gmpf_add (alias &res, &self._content, &o._content);

        BigFloat::new (alias res)
    }

    /**
     * Add a bigint and a float
     * @example:
     * ===========================
     * let a = BigInt::new (1230.019);
     * println (a + 124.0);
     * ===========================
     */
    pub def opBinary {"+", T} (self, o : T)-> &BigFloat {
        self + BigFloat::new (o)
    }

    /**
     * Add a bigint and a float
     * @example:
     * ===========================
     * let a = BigInt::new (1230.019);
     * println (124.198 + a);
     * ===========================
     */
    pub def opBinaryRight {"+", T} (self, o : T)-> &BigFloat {
        BigFloat::new (o) + self
    }

        /**
     * ================================================================================
     * ================================================================================
     * =========================             SUB              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Subtract two bigfloat
     * @example:
     * ===========================
     * let a = BigFloat::new (1230.0), b = BigFloat::new (-230489.0);
     * println (a - b);
     * ===========================
     */
    pub def opBinary {"-"} (self, o : &BigFloat)-> &BigFloat {
        let dmut res = mpf_t ();
        __gmpf_init (alias &res);
        __gmpf_sub (alias &res, &self._content, &o._content);

        BigFloat::new (alias res)
    }

    /**
     * Subtract a bigint and an int
     * @example:
     * ===========================
     * let a = BigFloat::new (1230);
     * println (a - 124);
     * ===========================
     */
    pub def opBinary {"-", T} (self, o : T)-> &BigFloat {
        self - BigFloat::new (o)
    }

    /**
     * Subtract a bigint and an int
     * @example:
     * ===========================
     * let a = BigFloat::new (1230);
     * println (124 - a);
     * ===========================
     */
    pub def opBinaryRight {"-", T} (self, o : T)-> &BigFloat {
        BigFloat::new (o) - self
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             MUL              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Multiple two bigint
     * @example:
     * ===========================
     * let a = BigFloat::new (1230), b = BigFloat::new (-230489);
     * println (a * b);
     * ===========================
     */
    pub def opBinary {"*"} (self, o : &BigFloat)-> &BigFloat {
        let dmut res = mpf_t ();
        __gmpf_init (alias &res);
        __gmpf_mul (alias &res, &self._content, &o._content);

        BigFloat::new (alias res)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = BigFloat::new (1230);
     * println (a * 124);
     * ===========================
     */
    pub def opBinary {"*", T} (self, o : T)-> &BigFloat {
        self * BigFloat::new (o)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = BigFloat::new (1230);
     * println (124 * a);
     * ===========================
     */
    pub def opBinaryRight {"*", T} (self, o : T)-> &BigFloat {
        BigFloat::new (o) * self
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================            DIVIDE            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Divide two bigint
     * @example:
     * ===========================
     * let a = BigFloat::new (1230), b = BigFloat::new (-230489);
     * println (a / b);
     * ===========================
     */
    pub def opBinary {"/"} (self, o : &BigFloat)-> &BigFloat
        throws &BigFloatError
    {
        if (__gmpf_cmp_ui (&o._content, 0u64) == 0) {
            throw BigFloatError::new ("Dividing by 0");
        }

        let dmut res = mpf_t ();
        __gmpf_init (alias &res);
        __gmpf_div (alias &res, &self._content, &o._content);

        BigFloat::new (alias res)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = BigFloat::new (1230);
     * println (a / 124);
     * ===========================
     */
    pub def opBinary {"/", T} (self, o : T)-> &BigFloat
        throws &BigFloatError
    {
        self / BigFloat::new (o)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = BigFloat::new (1230);
     * println (124 / a);
     * ===========================
     */
    pub def opBinaryRight {"/", T} (self, o : T)-> &BigFloat
        throws &BigFloatError
    {
        BigFloat::new (o) / self
    }

    /**
     * Modulo two bigint
     * @example:
     * ===========================
     * let a = BigFloat::new (1230), b = BigFloat::new (-230489);
     * println (a % b);
     * ===========================
     * @throws:
     *    - &BigFloatError: if b is equal to 0
     */
    pub def opBinary {"%"} (self, o : &BigFloat)-> &BigFloat
        throws &BigFloatError
    {
        if (__gmpf_cmp_ui (&o._content, 0u64) == 0) {
            throw BigFloatError::new ("Dividing by 0");
        }

        let dmut res = mpf_t ();
        __gmpf_init (alias &res);
        __gmpf_mod (alias &res, &self._content, &o._content);

        BigFloat::new (alias res)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = BigFloat::new (1230);
     * println (a % 124);
     * ===========================
     * @throws:
     *    - &BigFloatError: if b is equal to 0
     */
    pub def opBinary {"%", T} (self, o : T)-> &BigFloat
        throws &BigFloatError
    {
        self % BigFloat::new (o)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = BigFloat::new (1230);
     * println (124 % a);
     * ===========================
     * @throws:
     *    - &BigFloatError: if b is equal to 0
     */
    pub def opBinaryRight {"%", T} (self, o : T)-> &BigFloat
        throws &BigFloatError
    {
        BigFloat::new (o) % self
    }


    /**
     * Power a bigint and an int
     * @example:
     * ===========================
     * let a = BigFloat::new (1230);
     * println (124 ^^ a);
     * ===========================
     * @throws:
     *    - &BigFloatError: if o does not fit in a u64
     */
    pub def opBinary {"^^"} (self, exp : i64)-> &BigFloat
        throws &BigFloatError
    {
        let mut v = BigFloat::new (1.0);
        let mut expV = exp;
        let mut pow = if (exp < 0) { 1.0 / self } else { self } ;

        if (exp < 0) expV = -expV;

        while (expV > 0i64) {

            if (expV & 1i64 != 0i64) v *= pow;
            pow *= pow;
            expV = expV >> 1i64;
        }

        v
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two big ints
     */
    pub def opCmp (self, o : &BigFloat)-> i32 {
        __gmpf_cmp (&self._content, &o._content)
    }

    /**
     * Compare a big int and an integer
     */
    pub def opCmp {T} (self, o : T)-> i32 {
        self.opCmp (BigFloat::new (o))
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          CONVERTION          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Convert a big int into a simple int
     * @example :
     * ============================
     * let a = BigFloat::new (u32::max) + 198;
     * let b = a.to!u64 ();
     * ============================
     * @throws:
     *     - &BigFloatError: if the int does not fit in the result var (< T::min, or > T::max)
     */
    pub def to {T} (self)-> T {
        cte if (is!{T}{F of f32}) {
            let d = __gmpf_get_d (&self._content);
            cast!T (d)
        } else {
            let d = __gmpf_get_d (&self._content);
            d
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================             DTOR              ========================
     * ================================================================================
     * ================================================================================
     */

    __dtor (mut self) {
        __gmpf_clear (alias &self._content);
    }


    impl Streamable {

        pub over toStream (self, dmut stream : &StringStream) {
            let len = __gmp_snprintf (null, 0u32, "%.*Ff"s8.ptr, 10, &self._content);
            let dmut res = ['\u{0}'c8 ; new len + 1us];

            __gmp_snprintf (alias res.ptr, len + 1u32, "%.*Ff"s8.ptr, 10, &self._content);
            stream:.write (res [0us .. $ - 1us]);
        }

    }

}
