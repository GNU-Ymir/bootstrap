in bigfloat;

use std::{io, conv, traits, stream};
use ymirc::utils::{gmp, bigint};


pub class BigFloatError over Exception {
    pub let msg : [c32];
    pub self (msg : [c32]) with msg = msg {}
    impl Streamable;
}

@final
pub class BigFloat {

    // lib gmp content
    let dmut _content = mpfr_t ();

    let mut _contentInit : bool = false;

    let mut _isNan : bool = false;

    let mut _isInf : bool = false;

    let mut _isPositive : bool = true; // only for inf

    /**
     * Private ctor to construct a big gloat from an already init content
     * */
    prv self (content : mpfr_t)
        with _content = content, _contentInit = true
    {}

    /**
     * Construct a bigfloat from a bigint
     * */
    pub self (b : &BigInt) {
        self._contentInit = true;
        mpfr_init2 (alias &self._content, 1024us);

        let z = b.getZ ();
        mpfr_set_z (alias &self._content, &z, mpfr_rnd_t::MPFR_RNDN);
    }

    /**
     * Create a bigfloat containing the value 0
     * */
    pub self ()
        with self (0.0)
    {}

    /**
     * Create a big float from a float value
     * */
    pub self (x : f32)
        with self (cast!f64 (x))
    {}

    /**
     * Create a big float from a float value
     * */
    pub self (x : f64) {
        if (x != x) {
            self._isNan = true;
        } else if (x == f64::inf) {
            self._isInf = true;
        } else if (x == -f64::inf) {
            self._isInf = true;
            self._isPositive = false;
        } else {
            self._contentInit = true;
            mpfr_init2 (alias &self._content, 1024us);
            mpfr_set_d (alias &self._content, x, mpfr_rnd_t::MPFR_RNDN);
        }
    }

    /**
     * Create a big float from a string
     * */
    pub self (x : [c8], base : u32 = 10u32) {
        self._contentInit = true;
        mpfr_init2 (alias &self._content, 1024us);

        mpfr_set_str (alias &self._content, x.toStringZ (), base, mpfr_rnd_t::MPFR_RNDN);
    }

    /*!
     * ================================================================================
     * ================================================================================
     * ========================             GETTERS              ======================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: true iif the value is nan
     * */
    pub fn isNan (self)-> bool {
        self._isNan
    }

    /**
     * @returns: true iif the value is +inf
     * */
    pub fn isPositiveInf (self)-> bool {
        self._isInf && self._isPositive
    }

    /**
     * @returns: true iif the value is -inf
     * */
    pub fn isNegativeInf (self)-> bool {
        self._isInf && !self._isPositive
    }

    /**
     * @returns: the mpfr_t content
     * */
    pub fn getF (self)-> mpfr_t {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             ADD              =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * Add two bigfloats
     * @example:
     * ===========================
     * let a = copy BigFloat (1230.0), b = copy BigFloat (-230489.0);
     * println (a + b);
     * ===========================
     */
    pub fn opBinary {"+"} (self, o : &BigFloat)-> &BigFloat {
        if (self._isNan || self._isInf) return self;
        if (o._isNan || o._isInf) return o;

        let dmut res = mpfr_t ();
        mpfr_init2 (alias &res, 1024us);
        mpfr_add (alias &res, &self._content, &o._content, mpfr_rnd_t::MPFR_RNDN);

        copy BigFloat (alias res)
    }

    /**
     * Add a bigfloat and a float
     * @example:
     * ===========================
     * let a = copy BigFloat (1230.019);
     * println (a + 124.0);
     * ===========================
     */
    pub fn opBinary {"+", T} (self, o : T)-> &BigFloat {
        self + copy BigFloat (o)
    }

    /**
     * Add a bigfloat and a float
     * @example:
     * ===========================
     * let a = copy BigFloat (1230.019);
     * println (124.198 + a);
     * ===========================
     */
    pub fn opBinaryRight {"+", T} (self, o : T)-> &BigFloat {
        copy BigFloat (o) + self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             SUB              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Subtract two bigfloat
     * @example:
     * ===========================
     * let a = copy BigFloat (1230.0), b = copy BigFloat (-230489.0);
     * println (a - b);
     * ===========================
     */
    pub fn opBinary {"-"} (self, o : &BigFloat)-> &BigFloat {
        if (self._isNan) {
            let dmut res =  copy BigFloat ();
            res._isNan = true;
            res._isPositive = !self._isPositive;

            return res
        } else if (self._isInf) {
            let dmut res =  copy BigFloat ();
            res._isInf = true;
            res._isPositive = !self._isPositive;

            return res;
        }

        if (o._isNan || o._isInf) return o;

        let dmut res = mpfr_t ();
        mpfr_init2 (alias &res,  1024us);
        mpfr_sub (alias &res, &self._content, &o._content, mpfr_rnd_t::MPFR_RNDN);

        copy BigFloat (alias res)
    }

    /**
     * Subtract a bigfloat and an float
     * @example:
     * ===========================
     * let a = copy BigFloat (1230.3);
     * println (a - 124.09);
     * ===========================
     */
    pub fn opBinary {"-", T} (self, o : T)-> &BigFloat {
        self - copy BigFloat (o)
    }

    /**
     * Subtract a bigfloat and a float
     * @example:
     * ===========================
     * let a = copy BigFloat (1230.1);
     * println (124.2 - a);
     * ===========================
     */
    pub fn opBinaryRight {"-", T} (self, o : T)-> &BigFloat {
        copy BigFloat (o) - self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MUL              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Multiple two bigint
     * @example:
     * ===========================
     * let a = copy BigFloat (1230), b = copy BigFloat (-230489);
     * println (a * b);
     * ===========================
     */
    pub fn opBinary {"*"} (self, o : &BigFloat)-> &BigFloat {
        if (self._isNan || self._isInf) return self;
        if (o._isNan || o._isInf) return o;

        let dmut res = mpfr_t ();
        mpfr_init2 (alias &res, 1024us);
        mpfr_mul (alias &res, &self._content, &o._content, mpfr_rnd_t::MPFR_RNDN);

        copy BigFloat (alias res)
    }

    /**
     * Multiple a bigfloat and an float
     * @example:
     * ===========================
     * let a = copy BigFloat (1230.12);
     * println (a * 124.13);
     * ===========================
     */
    pub fn opBinary {"*", T} (self, o : T)-> &BigFloat {
        self * copy BigFloat (o)
    }

    /**
     * Multiple a bigfloat and an float
     * @example:
     * ===========================
     * let a = copy BigFloat (1230.53);
     * println (124.99 * a);
     * ===========================
     */
    pub fn opBinaryRight {"*", T} (self, o : T)-> &BigFloat {
        copy BigFloat (o) * self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            DIVIDE            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Divide two bigint
     * @example:
     * ===========================
     * let a = copy BigFloat (1230), b = copy BigFloat (-230489);
     * println (a / b);
     * ===========================
     */
    pub fn opBinary {"/"} (self, o : &BigFloat)-> &BigFloat
        throws &BigFloatError
    {
        if (self._isNan || self._isInf) return self;
        if (o._isNan || o._isInf) return o;

        if (mpfr_cmp_ui (&o._content, 0u64) == 0) {
            throw copy BigFloatError ("Dividing by 0");
        }

        let dmut res = mpfr_t ();
        mpfr_init2 (alias &res, 1024us);
        mpfr_div (alias &res, &self._content, &o._content, mpfr_rnd_t::MPFR_RNDN);

        copy BigFloat (alias res)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = copy BigFloat (1230);
     * println (a / 124);
     * ===========================
     */
    pub fn opBinary {"/", T} (self, o : T)-> &BigFloat
        throws &BigFloatError
    {
        self / copy BigFloat (o)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = copy BigFloat (1230);
     * println (124 / a);
     * ===========================
     */
    pub fn opBinaryRight {"/", T} (self, o : T)-> &BigFloat
        throws &BigFloatError
    {
        copy BigFloat (o) / self
    }

    /**
     * Modulo two bigint
     * @example:
     * ===========================
     * let a = copy BigFloat (1230), b = copy BigFloat (-230489);
     * println (a % b);
     * ===========================
     * @throws:
     *    - &BigFloatError: if b is equal to 0
     */
    pub fn opBinary {"%"} (self, o : &BigFloat)-> &BigFloat
        throws &BigFloatError
    {
        if (self._isNan || self._isInf) return self;
        if (o._isNan || o._isInf) return o;

        if (mpfr_cmp_ui (&o._content, 0u64) == 0) {
            throw copy BigFloatError ("Dividing by 0");
        }

        let dmut res = mpfr_t ();
        mpfr_init2 (alias &res, 1024us);
        mpfr_fmod (alias &res, &self._content, &o._content, mpfr_rnd_t::MPFR_RNDN);

        copy BigFloat (alias res)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = copy BigFloat (1230);
     * println (a % 124);
     * ===========================
     * @throws:
     *    - &BigFloatError: if b is equal to 0
     */
    pub fn opBinary {"%", T} (self, o : T)-> &BigFloat
        throws &BigFloatError
    {
        self % copy BigFloat (o)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = copy BigFloat (1230);
     * println (124 % a);
     * ===========================
     * @throws:
     *    - &BigFloatError: if b is equal to 0
     */
    pub fn opBinaryRight {"%", T} (self, o : T)-> &BigFloat
        throws &BigFloatError
    {
        copy BigFloat (o) % self
    }


    /**
     * Power a bigfloat and a int
     * @example:
     * ===========================
     * let a = copy BigFloat (1230);
     * println (a ^^ 123i64);
     * ===========================
     * @throws:
     *    - &BigFloatError: if o does not fit in a u64
     */
    pub fn opBinary {"^^"} (self, exp : i64)-> &BigFloat
     //   throws &BigFloatError
    {
        let dmut res = mpfr_t ();
        mpfr_init2 (alias &res, 1024us);
        mpfr_pow_si (alias &res, &self._content, exp, mpfr_rnd_t::MPFR_RNDN);

        copy BigFloat (alias res)
    }

    /**
     * Power a bigfloat and a bigfloat
     * @example:
     * ===========================
     * let a = copy BigFloat (1230);
     * println (a ^^ copy BigFloat (3.09));
     * ===========================
     * @throws:
     *    - &BigFloatError: if o does not fit in a u64
     */
    pub fn opBinary {"^^"} (self, exp : &BigFloat)-> &BigFloat
    //    throws &BigFloatError
    {
        let dmut res = mpfr_t ();
        mpfr_init2 (alias &res, 1024us);
        mpfr_pow (alias &res, &self._content, &exp._content, mpfr_rnd_t::MPFR_RNDN);

        copy BigFloat (alias res)
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two big ints
     */
    pub fn opCmp (self, o : &BigFloat)-> i32 {
        if (self._isNan) { if (o._isNan) return 0; else return 1; }
        else if (o._isNan) { return 1; }

        else if (self._isInf && o._isInf) {
            if (self._isPositive && !o._isPositive) return 1;
            else if (!self._isPositive && o._isPositive) return -1;
            else return 0;
        }

        else if (o._isInf) { if (o._isPositive) return -1; else return 1; }
        else if (self._isInf) { if (self._isPositive) return 1; else return -1; }

        mpfr_cmp (&self._content, &o._content)
    }

    /**
     * Compare a big int and an integer
     */
    pub fn opCmp {T} (self, o : T)-> i32 {
        self.opCmp (copy BigFloat (o))
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          CONVERTION          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Transform the big float into a hexadecimal string
     * */
    pub fn toHexString (self)-> [c8] {
        let len = mpfr_snprintf (null, 0u32, "%RZA".ptr, &self._content);

        let dmut res = copy ['\u{0}' ; len + 1us];
        mpfr_snprintf (alias res.ptr, len + 1u32, "%RZA".ptr, &self._content);

        return res[0us .. $ - 1us];
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             DTOR              ========================
     * ================================================================================
     * ================================================================================
     */

    __dtor (mut self) {
        if (self._contentInit) {
            mpfr_clear (alias &self._content);
        }
    }


    impl Streamable {

        pub over toStream (self, dmut stream : &StringStream) {
            if (self._isNan) {
                stream:.write ("nan");
            }
            else if (self._isInf) {
                if (self._isPositive) {
                    stream:.write ("inf");
                } else { stream:.write ("-inf"); }
            }
            else {
                let len = mpfr_snprintf (null, 0u32, "%Rg".ptr, &self._content);
                let dmut res = copy ['\u{0}' ; len + 1us];

                mpfr_snprintf (alias res.ptr, len + 1u32, "%Rg".ptr, &self._content);
                stream:.write (res [0us .. $ - 1us]);
            }
        }

    }

}
