in string;

use std::{traits, algorithm::comparison};
use ymirc::utils::colors;

/**
 * Find the last occurence of a char in a string
 * @params: 
 *  - str: the string to read
 *  - c: the char to find
 * @info: if the char is not in the string, the return value is the length of the string
 */
pub fn findLast (str : [c32], c : c32)-> usize {
    for i in str.len .. 0us {
        if (str [i - 1us] == c) return i - 1us;
    }
    
    return str.len;
}
   
/**
 * Find the last occurence of a char in a string
 * @params: 
 *  - str: the string to read
 *  - c: the char to find
 * @info: if the char is not in the string, the return value is the length of the string
 */
pub fn findLast (str : [c8], c : c8)-> usize {
    for i in str.len .. 0us {
        if (str [i - 1us] == c) return i - 1us;
    }
    
    return str.len;
}


/**
 * Create a shortened version of a string, if the len of the string >= max
 */
pub fn shorten (str : [c8], max : u64 = 100u64, add : [c8] = { Colors::BOLD ~ "[...]" ~ Colors::RESET }) -> [c8] {
    if (str.len < max) {
        return str;
    } else {        
        return str [0us .. cast!usize (max) / 2us - 3us] ~ add ~ str [$ - (cast!usize (max) / 2us) + 2us .. $];
    } 
}

/**
 * Center a string by surrounding it with concat 
 * @info: if nb < str.len, str is returned
 * @params: 
 *    - nb: the len of the returned string (if str.len < nb)
 *    - str: the string to center
 *    - concat: the char to put before and after the str
 * @example: 
 * ===============
 * assert (center ("test", 10u64) == "   test   ");
 * ===============
 */
pub fn if (isIntegral!I ()) center {I} (str : [c8], nb : I, concat : c8 = ' ') -> [c8] {
    if (str.len >= cast!usize (nb)) {
        str
    } else {        
        let p = cast!usize (nb) - str.len;
        let dmut res = copy ['\u{0}' ; nb];
        let mut j = 0us;
        for _ in 0us .. (p/2us) {
            res [j] = concat;
            j += 1us;
        }
        for i in str {
            res [j] = i;
            j += 1us;
        }
        for _ in 0us .. (p - p/2us) {
            res [j] = concat;
            j += 1us;
        }
        res
    } 
}

/**
 * Center a string by surrounding it with concat 
 * @info: if nb < str.len, str is returned
 * @params: 
 *    - nb: the len of the returned string (if str.len < nb)
 *    - str: the string to center
 *    - concat: the char to put before and after the str
 * @example: 
 * ===============
 * assert (center ("test", 10u64, concat-> "  ") == "      test      ");
 * ===============
 */
pub fn if (isIntegral!I ()) center {I} (str : [c8], nb : I, concat : [c8]) -> [c8] {
    if (str.len >= cast!usize (nb)) {
        str
    } else {        
        let p = cast!usize (nb) - str.len;
        let mut res = "";
        for _ in 0us .. (p/2us) {
            res = res ~ concat;
        }
        res = res ~ str;
        for _ in 0us .. (p - p/2us) {
            res = res ~ concat;
        }
        res
    } 
}

/**
 * @returns: the distance between two strings
 */
pub fn levenshteinDistance (left : [c8], right : [c8])-> usize {
    if (left.len == 0us) return right.len;
    if (right.len == 0us) return left.len;
    
    let rlen = right.len + 1us, llen = left.len + 1us;
    let dmut matrix = copy [0us ; (left.len + 1us) * (right.len + 1us)];
    for k in 0us .. llen {
        matrix [k * rlen] = k;
    }
    
    for k in 0us .. rlen {
        matrix [k] = k;
    }

    for x in 1us .. llen {
        for y in 1us .. rlen  {
            if left [x - 1us] == right [y - 1us] {
                matrix [x * rlen + y] = min (
                    matrix [(x - 1us) * rlen + y] + 1us,
                    min (
                        matrix [(x - 1us) * rlen + (y - 1us)],
                        matrix [x * rlen + (y - 1us)] + 1us));
                
            } else {
                matrix [x * rlen + y] = min (
                    matrix [(x - 1us) * rlen + y] + 1us,
                    min (
                        matrix [(x - 1us) * rlen + (y - 1us)] + 1us,
                        matrix [x * rlen + (y - 1us)] + 1us));
            }
        }  
    }

    matrix [left.len * rlen + right.len]    
}


pub fn maxLineLength (str : [c8])-> usize {
    let mut curMax = 0us, mut curLineLen = 0us;
    for i in str {
        if (i == '\n') {
            if curLineLen > curMax { curMax = curLineLen; }
            curLineLen = 0us;
        }

        else curLineLen += 1us;
    }

    if curMax == 0us {
        str.len // no line return found
    } else {
        curMax
    }
}
