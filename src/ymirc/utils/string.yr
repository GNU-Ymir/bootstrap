mod ymirc::utils::string;

import std::traits;
import ymirc::utils::colors;

/**
 * Find the last occurence of a char in a string
 * @params: 
 *  - str: the string to read
 *  - c: the char to find
 * @info: if the char is not in the string, the return value is the length of the string
 */
pub def findLast (str : [c32], c : c32)-> usize {
    for i in str.len .. 0us {
        if (str [i - 1us] == c) return i - 1us;
    }
    
    return str.len;
} catch {
    _ => {
        return str.len;
    }
}
   
/**
 * Find the last occurence of a char in a string
 * @params: 
 *  - str: the string to read
 *  - c: the char to find
 * @info: if the char is not in the string, the return value is the length of the string
 */
pub def findLast (str : [c8], c : c8)-> usize {
    for i in str.len .. 0us {
        if (str [i - 1us] == c) return i - 1us;
    }
    
    return str.len;
} catch {
    _ => {
        return str.len;
    }
}

/**
 * Create a shortened version of a string, if the len of the string >= max
 */
pub def shorten (str : [c8], max : u64 = 100u64, add : [c8] = { Colors::BOLD ~ "[...]"s8 ~ Colors::RESET }) -> [c8] {
    if (str.len < max) {
        return str;
    } else {
        {
            return str [0us .. cast!usize (max) / 2us - 3us] ~ add ~ str [$ - (cast!usize (max) / 2us) + 2us .. $];
        } catch {
            _ => {
                return str;
            }
        }
    } 
}

/**
 * Center a string by surrounding it with concat 
 * @info: if nb < str.len, str is returned
 * @params: 
 *    - nb: the len of the returned string (if str.len < nb)
 *    - str: the string to center
 *    - concat: the char to put before and after the str
 * @example: 
 * ===============
 * assert (center ("test"s8, 10u64) == "   test   "s8);
 * ===============
 */
pub def if (isIntegral!I ()) center {I} (str : [c8], nb : I, concat : c8 = ' 'c8) -> [c8] {
    if (str.len >= cast!usize (nb)) {
        str
    } else {        
        let p = cast!usize (nb) - str.len;
        let dmut res = ['\u{0}'c8 ; new nb];
        let mut j = 0us;
        for _ in 0us .. (p/2us) {
            res [j] = concat;
            j += 1us;
        }
        for i in str {
            res [j] = i;
            j += 1us;
        }
        for _ in 0us .. (p - p/2us) {
            res [j] = concat;
            j += 1us;
        }
        res
    } 
} catch {
    _ => {
        return str;
    }
}

/**
 * Center a string by surrounding it with concat 
 * @info: if nb < str.len, str is returned
 * @params: 
 *    - nb: the len of the returned string (if str.len < nb)
 *    - str: the string to center
 *    - concat: the char to put before and after the str
 * @example: 
 * ===============
 * assert (center ("test"s8, 10u64, concat-> "  "s8) == "      test      "s8);
 * ===============
 */
pub def if (isIntegral!I ()) center {I} (str : [c8], nb : I, concat : [c8]) -> [c8] {
    if (str.len >= cast!usize (nb)) {
        str
    } else {        
        let p = cast!usize (nb) - str.len;
        let mut res = ""s8;
        for _ in 0us .. (p/2us) {
            res = res ~ concat;
        }
        res = res ~ str;
        for _ in 0us .. (p - p/2us) {
            res = res ~ concat;
        }
        res
    } 
}

