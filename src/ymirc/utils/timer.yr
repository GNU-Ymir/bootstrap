in timer;
use std::time::_;

lazy dmut __TIME__ = copy GlobalTimer ();
pub fn instance ()-> dmut &GlobalTimer {
    alias __TIME__
}

@final
pub class GlobalTimer {

    // Time spent in the syntaxic parsing of .0
    let dmut _syntaxMap : [[c8] => Duration] = [];

    // Time spent in the semantic validation of .0
    let dmut _validationMap : [[c8] => Duration] = [];

    // Time spent in the semantic declaration of .0
    let dmut _declarationMap : [[c8] => Duration] = [];

    pub self () {}

    /**
     * @returns: the map for time spent in syntaxic validation
     * */
    pub fn getSyntaxMap (mut self)-> [[c8] => Duration]
    {
        alias self._syntaxMap
    }

    /**
     * @returns: the map for time spent in semantic validation
     * */
    pub fn getValidationMap (mut self)-> [[c8] => Duration]
    {
        alias self._validationMap
    }

    /**
     * @returns: the map for time spent in semantic declaration
     * */
    pub fn getDeclarationMap (mut self)-> [[c8] => Duration]
    {
        alias self._declarationMap
    }

}
