mod ymirc::utils::timer;
import std::collection::map;
import std::time::_;


static dmut __TIME__ = GlobalTimer::new ();

pub def instance ()-> dmut &GlobalTimer {
    alias __TIME__
}

pub class GlobalTimer {

    // Time spent in the syntaxic parsing of .0
    let dmut _syntaxMap = HashMap!{[c8], Duration}::new ();

    // Time spent in the semantic validation of .0
    let dmut _validationMap = HashMap!{[c8], Duration}::new ();

    // Time spent in the semantic declaration of .0
    let dmut _declarationMap = HashMap!{[c8], Duration}::new ();

    pub self () {}

    /**
     * @returns: the map for time spent in syntaxic validation
     * */
    pub def getSyntaxMap (mut self)-> dmut &HashMap!{[c8], Duration}
    {
        alias self._syntaxMap
    }

    /**
     * @returns: the map for time spent in semantic validation
     * */
    pub def getValidationMap (mut self)-> dmut &HashMap!{[c8], Duration}
    {
        alias self._validationMap
    }

    /**
     * @returns: the map for time spent in semantic declaration
     * */
    pub def getDeclarationMap (mut self)-> dmut &HashMap!{[c8], Duration}
    {
        alias self._declarationMap
    }

}
