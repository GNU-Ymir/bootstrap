mod ymirc::utils::log;

import std::io;
import ymirc::utils::colors;
import ymirc::utils::format;
import std::conv;

import ymirc::global::state;

pub mod logging {

    static mut __start__ = 0u64;

    extern (C) fn clock ()-> u64;

    static CLOCKS_PER_SEC = 1_000_000.0;
    
    enum : [c8]
    | SUCCESS = "Success"s8
    | FAILURE = "Failure"s8
    | INFO    = "Info"s8 
    | WARN    = "Warn"s8 
     -> LoggingMods; 

    pub fn init () {
        if (__start__ == 0u64)
            __start__ = clock ();
    }

    pub fn info {T...} (msg : [c8], params : T) {
        __version UNITTEST {
            if __start__ == 0u64 __start__ = clock ();
            let dmut stream = StringStream::new ();
            stream:.write (format (msg, expand params));
            println (format ("[%(b)] : %(B)s => % "s8, LoggingMods::INFO, (clock () - __start__).to!f64 () / CLOCKS_PER_SEC, stream[]));
        }
        else {
            if state::instance ().isVerboseActive () {
                if __start__ == 0u64 __start__ = clock ();
                let dmut stream = StringStream::new ();
                stream:.write (format (msg, expand params));
                println (format ("[%(b)] : %(B)s => % "s8, LoggingMods::INFO, (clock () - __start__).to!f64 () / CLOCKS_PER_SEC, stream[]));
            }
        }
    }

    pub fn info (msg : [c8]) {
        __version UNITTEST {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(b)] : %(B)s => % "s8, LoggingMods::INFO, (clock () - __start__).to!f64 () / CLOCKS_PER_SEC, msg));
        }
        else {
            if state::instance ().isVerboseActive () {
                if __start__ == 0u64 __start__ = clock ();
                println (format ("[%(b)] : %(B)s => % "s8, LoggingMods::INFO, (clock () - __start__).to!f64 () / CLOCKS_PER_SEC, msg));
            }
        }
    }

    pub fn warn {T...} (msg : [c8], params : T) {
        __version UNITTEST {
            if __start__ == 0u64 __start__ = clock ();
            let dmut stream = StringStream::new ();
            stream:.write (format (msg, expand params));
            println (format ("[%(y)] : %(B)s => % "s8, LoggingMods::WARN, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, stream[]));
        }
        else {
            if state::instance ().isVerboseActive () {
                if __start__ == 0u64 __start__ = clock ();
                let dmut stream = StringStream::new ();
                stream:.write (format (msg, expand params));
                println (format ("[%(y)] : %(B)s => % "s8, LoggingMods::WARN, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, stream[]));
            }
        }
    }

    pub fn warn (msg : [c8]) {
        __version UNITTEST {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(y)] : %(B)s => % "s8, LoggingMods::WARN, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, msg));
        }
        else {
            if state::instance ().isVerboseActive () {
                if __start__ == 0u64 __start__ = clock ();
                println (format ("[%(y)] : %(B)s => % "s8, LoggingMods::WARN, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, msg));
            }
        }
    }


    pub fn success {T...} (msg : [c8], params : T) {
        __version UNITTEST {
            if __start__ == 0u64 __start__ = clock ();
            let dmut stream = StringStream::new ();
            stream:.write (format (msg, expand params));
            println (format ("[%(g)] : %(B)s => % "s8, LoggingMods::SUCCESS, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, stream[]));
        }
        else {
            if state::instance ().isVerboseActive () {
                if __start__ == 0u64 __start__ = clock ();
                let dmut stream = StringStream::new ();
                stream:.write (format (msg, expand params));
                println (format ("[%(g)] : %(B)s => % "s8, LoggingMods::SUCCESS, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, stream[]));
            }
        }
    }

    pub fn success (msg : [c8]) {
        __version UNITTEST {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(g)] : %(B)s => % "s8, LoggingMods::SUCCESS, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, msg));
        }
        else {
            if state::instance ().isVerboseActive () {
                if __start__ == 0u64 __start__ = clock ();
                println (format ("[%(g)] : %(B)s => % "s8, LoggingMods::SUCCESS, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, msg));
            }
        }
    }

    pub fn failure {T...} (msg : [c8], params : T) {
        __version UNITTEST {
            if __start__ == 0u64 __start__ = clock ();
            let dmut stream = StringStream::new ();
            stream:.write (format (msg, expand params));
            println (format ("[%(r)] : %(B)s => % "s8, LoggingMods::FAILURE, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, stream[]));
        }
        else {
            if state::instance ().isVerboseActive () {
                if __start__ == 0u64 __start__ = clock ();
                let dmut stream = StringStream::new ();
                stream:.write (format (msg, expand params));
                println (format ("[%(r)] : %(B)s => % "s8, LoggingMods::FAILURE, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, stream[]));
            }
        }
    }

    pub fn failure (msg : [c8]) {
        __version UNITTEST {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(r)] : %(B)s => % "s8, LoggingMods::FAILURE, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, msg));
        }
        else {
            if state::instance ().isVerboseActive () {
                if __start__ == 0u64 __start__ = clock ();
                println (format ("[%(r)] : %(B)s => % "s8, LoggingMods::FAILURE, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, msg));
            }
        }
    }

    pub fn setRelativeTime () {
        __start__ = clock ();
    }
    
}
