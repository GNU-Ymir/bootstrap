mod ymirc::utils::log;

import std::io;
import ymirc::utils::colors;
import ymirc::utils::format;
import std::conv;

pub mod logging {

    static mut __start__ = 0u64;

    extern (C) def clock ()-> u64;

    static CLOCKS_PER_SEC = 1_000_000.0;
    
    enum : [c8]
    | SUCCESS = "Success"s8
    | FAILURE = "Failure"s8
    | INFO    = "Info"s8 
    | WARN    = "Warn"s8 
     -> LoggingMods; 

    pub def init () {
        if (__start__ == 0u64)
            __start__ = clock ();
    }
    
    pub def info {T...} (msg : T) {        
        __version DEBUG {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(b)] : %(B)s => % "s8, LoggingMods::INFO, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));
        } else {__version TEST {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(b)] : %(B)s => % "s8, LoggingMods::INFO, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));
        } else {__version BENCH {                
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(b)] : %(B)s => % "s8, LoggingMods::INFO, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));
        }}}        
        msg;
    }

    pub def warn {T...} (msg : T) {        
        __version DEBUG {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(y)] : %(B)s => % "s8, LoggingMods::WARN, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));
        } else {__version TEST {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(y)] : %(B)s => % "s8, LoggingMods::WARN, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));        
        } else {__version BENCH {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(y)] : %(B)s => % "s8, LoggingMods::WARN, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));        
        }}}
        msg;
    }

    pub def success {T...} (msg : T) {        
        __version DEBUG {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(g)] : %(B)s => % "s8, LoggingMods::SUCCESS, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));
        } else {__version TEST {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(g)] : %(B)s => % "s8, LoggingMods::SUCCESS, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));        
        } else {__version BENCH {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(g)] : %(B)s => % "s8, LoggingMods::SUCCESS, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));        
        }}}
        msg;
    }

    pub def failure {T...} (msg : T) {        
        __version DEBUG {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(r)] : %(B)s => % "s8, LoggingMods::FAILURE, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));
        } else { __version TEST {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(r)] : %(B)s => % "s8, LoggingMods::FAILURE, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));
        } else { __version BENCH {
            if __start__ == 0u64 __start__ = clock ();
            println (format ("[%(r)] : %(B)s => % "s8, LoggingMods::FAILURE, (clock () - __start__).to!f64 ()/CLOCKS_PER_SEC, expand msg));
        }}}        
        msg;
    }

    pub def setRelativeTime () {
        __start__ = clock ();
    }
    
}
