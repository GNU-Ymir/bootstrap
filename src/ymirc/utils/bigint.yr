in bigint;

use std::{io, conv, traits, stream};
use ymirc::utils::{gmp, bigfloat, packet};

pub class BigIntError over Exception {
    pub let msg : [c32];
    pub self (msg : [c32]) with msg = msg {}
    impl Streamable;
}

@final
pub class BigInt {

    /// lib gmp content
    let dmut _content = mpz_t ();

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             CTOR             =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Private ctor that init a big from an already init content
     */
    prv self (content : mpz_t)
        with _content = content
    {}
    
    /**
     * Create a big int containing the value 0
     */
    pub self ()
        with self (0u64)
    {}    


    /**
     * Create a big int from an unsigned integer
     */
    pub self (x : u8)
        with self (cast!u64 (x))
    {}

    /**
     * Create a big int from an signed integer
     */
    pub self (x : i8)
        with self (cast!i64 (x))
    {}

    /**
     * Create a big int from an unsigned integer
     */
    pub self (x : u16)
        with self (cast!u64 (x))
    {}

    /**
     * Create a big int from an signed integer
     */
    pub self (x : i16)
        with self (cast!i64 (x))
    {}

    /**
     * Create a big int from an unsigned integer
     */
    pub self (x : u32)
        with self (cast!u64 (x))
    {}

    /**
     * Create a big int from an signed integer
     */
    pub self (x : i32)
        with self (cast!i64 (x))
    {}
    
    /**
     * Create a big int from an unsigned long
     */
    pub self (x : u64) {
        __gmpz_init (alias &self._content);
        __gmpz_set_ui (alias &self._content, x);
    }

    /**
     * Create a big int from an signed long
     */
    pub self (x : i64) {
        __gmpz_init (alias &self._content);
        __gmpz_set_si (alias &self._content, x);
    }

    /**
     * Create a big int from an unsigned long
     */
    pub self (x : usize) {
        __gmpz_init (alias &self._content);
        __gmpz_set_ui (alias &self._content, cast!u64 (x));
    }

    /**
     * Create a big int from an signed long
     */
    pub self (x : isize) {
        __gmpz_init (alias &self._content);
        __gmpz_set_si (alias &self._content, cast!i64 (x));
    }

    /**
     * Create a big int from a string
     */
    pub self (x : [c8], base : u32 = 10u32) {
        __gmpz_init (alias &self._content);
        __gmpz_set_str (alias &self._content, x.toStringZ (), base);
    }

    pub self (f : &BigFloat) {
        __gmpz_init (alias &self._content);
        let mf = f.getF ();

        mpfr_get_z (alias &self._content, &mf, mpfr_rnd_t::MPFR_RNDN);
    }

    /**
     * @returns: the mpz_t content
     * */
    pub fn getZ (self)-> mpz_t {
        self._content
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             ADD              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Add two bigint
     * @example:
     * ===========================
     * let a = copy BigInt (1230), b = copy BigInt (-230489);
     * println (a + b);
     * ===========================
     */
    pub fn opBinary {"+"} (self, o : &BigInt)-> &BigInt {
        let dmut res = mpz_t ();
        __gmpz_init (alias &res);
        __gmpz_add (alias &res, &self._content, &o._content);

        copy BigInt (res)
    }

    /**
     * Add a bigint and a signed long
     * @example:
     * ===========================
     * let a = copy BigInt (1230);
     * println (a + 124i64);
     * ===========================
     */
    pub fn opBinary {"+", T} (self, o : T)-> &BigInt {
        self + copy BigInt (o)
    }

    /**
     * Add a bigint and a signed long
     * @example:
     * ===========================
     * let a = copy BigInt (1230);
     * println (124i64 + a);
     * ===========================
     */
    pub fn opBinaryRight {"+", T} (self, o : T)-> &BigInt {
        copy BigInt (o) + self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================             SUB              =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * Subtract two bigint
     * @example: 
     * ===========================
     * let a = copy BigInt (1230), b = copy BigInt (-230489);
     * println (a - b);
     * ===========================
     */
    pub fn opBinary {"-"} (self, o : &BigInt)-> &BigInt {
        let dmut res = mpz_t ();
        __gmpz_init (alias &res);
        __gmpz_sub (alias &res, &self._content, &o._content);
        
        copy BigInt (res)
    }

    /**
     * Subtract a bigint and an int
     * @example:
     * ===========================
     * let a = copy BigInt (1230);
     * println (a - 124);
     * ===========================
     */
    pub fn opBinary {"-", T} (self, o : T)-> &BigInt {
        self - copy BigInt (o)
    }

    /**
     * Subtract a bigint and an int
     * @example:
     * ===========================
     * let a = copy BigInt (1230);
     * println (124 - a);
     * ===========================
     */
    pub fn opBinaryRight {"-", T} (self, o : T)-> &BigInt {
        copy BigInt (o) - self
    }



    /*!
     * ================================================================================
     * ================================================================================
     * =========================             MUL              =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Multiple two bigint
     * @example: 
     * ===========================
     * let a = copy BigInt (1230), b = copy BigInt (-230489);
     * println (a * b);
     * ===========================
     */
    pub fn opBinary {"*"} (self, o : &BigInt)-> &BigInt {
        let dmut res = mpz_t ();
        __gmpz_init (alias &res);
        __gmpz_mul (alias &res, &self._content, &o._content);
        
        copy BigInt (res)
    }

    /**
     * Multiple a bigint and an int
     * @example: 
     * ===========================
     * let a = copy BigInt (1230);
     * println (a * 124);
     * ===========================
     */
    pub fn opBinary {"*", T} (self, o : T)-> &BigInt {
        self * copy BigInt (o)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = copy BigInt (1230);
     * println (124 * a);
     * ===========================
     */
    pub fn opBinaryRight {"*", T} (self, o : T)-> &BigInt {
        copy BigInt (o) * self
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            DIVIDE            =========================
     * ================================================================================
     * ================================================================================
     */
    
    /**
     * Divide two bigint
     * @example: 
     * ===========================
     * let a = copy BigInt (1230), b = copy BigInt (-230489);
     * println (a / b);
     * ===========================
     */
    pub fn opBinary {"/"} (self, o : &BigInt)-> &BigInt
        throws BigIntError
    {
        if (__gmpz_cmp_ui (&o._content, 0u64) == 0) {
            throw copy BigIntError ("Dividing by 0");
        }
        
        let dmut res = mpz_t ();
        __gmpz_init (alias &res);
        __gmpz_tdiv_q (alias &res, &self._content, &o._content);
        
        copy BigInt (res)
    }

    /**
     * Multiple a bigint and an int
     * @example: 
     * ===========================
     * let a = copy BigInt (1230);
     * println (a / 124);
     * ===========================
     */
    pub fn opBinary {"/", T} (self, o : T)-> &BigInt
        throws BigIntError
    {
        self / copy BigInt (o)
    }

    /**
     * Multiple a bigint and an int
     * @example: 
     * ===========================
     * let a = copy BigInt (1230);
     * println (124 / a);
     * ===========================
     */
    pub fn opBinaryRight {"/", T} (self, o : T)-> &BigInt
        throws BigIntError
    {
        copy BigInt (o) / self
    }

    /**
     * Modulo two bigint
     * @example: 
     * ===========================
     * let a = copy BigInt (1230), b = copy BigInt (-230489);
     * println (a % b);
     * ===========================
     * @throws:
     *    - &BigIntError: if b is equal to 0
     */
    pub fn opBinary {"%"} (self, o : &BigInt)-> &BigInt
        throws BigIntError
    {
        if (__gmpz_cmp_ui (&o._content, 0u64) == 0) {
            throw copy BigIntError ("Dividing by 0");
        }
        
        let dmut res = mpz_t ();
        __gmpz_init (alias &res);

        __gmpz_tdiv_r (alias &res, &self._content, &o._content);
        
        copy BigInt (res)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = copy BigInt (1230);
     * println (a % 124);
     * ===========================
     * @throws:
     *    - &BigIntError: if b is equal to 0
     */
    pub fn opBinary {"%", T} (self, o : T)-> &BigInt
        throws BigIntError
    {
        self % copy BigInt (o)
    }

    /**
     * Multiple a bigint and an int
     * @example:
     * ===========================
     * let a = copy BigInt (1230);
     * println (124 % a);
     * ===========================
     * @throws:
     *    - &BigIntError: if b is equal to 0
     */
    pub fn opBinaryRight {"%", T} (self, o : T)-> &BigInt
        throws BigIntError
    {
        copy BigInt (o) % self
    }


    /**
     * Power two bigint
     * @example: 
     * ===========================
     * let a = copy BigInt (1230), b = copy BigInt (-230489);
     * println (a ^^ b);
     * ===========================
     * @throws:
     *    - &BigIntError: if o does not fit in a u64
     */
    pub fn opBinary {"^^"} (self, o : &BigInt)-> &BigInt
        throws BigIntError
    {                
        let dmut res = mpz_t ();
        __gmpz_init (alias &res);
        __gmpz_pow_ui (alias &res, &self._content, o.to!u64 ());
        
        copy BigInt (res)
    }

    /**
     * Power a bigint and an int
     * @example: 
     * ===========================
     * let a = copy BigInt (1230);
     * println (a ^^ 124);
     * ===========================
     * @throws:
     *    - &BigIntError: if o does not fit in a u64
     */
    pub fn opBinary {"^^", T} (self, o : T)-> &BigInt
        throws BigIntError
    {
        self ^^ copy BigInt (o)
    }

    /**
     * Power a bigint and an int
     * @example: 
     * ===========================
     * let a = copy BigInt (1230);
     * println (124 ^^ a);
     * ===========================
     * @throws:
     *    - &BigIntError: if o does not fit in a u64
     */
    pub fn opBinaryRight {"^^", T} (self, o : T)-> &BigInt
        throws BigIntError
    {
        copy BigInt (o) ^^ self
    }

    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================         o COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two big ints
     */
    pub fn opCmp (self, o : &BigInt)-> i32 {
        __gmpz_cmp (&self._content, &o._content)
    }

    /**
     * Compare a big int and an integer
     */
    pub fn opCmp {T} (self, o : T)-> i32 {
        self.opCmp (copy BigInt (o))
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          MISC          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the absolute value
     * */
    pub fn abs (self)-> &BigInt {
        if (self < 0) { return 0 - self }
        else { return self; }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          CONVERSION          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Convert a big int into a simple int
     * @example :
     * ============================
     * let a = copy BigInt (u32::max) + 198;
     * let b = a.to!u64 ();
     * ============================
     * @throws:
     *     - &BigIntError: if the int does not fit in the result var (< T::min, or > T::max)
     */
    pub fn to {T} (self)-> T
        throws BigIntError
    {
        if (self < T::min) throw copy BigIntError ("Fail to convert");
        if (self > T::max) throw copy BigIntError ("Fail to convert");
        cte if !isSigned!{T} {
            let ui = __gmpz_get_ui (&self._content);
            cast!T (ui)
        } else {
            let si = __gmpz_get_si (&self._content);
            cast!T (si)
        }
    }

    /**
     * Trusted convert a big int into a simple int
     * @warning: panic if conversion fails
     * @example :
     * ============================
     * let a = copy BigInt (u32::max) + 198;
     * let b = a.toT!u64 ();
     * ============================
     */
    pub fn toT {T} (self)-> T
    {
        if (self < T::min) panic;
        if (self > T::max) panic;
        cte if !isSigned!{T} {
            let ui = __gmpz_get_ui (&self._content);
            cast!T (ui)
        } else {
            let si = __gmpz_get_si (&self._content);
            cast!T (si)
        }
    }

    /**
     * convert a big int into a simple int without checking for overflow
     * @warning: panic if conversion fails
     * @example :
     * ============================
     * let a = copy BigInt (u32::max) + 198;
     * let b = a.toN!u64 ();
     * ============================
     */
    pub fn toN {T} (self)-> T
    {
        cte if !isSigned!{T} {
            let ui = __gmpz_get_ui (&self._content);
            cast!T (ui)
        } else {
            let si = __gmpz_get_si (&self._content);
            cast!T (si)
        }
    }
    
    /*!
     * ================================================================================
     * ================================================================================
     * =========================             DTOR             =========================
     * ================================================================================
     * ================================================================================
     */

    __dtor (mut self) {
        __gmpz_clear (alias &self._content);    
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            TRAITS            =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable {

        pub over toStream (self, dmut stream : &StringStream) {
            let len = __gmp_snprintf (null, 0u32, "%Zd".ptr, &self._content);
            let dmut res = copy ['\u{0}' ; len + 1us];

            __gmp_snprintf (alias res.ptr, len + 1u32, "%Zd".ptr, &self._content);
            stream:.write (res[0us .. $ - 1us]);
        }        

    }

    impl Packable {
        pub over packName (self, ref dmut _ : [u8]) {}
        pub over pack (self)-> [u8] {
            let dmut out : [u8] = [];
            let len = __gmp_snprintf (null, 0u32, "%Zd".ptr, &self._content);
            let dmut res = copy ['\u{0}' ; len + 1us];
            __gmp_snprintf (alias res.ptr, len + 1u32, "%Zd".ptr, &self._content);

            packet::pack (res [0 .. $ - 1], ref out);
            out
        }
    }

    
}
