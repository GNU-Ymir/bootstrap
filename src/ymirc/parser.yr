mod ymirc::parser;
import ymirc::args::_;

import std::fs::path;
import std::io, std::conv;
import ymirc::syntax::_;
import ymirc::errors::_;
import ymirc::utils::_;
import ymirc::lexing::lexer;

import ymirc::syntax::visitor;
import ymirc::semantic::declarator::visitor;
import std::time::_;

/**
 * The main class of the ymirc compiler
 * This class perform the different parsing step of the compilation, and gives the result to the backend
 */
pub class Parser {

    /// The configuration of the parser
    let _args : YmirArguments;

    /**
     * @params: 
     *  - args: the arguments passed to the compiler
     */
    pub self (args : YmirArguments)
        with _args = args
    {
        for i in args.fversion {
            global::state::instance ():.addVersion (i.(std::conv::to)![c8] ());
        }
        
        for i in args.files {
            self:.parseFile (Path::new (i));
        }        
    }


    /***
     * ============================================================================
     * ============================================================================
     * =========================          PARSING        ==========================
     * ============================================================================
     * ============================================================================
     */
    
    /**
     * Parse a given file
     * @params: 
     *  - file: the path of the file
     */
    prv def parseFile (mut self, file : &Path) {
        { 
            let module = SyntaxVisitor::new (file):.read ();
            println (format ("%", module));
            let tree = Declarator::new ():.declare (module);
            println (format ("%", tree));
        } catch {
            err : &ErrorMsg => {
                println (format ("%", err));
                __version DEBUG {
                    for j in err.getRecursiveTrace () {                        
                        println (j);
                    }
                }
            }
            x : _ => println (x);
        }
    }


    /***
     * ============================================================================
     * ============================================================================
     * =========================          GETTERS        ==========================
     * ============================================================================
     * ============================================================================
     */

    
    
    
}
