mod ymirc::parser;
import ymirc::args::_;

import std::io, std::conv;
import ymirc::syntax::_;
import ymirc::errors::_;
import ymirc::utils::_;
import ymirc::lexing::lexer;
import ymirc::lexing::word;

import ymirc::syntax::visitor;
import ymirc::semantic::declarator::visitor;
import ymirc::semantic::validator::visitor;
import ymirc::lint::expander::visitor;
import ymirc::lint::optimizer::visitor;
import ymirc::lint::node::_;

import ymirc::semantic::declarator::errors;
import ymirc::semantic::generator::base;
import ymirc::semantic::symbol::base;


import std::time::_;
import std::fs::_;
import std::env;
import std::collection::vec;


/**
 * The main class of the ymirc compiler
 * This class perform the different parsing step of the compilation, and gives the result to the backend
 */
pub class Parser {

    // Options passed to the parser
    let _args : YmirArguments;

    // The syntaxic node read during syntax step
    let mut _syntNode : &SyntaxNode = UnitExpr::new ();

    // The list of generators created during validation
    let mut _semGenerators : [&Generator] = [];

    // The list of generator created after expansion / finalization
    let mut _expNodes : [&YILNode] = [];

    // The list of generator created after optimization
    let mut _optNodes : [&YILNode] = [];

    /**
     * Create an empty file parser
     */
    pub self (args : YmirArguments)
        with _args = args
    {
        if (args.fdump) {
            global::state::instance ():.activateYmirDumping ();
        }

        for i in args.fversion {
            global::state::instance ():.addVersion (i.(std::conv::to)![c8] ());
        }
        
        for d in args.includes {
            global::state::instance ():.addIncludeDir (d.(std::conv::to)![c8] ());
        }

        if (args.debug) {
            global::state::instance ():.activateDebug ();
        }
    }    

    /*!
     * ============================================================================
     * ============================================================================
     * =========================          GETTERS        ==========================
     * ============================================================================
     * ============================================================================
     */

    /**
     * @returns: the syntaxic node read during parsing
     * */
    pub fn getSyntaxNode (self)-> &SyntaxNode {
        self._syntNode
    }

    /**
     * @returns: the list of generators after validation before optimization
     * */
    pub fn getSemGenerators (self)-> [&Generator] {
        self._semGenerators
    }

    /**
     * @returns: the list of generators after optimization
     * */
    pub fn getOptYILNodes (self)-> [&YILNode] {
        self._optNodes
    }

    /**
     * @returns: the list of generators nodes after expansion
     * */
    pub fn getExpYILNodes (self)-> [&YILNode] {
        self._expNodes
    }

    /*!
     * ============================================================================
     * ============================================================================
     * =========================          PARSING        ==========================
     * ============================================================================
     * ============================================================================
     */

    /**
     * Parse the files requested by the arguments given to the parser
     * @returns:
     *    - the generators created by validation process
     */
    pub fn parseAll (mut self)
        throws &ErrorMsg
    {
        let mut path = Path::new (self._args.file);
        let mut package = path.parent ();
        if (!path.isAbsolute ()) {
            path = env::currentDir ().push (path);
            package = path.parent ();
        }

        global::state::instance ():.setPackage (package);
        self:.parsePackage (path);
    }

    /**
     * Parse a given file
     * @params: 
     *  - file: the path of the file
     */
    fn parsePackage (mut self, file : &Path)
        throws &ErrorMsg
    {
        let s1 = self:.syntaxStep (file);
        self._syntNode = s1;

        let s2 = self:.validationStep (file, s1);
        self._semGenerators = s2;

        let s3 = self:.expansionStep (file, s2);
        self._expNodes = s3;

        let s4 = self:.optimizationStep (file, s3);
        self._optNodes = s4;
    }

    /*!
     * ============================================================================
     * ============================================================================
     * =========================          SYNTAX        ===========================
     * ============================================================================
     * ============================================================================
     */


    /**
     * Syntax read of the module root file
     * @params:
     *    - file: the file to read
     * @returns: the module declaration contained in the file
     * @throws:
     *    - &ErrorMsg: if there are syntaxic errors
     * */
    fn syntaxStep (mut self, file : &Path)-> &ModuleDecl
        throws &ErrorMsg
    {
        SyntaxVisitor::new (file):.read ()
    } catch {
        err : &ErrorMsg => throw err;
        _ : &FsError => {
            throw ErrorMsg::fatal (EOF_WORD, format (DeclareErrorMessage::NO_SUCH_FILE, file.toStr ()), oneLine-> true);
        }
    }

    /*!
     * ============================================================================
     * ============================================================================
     * =======================          VALIDATION        =========================
     * ============================================================================
     * ============================================================================
     */

    /**
     * Validate a module (declaration of symbols, and type validation)
     * @params:
     *     - file: the path of the file in which the module was read
     *     - modSynt: the module to declare and validate
     * @returns: the list of generators created by the module
     * @throws:
     *     - &ErrorMsg: if there are error during the validation
     * */
    fn validationStep (mut self, file : &Path, modSynt : &ModuleDecl)-> [&Generator]
        throws &ErrorMsg
    {
        if (self._args.noSem) return [];

        let dmut declarator = Declarator::new (packageDir-> file.parent ());
        self:.importExternPackages (alias declarator);

        let dmut modSym = declarator:.declareGlobal (modSynt, global::state::instance ().getPackage ());
        if (global::state::instance ().isYmirDumping ()) {
            {
                with dmut f = File::create (file.addExtension ("ydump-decls.1"s8), write-> true) {
                    let dmut formatter = Formatter::new ();
                    modSym.formatSymTree (alias formatter);
                    f:.write (formatter[]);
                }
            } catch {
                err : &FsError => println( err );
            }
        }

        let dmut valid = Validator::new (alias declarator);
        valid:.validate (alias modSym);

        if (global::state::instance ().isYmirDumping ()) {
            {
                with dmut f = File::create (file.addExtension ("ydump-decls.2"s8), write-> true) {
                    let dmut formatter = Formatter::new ();
                    modSym.formatSymTree (alias formatter);
                    f:.write (formatter[]);
                }
                with dmut f = File::create (file.addExtension ("ydump-sem"s8), write-> true) {
                    for i in valid.getGenerators () {
                        f:.write (format ("%\n", i, withTags-> ["withVarIds"s8]));
                    }
                }
            } catch {
                err : &FsError => println( err );
            }
        }

        // Validation succeeded to generate symbols, but some were failing for aside reasons
        if (valid.getMissingGenerators ().len != 0us) {
            throw ErrorMsg::list (valid.getMissingGenerators ());
        }

        return valid.getGenerators ();
    }

    /**
     * Import a external package imported using the -I option
     * */
    fn importExternPackages (mut self, dmut declarator : &Declarator)
        throws &ErrorMsg
    {
        let dmut errors = Vec!{&ErrorMsg}::new ();
        if (!global::state::instance ().isStandalone ()) {
            self:.importExternPackage (alias declarator, global::state::instance ().getCorePath ());
            declarator:.computeCoreUseDecls ();
        } catch {
            err : &ErrorMsg => errors:.push (err);
        }

        for dir in global::state::instance ().getIncludeDirs () {
            {
                self:.importExternPackage (alias declarator, dir);
            } catch {
                err : &ErrorMsg => errors:.push (err);
            }
        }

        if (errors.len () != 0us) {
            throw ErrorMsg::list (errors[]);
        }
    }

    /**
     * Import the external package at path 'path'
     * */
    fn importExternPackage (mut self, dmut declarator : &Declarator, path : &Path)
        throws &ErrorMsg
    {
        let (file, pack) = if (fs::sys::isDir (path)) {
            (path.push ("__lib__.yr"s8), path)
        } else {
            (path, path.parent ())
        };

        {
            let modSynt = SyntaxVisitor::new (file):.read ();
            declarator:.declareExtern (modSynt, pack);
        } catch {
            err : &ErrorMsg => {
                throw ErrorMsg::fatal (EOF_WORD, format (DeclareErrorMessage::IMPORT_EXTERN_PACKAGE, path.toStr ()), oneLine-> true, notes-> [err]);
            }
            _ : &FsError => {
                throw ErrorMsg::fatal (EOF_WORD, format (DeclareErrorMessage::IMPORT_EXTERN_PACKAGE, path.toStr ()), oneLine-> true,
                                       notes-> [ErrorMsg::fatal (EOF_WORD, format (DeclareErrorMessage::NO_SUCH_FILE, file.toStr ()), oneLine-> true)]);
            }
        }
    }

    /*!
     * ============================================================================
     * ============================================================================
     * ======================          OPTIMIZATION        ========================
     * ============================================================================
     * ============================================================================
     */

    /**
     * Optimize the generators validated during the validation step
     * @params:
     *     - file: the file in which everything was originated
     *     - gen: the list of generators to optimize
     * @returns: the list of optimized generators
     * */
    fn optimizationStep (mut self, file : &Path, gens : [&YILNode])-> [&YILNode] {
        if (self._args.noOpt) return gens;

        let dmut optim = Optimizer::new ();
        let opts = optim:.optimize (gens);

        if (global::state::instance ().isYmirDumping ()) {
            {
                with dmut f = File::create (file.addExtension ("ydump-opt"s8), write-> true) {
                    for i in opts {
                        f:.write (format ("%\n", i, withTags-> ["withVarIds"s8]));
                    }
                }
            } catch {
                err : &FsError => println( err );
            }
        }

        opts
    }

    /*!
     * ============================================================================
     * ============================================================================
     * =======================          GENERATION        =========================
     * ============================================================================
     * ============================================================================
     */

    /**
     * Expand the generators, by transforming complex values, and instructions into a list of single line instructions
     * It also transforms all the complex operators (Copier, Aliaser, etc.) into simple ones, such that backend does not need to worry about implementations
     * This step is the last before sending the generators to the backend
     * @params:
     *     - file : &Path,
     *     - gens: the list of generators to transform
     * @returns: the list of  nodes to send to the backend
     * */
    fn expansionStep (mut self, file : &Path, gens : [&Generator])-> [&YILNode] {
        if (self._args.noLint) return [];

        let dmut exp = Expander::new ();
        let finals = exp:.finalize (gens);

        if (global::state::instance ().isYmirDumping ()) {
            {

                with dmut f = File::create (file.addExtension ("ydump-yil"s8), write-> true) {
                    for fi in finals {
                        f:.write (format ("%\n", fi, withTags-> ["withVarIds"s8]));
                    }
                }
            } catch {
                err : &FsError => println( err );
            }
        }

        finals
    }

}
