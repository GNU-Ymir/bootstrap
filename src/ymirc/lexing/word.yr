mod ymirc::lexing::word;

import std::stream;
import std::io;
import std::hash;

pub static EOF_WORD = Word::eof ();

/**
 * A word encode a content part of a file
 * It is used to identify part of a file as a token, keyword, identifier, etc.
 */
pub class @final Word {

    let _str : [c8];

    let _locFile : [c8];

    let _line : u64;

    let _col : u64;

    let _seek : usize;

    let _fileContent : [c8];

    let _lineSeek : usize;

    let _isEof : bool = false;

    /**
     * Create an empty word
     * @params: 
     *   - filename: the file in which we want an empty word
     */
    pub self eof (filename : [c8] = ""s8) with
        _str = ""s8, _locFile = filename, _line = 0u64, _col = 0u64, _seek = 0us, _fileContent = ""s8, _lineSeek = 0us, _isEof = true
    {
    }

    /**
     * Create a word from a file 
     * @params: 
     *   - str: the content of the word
     *   - filename: the name of the file that contains the word
     *   - line: the location line of the word
     *   - col: the location column of the word
     *   - seek: the location cursor of the word (number of c8 preceding it)
     *   - lineSeek: the location cursor of the beginning of the line containing the word
     */
    pub self (str : [c8], filename : [c8], fileContent : [c8], line : u64, col : u64, seek : usize, lineSeek : usize) with
        _str = str, _locFile = filename, _fileContent = fileContent, _line = line, _col = col, _seek = seek, _lineSeek = lineSeek
    {
    }


    /**
     * Create a word from another word
     * @params: 
     *  - str: the content of the word
     *  - other: the location of the word
     */
    pub self (str : [c8], other : &Word, addLine : u64 = 0u64, addCol : u64 = 0u64) with
        _str = str, _locFile = other._locFile, _fileContent = other._fileContent, _line = other._line + addLine, _col = other._col + addCol, _seek = other._seek, _lineSeek = other._lineSeek
    {}

    
    /***
     * ============================================================================
     * ============================================================================
     * =========================          GETTERS        ==========================
     * ============================================================================
     * ============================================================================
     */
    
    /**
     * @returns: the content of the word
     */
    pub def str (self) -> [c8] {
        self._str
    }

    /**
     * @returns: the length of the content of the word
     */
    pub def len (self) -> usize {
        self._str.len 
    }

    /**
     * @returns: the location column of the word
     */
    pub def col (self) -> u64 {
        self._col
    }

    /**
     * @returns: the location line of the word
     */
    pub def line (self) -> u64 {
        self._line
    }

    /**
     * @returns: the cursor location of the word
     */
    pub def seek (self)-> usize {
        self._seek
    }

    /**
     * @returns: the content of the file containing the word
     */
    pub def fileContent (self) -> [c8] {
        self._fileContent
    }

    /**
     * @returns: the cursor position of the line containing the word
     */
    pub def lineSeek (self)-> usize {
        self._lineSeek
    }

    /**
     * @returns: the name of the file containing the word
     */
    pub def filename (self)-> [c8] {
        self._locFile
    }

    /**
     * @returns: true if the word is empty, (constructed with eof), false otherwise 
     */
    pub def isEof (self) -> bool {
        self._isEof
    }

    /**
     * @returns: true if the word is not empty, and its content is equals to o
     */
    pub def opEquals (self, o : [c8]) -> bool {
        if (self._isEof)
            false
        else 
            self._str == o
    }

    pub def isSame (self, o : &Word)-> bool {
        self._locFile == o._locFile &&
            self._line == o._line &&
            self._col == o._col &&
            self._seek == o._seek &&
            self._lineSeek == o._lineSeek &&
            self._isEof == o._isEof            
    }

    /***
     * ==================================================================================
     * ==================================================================================
     * =========================          MISCELLANEOUS        ==========================
     * ==================================================================================
     * ==================================================================================
     */
    
    impl Hashable {

        pub over hash (self)-> u64 {
            let mut mult = 31u64;
            let mut hash_value = 0x345678u64;
            
            hash_value = (hash_value ^ hash (self._locFile)) * mult;
            mult += (82520u64 + 12u64);
            hash_value = (hash_value ^ hash (self._line)) * mult;
            mult += (82520u64 + 12u64);
            hash_value = (hash_value ^ hash (self._col)) * mult;
            mult += (82520u64 + 12u64);
            hash_value = (hash_value ^ hash (self._seek)) * mult;
            mult += (82520u64 + 12u64);
            hash_value = (hash_value ^ hash (self._lineSeek)) * mult;
            mult += (82520u64 + 12u64);
            hash_value = (hash_value ^ hash (self._isEof)) * mult;
            
            return hash_value;
        }
    }
    
    impl Streamable {
        
        pub over toStream (self, dmut stream : &StringStream) -> void {
            import ymirc::utils::colors;
            if (self._isEof) {
                stream:.write (Colors::BOLD, "eof", Colors::RESET);
            } else {
                stream:.write (Colors::BOLD)
                    :.write (self._str)
                    :.write (" --> "s8)
                    :.write (self._locFile)
                    :.write (":("s8, self._line, ','c8, self._col, ") at "s8, self._lineSeek)
                    :.write (Colors::RESET);
            }
        }
    }

}
