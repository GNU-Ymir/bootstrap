mod ymirc::lint::optimizer::bblock;

import ymirc::utils::format;
import ymirc::lint::node::_;
import std::collection::list;
import std::collection::set;
import std::io;



static mut __ID__ = 0us;

/**
 * @returns: a uniq identifier
 */
pub fn generateUniqID ()-> usize {
    __ID__ += 1us;
    __ID__
}


/**
 * A basic block used to represent control flow
 * */
pub class BasicBlock {

    let _uid : usize;

    // BasicBlocks that can enter self, associated with the value conditionning the jump
    let dmut _previous = List!{(&BasicBlock, &YILValue)}::new ();

    // BasicBlock where self can go to, associated with the value conditionning the jump
    let dmut _next = List!{(&BasicBlock, &YILValue)}::new ();

    // List of instruction inside the basic block
    let dmut _instrs = List!{&YILInstr}::new ();

    /**
     * Create an empty basic block
     * */
    pub self ()
        with _uid = generateUniqID ()
    {}

    /**
     * Insert an instruction in the block
     * */
    pub fn push (mut self, instr : &YILInstr) {
        self._instrs:.push (instr);
    }

    /**
     * @returns: the last instruction of the block if any
     * */
    pub fn getLast (self)-> (&YILInstr)? {
        self._instrs.back ()
    }

    /**
     * @returns: true iif the last instruction does not exit the block (cond jump, goto, return)
     * */
    pub fn isFalling (self)-> bool {
        match self._instrs.back () {
            Ok (_ : &YILGoto) => return false;
            Ok (_ : &YILCondJmp) => return false;
            Ok (_ : &YILReturn) => return false;
        }

        true
    }

    /**
     * Insert an ancestor of the basic block
     * */
    pub fn insertFrom (mut self, dmut bb : &BasicBlock, reason : &YILValue) {
        self._previous:.push ((bb, reason));
        bb._next:.push ((self, reason));
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;


    pub fn format (self, dmut stream : &Formatter, dmut done : &HashSet!{usize} = HashSet!{usize}::new ()) {
        if (self._uid !in done) {
            let dmut inner = Formatter::new ();
            inner:.insertCustomFormatTag ("short"s8);
            for instr in self._instrs match instr {
                YILVarDecl () => {}
                _ => {
                    instr.format (alias inner);
                    inner:.write (";\n");
                }
            }

            stream:.write ("BB", self._uid, " [label=\"", inner[], "\"]\n");
            done:.insert (self._uid);

            for i in self._next {
                i.0.format (alias stream, done-> alias done);
                let reason = format ("%", i.1);
                stream:.write ("BB", self._uid, " -> "s8, "BB", i.0._uid, "[label=\"", reason, "\"]\n");
            }
        }
    }

}
