mod ymirc::lint::optimizer::visitor;

import std::collection::map;
import std::collection::vec;
import std::io;

import ymirc::utils::format;
import ymirc::lint::node::_;

/**
 * The optimizer class simplifies previously validated symbols
 */
pub class Optimizer {

    // The list of generators provided by the previous pass (validation)
    let mut _nodes : [&YILNode] = [];

    // The list of optimized generators
    let dmut _optimized = Vec!{&YILNode}::new ();


    /**
     * Create a new empty optimizer
     * */
    pub self () {}

    /**
     * Optimize a list of generators
     * */
    pub fn optimize (mut self, generators : [&YILNode])-> [&YILNode] {
        self._nodes = generators;
        for gen in self._nodes {
            self:.optimize (gen);
        }

        self._optimized[]
    }

    /**
     * Optimize a generator
     * */
    pub fn optimize (mut self, gen : &YILNode) {
        match gen {
            frame : &YILFrame => {
                self:.optimizeFrame (frame);
            }
            _ => {
                self._optimized:.push (gen);
            }
        }
    }

    /**
     * Optimize a frame generator
     * @params:
     *    - frame: the frame to optimize
     * */
    pub fn optimizeFrame (mut self, frame : &YILFrame) {
        self._optimized:.push (frame);
    }


}
