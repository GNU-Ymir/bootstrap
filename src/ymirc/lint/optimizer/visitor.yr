mod ymirc::lint::optimizer::visitor;

import std::collection::map;
import std::collection::vec;
import std::io;

import ymirc::utils::format;
import ymirc::lint::node::_;

import ymirc::lint::optimizer::bblock;
import ymirc::lexing::word;
import ymirc::syntax::keys;

/**
 * The optimizer class simplifies previously validated symbols
 */
pub class Optimizer {

    // The list of generators provided by the previous pass (validation)
    let mut _nodes : [&YILNode] = [];

    // The list of optimized generators
    let dmut _optimized = Vec!{&YILNode}::new ();


    /**
     * Create a new empty optimizer
     * */
    pub self () {}

    /**
     * Optimize a list of generators
     * */
    pub fn optimize (mut self, generators : [&YILNode])-> [&YILNode] {
        self._nodes = generators;
        for gen in self._nodes {
            self:.optimize (gen);
        }

        self._optimized[]
    }

    /**
     * Optimize a generator
     * */
    pub fn optimize (mut self, gen : &YILNode) {
        match gen {
            frame : &YILFrame => {
                self:.optimizeFrame (frame);
            }
            _ => {
                self._optimized:.push (gen);
            }
        }
    }

    /**
     * Optimize a frame generator
     * @params:
     *    - frame: the frame to optimize
     * */
    pub fn optimizeFrame (mut self, frame : &YILFrame) {
        let dmut rootBB = BasicBlock::new ();
        let dmut exitBB = BasicBlock::new ();
        match frame.getBody () {
            b : &YILBlock => {
                let dmut bb = self.createBasicBlockFromBlock (b, parent-> alias rootBB, exit-> alias exitBB);
                if (bb.isFalling ()) {
                    exitBB:.insertFrom (alias bb, YILIntValue::new (EOF_WORD, YIL_UINT_8, 1));
                }
            }
            x : _ => {
                eprintln (x::typeinfo.name);
                __pragma!panic ();
            }
        }

        // let dmut fr = Formatter::new ();
        // fr:.write ("digraph {\n")
        // fr:.entabing ();
        // rootBB.format (alias fr);
        // fr:.detabing ();
        // fr:.write ("}");
        // println (fr[]);


        self._optimized:.push (frame);
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        BASIC BLOCKS         ==========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Create a basic block from a block of instruction
     * @params:
     *    - bl: the block
     *    - parent: the block that conducted here
     * @returns:
     * */
    pub fn createBasicBlockFromBlock (self, bl : &YILBlock, dmut parent : &BasicBlock, dmut exit : &BasicBlock)-> dmut &BasicBlock {
        let dmut current = BasicBlock::new ();
        current:.insertFrom (alias parent, YILIntValue::new (EOF_WORD, YIL_UINT_8, 1));

        let dmut lst = HashMap!{usize, dmut &BasicBlock}::new ();
        lst:.insert (0us, alias current);

        for instr in bl.getInners () match instr {
            b : &YILBlock => {
                current = alias self.createBasicBlockFromBlock (b, alias current, alias exit);
            }
            l : &YILLabel => {
                if (current.isFalling ()) {
                    current:.push (YILGoto::new (EOF_WORD, l));
                }
                let dmut newBB = BasicBlock::new ();
                lst:.insert (l.getLabelId (), alias newBB);
                current = alias newBB;
            }
            _ => {
                current:.push (instr);
            }
        }

        for id in lst {
            let dmut opt = lst:.find (id);
            match ref opt {
                Ok (dmut bb : &BasicBlock) => {
                    match bb.getLast () {
                        Ok (g : &YILGoto) => {
                            let dmut opt2 = lst:.find (g.getLabel ().getLabelId ());
                            match ref opt2 {
                                Ok (dmut aux : &BasicBlock) => {
                                    aux:.insertFrom (alias bb, YILIntValue::new (EOF_WORD, YIL_UINT_8, 1));
                                }
                                _ => __pragma!panic ();
                            }
                        }
                        Ok (cnd : &YILCondJmp) => {
                            let dmut opt2 = lst:.find (cnd.getThenLabel ().getLabelId ()) ;
                            match ref opt2 {
                                Ok (dmut aux : &BasicBlock) => {
                                    aux:.insertFrom (alias bb, cnd.getCond ());
                                }
                                _ => __pragma!panic ();
                            }
                            let dmut opt3 = lst:.find (cnd.getElseLabel ().getLabelId ());
                            match ref opt3 {
                                Ok (dmut aux : &BasicBlock) => {
                                    aux:.insertFrom (alias bb, YILUnaryValue::new (EOF_WORD, YIL_UINT_8, UnaryOperators::NOT, cnd.getCond ()));
                                }
                                _ => __pragma!panic ();
                            }
                        }
                        Ok (_ : &YILReturn) => {
                            exit:.insertFrom (alias bb, YILIntValue::new (EOF_WORD, YIL_UINT_8, 1));
                        }
                    }
                }
            }
        }

        alias current
    }







}
