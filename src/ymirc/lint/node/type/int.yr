mod ymirc::lint::node::type::int;

import ymirc::lint::node::base;
import ymirc::lint::node::type::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io, std::hash;

import ymirc::global::state;

pub static YIL_SINT_8  = YILInt::new (true, 8u32);
pub static YIL_SINT_16 = YILInt::new (true, 16u32);
pub static YIL_SINT_32 = YILInt::new (true, 32u32);
pub static YIL_SINT_64 = YILInt::new (true, 64u32);

pub static YIL_UINT_8  = YILInt::new (false, 8u32);
pub static YIL_UINT_16 = YILInt::new (false, 16u32);
pub static YIL_UINT_32 = YILInt::new (false, 32u32);
pub static YIL_UINT_64 = YILInt::new (false, 64u32);

pub static YIL_UINT_MAX = YILInt::new (false, 0u32);
pub static YIL_SINT_MAX = YILInt::new (true, 0u32);

/**
 * A Ymir Intermediate Language int reference
 * */
pub class @final YILInt over YILType {

    // The size of the int in bit
    let _size : u32;

    // True if the type is signed
    let _signed : bool;

    pub self (signed : bool, size : u32)
        with _size = size
        , _signed = signed
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over getSize (self)-> u32 {
        if (self._size == 0u32) {
            state::instance ().getSizeTypeSize () / 8u32
        } else {
            self._size / 8u32
        }
    }

    pub over getAlign (self)-> u32 {
        if self._size == 0u32 {
            state::instance ().getSizeTypeSize () / 8u32
        } else {
            self._size / 8u32
        }
    }

    pub fn isSigned (self)-> bool {
        self._signed
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            i : &YILInt => {
                self._size == i._size && self._signed == i._signed
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Hashable;
    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            if (self._signed) {
                stream:.write ("i"s8, self.getSize () * 8u32);
            } else {
                stream:.write ("u"s8, self.getSize () * 8u32);
            }

        }
    }

}
