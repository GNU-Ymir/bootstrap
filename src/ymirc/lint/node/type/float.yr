mod ymirc::lint::node::type::float;

import ymirc::lint::node::base;
import ymirc::lint::node::type::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

import ymirc::global::state;

pub static YIL_FLOAT_32  = YILFloat::new (32u32);
pub static YIL_FLOAT_64 = YILFloat::new (64u32);
pub static YIL_FLOAT_80 = YILFloat::new (80u32);
pub static YIL_FLOAT_MAX = YILFloat::new (0u32);

/**
 * A Ymir Floatermediate Language float reference
 * */
pub class @final YILFloat over YILType {

    // The size of the float in bit
    let _size : u32;

    pub self (size : u32)
        with _size = size
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over getSize (self)-> u32 {
        if (self._size == 0u32) {
            state::instance ().getSizeTypeSize () / 8u32
        } else {
            self._size / 8u32
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            f : &YILFloat => {
                self._size == f._size
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("f"s8, self.getSize ());
        }
    }

}
