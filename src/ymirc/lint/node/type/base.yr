in base;

use ymirc::lint::node::base;

use ymirc::lexing::word;
use ymirc::utils::format;

lazy dmut UID = [0us ; 1];

fn createUniqId ()-> usize {
    let ret = UID [0];
    UID [0] += 1us;
    ret
}

/**
 * A Ymir Intermediate Language Type
 * */
@abstract
pub class YILType over YILNode {

    // The uniq id of the type
    let _uid : usize;

    pub self ()
        // Types don't really have a location
        with super (EOF_WORD)
        , _uid = createUniqId ()
    {}

    /**
     * @returns: the size in bytes of the type
     * */
    pub fn getSize (self)-> u32;

    /**
     * @returns: the alignement of the type
     * */
    pub fn getAlign (self)-> u32;


    /**
     * @returns: the uniq id of the type
     * */
    @final
    pub fn getUniqId (self)-> usize {
        self._uid
    }

}
