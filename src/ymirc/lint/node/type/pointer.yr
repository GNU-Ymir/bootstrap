in pointer;

use ymirc::lint::node::type::void_;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::{io, conv, stream};

use ymirc::global::state;

pub lazy YIL_PTR_VOID   = copy YILPointer (YIL_VOID);
pub lazy YIL_PTR_2_VOID = copy YILPointer (copy YILPointer (YIL_VOID));

/**
 * A Ymir Intermediate Language pointer reference
 * */
@final
pub class YILPointer over YILType {

    // The type inside the pointer
    let _inner : &YILType;

    pub self (inner : &YILType)
        with _inner = inner
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the pointeriable
     * */
    pub fn getInner (self)-> &YILType {
        self._inner
    }

    /**
     * @returns: the size in bytes of the type
     * */
    pub over getSize (self)-> u32 {
        state::instance ().getSizeTypeSize () / 8u32
    }

    pub over getAlign (self)-> u32 {
        state::instance ().getSizeTypeSize () / 8u32
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILPointer => {
                self._inner == v._inner
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Hashable;
    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("*(", self._inner, ')');
        }
    }

}
