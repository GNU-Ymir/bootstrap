mod ymirc::lint::node::type::pointer;

import ymirc::lint::node::base;
import ymirc::lint::node::type::base;
import ymirc::lint::node::type::void_;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

import ymirc::global::state;

pub static YIL_PTR_VOID = YILPointer::new (YILVoid::new ());
pub static YIL_PTR_2_VOID = YILPointer::new (YILPointer::new (YILVoid::new ()));

/**
 * A Ymir Intermediate Language pointer reference
 * */
pub class @final YILPointer over YILType {

    // The type inside the pointer
    let _inner : &YILType;

    pub self (inner : &YILType)
        with _inner = inner
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the pointeriable
     * */
    pub fn getInner (self)-> &YILType {
        self._inner
    }

    /**
     * @returns: the size in bytes of the type
     * */
    pub over getSize (self)-> u32 {
        state::instance ().getSizeTypeSize () / 8u32
    }

    pub over getAlign (self)-> u32 {
        state::instance ().getSizeTypeSize () / 8u32
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILPointer => {
                self._inner == v._inner
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("*("s8, self._inner, ')'c8);
        }
    }

}
