mod ymirc::lint::node::type::tuple;

import ymirc::lint::node::base;
import ymirc::lint::node::type::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

/**
 * A Ymir Intermediate Language pointer reference
 * */
pub class @final YILTuple over YILType {

    // The type inside the pointer
    let _inners : [&YILType];

    // The name of the fiels (@warning: .len <= _inners.len)
    let _fieldNames : [[c8]];

    pub self (inners : [&YILType], fieldNames : [[c8]] = [])
        with _inners = inners
        , _fieldNames = fieldNames
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the inner types of the tuple
     * */
    pub fn getInners (self)-> [&YILType] {
        self._inners
    }

    /**
     * @returns: the name of the fields
     * @warning: .len <= self.getInners ().len
     * */
    pub fn getFieldNames (self)-> [[c8]] {
        self._fieldNames
    }

    /**
     * @returns: the size in bytes of the type
     * */
    pub over getSize (self)-> u32 {
        0u32
    }


    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILTuple => {
                if self._fieldNames != v._fieldNames { return false; }
                if self._inners != v._inners { return false; }
                true
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('('c8);
            for i, ti in self._inners {
                if (i != 0us) stream:.write (", "s8);
                if (self._fieldNames.len > i) {
                    stream:.write (self._fieldNames [i], "-> "s8);
                }
                stream:.write (ti);
            }
            stream:.write (')'c8);
        }
    }

}
