in tuple;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::{io, conv, stream};

/**
 * A Ymir Intermediate Language pointer reference
 * */
@final
pub class YILTuple over YILType {

    // The type inside the pointer
    let _inners : [&YILType];

    // The name of the fiels (@warning: .len <= _inners.len)
    let _fieldNames : [[c8]];

    // True if the type is an union type
    let _isUnion : bool;

    // True if the type is packed
    let _isPacked : bool;

    pub self (inners : [&YILType], fieldNames : [[c8]] = [], isUnion : bool = false, isPacked : bool = false)
        with _inners = inners
        , _fieldNames = fieldNames
        , _isUnion = isUnion
        , _isPacked = isPacked
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the inner types of the tuple
     * */
    pub fn getInners (self)-> [&YILType] {
        self._inners
    }

    /**
     * @returns: the name of the fields
     * @warning: .len <= self.getInners ().len
     * */
    pub fn getFieldNames (self)-> [[c8]] {
        self._fieldNames
    }

    /**
     * @returns: the size in bytes of the type
     * */
    pub over getSize (self)-> u32 {
        if (self._isUnion) return self.getSizeUnion ();
        if (self._isPacked) return self.getSizePacked ();

        let mut current = 0u32;
        let mut glob = 0u32;
        let mut globAlign = 1u32;

        for inner in self._inners {
            let innerSize = inner.getSize ();
            let align = inner.getAlign ();

            if (align > globAlign) { globAlign = align; }

            let padding = (align - (current % align)) % align;
            let aligned = (current + padding);

            current = aligned + innerSize;
            glob += padding + innerSize;
        }

        if (glob % globAlign != 0u32) {
            glob = glob + (globAlign - (glob % globAlign));
        }

        glob
    }

    pub over getAlign (self)-> u32 {
        if (self._isPacked) { return 1u32 };

        let mut max = 1u32;
        for i in self._inners {
            let align = i.getAlign ();
            if (align > max) { max = align; }
        }

        max
    }

    pub fn isUnion (self)-> bool {
        self._isUnion
    }

    pub fn isPacked (self)-> bool {
        self._isPacked
    }


    fn getSizeUnion (self)-> u32 {
        let mut max = 1u32;
        for i in self._inners {
            let size = i.getSize ();
            if (size > max) { max = size; }
        }

        max
    }

    fn getSizePacked (self)-> u32 {
        let mut all = 0u32;
        for i in self._inners {
            all += i.getSize ();
        }

        if (all == 0u32) { 1u32 }
        else {
            all
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILTuple => {
                if self._fieldNames != v._fieldNames { return false; }
                if self._inners != v._inners { return false; }
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Hashable;
    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('(');
            if (self._isUnion) stream:.write ("@union");
            else if (self._isPacked) stream:.write ("@packed");

            for i, ti in self._inners {
                if (i != 0us || self._isUnion || self._isPacked) stream:.write (", ");
                if (self._fieldNames.len > i) {
                    stream:.write (self._fieldNames [i], "-> ");
                }
                stream:.write (ti);
            }
            stream:.write (')');
        }
    }

}
