in void_;

use ymirc::lexing::word;
use ymirc::utils::{format, packet};
use std::{conv, io, stream};

pub lazy YIL_VOID = copy YILVoid ();

/**
 * A Ymir Intermediate Language void reference
 * */
@final
pub class YILVoid over YILType {

    pub self () {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over getSize (self)-> u32 {
        1u32
    }

    pub over getAlign (self)-> u32 {
        1u32
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            YILVoid () => { true }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Packable {
        pub over packName (self, ref dmut out : [u8]) {
            self.super.packName (ref out);
        }
    }

    impl Hashable;
    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("void");
        }
    }

}
