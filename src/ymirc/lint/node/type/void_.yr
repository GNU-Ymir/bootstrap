mod ymirc::lint::node::type::void_;

import ymirc::lint::node::base;
import ymirc::lint::node::type::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io, std::hash;


pub static YIL_VOID = YILVoid::new ();

/**
 * A Ymir Intermediate Language void reference
 * */
pub class @final YILVoid over YILType {

    pub self () {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub over getSize (self)-> u32 {
        1u32
    }

    pub over getAlign (self)-> u32 {
        1u32
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            YILVoid () => { true }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Hashable;
    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("void"s8);
        }
    }

}
