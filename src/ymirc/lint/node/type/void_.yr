mod ymirc::lint::node::type::void_;

import ymirc::lint::node::base;
import ymirc::lint::node::type::base;
import ymirc::utils::format;

import std::io;


pub def YIL_VOID_TYPE = YILVoidType::new ();

/**
 * Ymir Intermediate Language type
 * */
pub class YILVoidType over YILType {

    pub self () with super (0u32) {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two generators
     * @returns: true, iif the two generators are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            YILVoidType () => { return true; }
        }
        false
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("void"s8);
        }
    }


}
