in array;

use ymirc::lint::node::type::void_;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::{io, conv, stream};

/**
 * A Ymir Intermediate Language array reference
 * */
@final
pub class YILArray over YILType {

    // The type inside the array
    let _inner : &YILType;

    // The length of the array
    let _len : usize;

    pub self (inner : &YILType, len : usize, uid : usize = 0us)
        with super (uid-> uid)
        , _inner = inner
        , _len = len
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the arrayiable
     * */
    pub fn getInner (self)-> &YILType {
        self._inner
    }

    /**
     * @returns: the number of elements in the type
     * */
    pub fn getLen (self)-> usize {
        self._len
    }

    /**
     * @returns: the size in bytes of the type
     * */
    pub over getSize (self)-> u32 {
        self._inner.getSize () * cast!u32 (self._len)
    }

    pub over getAlign (self)-> u32 {
        self._inner.getAlign ()
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILArray => {
                if (self._len != v._len) return false;
                if (self._inner != v._inner) return false;

                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Hashable {
        pub over toHash (self)-> u64 {
            core::types::hash::__hash ((self._inner, self._len))
        }
    }

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            if stream.tags.withParams {
                stream:.write ("array A_", self._uid);
                // do not print parameters of inner type
                stream:.write (" [", format ("%", self._inner), " ; ", self._len, ']');
            } else {
                stream:.write ("A_", self._uid);
            }
        }
    }

}
