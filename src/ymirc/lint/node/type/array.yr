mod ymirc::lint::node::type::array;

import ymirc::lint::node::base;
import ymirc::lint::node::type::base;
import ymirc::lint::node::type::void_;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

pub static YIL_ARRAY_VOID = YILArray::new (YILVoid::new (), 0us);

/**
 * A Ymir Intermediate Language array reference
 * */
pub class @final YILArray over YILType {

    // The type inside the array
    let _inner : &YILType;

    // The length of the array
    let _len : usize;

    pub self (inner : &YILType, len : usize)
        with _inner = inner
        , _len = len
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the arrayiable
     * */
    pub fn getInner (self)-> &YILType {
        self._inner
    }

    /**
     * @returns: the number of elements in the type
     * */
    pub fn getLen (self)-> usize {
        self._len
    }

    /**
     * @returns: the size in bytes of the type
     * */
    pub over getSize (self)-> u32 {
        self._inner.getSize () * cast!u32 (self._len)
    }

    pub over getAlign (self)-> u32 {
        self._inner.getAlign ()
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILArray => {
                self._inner == v._inner
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("["s8, self._inner, ';'c8, self._len, ']'c8);
        }
    }

}
