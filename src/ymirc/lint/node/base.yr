mod ymirc::lint::node::base;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

static mut __ID__ = 0us;

/**
 * @returns: a uniq identifier
 */
pub fn generateUniqID ()-> usize {
    __ID__ += 1us;
    __ID__
}

/**
 * Intermediate Language node
 * Unlike generators, lint node are low level instructions
 * They are generally single line operations, that constructs only one value
 * @example:
 * =======
 * let a = [1, 2, 3];
 * =======
 * Is transformed into :
 * @example:
 * ========
 * let a : [i32 ; 3];
 * a [0] = 1;
 * a [2] = 2;
 * a [3] = 3;
 * ========
 *
 * Or :
 * @example:
 * =========
 * fn foo ()-> [i32 ; 2];
 *
 * let a = (expand foo (),);
 * =========
 * Into :
 * @example:
 * ==========
 * let a : (i32, i32);
 * let Y0 : [i32 ; 2];
 * Y0 = foo ();
 * a.0 = Y0[0]
 * a.1 = Y0[1]
 * ==========
 * */
pub class @abstract YILNode {

    /// The uniq id of the lint node
    let _uniqId : usize;

    pub self () with _uniqId = generateUniqID () {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the uniq id of the generator
     */
    pub fn @final getUniqId (self)-> usize {
        self._uniqId
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two generators
     * @returns: true, iif the two generators are strictly identical
     */
    pub fn opEquals (self, o : &YILNode)-> bool;


    /**
     * @returns: true iif the dynamic type of self is T
     */
    pub fn isOf {T} (self) -> bool {
        match self {
            _ : T  => { true }
            _ => { false }
        }
    }

    /**
     * @returns: a generator of type T iif the dynamic type of self is T, panic otherwise
     */
    pub fn asOf {T} (self) -> T {
        match self {
            x : T  => { x }
            _ => {
                __pragma!panic ();
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable;

}
