mod ymirc::lint::node::base;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

/**
 * Ancestor of all Ymir intermediate Language representation
 * */
pub class @abstract YILNode {

    /// The location of the node
    let _loc : &Word;

    /**
     * @params:
     *   - loc: the location of the generator
     */
    pub self (loc : &Word)
        with _loc = loc
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the location of the generator
     */
    pub fn @final getLoc (self)-> &Word {
        self._loc
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub fn opEquals (self, o : &YILNode)-> bool;


    /**
     * @returns: true iif the dynamic type of self is T
     */
    pub fn isOf {T} (self) -> bool {
        match self {
            _ : T  => { true }
            _ => { false }
        }
    }

    /**
     * @returns: a generator of type T iif the dynamic type of self is T, panic otherwise
     */
    pub fn asOf {T} (self) -> T {
        match self {
            x : T  => { x }
            _ => {
                __pragma!panic ();
            }
        }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable;

}
