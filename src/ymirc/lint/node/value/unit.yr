in unit;

use ymirc::lint::node::{base, value::base, type::{base, void_}};

use ymirc::lexing::word;
use ymirc::utils::format;
use std::{io, conv};


pub lazy YIL_UNIT_VALUE = YILUnit::new (Word::eof (), YILVoid::new ());

/**
 * A Ymir Intermediate Language unit reference
 * */
@final
pub class YILUnit over YILValue {

    pub self (loc : &Word, type : &YILType)
        with super (loc, type)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            YILUnit () => { true }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("<unit-value>");
        }
    }

}
