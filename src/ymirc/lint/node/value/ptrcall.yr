mod ymirc::lint::node::value::ptrcall;

import ymirc::lint::node::base;
import ymirc::lint::node::value::base;
import ymirc::lint::node::type::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

/**
 * A Ymir Intermediate Language pointer reference
 * */
pub class @final YILPtrCallValue over YILValue {

    let _params : [&YILValue];

    // The ptr of the function being called
    let _funcPtr : &YILValue;

    pub self (loc : &Word, type : &YILType, funcPtr : &YILValue, params : [&YILValue])
        with super (loc, type)
        , _params = params
        , _funcPtr = funcPtr
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getParameters (self)-> [&YILValue] {
        self._params
    }

    pub fn getFuncPtr (self)-> &YILValue {
        self._funcPtr
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILPtrCallValue => {
                if self._funcPtr != v._funcPtr { return false; }
                if self._params != v._params { return false; }
                true
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("(*"s8, self._funcPtr, ")("s8);
            for i, ti in self._params {
                if (i != 0us) stream:.write (", "s8);
                stream:.write (ti);
            }
            stream:.write (')'c8);
        }
    }

}
