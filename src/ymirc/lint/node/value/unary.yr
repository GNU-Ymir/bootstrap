in unary;

use ymirc::lint::node::{base, value::base, type::base};

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;

use std::{io, conv};

/**
 * A Ymir Intermediate Language pointer reference
 * */
@final
pub class YILUnaryValue over YILValue {

    let _left : &YILValue;

    // The name of the function being called
    let _op : UnaryOperators;

    pub self (loc : &Word, type : &YILType, op : UnaryOperators, left : &YILValue)
        with super (loc, type)
        , _op = op
        , _left = left
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> &YILValue {
        self._left
    }

    pub fn getOperator (self)-> UnaryOperators {
        self._op
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILUnaryValue => {
                if self._op != v._op { return false; }
                if self._left != v._left { return false; }
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._op, ' ', self._left);
        }
    }

}
