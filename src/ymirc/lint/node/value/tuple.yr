in tuple;

use ymirc::lint::node::type;

use ymirc::lexing::word;
use ymirc::utils::format;

use std::{conv, io, stream};


/**
 * A Ymir Intermediate Language unit reference
 * */
@final
pub class YILTupleValue over YILValue {

    // The content of the literal
    let _value : [&YILValue];

    // THe name of the fields to affect (@warning .len <= ._value.len)
    let _fieldNames : [[c8]];

    pub self (loc : &Word, type : &YILType, value : [&YILValue], fieldNames : [[c8]] = [])
        with super (loc, type)
        , _value = value
        , _fieldNames = fieldNames
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> [&YILValue] {
        self._value
    }

    pub fn getFieldNames (self)-> [[c8]] {
        self._fieldNames
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            i : &YILTupleValue => {
                if self._type != i._type { return false };
                if self._fieldNames != i._fieldNames { return false; }
                self._value == i._value
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ('(');
            for i, vi in self._value {
                if (i != 0us) stream:.write (", ");
                if (self._fieldNames.len > i) {
                    stream:.write (self._fieldNames [i], "-> ");
                }

                stream:.write (vi);
            }
            stream:.write (')');
        }
    }
}
