mod ymirc::lint::node::value::var;

import ymirc::lint::node::base;
import ymirc::lint::node::value::base;
import ymirc::lint::node::type::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

/**
 * A Ymir Intermediate Language var reference
 * */
pub class @final YILVar over YILValue {

    // The name of the vardecl
    let _name : [c8];

    let _isTemp : bool;

    // The uniq id used to refer to the variable
    let _varId : usize;

    // True if the var is thread local
    let _isThreadLocal : bool;

    pub self (loc : &Word, name : [c8], type : &YILType, varId : usize, isTemp : bool = false, isThreadLocal : bool = false)
        with super (loc, type)
        , _name = name
        , _varId = varId
        , _isThreadLocal = isThreadLocal
        , _isTemp = isTemp
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the variable
     * */
    pub fn getName (self)-> [c8] {
        self._name
    }

    /**
     * @returns: the var id
     * */
    pub fn getVarId (self)-> usize {
        self._varId
    }

    /**
     * @returns: true if the var is a ref to a global var that is thread local
     * */
    pub fn isThreadLocal (self)-> bool {
        self._isThreadLocal
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILVar => {
                self._varId == v._varId
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            if (self._isTemp && self._varId != 0us) {
                let id = stream:.getYilId (self._varId);
                stream:.write ("YI_", id);
            } else {
                stream:.write (self._name);
                if (self._isThreadLocal) stream:.write ("@tl"s8);
                if (stream.withVarIds () && self._varId != 0us) {
                    stream:.write ("(#"s8, self._varId.to!{[c8], 36us} (), ')'c8);
                }
            }
        }
    }

}
