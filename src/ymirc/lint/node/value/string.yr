in string;

use ymirc::lint::node::{type, type::{array, int}};

use ymirc::lexing::word;
use ymirc::utils::format;

use std::{io, conv, stream};


/**
 * A Ymir Intermediate Language unit reference
 * */
@final
pub class YILStringValue over YILValue {

    // The content of the literal
    let _value : [u8];

    pub self (loc : &Word, type : &YILType, value : [u8])
        with super (loc, type)
        , _value = value
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * ==========================          GETTERS          ===========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> [u8] {
        self._value
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            i : &YILStringValue => {
                if self._type != i._type { return false };
                self._value == i._value
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            let FST = 5us, END = 4us;
            let z = if let a : &YILArray = self._type {
                if let i : &YILInt = a.getInner () {
                    i
                } else panic;
            } else panic;

            if (z.getSize () == 1u32) {
                stream:.write ('\"');
                for i, vi in self._value {
                    if (stream.tags.short && self._value.len > FST + END + 5us) {
                        if (i == FST) {
                            stream:.write ("[...]");
                        } else if (i >= self._value.len - END || i < FST && i != self._value.len - 1us) {
                            stream:.write (cast!c8 (vi));
                        }
                    } else {
                        if (i != self._value.len - 1us) {
                            stream:.write (cast!c8 (vi));
                        }
                    }
                }
                stream:.write ('\"');
            } else {
                stream:.write ('[');
                for i, vi in self._value {
                    if (stream.tags.short && self._value.len > FST + END + 3us) {
                        if (i == FST) {
                            stream:.write ("..., ");
                        } else if (i >= self._value.len - END || i < FST) {
                            stream:.write (vi);
                            if (i != self._value.len - 1us) {
                                if (i != 0us) stream:.write (", ");
                            }
                        }
                    } else {
                        stream:.write (vi);
                    }
                }
                stream:.write (']');
            }
        }
    }
}
