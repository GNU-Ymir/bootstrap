in int;

use ymirc::lint::node::{base, value::base, type::{base, int}};

use ymirc::lexing::word;
use ymirc::utils::format;
use ymirc::utils::bigint;

use std::{io, conv};

pub lazy YIL_NULL_VALUE = YILIntValue::new (Word::eof (),
                                            YILInt::new (false, 0u32),
                                            0us);

/**
 * A Ymir Intermediate Language unit reference
 * */
@final
pub class YILIntValue over YILValue {

    // The content of the literal
    let _value : &BigInt;

    pub self (loc : &Word, type : &YILType, value : &BigInt)
        with super (loc, type)
        , _value = value
    {}


    pub self (loc : &Word, type : &YILType, v : usize)
        with super (loc, type)
        , _value = BigInt::new (v)
    {}

    pub self (loc : &Word, type : &YILType, v : u64)
        with super (loc, type)
        , _value = BigInt::new (v)
    {}

    pub self (loc : &Word, type : &YILType, v : u32)
        with super (loc, type)
        , _value = BigInt::new (v)
    {}

    pub self (loc : &Word, type : &YILType, v : i64)
        with super (loc, type)
        , _value = BigInt::new (v)
    {}

    pub self (loc : &Word, type : &YILType, v : i32)
        with super (loc, type)
        , _value = BigInt::new (v)
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> &BigInt {
        self._value
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            i : &YILIntValue => {
                if self._type != i._type { return false };
                self._value == i._value
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._value);
        }
    }
}
