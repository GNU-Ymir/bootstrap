in begincatch;

use ymirc::lint::node::{type, type::pointer};

use ymirc::lexing::word;
use ymirc::utils::{format, packet};

use std::{io, conv, stream};


/**
 * A Ymir Intermediate Language unit reference
 * */
@final
pub class YILBeginCatch over YILValue {

    // The name of the function making the catch
    let _name : [c8];

    pub self (loc : &Word, name : [c8])
        with super (loc, YIL_PTR_VOID)
        , _name = name
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================            GETTERS           =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getName (self)-> [c8] {
        self._name
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            s : &YILBeginCatch => {
                if (self._name != s._name) return false;
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Packable {
           pub over packName (self, ref dmut out : [u8]) {
               self.super.packName (ref out);
           }
    }

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._name, " (ephtr (0))");
        }
    }


}
