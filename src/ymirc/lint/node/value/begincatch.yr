mod ymirc::lint::node::value::begincatch;

import ymirc::lint::node::base;
import ymirc::lint::node::value::base;
import ymirc::lint::node::type::base;
import ymirc::lint::node::type::pointer;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::conv, std::io;


/**
 * A Ymir Intermediate Language unit reference
 * */
pub class @final YILBeginCatch over YILValue {

    pub self (loc : &Word)
        with super (loc, YIL_PTR_VOID)
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            _ : &YILBeginCatch => {
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("begin_catch ()"s8);
        }
    }


}
