in field;

use ymirc::lint::node::{base, value::{base, unref}, type::base};

use ymirc::lexing::word;
use ymirc::syntax::keys;
use ymirc::utils::format;

use std::{io, conv};

/**
 * A Ymir Intermediate Language tuple field access
 * */
@final
pub class YILFieldValue over YILValue {

    let _tuple : &YILValue;

    let _index : usize;

    let _name : [c8];


    pub self (loc : &Word, type : &YILType, tuple : &YILValue, index : usize = 0us, name : [c8] = "")
        with super (loc, type)
        , _tuple = tuple
        , _index = index
        , _name = name
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> &YILValue {
        self._tuple
    }

    pub fn getIndex (self)-> usize {
        self._index
    }

    pub fn getName (self)-> [c8] {
        self._name
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILFieldValue => {
                if self._tuple != v._tuple { return false; }
                if self._name != v._name { return false; }
                if self._index != v._index { return false; }
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            match self._tuple {
                p : &YILUnrefValue => { stream:.write (p.getValue (), "-> "); }
                o : _ => { stream:.write (o, "."); }
            }

            if (self._name.len != 0us) stream:.write (self._name);
            else stream:.write ('_', self._index);
        }
    }

}
