in namecall;

use ymirc::lint::node::{base, value::base, type::base};

use ymirc::lexing::word;
use ymirc::utils::format;
use std::{io, conv};

/**
 * A Ymir Intermediate Language pointer reference
 * */
@final
pub class YILNameCallValue over YILValue {

    let _params : [&YILValue];

    // The name of the function being called
    let _funcName : [c8];

    pub self (loc : &Word, type : &YILType, funcName : [c8], params : [&YILValue])
        with super (loc, type)
        , _params = params
        , _funcName = funcName
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getParameters (self)-> [&YILValue] {
        self._params
    }

    pub fn getFuncName (self)-> [c8] {
        self._funcName
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILNameCallValue => {
                if self._funcName != v._funcName { return false; }
                if self._params != v._params { return false; }
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._funcName, '(');
            for i, ti in self._params {
                if (i != 0us) stream:.write (", ");
                stream:.write (ti);
            }
            stream:.write (')');
        }
    }

}
