in access;

use ymirc::lint::node::{base, value::base, type::base};

use ymirc::lexing::word;
use ymirc::utils::format;

use std::{conv, io};

/**
 * A Ymir Intermediate Language
 * */
@final
pub class YILArrayAccessValue over YILValue {

    // The content of the literal
    let _value : &YILValue;

    // THe index of the access
    let _index : &YILValue;

    pub self (loc : &Word, type : &YILType, value : &YILValue, index : &YILValue)
        with super (loc, type)
        , _value = value
        , _index = index
    {}

/*!
     * ================================================================================
     * ================================================================================
     * ==========================          GETTERS          ===========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getValue (self)-> &YILValue {
        self._value
    }

    pub fn getIndex (self)-> &YILValue {
        self._index
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            i : &YILArrayAccessValue => {
                if self._type != i._type { return false };
                if self._value != i._value { return false; }
                self._index == i._index
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._value, '['c8, self._index, ']'c8);
        }
    }
}
