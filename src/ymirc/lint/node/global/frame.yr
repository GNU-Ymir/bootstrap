in frame;

use ymirc::lint::node::{_, instr::vardecl};

use ymirc::lexing::word;
use ymirc::utils::{format, packet};
use std::{stream, fs::path};

/**
 * A frame in Ymir Intermediate Language
 * */
@final
pub class YILFrame over YILSymbol {

    // The types of the parameters
    let _params : [&YILVarDecl];

    // The return type of the frame
    let _retType : &YILType;

    // The body of the frame
    let _body : &YILInstr;

    // True if the frame is a package constructor
    let _isGlobalCtor : bool;

    pub self (loc : &Word, name : [c8], params : [&YILVarDecl], retType : &YILType, body : &YILInstr, refs : [[c8] => Path], isWeak : bool = false, isGlobalCtor : bool = false)
        with super (loc, name, isWeak, refs)
        , _params = params
        , _retType = retType
        , _body = body
        , _isGlobalCtor = isGlobalCtor
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the parameters of the frame
     * */
    pub fn getParameters (self)-> [&YILVarDecl] {
        self._params
    }

    /**
     * @returns: the type of the function
     * */
    pub fn getReturnType (self)-> &YILType {
        self._retType
    }

    /**
     * @returns: the body of the function
     * */
    pub fn getBody (self)-> &YILInstr {
        self._body
    }

    /**
     * @returns: true iif the frame is a global ctor
     * */
    pub fn isGlobalCtor (self)-> bool {
        self._isGlobalCtor
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            f : &YILFrame => {
                if self._name != f._name { return false; }
                if self._params != f._params { return false; }
                if self._retType != f._retType { return false; }
                if self._body != f._body { return false; }
                if self._isWeak != f._isWeak { return false; }

                return true;
            }
        }

        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;

    impl Packable {
        pub over packName (self, ref dmut out : [u8]) {
            self.super.packName (ref out);
        }
    }

    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("frame : ");
            if (self._isGlobalCtor) { stream:.write (" [package]"); }
            if (self._isWeak) { stream:.write (" [weak]"); }
            stream:.write (' ', self._name, ' ');
            stream:.write ('(');

            stream:.entabing ();
            for i, tp in self._params {
                if (i != 0us) stream:.write (", ");
                stream:.write (tp);
            }

            stream:.write (")-> ");
            self._retType.format (alias stream);

            stream:.write (' ');
            stream:.detabing ();

            self._body.format (alias stream);
        }
    }




}
