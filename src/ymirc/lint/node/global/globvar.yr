mod ymirc::lint::node::global::globvar;

import ymirc::lint::node::base;
import ymirc::lint::node::global::base;
import ymirc::lint::node::value::base;

import std::collection::set;
import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;

/**
 * A constant global value in Ymir Intermediate Language
 * */
pub class @final YILGlobalVar over YILSymbol {

    // The value of the constant
    let _value : &YILValue;

    // True iif the global var is local
    let _isThreadLocal : bool;

    pub self (loc : &Word, name : [c8], value : &YILValue, refs : &HashSet!{[c8]}, isWeak : bool = false, isThreadLocal : bool = false)
        with super (loc, name, isWeak, refs)
        , _value = value
        , _isThreadLocal = isThreadLocal
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the value of the constant
     * */
    pub fn getValue (self)-> &YILValue {
        self._value
    }

    /**
     * @returns: true iif the variable is thread local
     * */
    pub fn isThreadLocal (self)-> bool {
        self._isThreadLocal
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            c : &YILGlobalVar => {
                if self._name != c._name { return false; }
                if self._value != c._value { return false; }
                if self._isWeak != c._isWeak { return false; }
                if self._isThreadLocal != c._isThreadLocal { return false; }

                return true;
            }
        }

        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;

    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("var : "s8);
            if (self._isWeak) {
                stream:.write ("[weak]"s8);
            }

            stream:.write (' 'c8, self._name);
            if (self._isThreadLocal) stream:.write ("@tl"s8);

            stream:.write (' 'c8);
            self._value.format (alias stream);
        }
    }



}
