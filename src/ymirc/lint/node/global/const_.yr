in const_;

use ymirc::lint::node::{value, type};

use ymirc::lexing::word;
use ymirc::utils::{format, packet};
use std::{stream, fs::path};

/**
 * A constant global value in Ymir Intermediate Language
 * */
@final
pub class YILConstant over YILSymbol {

    // The value of the constant
    let _value : &YILValue;

    // True if the symbol is a local symbol
    let _isLocal : bool;

    pub self (loc : &Word, name : [c8], value : &YILValue, refs : [[c8] => Path], isWeak : bool = false, isLocal : bool = false)
        with super (loc, name, isWeak, refs)
        , _value = value
        , _isLocal = isLocal
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * @returns: the value of the constant
     * */
    pub fn getValue (self)-> &YILValue {
        self._value
    }

    /**
     * @returns: true if this is a local constant (without complex name, and stuff)
     * */
    pub fn isLocal (self)-> bool {
        self._isLocal
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            c : &YILConstant => {
                if self._name != c._name { return false; }
                if self._value != c._value { return false; }
                if self._isWeak != c._isWeak { return false; }

                return true;
            }
        }

        false
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Packable {
        pub over packName (self, ref dmut out : [u8]) {
            self.super.packName (ref out);
        }
    }

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("const : ");
            if (self._isLocal || self._isWeak) {
                stream:.write ("[");
                if (self._isWeak) {
                    stream:.write ("weak");
                    if (self._isLocal) stream:.write (",");
                }
                if (self._isLocal) { stream:.write ("local"); }
                stream:.write ("]");
            }

            stream:.write (' ', self._name, ' ');
            self._value.format (alias stream);
        }
    }



}
