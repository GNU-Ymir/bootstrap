in instr;

pub mod ::affect;
pub mod ::block;
pub mod ::call;
pub mod ::condjmp;
pub mod ::goto;
pub mod ::label;
pub mod ::return_;
pub mod ::trycatch;
pub mod ::tryfin;
pub mod ::vardecl;


use ymirc::lexing::word;
use ymirc::utils::format;
use ymirc::utils::packet;
use ymirc::lint::node::instr::_;

/**
 * A Ymir Intermediate Language Instruction
 * */
@abstract
pub class YILInstr over YILNode {

    pub self (loc : &Word)
        with super (loc)
    {}

    impl Packable {
        pub over packName (self, ref dmut out : [u8]) {
            let code = match self {
                YILAffect ()     => { "i1" }
                YILBlock ()      => { "i2" }
                YILCall ()       => { "i3" }
                YILCondJmp ()    => { "i4" }
                YILGoto ()       => { "i5" }
                YILLabel ()      => { "i6" }
                YILReturn ()     => { "i7" }
                YILTryCatch ()   => { "i8" }
                YILTryFinally () => { "i9" }
                YILVarDecl ()    => { "i10" }
                _                => { "i0" }
            };

            packet::pack (code, ref out);
        }
    }
}
