mod ymirc::lint::node::instr::condjmp;

import ymirc::lint::node::base;
import ymirc::lint::node::instr::base;
import ymirc::lint::node::instr::label;
import ymirc::lint::node::value::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

/**
 * A Ymir Intermediate Language Conditional Jump
 * */
pub class @final YILCondJmp over YILInstr {

    // The condition value to test
    let _cond : &YILValue;

    // The label to goto if condition is met
    let _then : &YILLabel;

    // The label to goto if condition is not met
    let _else : &YILLabel;

    pub self (loc : &Word, cond : &YILValue, then : &YILLabel, else_ : &YILLabel)
        with super (loc)
        , _cond = cond
        , _then = then
        , _else = else_
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    pub fn getCond (self)-> &YILValue {
        self._cond
    }

    pub fn getThenLabel (self)-> &YILLabel {
        self._then
    }

    pub fn getElseLabel (self)-> &YILLabel {
        self._else
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILCondJmp => {
                if self._cond != v._cond { return false; }
                if self._then != v._then { return false; }
                if self._else != v._else { return false; }
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.detabing ();
            stream:.write ("#IF ", self._cond, "\n");
            stream:.write ("#THEN_GOTO ", self._then.getName (), "(#", self._then.getLabelId ().to!{[c8], 36us} (), ")\n");
            stream:.write ("#ELSE_GOTO ", self._else.getName (), "(#"s8, self._else.getLabelId ().to!{[c8], 36us} (), ')'c8);
            stream:.entabing ();
        }
    }

}
