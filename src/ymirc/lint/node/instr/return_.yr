mod ymirc::lint::node::instr::return_;

import ymirc::lint::node::base;
import ymirc::lint::node::instr::base;
import ymirc::lint::node::value::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

/**
 * A Ymir Intermediate Language Return
 * */
pub class @final YILReturn over YILInstr {

    // The left operand
    let _value : &YILValue;


    pub self (loc : &Word, value : &YILValue)
        with super (loc)
        , _value = value
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    pub fn getValue (self)-> &YILValue {
        self._value
    }


    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILReturn => {
                self._value == v._value
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("return "s8, self._value);
        }
    }

}
