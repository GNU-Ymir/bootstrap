mod ymirc::lint::node::instr::trycatch;

import ymirc::lint::node::base;
import ymirc::lint::node::instr::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;


/**
 * Ymir Intermediate Language representation of a try catch
 * */
pub class @final YILTryCatch over YILInstr {

    /// List of instruction to execute inside the try
    let _tryP : [&YILInstr];


    /// List of instruction to execute when exiting
    let _catchP : [&YILInstr];


    pub self (loc : &Word, tryP : [&YILInstr], catchP : [&YILInstr])
        with super (loc)
        , _tryP = tryP
        , _catchP = catchP
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getTryPart (self)-> [&YILInstr] {
        self._tryP
    }

    pub fn getCatchPart (self)-> [&YILInstr] {
        self._catchP
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILTryCatch => {
                if self._tryP != v._tryP return false;
                if self._catchP != v._catchP return false;
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("try {\n"s8);
            stream:.entabing ();
            for i in self._tryP {
                stream:.write (i, ";\n"s8);
            }
            stream:.detabing ();
            stream:.write ("}\ncatch{\n"s8);
            stream:.entabing ();
            for i in self._catchP {
                stream:.write (i, ";\n"s8);
            }
            stream:.detabing ();
            stream:.write ("}"s8);
        }
    }


}
