in block;

use ymirc::lint::node::instr::vardecl;

use ymirc::lexing::word;
use ymirc::utils::{format, packet};
use std::stream;

/**
 * A Ymir Intermediate Language Block
 * */
@final
pub class YILBlock over YILInstr {

    let _instrs : [&YILInstr];

    pub self (loc : &Word, instrs : [&YILInstr])
        with super (loc)
        , _instrs = instrs
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getInners (self)-> [&YILInstr] {
        self._instrs
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILBlock => {
                self._instrs == v._instrs
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Packable {
        pub over packName (self, ref dmut out : [u8]) {
            self.super.packName (ref out);
        }
    }

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("{\n");
            stream:.entabing ();
            for i in self._instrs match i {
                YILVarDecl () => {
                    if stream.tags.withVars {
                        stream:.write (i, ";\n");
                    }
                }
                _ => {
                    stream:.write (i, ";\n");
                }
            }
            stream:.detabing ();
            stream:.write ("}");
        }
    }

}
