mod ymirc::lint::node::instr::block;

import ymirc::lint::node::base;
import ymirc::lint::node::instr::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

/**
 * A Ymir Intermediate Language Block
 * */
pub class @final YILBlock over YILInstr {

    let _instrs : [&YILInstr]

    pub self (loc : &Word, instrs : [&YILInstr])
        with super (loc)
        , _instrs = instrs
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILBlock => {
                self._instrs == v._instrs
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("{\n"s8);
            stream:.entabing ();
            for i in self._instrs {
                stream:.write (i, ";\n");
            }
            stream:.detabing ();
            stream:.write ("}\n"s8);
        }
    }

}
