in label;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

/**
 * A Ymir Intermediate Language Label
 * */
@final
pub class YILLabel over YILInstr {

    // The name of the label
    let _name : [c8];

    // The uniq id used to refer to the variable
    let _lblId : usize;

    pub self (loc : &Word, name : [c8], labelId : usize)
        with super (loc)
        , _name = name
        , _lblId = labelId
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the variable
     * */
    pub fn getName (self)-> [c8] {
        self._name
    }

    /**
     * @returns: the var id
     * */
    pub fn getLabelId (self)-> usize {
        self._lblId
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILLabel => {
                self._lblId == v._lblId
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.detabing ();
            stream:.write ("#LABEL ", self._name);
            stream:.write ("(#", self._lblId.to!{[c8], 36us} (), ')');
            stream:.entabing ();
        }
    }

}
