mod ymirc::lint::node::instr::affect;

import ymirc::lint::node::base;
import ymirc::lint::node::instr::base;
import ymirc::lint::node::value::base;

import ymirc::lexing::word;
import ymirc::utils::format;
import std::conv, std::io;

/**
 * A Ymir Intermediate Language Affect
 * */
pub class @final YILAffect over YILInstr {

    // The left operand
    let _left : &YILValue;

    // The right operand
    let _right : &YILValue;


    pub self (loc : &Word, left : &YILValue, right : &YILValue)
        with super (loc)
        , _left = left
        , _right = right
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    pub fn getLeft (self)-> &YILValue {
        self._left
    }

    pub fn getRight (self)-> &YILValue {
        self._right
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILAffect => {
                if self._left != v._left return false;
                if self._right != v._right return false;
                true
            }
            _ => { false }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write (self._left, " = "s8, self._right);
        }
    }

}
