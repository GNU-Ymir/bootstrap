in vardecl;

use ymirc::lint::node::type;

use ymirc::lexing::word;
use ymirc::utils::{format, packet};
use std::stream;

/**
 * A Ymir Intermediate Language var declaration
 * */
@final
pub class YILVarDecl over YILInstr {

    // The name of the vardecl
    let _name : [c8];

    // The uniq id used to refer to the variable
    let _varId : usize;

    // The type of the variable
    let _type : &YILType;

    let _isTemp : bool;

    pub self (loc : &Word, name : [c8], type : &YILType, varId : usize, isTemp : bool = false)
        with super (loc)
        , _name = name
        , _varId = varId
        , _type = type
        , _isTemp = isTemp
    {}

    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the name of the variable
     * */
    pub fn getName (self)-> [c8] {
        self._name
    }

    /**
     * @returns: the type of the variable
     * */
    pub fn getType (self)-> &YILType {
        self._type
    }

    /**
     * @returns: the var id
     * */
    pub fn getVarId (self)-> usize {
        self._varId
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILVarDecl => {
                self._varId == v._varId
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Packable {
        pub over packName (self, ref dmut out : [u8]) {
            self.super.packName (ref out);
        }
    }

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            if (self._isTemp && self._varId != 0us) {
                let id = stream:.getYilId (self._varId);
                stream:.write ("let YI_", id);
                stream:.write (" : ", self._type);
            } else {
                stream:.write ("let ", self._name);
                if (stream.tags.withVarIds) {
                    stream:.write ("(#", std::conv::to!{[c8], 36} (self._varId), ')');
                }
                stream:.write (" : ", self._type);
            }
        }
    }

}
