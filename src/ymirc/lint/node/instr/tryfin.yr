in tryfin;

use ymirc::lint::node::instr::vardecl;

use ymirc::lexing::word;
use ymirc::utils::format;
use std::stream;

/**
 * Ymir Intermediate Language representation of a try finally
 * */
@final
pub class YILTryFinally over YILInstr {

    /// List of instruction to execute inside the try
    let _tryP : [&YILInstr];


    /// List of instruction to execute when exiting
    let _finP : [&YILInstr];


    pub self (loc : &Word, tryP : [&YILInstr], finP : [&YILInstr])
        with super (loc)
        , _tryP = tryP
        , _finP = finP
    {}


    /*!
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    pub fn getTryPart (self)-> [&YILInstr] {
        self._tryP
    }

    pub fn getFinallyPart (self)-> [&YILInstr] {
        self._finP
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================          COMPARISON          =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Compare two nodes
     * @returns: true, iif the two nodes are strictly identical
     */
    pub over opEquals (self, o : &YILNode)-> bool {
        match o {
            v : &YILTryFinally => {
                if self._tryP != v._tryP return false;
                if self._finP != v._finP return false;
                true
            }
            _ => { false }
        }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.write ("try {\n");
            stream:.entabing ();
            for i in self._tryP match i {
                YILVarDecl () => {
                    if stream.tags.withVars {
                        stream:.write (i, ";\n");
                    }
                }
                _ => {
                    stream:.write (i, ";\n");
                }
            }

            stream:.detabing ();
            stream:.write ("}\nfinally{\n");
            stream:.entabing ();
            for i in self._finP match i {
                YILVarDecl () => {
                    if stream.tags.withVars {
                        stream:.write (i, ";\n");
                    }
                }
                _ => {
                    stream:.write (i, ";\n");
                }
            }

            stream:.detabing ();
            stream:.write ("}");
        }
    }


}
