in value;

pub mod ::access;
pub mod ::addr;
pub mod ::array;
pub mod ::begincatch;
pub mod ::binary;
pub mod ::cast_;
pub mod ::field;
pub mod ::float;
pub mod ::int;
pub mod ::namecall;
pub mod ::ptrcall;
pub mod ::string;
pub mod ::tuple;
pub mod ::unary;
pub mod ::unit;
pub mod ::unref;
pub mod ::var;

use ymirc::lint::node::type;
use ymirc::lexing::word;
use std::stream;

use ymirc::lint::node::value::_;

/**
 * A Ymir Intermediate Language Value
 * */
@abstract
pub class YILValue over YILNode {

    let _type : &YILType;

    pub self (loc : &Word, type : &YILType)
        with super (loc)
        , _type = type
    {}

    @final
    pub fn getType (self)-> &YILType {
        self._type
    }

}
