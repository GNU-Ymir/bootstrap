mod ymirc::lint::visitor;

import std::io;
import std::collection::vec;

import ymirc::semantic::generator::_;
import ymirc::lint::symbol::_;
import ymirc::lint::node::_;

import ymirc::utils::_;

/***
 * This class transforms frame generators nodes into lint nodes
 * */
pub class GenerateVisitor {

    // The mangler used to mangle symbols
    let dmut _mangler = Mangler::new ();

    // The frame being generated
    let dmut _currentFrame = Vec!{dmut &YILFrame}::new ();

    // The body of the frame being generated
    let dmut _frameGeneration = Vec!{dmut &YILBlock}::new ();

    /**
     * Empty visitor
     * */
    pub self () {}

    /**
     * Generate the lint node from the generator
     * @params:
     *    - gen: the generator to transform
     * */
    pub fn generate (mut self, gen : &Generator)-> &YILSymbol {
        match gen {
            frame : &FrameGenerator => {
                return self:.generateFrame (frame);
            }
            _ => {
                eprintln (gen::typeinfo.name);
                eprintln (format ("%", gen));
                __pragma!panic ();
            }
        }
    }

    /**
     * ================================================================================
     * ================================================================================
     * ===============================         FRAMES         =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Generate a frame in YIL from a frame generator
     * @params:
     *    - frame: the frame to generate
     * */
    fn generateFrame (mut self, frame : &FrameGenerator)-> &YILSymbol {
        let dmut yilF = YILFrame::new (frame.getLoc (),
                                        frame.getName ().toStr (sep-> "::"s8),
                                        self._mangler.mangleFrame (frame));

        self:.generateFrameArguments (alias yilF, frame);
        self:.generateFrameBody (alias yilF, frame.getBody ());

        yilF
    }

    /**
     * Generate and register the arguments of the frame being generated
     * */
    fn generateFrameArguments (mut self, dmut yilF : &YILFrame, frame : &FrameGenerator) {
        self._frameGeneration:.push (YILBlock::new (frame.getLoc ()));
        yilF;
        frame;
    }

    /**
     * Generate the body of a frame
     * @params:
     *    - yilF: the frame to generate
     *    - value: the body of the frame to generate
     * */
    fn generateFrameBody (mut self, dmut yilF : &YILFrame, value : &Value) {
        value;
        yilF:.setBody (self._frameGeneration:.pop ());
    } catch {
        _ : &OutOfArray => __pragma!panic ();
    }


}
