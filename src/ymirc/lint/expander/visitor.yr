mod ymirc::lint::expander::visitor;


import ymirc::lint::expander::value;
import ymirc::lint::expander::type;
import ymirc::lint::expander::stmtlist;

import ymirc::lint::node::_;

import std::collection::map;
import std::collection::vec;
import std::collection::set;
import std::io;

import ymirc::utils::format;
import ymirc::semantic::symbol::path;
import ymirc::semantic::validator::interpret;
import ymirc::semantic::generator::_;

import ymirc::global::core_;
import ymirc::global::state;

import ymirc::syntax::keys;


import ymirc::lexing::word;
import std::fs::path;

/**
 * The expander class simplifies previously validated symbols
 */
pub class Expander {

    /**
     * =====================================================================================
     * =====================================================================================
     * =========================         GLOBAL GENERATORS         =========================
     * =====================================================================================
     * =====================================================================================
     */

    // The module being constructed
    let mut _globName : [c8] = ""s8;

    // The list of generators provided by the previous pass (validation)
    let mut _generators : [&Generator] = [];

    // The list of expanded frames
    let dmut _expFrames = Vec!{&YILNode}::new ();

    // The list of expanded constants
    let dmut _expConsts = Vec!{&YILNode}::new ();

    /**
     * =====================================================================================
     * =====================================================================================
     * ====================         FINALIZER AND MISC VISITORS         ====================
     * =====================================================================================
     * =====================================================================================
     */

    // The mangler used to mangle symbol names
    let _mangler = Mangler::new ();

    // Compile time interpret used to simplify values
    let dmut _cteInterpret = CompileTimeInterpreter::new ();

    // // The expander responsible for value expansions
    let dmut _valueExpander = ValueExpander::new ();

    // The expander responsible for value expansions
    let dmut _typeExpander = TypeExpander::new ();

    /**
     * =====================================================================================
     * =====================================================================================
     * =======================         CONTEXT FINALIZATION         ========================
     * =====================================================================================
     * =====================================================================================
     */

    // The current scope variable declarations
    let dmut _variables = Vec!{dmut &HashMap!{usize, &YILValue}}::new ();

    // The current uniq id for variables in the current frame
    let dmut _varUniqId = Vec!{usize}::new ();

    // The current uniq id for labels in the current frame
    let dmut _lblUniqId = Vec!{usize}::new ();

    // The var in which to put the result of loops (when breaking)
    let dmut _loopVar = Vec!{&YILValue}::new ();

    // The label to exit the loop
    let dmut _loopLabel = Vec!{&YILLabel}::new ();

    // The list of classes already validated
    let dmut _classValidated = HashMap!{[c8], &YILType}::new ();

    // The list of class currently in validation
    let dmut _inClassValidation = HashSet!{[c8]}::new ();

    // Global string stored in the text segment
    let dmut _strConsts = HashMap!{[c8], &YILValue}::new ();

    // THe uniq ID of string literals
    let mut _strUniqId = 0us;

    /**
     * =====================================================================================
     * =====================================================================================
     * ==============================         CTORS         ================================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * Create a new empty expander
     * */
    pub self () {}

    /**
     * Expande a list of generators
     * */
    pub fn finalize (mut self, generators : [&Generator])-> [&YILNode] {
        let packagePath = global::state::instance ().getPackage ().stripExtension ();
        self._globName = self._mangler.manglePath (SymbolPath::new (packagePath.toStr (sep-> "::"s8)));

        println (self._globName);

        self._generators = generators;
        for gen in self._generators {
            self:.finalize (gen);
        }

        self._expConsts[] ~ self._expFrames[]
    }

    /**
     * Expande a generator
     * */
    pub fn finalize (mut self, gen : &Generator) {
        match gen {
            frame : &FrameGenerator => {
                self:.finalizeFrame (frame);
            }
            cl : &ClassRefType => {
                self:.finalizeClass (cl);
            }
            _ => {
                __pragma!panic ();
            }
        }
    }

    /**
     * =====================================================================================
     * =====================================================================================
     * =========================          FRAME EXPANSION          =========================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * Expande a frame generator
     * @params:
     *    - frame: the frame to expande
     * */
    pub fn finalizeFrame (mut self, frame : &FrameGenerator) {
        let dmut list = StmtList::new ();

        self:.enterFrame ();
        self:.enterBlock ();

        let dmut parameters = Vec!{&YILVarDecl}::new ();
        for pi in frame.getParameters () match pi {
            p : &ProtoVarValue => {
                let varId = self:.generateVarId ();
                let type = self:.finalizeType (p.getType ());
                parameters:.push (YILVarDecl::new (p.getLoc (), p.getLoc ().str (), type, varId));
                self:.registerVariable (p.getUniqId (), YILVar::new (p.getLoc (), p.getLoc ().str (), type, varId));
            }
        }

        let _ = self:.finalizeValue (frame.getBody (), alias list);
        self:.exitBlock ();
        self:.exitFrame ();

        let name = self._mangler.mangle (frame);
        let final = YILFrame::new (frame.getLoc (),
                                   name,
                                   parameters[],
                                   self:.finalizeType (frame.getReturnType ()),
                                   body-> YILBlock::new (frame.getLoc (), list[]),
                                   isWeak-> frame.isWeak ());

        self._expFrames:.push (final);

        if (!frame.isWeak () && !state::instance ().isUnittestActive () && frame.getName ().asStdPath ().file () == Keys::MAIN) {
            self:.finalizeMainCall (name, frame.getReturnType ().isOf!{&VoidType} ());
        }
    }

    /**
     * Generate the frame of the "main" function that calls the actual program main func
     * */
    fn finalizeMainCall (mut self, name : [c8], isVoid : bool) {
        let dmut list = StmtList::new ();
        self:.enterFrame ();
        self:.enterBlock ();

        let argsT = [YIL_UINT_32, YIL_PTR_VOID];
        let argIds = [self:.generateVarId (), self:.generateVarId ()]

        let argcDecl = YILVarDecl::new (EOF_WORD, "argc"s8, argsT [0], argIds [0]);
        let argvDecl = YILVarDecl::new (EOF_WORD, "argv"s8, argsT [1], argIds [1]);

        let argcRef = YILVar::new (EOF_WORD, "argc"s8, argsT [0], argIds [0]);
        let argvRef = YILVar::new (EOF_WORD, "argc"s8, argsT [1], argIds [1]);

        let moduleFuncMain = YILAddrValue::new (EOF_WORD, YIL_PTR_VOID, YILVar::new (EOF_WORD, name, YIL_VOID, 0us));
        let runMain = if (state::instance ().isDebugActive ()) {
            CoreNames::RUN_MAIN_DEBUG
        } else {
            CoreNames::RUN_MAIN_RELEASE
        };

        let call = YILNameCallValue::new (EOF_WORD,
                                          YIL_SINT_32,
                                          runMain, [argcRef, argvRef, moduleFuncMain]);

        if (isVoid) {
            list:.append (YILCall::new (EOF_WORD, call));
            list:.append (YILReturn::new (EOF_WORD, YILIntValue::new (EOF_WORD, YIL_SINT_32, 0us)));
        } else {
            list:.append (YILReturn::new (EOF_WORD, call));
        }

        self:.exitBlock ();
        self:.exitFrame ();

        let final = YILFrame::new (EOF_WORD,
                                   Keys::MAIN,
                                   [argcDecl, argvDecl],
                                   YIL_SINT_32,
                                   body-> YILBlock::new (EOF_WORD, list[]),
                                   isWeak-> false);

        self._expFrames:.push (final);
    }

    /**
     * =====================================================================================
     * =====================================================================================
     * =========================          CLASS EXPANSION          =========================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * Finalize a class reference type (vtable, and typeinfo)
     * */
    pub fn finalizeClass (mut self, cl : &ClassRefType) {
        let typeinfoValue = self:.finalizeClassTypeInfo (cl);
        let vtableValue = self:.finalizeClassVtable (cl);


        let vtableName = self._mangler.mangleVtable (cl);
        let tiName = self._mangler.mangleTypeInfo (cl);

        // Const VTABLE
        self._expConsts:.push (YILConstant::new (cl.getLoc (),
                                                 vtableName,
                                                 vtableValue,
                                                 isWeak-> cl.getSymbol ().isWeak ()));

        // Const TYPEINFO
        self._expConsts:.push (YILConstant::new (cl.getLoc (),
                                                 tiName,
                                                 typeinfoValue,
                                                 isWeak-> cl.getSymbol ().isWeak ()));
    }

    /**
     * Finalize the typeinfo value of a class type, to write it in the text as a global variable
     * */
    pub fn finalizeClassTypeInfo (mut self, cl : &ClassRefType)-> &YILValue {
        let dmut list = StmtList::new ();

        let slcType = self:.finalizeType (SliceType::new (cl.getLoc (), VOID_TYPE));
        let ancestorSlice = match cl.getAncestor () {
            anc : &ClassRefType => {
                let ancTIN = self._mangler.mangleTypeInfo (anc);
                let ancTIV = YILAddrValue::new (cl.getLoc (), YIL_PTR_VOID,
                                                YILVar::new (cl.getLoc (), ancTIN, YIL_PTR_VOID, 0us));

                let len = YILIntValue::new (cl.getLoc (), YIL_UINT_MAX, 1us);
                YILTupleValue::new (cl.getLoc (), slcType, [len, ancTIV], fieldNames-> [SliceKeys::LEN, SliceKeys::PTR])
            }
            _ => {
                YILTupleValue::new (cl.getLoc (), slcType, [YIL_NULL_VALUE, YIL_NULL_VALUE], fieldNames-> [SliceKeys::LEN, SliceKeys::PTR])
            }
        };

        let ti = cl.getTypeInfo ().asOf!{&TypeInfoValue} ();
        let id = self:.finalizeValue (ti.getId (), alias list);
        let size = self:.finalizeValue (ti.getSize (), alias list);
        let name = self:.finalizeValue (ti.getName (), alias list);
        let type = self:.finalizeType (ti.getType ());
        let fields = type.asOf!{&YILTuple} ().getFieldNames ();

        // Dynamic objects in the typeinfo
        if (list.len () != 0us) __pragma!panic ();

        YILTupleValue::new (cl.getLoc (), type, [id, size, ancestorSlice, name], fieldNames-> fields)
    }

    /**
     * Finalize the vtable value of a class to write it in the text as a global variable
     * */
    pub fn finalizeClassVtable (mut self, cl : &ClassRefType)-> &YILValue {
        let len = cl.getVtable ().len + 2us; // TI, Dtor, vtable

        let resultType = YILArray::new (YIL_PTR_VOID, len);
        let dmut params = Vec!{&YILValue}::new ();

        let TIN = self._mangler.mangleTypeInfo (cl);
        let TIV = YILAddrValue::new (cl.getLoc (), YIL_PTR_VOID, YILVar::new (cl.getLoc (), TIN, YIL_PTR_VOID, 0us));
        params:.push (TIV);


        match cl.getDestructor () {
            UnitValue () => {
                params:.push (YIL_NULL_VALUE);
            }
            p : &PrototypeValue => {
                let name = self._mangler.mangle (p);
                let addr = YILAddrValue::new (p.getLoc (), YIL_PTR_VOID, YILVar::new (p.getLoc (), name, YIL_VOID, 0us));
                params:.push (addr);
            }
            _ => __pragma!panic ();
        };

        for mt in cl.getVtable () {
            let name = self._mangler.mangle (mt);
            let addr = YILAddrValue::new (mt.getLoc (), YIL_PTR_VOID, YILVar::new (mt.getLoc (), name, YIL_VOID, 0us));
            params:.push (addr);
        }

        YILArrayValue::new (cl.getLoc (), resultType, params[])
    }

    /**
     * =====================================================================================
     * =====================================================================================
     * ======================          TYPE/VALUE EXPANSION          =======================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * Finalize a value
     * @params:
     *    - value: the value to finalize
     * */
    pub fn finalizeValue (mut self, val : &Value, dmut list : &StmtList)-> &YILValue {
        self._valueExpander:.finalize (alias self, val, alias list)
    }

    /**
     * Finalize a type
     * @params:
     *    - ty: the type to finalize
     * */
    pub fn finalizeType (mut self, ty : &Type)-> &YILType {
        self._typeExpander.finalize (alias self, ty)
    }

    /**
     * =====================================================================================
     * =====================================================================================
     * =========================              GETTERS              =========================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * @returns: the mangler used to mangle symbol names
     * */
    pub fn getMangler (self)-> &Mangler {
        self._mangler
    }

    /**
     * @returns: the expander used to finalize types
     * */
    pub fn getTypeExpander (self)-> &TypeExpander {
        self._typeExpander
    }

    /**
     * @returns: the compile time interpret used to simplify values
     * */
    pub fn getCompileTimeInterpret (self)-> &CompileTimeInterpreter {
        self._cteInterpret
    }

    /**
     * =====================================================================================
     * =====================================================================================
     * =========================              CONTEXT              =========================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * @returns: the declaration of the variable containing the value of the current loop
     * */
    pub fn getLoopVarRef (self)-> &YILValue {
        self._loopVar [$ - 1us]
    }

    /**
     * @returns: the label exiting the current loop
     * */
    pub fn getLoopExitLabel (self)-> &YILLabel {
        self._loopLabel [$ - 1us]
    }

    /**
     * Enter a loop where varref is the value of the loop
     * */
    pub fn enterLoop (mut self, varref : &YILValue, lbl : &YILLabel) {
        self._loopVar:.push (varref);
        self._loopLabel:.push (lbl);
    }

    /**
     * Exit a loop context
     * */
    pub fn exitLoop (mut self) {
        self._loopVar:.pop ();
        self._loopLabel:.pop ();
    }  catch {
        _ => __pragma!panic ();
    }

    /**
     * Enter a new frame
     * */
    pub fn enterFrame (mut self) {
        self._varUniqId:.push (1us); // first ID id 1, 0 means no ref
        self._lblUniqId:.push (1us);
    }

    /**
     * Exit the current frame
     * */
    pub fn exitFrame (mut self) {
        self._varUniqId:.pop (1u64);
        self._lblUniqId:.pop (1u64);
    }

    /**
     * @returns: the next uniq id for a variable in the current frame
     * */
    pub fn generateVarId (mut self)-> usize {
        let id = self._varUniqId [$ - 1us];
        (alias self._varUniqId) [self._varUniqId.len () - 1us] += 1us;
        id
    }

    /**
     * @returns: the next uniq id for a variable in the current frame
     * */
    pub fn generateLblId (mut self)-> usize {
        let id = self._lblUniqId [$ - 1us];
        (alias self._lblUniqId) [self._lblUniqId.len () - 1us] += 1us;
        id
    }

    /**
     * Enter a new scope of variables
     * */
    pub fn enterBlock (mut self) {
        self._variables:.push (HashMap!{usize, &YILValue}::new ());
    }

    /**
     * Exit a scope of variables
     * */
    pub fn exitBlock (mut self) {
        self._variables:.pop (1u64);
    }

    /**
     * Register a variable declaration in the scope
     * @params:
     *    - old: the uniq id of the previous declaration
     *    - new: the uniq id of the new declaration
     * */
    pub fn registerVariable (mut self, old : usize, vref : &YILValue) {
        (alias self._variables)[$ - 1us]:.insert (old, vref);
    }

    /**
     * Search the id of a variable declared in the current frame
     * @returns: the id, or None if the variable is not in the frame
     * */
    pub fn getVariable (self, old : usize)-> (&YILValue)? {
        for i in self._variables {
            match i.find (old) {
                Ok (n : &YILValue) => { return n?; }
            }
        }

        ((&YILValue)?)::__err__
    }

    /**
     * Find a global string already containing the following val
     * */
    pub fn findGlobalString (self, val : [c8])-> (&YILValue)? {
        self._strConsts.find (val)
    }

    /**
     * Register a global const to contain the string value
     * @returns: the varref to this global const
     * */
    pub fn registerGlobalString (mut self, val : [c8], value : &YILValue)-> &YILValue {
        let name = format (".__STR_%_%", self._globName, self._strUniqId);
        self._strUniqId += 1us;

        let cst = YILConstant::new (EOF_WORD, name, value, isLocal -> true);
        let vref = YILAddrValue::new (EOF_WORD,
                                      YIL_PTR_VOID,
                                      YILVar::new (EOF_WORD, name, YIL_PTR_VOID, 0us));

        self._expConsts:.push (cst);
        self._strConsts:.insert (val, vref);
        vref
    }

    /**
     * =====================================================================================
     * =====================================================================================
     * =======================              TYPE CONTEXT              ======================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * Find the type of the class if already validated
     * */
    pub fn findClassValidation (self, cr : &ClassRefType)-> (&YILType)? {
        self._classValidated.find (cr.getSymbol ().getPath ().toStr ())
    }

    /**
     * @returns: true if the class is being validated
     * */
    pub fn isInClassValidation (self, cr : &ClassRefType)-> bool {
        cr.getSymbol ().getPath ().toStr () in self._inClassValidation
    }

    /**
     * Start a finalization of a class type
     * */
    pub fn enterClassValidation (mut self, cr : &ClassRefType) {
        self._inClassValidation:.insert (cr.getSymbol ().getPath ().toStr ());
    }

    /**
     * Class finalized
     * */
    pub fn exitClassValidation (mut self, cr : &ClassRefType, res : &YILType) {
        self._inClassValidation:.remove (cr.getSymbol ().getPath ().toStr ());
        self._classValidated:.insert (cr.getSymbol ().getPath ().toStr (), res);
    }

}
