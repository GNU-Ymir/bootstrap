mod ymirc::lint::expander::type;

import ymirc::lint::expander::visitor;
import ymirc::lint::expander::value;
import ymirc::lint::expander::stmtlist;

import ymirc::lint::node::type::_;

import std::collection::map;
import std::collection::vec;
import std::io;

import ymirc::utils::format;
import ymirc::semantic::generator::_;
import ymirc::global::core_;

import ymirc::syntax::keys;

import ymirc::lexing::word;
import std::fs::path;

/**
 * The type expander is used to expand types into a list of statements
 */
pub class TypeExpander {

    /**
     * Create an empty type expander
     * */
    pub self () {}

    /**
     * Finalize a type
     * @params:
     *    - context: the context of the expansion
     *    - ty: the type to expand
     * @returns: the final type
     * */
    pub fn finalize (self, dmut context : &Expander, ty : &Type)-> &YILType {
        match ty {
            b : &NativeType => { self.finalizeNative (alias context, b) }
            c : &CustomType => { self.finalizeCustom (alias context, c) }
            t : &TemporaryType => { self.finalizeTemporary (alias context, t) }
            _ => {
                eprintln (ty::typeinfo.name);
                __pragma!panic ();
            }
        }
    }

    /**
     * @returns: the depth of a pointer
     * @example:
     * ================
     * *i32 => 1
     * *(*i32) => 2
     * *(*(*i32)) => 3
     * i32 => 0
     * ================
     * */
    pub fn getPointerDepth (self, ty : &YILType)-> usize {
        match ty {
            p : &YILPointer => { 1us + self.getPointerDepth (p.getInner ()) }
            _ => { 0us }
        }
    }

    /*!
     * =====================================================================================
     * =====================================================================================
     * =========================            NATIVE TYPES           =========================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * Expand a native type
     * @params:
     *    - context: the context of the expansion
     *    - ty: the type to expand
     * */
    fn finalizeNative (self, dmut context : &Expander, ty : &NativeType)-> &YILType {
        match ty {
            BoolType () => { return YIL_UINT_8; }
            c : &CharType => { return self.finalizeChar (c); }
            f : &FloatType => { return self.finalizeFloat (f); }
            i : &IntType => { return self.finalizeInt (i); }
            VoidType () => { return YIL_VOID; }
            NoneType () => { return YIL_VOID; }
            d : &DelegateType => { return self.finalizeDelegate (alias context, d); }
            fptr : &FuncPtrType => { return self.finalizeFuncPtr (alias context, fptr); }
            cmp : &CompoundType => { return self.finalizeCompound (alias context, cmp); }
            _ => {
                eprintln (ty::typeinfo.name);
                __pragma!panic ();
            }
        }
    }

    /**
     * Finalize a char type
     * */
    fn finalizeChar (self, c : &CharType)-> &YILType {
        match c.getSize () {
            8u16 => { YIL_UINT_8 }
            16u16 => { YIL_UINT_16 }
            _ => { YIL_UINT_32 }
        }
    }

    /**
     * Finalize an int type
     * */
    fn finalizeInt (self, i : &IntType)-> &YILType {
        match (i.getSize (), i.isSigned ()) {
            (8u16, true) => { YIL_SINT_8 }
            (16u16, true) => { YIL_SINT_16 }
            (32u16, true) => { YIL_SINT_32 }
            (64u16, true) => { YIL_SINT_64 }
            (_, true) => { YIL_SINT_MAX }

            (8u16, false) => { YIL_UINT_8 }
            (16u16, false) => { YIL_UINT_16 }
            (32u16, false) => { YIL_UINT_32 }
            (64u16, false) => { YIL_UINT_64 }
            _  => { YIL_UINT_MAX }
        }
    }

    /**
     * Finalize a float type
     * */
    fn finalizeFloat (self, f : &FloatType)-> &YILType {
        match f.getSize () {
            32u16 => { YIL_FLOAT_32 }
            64u16 => { YIL_FLOAT_64 }
            80u16 => { YIL_FLOAT_80 }
            _ => { YIL_FLOAT_MAX }
        }
    }

    /**
     * Finalize a delegate type
     * @params:
     *    - context: the context of the expansion
     *    - d: the delegate type to expand
     * */
    fn finalizeDelegate (self, dmut _ : &Expander, _ : &DelegateType)-> &YILType {
        YILTuple::new ([YIL_PTR_VOID, YIL_PTR_VOID], fieldNames-> [DelegateKeys::CLOSURE, DelegateKeys::FUNC])
    }

    /**
     * Finalize a lazy type
     * */
    pub fn finalizeLazy (self)-> &YILType {
        let delegateT = YILTuple::new ([YIL_PTR_VOID, YIL_PTR_VOID], fieldNames-> [DelegateKeys::CLOSURE, DelegateKeys::FUNC]);
        let opt = YILTuple::new ([YIL_UINT_8, YIL_PTR_VOID, YIL_UINT_32, delegateT],
                                 fieldNames-> [LazyKeys::IS_SET, LazyKeys::VALUE, LazyKeys::SIZE, LazyKeys::FUNC]);

        opt
    }

    /**
     * Finalize a function pointer type
     * @params:
     *    - context: the context of the finalization
     *    - fptr: the type to finalize
     * */
    fn finalizeFuncPtr (self, dmut _ : &Expander, _ : &FuncPtrType)-> &YILType {
        YIL_PTR_VOID
    }

    /**
     * Finalize a compound type
     * @params:
     *    - context: the context of the finalization
     *    - ty: the type to finalize
     * */
    fn finalizeCompound (self, dmut context : &Expander, ty : &CompoundType)-> &YILType {
        match ty {
            a : &ArrayType => { return self.finalizeArray (alias context, a); }
            p : &PointerType => { return self.finalizePointer (alias context, p); }
            r : &RangeType => {  return self.finalizeRange (alias context, r); }
            s : &SliceType => { return self.finalizeSlice (alias context, s); }
            t : &TupleType => { return self.finalizeTuple (alias context, t); }
            o : &OptionType => { return self.finalizeOption (alias context, o); }
            f : &FutureType => { return self.finalizeFuture (alias context, f); }
            m : &MapType => { return self.finalizeMap (alias context, m); }
            _ => {
                eprintln (ty::typeinfo.name);
                __pragma!panic ();
            }
        }
    }

    /**
     * Finalize an array type
     * */
    fn finalizeArray (self, dmut context : &Expander, ty : &ArrayType)-> &YILType {
        let inner = context:.finalizeType (ty.getInners ()[0]);
        if (inner.isOf!{&YILVoid} ()) return YIL_ARRAY_VOID;

        YILArray::new (inner, ty.getLen ())
    }

    /**
     * Finalize a pointer type
     * */
    fn finalizePointer (self, dmut context : &Expander, ty : &PointerType)-> &YILType {
        if (ty.getInners ()[0].isOf!{&NoneType} ()) return YIL_PTR_VOID; // null literal type

        let inner = context:.finalizeType (ty.getInners ()[0]);
        if (inner.isOf!{&YILVoid} ()) return YIL_PTR_VOID;

        YILPointer::new (inner)
    }

    /**
     * Finalize a range type
     * */
    fn finalizeRange (self, dmut context : &Expander, rng : &RangeType)-> &YILType {
        let inner = context:.finalizeType (rng.getInners ()[0]);
        let step = context:.finalizeType (rng.getInners ()[1]);

        YILTuple::new ([inner, inner, step, YIL_UINT_8],
                       fieldNames-> [RangeKeys::FST, RangeKeys::SCD, RangeKeys::STEP, RangeKeys::CONTAINS])
    }

    /**
     * Finalize a slice type
     * */
    fn finalizeSlice (self, dmut context : &Expander, sl : &SliceType)-> &YILType {
        let inner = context:.finalizeType (sl.getInners ()[0]);
        let len = YIL_UINT_MAX;

        YILTuple::new ([len, YILPointer::new (inner), YILPointer::new (YIL_VOID)],
                       fieldNames-> [SliceKeys::LEN, SliceKeys::PTR, SliceKeys::BLK_INFO])
    }

    /**
     * Finalize a tuple type
     * */
    fn finalizeTuple (self, dmut context : &Expander, tu : &TupleType)-> &YILType {
        let dmut params = Vec!{&YILType}::new ();
        for ti in tu.getInners () {
            params:.push (context:.finalizeType (ti));
        }

        YILTuple::new (params[])
    }

    /**
     * Finalize an option type
     * */
    fn finalizeOption (self, dmut context : &Expander, o : &OptionType)-> &YILType {
        let inner = if (o.getInners ()[0].isOf!{&VoidType} () || o.getInners ()[0].isOf!{&NoneType} ()) {
            YIL_UINT_8
        } else { context:.finalizeType (o.getInners ()[0]) };

        let isSet = YIL_UINT_8;
        let error = self.finalizeGenericClassPtr (alias context);

        let value = YILTuple::new ([error, inner], fieldNames-> [OptionKeys::ERROR, OptionKeys::VALUE], isUnion-> true);
        YILTuple::new ([isSet, value], fieldNames-> [OptionKeys::SET, OptionKeys::CONTENT])
    }

    /**
     * Finalize a map type
     * */
    fn finalizeMap (self, dmut _ : &Expander, _ : &MapType)-> &YILType {
        let inner = YILTuple::new ([YIL_PTR_VOID, YIL_PTR_VOID, YIL_UINT_MAX, YIL_UINT_MAX, YIL_UINT_MAX],
                                   fieldNames-> [MapKeys::BLK_INFO, MapKeys::DATA, MapKeys::LEN, MapKeys::CAP, MapKeys::LOADED]);

        YILPointer::new (inner)
    }

    /**
     * Finalize a future type
     * */
    pub fn finalizeFuture (self, dmut _ : &Expander, _ : &FutureType)-> &YILType {
        YILTuple::new ([YIL_UINT_MAX, YIL_PTR_VOID], fieldNames-> [FutureKeys::THREAD_ID, FutureKeys::CONTENT])
    }

   /*!
     * =====================================================================================
     * =====================================================================================
     * =========================            CUSTOM TYPES           =========================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * Finalize a custom type
     * */
    fn finalizeCustom (self, dmut context : &Expander, c : &CustomType)-> &YILType {
        match c {
            cl : &ClassPtrType => { self.finalizeClassPtr (alias context, cl) }
            en : &EnumType => { self.finalize (alias context, en.getProxy ()) }
            _ => {
                eprintln (c::typeinfo.name);
                __pragma!panic ();
            }
        }
    }

    /**
     * Finalize a class ptr type
     * */
    fn finalizeClassPtr (self, dmut context : &Expander, c : &ClassPtrType)-> &YILType {
        let inner = {
            self.finalizeClassRef (alias context, c.getInner (), c.isStruct ())
        } catch {
            _ => __pragma!panic (); // invalid class
        }

        if (!c.isStruct ()) {
            cast!{&YILType} (YILPointer::new (inner))
        } else {
            inner
        }
    }

    /**
     * Create a generic class pointer type
     * */
    fn finalizeGenericClassPtr (self, dmut _ : &Expander)-> &YILType {
        let dmut params = Vec!{&YILType}::new ();
        let dmut names = Vec!{[c8]}::new ();

        params:.push (YIL_PTR_2_VOID);
        names:.push (ClassKeys::VTABLE);
        params:.push (YIL_PTR_VOID);
        names:.push (ClassKeys::MONITOR);
        let inner = YILTuple::new (params[], fieldNames-> names[]);

        YILPointer::new (inner)
    }


    /*!
     * =====================================================================================
     * =====================================================================================
     * =======================            TEMPORARY TYPES           ========================
     * =====================================================================================
     * =====================================================================================
     */

    /**
     * Finalize a temporary type (a type that cannot be directly associated to a value, but still describe something)
     * */
    fn finalizeTemporary (self, dmut context : &Expander, t : &TemporaryType)-> &YILType {
        match t {
            c : &ClassRefType => { self.finalizeClassRef (alias context, c, c.getSymbol ().isStruct ()) }
            c : &ClosureType => { self.finalizeClosure (alias context, c) }
            m : &MapIteratorType => { self.finalizeMapIterator (alias context, m) }
            _ => {
                eprintln (t::typeinfo.name);
                __pragma!panic ();
            }
        }
    }

    /**
     * Validate a class reference type
     * */
    fn finalizeClassRef (self, dmut context : &Expander, cr : &ClassRefType, isStruct : bool)-> &YILType {
        match context.findClassValidation (cr) {
            Ok (c : &YILType) => return c;
        }

        if (context.isInClassValidation (cr)) {
            YIL_VOID
        } else {
            context:.enterClassValidation (cr);

            let dmut params = Vec!{&YILType}::new ();
            let dmut names = Vec!{[c8]}::new ();

            if (!isStruct) {
                params:.push (YIL_PTR_2_VOID);
                names:.push (ClassKeys::VTABLE);
                params:.push (YIL_PTR_VOID);
                names:.push (ClassKeys::MONITOR);
            } else if (cr.getSymbol ().isMovable ()) {
                params:.push (YIL_UINT_8);
                names:.push (ClassKeys::SET);
            }

            for i in cr.getFields () match i {
                v : &VarDeclValue => {
                    params:.push (context:.finalizeType (v.getVarType ()));
                    names:.push (v.getLoc ().str ());
                }
                _ => __pragma!panic ();
            }

            let final = YILTuple::new (params[], fieldNames-> names[]);
            context:.exitClassValidation (cr, final);

            final
        }
    }

    /**
     * Finalize a closure type
     * */
    fn finalizeClosure (self, dmut context : &Expander, cl : &ClosureType)-> &YILType {
        let dmut params = Vec!{&YILType}::new ();
        for pi in cl.getInnerTypes () {
            params:.push (context:.finalizeType (pi));
        }

        let inner = YILTuple::new (params[], fieldNames-> cl.getInnerNames ());
        YILPointer::new (inner)
    }

    /**
     * Finalize a map iterator type
     */
    fn finalizeMapIterator (self, dmut _ : &Expander, _ : &MapIteratorType)-> &YILType {
        YIL_PTR_VOID
    }

}
