mod ymirc::lint::expander::stmtlist;

import std::collection::vec;

import ymirc::lint::node::instr::base;
import ymirc::lint::node::instr::vardecl;

import ymirc::utils::format;


/**
 * A statement list is a vector of instruction
 * It sorts the instruction per types, putting the var declaration at the beginning
 * And obviously conserving the order of al the other instructions
 * */
pub class @final StmtList {

    let dmut _list = Vec!{&YILInstr}::new ();

    let dmut _decls = Vec!{&YILInstr}::new ();

    /**
     * Empty statement list
     * */
    pub self () {}

    /**
     * Append all the instruction in a list of statement to the current list
     * */
    pub fn append (mut self, v : &StmtList) {
        for il in v[] {
            self:.append (il);
        }
    }

    /**
     * Append an instruction to the list of statement
     * */
    pub fn append (mut self, v : &YILInstr) {
        match v {
            var : &YILVarDecl => {
                self._decls:.push (var);
            }
            _ => {
                self._list:.push (v);
            }
        }
    }

    /**
     * @returns: all the instruction in the list (placing vardecls on top)
     * */
    pub fn opIndex (self)-> [&YILInstr] {
        self._decls[] ~ self._list[]
    }

    /**
     * @returns: the length of the statement list
     * */
    pub fn len (self)-> usize {
        self._list.len () + self._decls.len ()
    }

}
