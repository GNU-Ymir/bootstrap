mod ymirc::lint::expander::stmtlist;

import std::collection::vec;
import std::collection::map;

import ymirc::lint::node::instr::base;
import ymirc::lint::node::instr::vardecl;

import ymirc::utils::format;



/**
 * A statement list is a vector of instruction
 * It sorts the instruction per types, putting the var declaration at the beginning
 * And obviously conserving the order of al the other instructions
 * */
pub class @final StmtList {

    let dmut _list = Vec!{&YILInstr}::new ();

    let dmut _decls = Vec!{&YILInstr}::new ();

    let dmut _toDestroy = HashMap!{usize, (&YILInstr, bool)}::new ();

    /**
     * Empty statement list
     * */
    pub self () {}

    /**
     * Append all the instruction in a list of statement to the current list
     * */
    pub fn append (mut self, v : &StmtList) {
        for il in v[] {
            self:.append (il);
        }
    }

    /**
     * Append an instruction to the list of statement
     * */
    pub fn append (mut self, v : &YILInstr) {
        match v {
            var : &YILVarDecl => {
                self._decls:.push (var);
            }
            _ => {
                self._list:.push (v);
            }
        }
    }

    /**
     * Append a list of instruction to the list
     * */
    pub fn append (mut self, v : [&YILInstr]) {
        for il in v {
            self:.append (il);
        }
    }

    /**
     * Insert a variable containing an entity value that needs to be destroyed at the end of the block
     * */
    pub fn registerDestroy (mut self, id : usize, v : &YILInstr, implicit : bool) {
        self._toDestroy:.insert (id, (v, implicit));
    }

    /**
     * Remove a var that was inserted to be destroyed
     * */
    pub fn removeDestroyNotImplicit (mut self, id : usize) {
        match self._toDestroy.find (id) {
            Ok (x : _) => {
                if x._1 {
                    self._toDestroy:.remove (id);
                }
            }
        }
    }

    /**
     * @returns: true if values need to be destroyed
     * */
    pub fn hasDestroy (self)-> bool {
        self._toDestroy.len () != 0us
    }

    /**
     * @returns: the list of instruction to destroy variable
     * */
    pub fn getToDestroy (self)-> [&YILInstr] {
        if (self._toDestroy.len () == 0us) return [];

        let dmut res = Vec!{&YILInstr}::new ();
        for _, v in self._toDestroy {
            res:.push (v._0);
        }

        res[]
    }

    /**
     * @returns: the list of ids of the variables to destroy
     * */
    pub fn getToDestroyVars (self)-> [usize] {
        if (self._toDestroy.len () == 0us) return [];

        let dmut res = Vec!{usize}::new ();
        for i, _ in self._toDestroy {
            res:.push (i);
        }

        res[]
    }

    /**
     * @returns: all the instruction in the list (placing vardecls on top)
     * */
    pub fn opIndex (self)-> [&YILInstr] {
        self._decls[] ~ self._list[]
    }

    /**
     * @returns: the length of the statement list
     * */
    pub fn len (self)-> usize {
        self._list.len () + self._decls.len ()
    }

}
