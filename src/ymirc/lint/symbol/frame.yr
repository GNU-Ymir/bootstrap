mod ymirc::lint::symbol::frame;

import ymirc::lint::symbol::base;
import ymirc::lint::node::_;

import ymirc::lexing::word;
import ymirc::utils::format;

import std::io;
import std::collection::vec;

/**
 * Ymir intermediate language definition of a function
 * */
pub class YILFrame over YILSymbol {

    // The name of the parameters
    let mut _paramNames = Vec!{[c8]}::new ();

    // The types of the parameters
    let mut _paramTypes = Vec!{&YILType}::new ();

    // The return type of the functiona
    let mut _returnType : &YILType = YIL_VOID_TYPE;

    // The body of the function
    let mut _body : &YILInstr = YIL_EMPTY_BLOCK;

    /**
     * @params:
     *    - loc: the location of the function
     *    - name: the name of the function
     *    - mangledName: the mangled name of the function
     * */
    pub self (loc : &Word, name : [c8], mangledName : [c8]) with
        super (loc, name, mangledName)
    {}

    /**
     * ================================================================================
     * ================================================================================
     * =========================           GETTERS            =========================
     * ================================================================================
     * ================================================================================
     */


    /**
     * ================================================================================
     * ================================================================================
     * =========================           SETTERS            =========================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Set the body of the frame
     * */
    pub fn setBody (mut self, body : &YILInstr) {
        self._body = body;
    }

    /**
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS         =========================
     * ================================================================================
     * ================================================================================
     */

    impl Streamable;
    impl Formattable {
        pub over format (self, dmut stream : &Formatter) {
            stream:.writef ("frame : %[%](", self._name, self._mangledName);
            for i in 0us .. self._paramTypes.len () {
                if (i != 0us) stream:.write (", ");
                stream:.writef ("% : %", self._paramNames [i], self._paramTypes [i]);
            }
            stream:.writef (")-> % "s8, self._returnType);
            stream:.write (self._body);
        }
    }

}
