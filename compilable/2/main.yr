mod main;

trait Truc {
    def foo (self) {}
}

class X {
    prv let i : i32 = 12;
    
    self (i : i32) with i = i {
        i;
        return ;        
    }       
    
}

class Z over X {
    let u : i32 = 120;
    let j = 12;
    let dmut z : &X;
    
    pub self (dmut w : &X) with super (198), j = {
        let j = 09;
        12 + j
    }, u = self.j, z = alias w
    { 
        return;
    }
    
}


def foo () -> dmut [i32] {
    let dmut x : [i32 ; 3] = [1, 2, 3];
    let dmut y : [i32] = copy x[];

    copy y
}
