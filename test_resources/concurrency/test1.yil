pointer P_1 *(void);
pointer P_2 *(P_1);
tuple T_3 (closure-> P_1, func-> P_1);
tuple T_6 (tid-> u64, content-> P_1);
tuple T_8 ();
pointer P_9 *(T_8);
pointer P_10 *(i32);
tuple T_11 (len-> u64, ptr-> P_2, blk_info-> P_1);
pointer P_12 *(u8);
tuple T_13 (len-> u64, ptr-> P_12, blk_info-> P_1);
tuple T_14 (#_vtable-> P_2, #_monitor-> P_1, trace-> T_11, msg-> T_13);
pointer P_15 *(T_14);
frame :  _Y5test13fooFi32Zi32 (let i : i32)-> i32 {
    return i;
}
frame :  [weak] _Y5test14main5_9_31FP2T0Rxi32Zv (let #{CLOSURE-VARREF} : P_9, let #_REF : P_10)-> void {
    YI_1 = _Y5test13fooFi32Zi32(10);
    *#_REF = YI_1;
}
frame :  _Y5test14mainFZv ()-> void {
    YI_1 = (closure-> 0, func-> &_Y5test14main5_9_31FP2T0Rxi32Zv);
    YI_2 = _yrt_spawn_future(YI_1, 4);
    th = YI_2;
    YI_3 = _yrt_check_finished_future(th);
    _a_ = YI_3;
    YI_4 = _yrt_wait_future(th);
    YI_5 = *YI_4 == 10;
    YI_6 = ! YI_5;
#IF YI_6
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    __self_9 = _yrt_alloc_class(&_Y4core9exception9assertion11AssertErrorVT);
    _Y4core9exception9assertion11AssertError4selfCTxP39x4core9exception9assertion11AssertErrorS2c8Zv(__self_9, (len-> 0, ptr-> 0, blk_info-> 0));
    YI_7 = __self_9;
    YI_8 = "test_resources/concurrency/test1.yr";
    YI_9 = "test1::main";
    _yrt_exc_throw(YI_8, YI_9, 12, YI_7);
#LABEL end(#2);
}
frame :  main (let argc : u32, let argv : P_1)-> i32 {
    _yrt_run_main(argc, argc, &_Y5test14mainFZv);
    return 0;
}
