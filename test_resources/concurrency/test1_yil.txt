frame :  _Y5test13fooFi32Zi32 (let i : i32)-> i32 {
    return i;
}
frame :  [weak] _Y5test14main5_9_31FP2T0Rxi32Zv (let #{CLOSURE-VARREF} : *(()), let #_REF : *(i32))-> void {
    YI_1 = _Y5test13fooFi32Zi32(10);
    *#_REF = YI_1;
}
frame :  _Y5test14mainFZv ()-> void {
    YI_1 = (closure-> 0, func-> &_Y5test14main5_9_31FP2T0Rxi32Zv);
    YI_2 = _yrt_spawn_future(YI_1, 4);
    th = YI_2;
    YI_3 = _yrt_check_finished_future(th);
    YI_4 = _yrt_wait_future(th);
    YI_5 = *YI_4 == 10;
#IF ! YI_5
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    __self_7 = _yrt_alloc_class(&_Y4core9exception9assertion11AssertErrorVT);
    _Y4core9exception9assertion11AssertError4selfCTxP39x4core9exception9assertion11AssertErrorS2c8Zv(__self_7, (len-> 0, ptr-> 0, blk_info-> 0));
    YI_6 = __self_7;
    YI_7 = "test_resources/concurrency/test1.yr";
    YI_8 = "test1::main";
    _yrt_exc_throw(YI_7, YI_8, 12, YI_6);
#LABEL end(#2);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test14mainFZv);
    return 0;
}
