frame :[pre] test2::A::self (mut self : mut &(mut test2::A))-> void {
    {
        self._x = 0;
        self._y = 9
    }
}
frame :[post] test2::A::self (mut self : mut &(mut test2::A))-> void {
    <unit-value>
}
frame : test2::A::self (mut self : mut &(mut test2::A))-> void {
    test2::A::self[pre](self);
    test2::A::self[post](self)
}
frame : test2::B::foo (self : &(test2::B))-> i32 return self._x
frame : test2::B::foo (self : &(test2::B), i : i32)-> i32 return (self._y + i)
frame :[pre] test2::B::self (mut self : mut &(mut test2::B))-> void {
    test2::A::self[pre](self);
    {
        <unit-value>
    }
}
frame :[post] test2::B::self (mut self : mut &(mut test2::B))-> void {
    test2::A::self[post](self);
    {
        <unit-value>
    }
}
frame : test2::B::self (mut self : mut &(mut test2::B))-> void {
    test2::B::self[pre](self);
    test2::B::self[post](self)
}
frame : test2::C::foo (self : &(test2::C))-> i32 return (self._x + self._y)
frame : test2::C::foo (self : &(test2::C), i : i32)-> i32 return ((self._y + self._x) * i)
frame :[pre] test2::C::self (mut self : mut &(mut test2::C))-> void {
    test2::B::self[pre](self);
    {
        <unit-value>
    }
}
frame :[post] test2::C::self (mut self : mut &(mut test2::C))-> void {
    test2::B::self[post](self);
    {
        <unit-value>
    }
}
frame : test2::C::self (mut self : mut &(mut test2::C))-> void {
    test2::C::self[pre](self);
    test2::C::self[post](self)
}
frame : test2::main ()-> void {
    let c : &(test2::A) = cast!{mut &(mut test2::A)}(test2::C::self(new));
    let _z_ : i32 = test2::A::foo(c);
    let _y_ : i32 = test2::A::foo(c, 1);
    let b : &(test2::A) = cast!{mut &(mut test2::A)}(test2::C::self(new));
    let _z2_ : i32 = test2::A::foo(b);
    let _y2_ : i32 = test2::A::foo(b, 1);
    <unit-value>
}
