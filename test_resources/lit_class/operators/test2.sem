frame : test2::A::self (mut self : mut &(mut test2::A), x : i32)-> void {
    {
        {
            self._i = x
        }
    };
    {
        <unit-value>
    }
}
frame : [weak] test2::A::opUnary!{"!"s8}::opUnary (self : &(test2::A))-> &(test2::A) return {
    let mut x : mut i32 = 1;
    {
        let mut #_iter : usize = 0us;
        let mut #_nb_iter : usize = {
                let #_range : (i32, i32, i32) = (self._i, 0, if (self._i <= 0) 1 else -1);
                let #_val : (i32, i32, i32, i32) = if (#_range.2 < 0) (-#_range.2, #_range.1, #_range.0, (#_range.0 - #_range.1)) else (#_range.2, #_range.0, #_range.1, (#_range.1 - #_range.0));
                let #_nbAll : i32 = (#_val.3 / #_val.0);
                if (#_nbAll == 18446744073709551615) #_nbAll else if (((#_nbAll * #_val.0) + #_val.1) != #_val.2) (#_nbAll + 1) else #_nbAll
            };
        while (#_iter < #_nb_iter) {
            let i : i32;
            i = (self._i + cast!{i32}((#_iter * cast!{usize}(if (self._i <= 0) 1 else -1))));
            {
                x = (x * i);
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    };
    test2::A::self(new, x)
}
frame : [weak] test2::A::opUnary!{"-"s8}::opUnary (self : &(test2::A))-> &(test2::A) return test2::A::self(new, -self._i)
frame : test2::main ()-> void {
    let a : &(test2::A) = test2::A::self(new, 10);
    let b : &(test2::A) = test2::A::opUnary!{"!"s8}::opUnary(a);
    let c : &(test2::A) = test2::A::opUnary!{"-"s8}::opUnary(a);
    <unit-value>
}
