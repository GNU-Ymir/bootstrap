frame : [weak] core::array::opEquals!{c8, [c8]}::opEquals (a : [c8], b : [c8])-> bool return {
    if (a.len != b.len) {
        return false
    };
    {
        let mut #_iter : usize = 0us;
        let mut #_nb_iter : usize = a.len;
        while (#_iter < #_nb_iter) {
            let i : usize;
            i = #_iter;
            if (#{
                if (a.len <= i) panic;
                a [i]
            #} != #{
                if (b.len <= i) panic;
                b [i]
            #}) {
                return false;
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    };
    true
}
frame : [weak] test3::A::opUnary!{"!"s8}::opUnary (self : &(test3::A))-> i32 return 1
frame : [weak] test3::A::opUnary!{"-"s8}::opUnary (self : &(test3::A))-> i32 return 2
frame : test3::main ()-> void {
    let a : &(test3::A) = test3::A::self(new);
    test3::A::opUnary!{"!"s8}::opUnary(a);
    test3::A::opUnary!{"-"s8}::opUnary(a);
    <unit-value>
}
frame : test3::A::self (mut self : mut &(mut test3::A))-> void {
    {
        <unit-value>
    }
}
