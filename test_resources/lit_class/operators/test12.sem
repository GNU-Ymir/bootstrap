frame :[pre] test12::A::self (mut self : mut &(mut test12::A))-> void {
    <unit-value>
}
frame :[post] test12::A::self (mut self : mut &(mut test12::A))-> void {
    <unit-value>
}
frame : test12::A::self (mut self : mut &(mut test12::A))-> void {
    test12::A::self[pre](self);
    test12::A::self[post](self)
}
frame : test12::A::opCmp (self : &(test12::A), i : i32)-> i32 return i
frame : test12::A::opEquals (self : &(test12::A), a : i32)-> bool return true
frame : test12::main ()-> void {
    let a : &(test12::A) = test12::A::self(new);
    (test12::A::opCmp(a, 12) > 0);
    (test12::A::opCmp(a, 12) < 0);
    <unit-value>
}
