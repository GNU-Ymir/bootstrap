class A {
    let mut _i = 0;

    pub self () {}

    @field
    pub fn foo (self)-> i32 {
        self._i
    }

    pub fn opIndex {T...} (self, a : T)-> i32 {
        let mut res = 0;
        for j in (expand a,) {
            res += j;
        }
        res
    }

    pub fn opIndexAssign {T...} (mut self, a : T, x : i32) {
        for j in (expand a,) {
            self._i += j + x;
        }
    }

    pub fn opDollar (self)-> i32 {
        100
    }

}


fn main () {
    let dmut a = A::new ();
    a:[1] += 90;
    a:[1, 2, 3, 4, 5, $] += 90;
    let _ = a.foo;
}
