frame : [weak] test1::A::opIndex!{i32}::opIndex (self : &(test1::A), a : i32)-> i32 return {
    let mut res : mut i32 = 0;
    cte for {
        {
            let j : i32 = a;
            {
                res = (res + j);
                <unit-value>
            }
        }
    };
    res
}
frame : [weak] test1::A::opIndexAssign!{i32}::opIndexAssign (mut self : mut &(mut test1::A), a : i32, x : i32)-> void cte for {
    {
        let j : i32 = a;
        {
            self._i = (self._i + (j + x));
            <unit-value>
        }
    }
}
frame : [weak] test1::A::opIndex!{(i32, i32, i32, i32, i32, i32,...)}::opIndex (self : &(test1::A), a : (i32, i32, i32, i32, i32, i32))-> i32 return {
    let mut res : mut i32 = 0;
    cte for {
        {
            let j : i32 = a.0;
            {
                res = (res + j);
                <unit-value>
            }
        };
        {
            let j : i32 = a.1;
            {
                res = (res + j);
                <unit-value>
            }
        };
        {
            let j : i32 = a.2;
            {
                res = (res + j);
                <unit-value>
            }
        };
        {
            let j : i32 = a.3;
            {
                res = (res + j);
                <unit-value>
            }
        };
        {
            let j : i32 = a.4;
            {
                res = (res + j);
                <unit-value>
            }
        };
        {
            let j : i32 = a.5;
            {
                res = (res + j);
                <unit-value>
            }
        }
    };
    res
}
frame : [weak] test1::A::opIndexAssign!{(i32, i32, i32, i32, i32, i32,...)}::opIndexAssign (mut self : mut &(mut test1::A), a : (i32, i32, i32, i32, i32, i32), x : i32)-> void cte for {
    {
        let j : i32 = a.0;
        {
            self._i = (self._i + (j + x));
            <unit-value>
        }
    };
    {
        let j : i32 = a.1;
        {
            self._i = (self._i + (j + x));
            <unit-value>
        }
    };
    {
        let j : i32 = a.2;
        {
            self._i = (self._i + (j + x));
            <unit-value>
        }
    };
    {
        let j : i32 = a.3;
        {
            self._i = (self._i + (j + x));
            <unit-value>
        }
    };
    {
        let j : i32 = a.4;
        {
            self._i = (self._i + (j + x));
            <unit-value>
        }
    };
    {
        let j : i32 = a.5;
        {
            self._i = (self._i + (j + x));
            <unit-value>
        }
    }
}
frame : test1::main ()-> void {
    let mut a : mut &(mut test1::A) = test1::A::self(new);
    test1::A::opIndexAssign!{i32}::opIndexAssign(a:, 1, (test1::A::opIndex!{i32}::opIndex(a, 1) + 90));
    test1::A::opIndexAssign!{(i32, i32, i32, i32, i32, i32,...)}::opIndexAssign(a:, (1, 2, 3, 4, 5, test1::A::opDollar(a)), (test1::A::opIndex!{(i32, i32, i32, i32, i32, i32,...)}::opIndex(a, (1, 2, 3, 4, 5, test1::A::opDollar(a))) + 90));
    let _ : i32 = test1::A::foo(a);
    <unit-value>
}
frame : test1::A::opDollar (self : &(test1::A))-> i32 return 100
frame : test1::A::foo (self : &(test1::A))-> i32 return self._i
frame : test1::A::self (mut self : mut &(mut test1::A))-> void {
    {
        {
            self._i = 0
        }
    };
    {
        <unit-value>
    }
}
