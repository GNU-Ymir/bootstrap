frame :[pre] test1::A::self (mut self : mut &(mut test1::A))-> void {
    <unit-value>
}
frame :[post] test1::A::self (mut self : mut &(mut test1::A))-> void {
    <unit-value>
}
frame : test1::A::self (mut self : mut &(mut test1::A))-> void {
    test1::A::self[pre](self);
    test1::A::self[post](self)
}
frame :[pre] test1::B::self (mut self : mut &(mut test1::B))-> void {
    test1::A::self[pre](self);
    {
        <unit-value>
    }
}
frame :[post] test1::B::self (mut self : mut &(mut test1::B))-> void {
    test1::A::self[post](self);
    {
        <unit-value>
    }
}
frame : test1::B::self (mut self : mut &(mut test1::B))-> void {
    test1::B::self[pre](self);
    test1::B::self[post](self)
}
frame :[pre] test1::C::self (mut self : mut &(mut test1::C))-> void {
    test1::B::self[pre](self);
    {
        <unit-value>
    }
}
frame :[post] test1::C::self (mut self : mut &(mut test1::C))-> void {
    test1::B::self[post](self);
    {
        <unit-value>
    }
}
frame : test1::C::self (mut self : mut &(mut test1::C))-> void {
    test1::C::self[pre](self);
    test1::C::self[post](self)
}
frame :[pre] test1::D::self (mut self : mut &(mut test1::D))-> void {
    test1::C::self[pre](self);
    {
        <unit-value>
    }
}
frame :[post] test1::D::self (mut self : mut &(mut test1::D))-> void {
    test1::C::self[post](self);
    {
        <unit-value>
    }
}
frame : test1::D::self (mut self : mut &(mut test1::D))-> void {
    test1::D::self[pre](self);
    test1::D::self[post](self)
}
frame : test1::main ()-> void {
    let a : &(test1::A) = test1::A::self(new);
    let b : &(test1::A) = cast!{mut &(mut test1::A)}(test1::B::self(new));
    let c : &(test1::A) = cast!{mut &(mut test1::A)}(test1::C::self(new));
    let d : &(test1::A) = cast!{mut &(mut test1::A)}(test1::D::self(new));
    let _ : bool = (a of test1::B);
    let _ : bool = (b of test1::C);
    let _ : bool = (c of test1::D);
    let _ : bool = (d !of test1::C);
    let _y_ : bool = false;
    let _x_ : bool = true;
    <unit-value>
}
