frame :[pre] test4::A::self (mut self : mut &(mut test4::A), a : [i32])-> void {
    {
        self.i = copy (a)
    }
}
frame :[pre] test4::A::self (mut self : mut &(mut test4::A), mut a : mut [mut i32])-> void {
    {
        self.i = alias (a)
    }
}
frame :[post] test4::A::self (mut self : mut &(mut test4::A), a : [i32])-> void {
    <unit-value>
}
frame :[post] test4::A::self (mut self : mut &(mut test4::A), mut a : mut [mut i32])-> void {
    <unit-value>
}
frame : test4::A::self (mut self : mut &(mut test4::A), a : [i32])-> void {
    test4::A::self[pre](self, a);
    test4::A::self[post](self, a)
}
frame : test4::A::self (mut self : mut &(mut test4::A), mut a : mut [mut i32])-> void {
    test4::A::self[pre](self, a);
    test4::A::self[post](self, a)
}
frame : test4::main ()-> void {
    let x : [i32] = copy ({.len = 3us, .ptr = &([1, 2, 3])});
    test4::A::self(new, x);
    test4::A::self(new, copy ({.len = 3us, .ptr = &([1, 2, 3])}));
    <unit-value>
}
