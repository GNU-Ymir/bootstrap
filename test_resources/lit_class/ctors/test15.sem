frame :[pre] test15::A::self (mut self : mut &(mut test15::A))-> void {
    <unit-value>
}
frame :[post] test15::A::self (mut self : mut &(mut test15::A))-> void {
    test15::A::foo(self);
    <unit-value>
}
frame : test15::A::self (mut self : mut &(mut test15::A))-> void {
    test15::A::self[pre](self);
    test15::A::self[post](self)
}
frame : test15::B::foo (self : &(test15::B))-> void if (self.x != 10) {
    panic;
    <unit-value>
}
frame :[pre] test15::B::self (mut self : mut &(mut test15::B))-> void {
    test15::A::self[pre](self);
    {
        {
            self.x = 10
        }
    }
}
frame :[post] test15::B::self (mut self : mut &(mut test15::B))-> void {
    test15::A::self[post](self);
    {
        <unit-value>
    }
}
frame : test15::B::self (mut self : mut &(mut test15::B))-> void {
    test15::B::self[pre](self);
    test15::B::self[post](self)
}
frame : test15::main ()-> void {
    let _b_ : &(test15::B) = test15::B::self(new);
    <unit-value>
}
