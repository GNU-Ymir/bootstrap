frame : test4::main ()-> void {
    let a : &(test4::A) = test4::A::self(new);
    let z : dg ()-> void = dg {.func = test4::A::foo, .closure = a};
    (z.func)(z.closure);
    <unit-value>
}
frame : test4::A::foo (self : &(test4::A))-> void try {
    {
        #{
            throw core::exception::assertion::AssertError::self(new, ""s8)
        #};
        <unit-value>
    }
} catch {
    let #_catch : &(core::exception::assertion::AssertError)
    if ((true && true) && #{
        let _ : &(core::exception::assertion::AssertError) = #_catch;
        true
    #}) {
        {
            <unit-value>
        }
    }
}
frame : test4::A::self (mut self : mut &(mut test4::A))-> void {
    {
        <unit-value>
    }
}
