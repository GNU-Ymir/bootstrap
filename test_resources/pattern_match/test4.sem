frame :[pre] test4::A::self (mut self : mut &(mut test4::A))-> void {
    <unit-value>
}
frame :[post] test4::A::self (mut self : mut &(mut test4::A))-> void {
    <unit-value>
}
frame : test4::A::self (mut self : mut &(mut test4::A))-> void {
    test4::A::self[pre](self);
    test4::A::self[post](self)
}
frame :[pre] test4::B::self (mut self : mut &(mut test4::B))-> void {
    test4::A::self[pre](self);
    {
        <unit-value>
    }
}
frame :[post] test4::B::self (mut self : mut &(mut test4::B))-> void {
    test4::A::self[post](self);
    {
        <unit-value>
    }
}
frame : test4::B::self (mut self : mut &(mut test4::B))-> void {
    test4::B::self[pre](self);
    test4::B::self[post](self)
}
frame : test4::main ()-> void {
    let mut b : mut &(mut test4::A) = cast!{mut &(mut test4::A)}(test4::B::self(new));
    {
        let mut #_value : mut &(mut test4::A) = alias (b);
        if #{
            let mut x : mut &(mut test4::A) = alias (#_value);
            true
        #} {
            <unit-value>
        }
    }
}
