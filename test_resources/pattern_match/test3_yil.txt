const :  _Y5test31AVT [&_Y5test31ATI, 0]
const :  _Y5test31ATI (typeid-> 13, size-> 16, inner-> (len-> 0, ptr-> 0), name-> (len-> 8, ptr-> "test3::A"))
const :  _Y5test31BVT [&_Y5test31BTI, 0, &_Y5test31B3fooMTP85test31BZi32]
const :  _Y5test31BTI (typeid-> 13, size-> 24, inner-> (len-> 1, ptr-> &_Y5test31ATI), name-> (len-> 8, ptr-> "test3::B"))
frame :  _Y5test33bazFS2c8i32Zv (let _ : (len-> u64, ptr-> *(u8)), let _ : i32)-> void {
}
frame :  _Y5test34mainFZv ()-> void {
    __self_1 = _yrt_alloc_class(&_Y5test31BVT);
    _Y5test31B4selfCTxP9x5test31BZv(__self_1);
    YI_1 = __self_1;
    YI_2 = cast!{*((#_vtable-> *(*(void)), #_monitor-> *(void)))} (YI_1);
    b = YI_2;
    YI_3 = b-> #_vtable;
#IF _yrt_cmp_class_of_type(&_Y5test31BTI, YI_3)
#THEN_GOTO then(#1)
#ELSE_GOTO else(#3);
#LABEL then(#1);
    YI_4 = cast!{*((#_vtable-> *(*(void)), #_monitor-> *(void), z-> i32))} (b);
    YI_5 = YI_4;
    YI_6 = YI_5-> #_vtable;
    YI_7 = YI_6 + 16;
    YI_8 = (**YI_7)(YI_4);
    YI_9 = YI_8 == 12;
    YI_10 = YI_9;
#GOTO end(#2);
#LABEL else(#3);
    YI_10 = _yrt_cmp_class_of_type(&_Y5test31BTI, YI_3);
#LABEL end(#2);
#IF YI_10
#THEN_GOTO then(#4)
#ELSE_GOTO else(#6);
#LABEL then(#4);
    x = YI_4-> z;
    YI_11 = 1;
    YI_12 = YI_11;
#GOTO end(#5);
#LABEL else(#6);
    YI_12 = YI_10;
#LABEL end(#5);
#IF YI_12
#THEN_GOTO then(#7)
#ELSE_GOTO end(#8);
#LABEL then(#7);
    _Y5test33bazFS2c8i32Zv((len-> 21, ptr-> "B with foo = 12, z = "), x);
#LABEL end(#8);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test34mainFZv);
    return 0;
}
frame :  _Y5test31A4selfCTxP9x5test31AZv (let self : *((#_vtable-> *(*(void)), #_monitor-> *(void))))-> void {
}
frame :  _Y5test31B3fooMTP85test31BZi32 (let self : *((#_vtable-> *(*(void)), #_monitor-> *(void), z-> i32)))-> i32 {
    return 12;
}
frame :  _Y5test31B4selfCTxP9x5test31BZv (let self : *((#_vtable-> *(*(void)), #_monitor-> *(void), z-> i32)))-> void {
    _Y5test31A4selfCTxP9x5test31AZv(self);
    YI_1 = self;
    self-> z = 9;
}
