frame : test2::main ()-> void {
    let b : &(test2::A) = cast!{mut &(mut test2::A)}(test2::B::self(new));
    let c : &(test2::A) = cast!{mut &(mut test2::A)}(test2::B::self(new));
    if (b of test2::B) {
        let _ : &(test2::B) = cast!{&(test2::B)}(b);
        {
            <unit-value>
        }
    };
    if (c of test2::C) {
        let _ : &(test2::C) = cast!{&(test2::C)}(c);
        {
            <unit-value>
        }
    }
}
frame : test2::A::self (mut self : mut &(mut test2::A))-> void {
    {
        <unit-value>
    }
}
frame : test2::B::self (mut self : mut &(mut test2::B))-> void {
    {
        test2::A::self(self)
    };
    {
        <unit-value>
    }
}
frame : test2::C::self (mut self : mut &(mut test2::C))-> void {
    {
        test2::B::self(self)
    };
    {
        <unit-value>
    }
}
