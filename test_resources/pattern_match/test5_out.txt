frame : test5::main ()-> void {
    let b : &(test5::A) = cast!{mut &(mut test5::A)}(test5::B::self(new));
    if (b of test5::B) {
        let ref x : &(test5::B) = ref (cast!{&(test5::B)}(b));
        {
            ({.func = test5::B::foo, .closure = x}.func)({.func = test5::B::foo, .closure = x}.closure);
            <unit-value>
        }
    }
}
frame : test5::A::self (mut self : mut &(mut test5::A))-> void {
    {
        <unit-value>
    }
}
frame : test5::B::foo (self : &(test5::B))-> void {
    <unit-value>
}
frame : test5::B::self (mut self : mut &(mut test5::B))-> void {
    {
        test5::A::self(self)
    };
    {
        <unit-value>
    }
}
