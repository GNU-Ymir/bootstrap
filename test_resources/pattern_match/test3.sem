frame :[pre] test3::A::self (mut self : mut &(mut test3::A))-> void {
    <unit-value>
}
frame :[post] test3::A::self (mut self : mut &(mut test3::A))-> void {
    <unit-value>
}
frame : test3::A::self (mut self : mut &(mut test3::A))-> void {
    test3::A::self[pre](self);
    test3::A::self[post](self)
}
frame : test3::B::foo (self : &(test3::B))-> i32 return 12
frame :[pre] test3::B::self (mut self : mut &(mut test3::B))-> void {
    test3::A::self[pre](self);
    {
        {
            self.z = 9
        }
    }
}
frame :[post] test3::B::self (mut self : mut &(mut test3::B))-> void {
    test3::A::self[post](self);
    {
        <unit-value>
    }
}
frame : test3::B::self (mut self : mut &(mut test3::B))-> void {
    test3::B::self[pre](self);
    test3::B::self[post](self)
}
frame : test3::baz (_ : [c8], _ : i32)-> void {
    <unit-value>
}
frame : test3::main ()-> void {
    let b : &(test3::A) = cast!{mut &(mut test3::A)}(test3::B::self(new));
    {
        let mut #_value : &(test3::A) = b;
        if (((#_value of test3::B) && (test3::B::foo(cast!{&(test3::B)}(#_value)) == 12)) && #{
            let x : i32 = cast!{&(test3::B)}(#_value).z;
            true
        #}) {
            test3::baz ("B with foo = 12, z = "s8, x);
            <unit-value>
        }
    }
}
