frame : test8::A::foo (self : &(test8::A))-> i32 return 1
frame :[pre] test8::A::self (mut self : mut &(mut test8::A), x : i32)-> void {
    {
        self.x = x
    }
}
frame :[post] test8::A::self (mut self : mut &(mut test8::A), x : i32)-> void {
    <unit-value>
}
frame : test8::A::self (mut self : mut &(mut test8::A), x : i32)-> void {
    test8::A::self[pre](self, x);
    test8::A::self[post](self, x)
}
frame : test8::main ()-> void {
    let a : &(test8::A) = test8::A::self(new, 2);
    #{
        let f : i32 = test8::A::foo(cast!{&(test8::A)}(a));
        let x : i32 = cast!{&(test8::A)}(a).x
    #};
    <unit-value>
}
