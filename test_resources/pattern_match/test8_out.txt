frame : test8::main ()-> void {
    let a : &(test8::A) = test8::A::self(new, 2);
    #{
        let f : i32 = ({.func = test8::A::foo, .closure = cast!{&(test8::A)}(a)}.func)({.func = test8::A::foo, .closure = cast!{&(test8::A)}(a)}.closure);
        let x : i32 = cast!{&(test8::A)}(a).x
    #};
    f;
    x;
    <unit-value>
}
frame : test8::A::foo (self : &(test8::A))-> i32 return 1
frame : test8::A::self (mut self : mut &(mut test8::A), x : i32)-> void {
    {
        {
            self.x = x
        }
    };
    {
        <unit-value>
    }
}
