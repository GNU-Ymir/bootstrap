frame : [weak] core::types::range::stepBy!{i32, i32}::stepBy (x : (..i32), s : i32)-> (..i32) {
    let mut z : mut (..mut i32) = x;
    let step : i32 = s;
    let zero : i32 = 0;
    if (((z.fst > z.scd) && (step > zero)) || ((z.fst < z.scd) && (step < zero))) {
        z.step = -step;
        <unit-value>
    } else {
        z.step = step;
        <unit-value>
    };
    return z;
    <unit-value>
}
frame : [weak] core::types::range::reverse!{i32}::reverse (x : (..i32))-> (..i32) return {
    let mut z : mut (..mut i32) = x;
    let mut fst : mut i32 = z.fst;
    z.fst = z.scd;
    z.scd = fst;
    z.step = -z.step;
    z
}
frame : test6::main ()-> void {
    core::types::range::stepBy!{i32, i32}::stepBy ((1 ..[false] 10).step_by (1), 9);
    core::types::range::reverse!{i32}::reverse ((1 ..[false] 10).step_by (1));
    9us;
    {
        let #_range : (i32, i32, i32) = (core::types::range::stepBy!{i32, i32}::stepBy ((1 ..[false] 10).step_by (1), 9).fst, core::types::range::stepBy!{i32, i32}::stepBy ((1 ..[false] 10).step_by (1), 9).scd, core::types::range::stepBy!{i32, i32}::stepBy ((1 ..[false] 10).step_by (1), 9).step);
        let #_val : (i32, i32, i32, i32) = if (#_range.2 < 0) (-#_range.2, #_range.1, #_range.0, (#_range.0 - #_range.1)) else (#_range.2, #_range.0, #_range.1, (#_range.1 - #_range.0));
        let #_nbAll : i32 = (#_val.3 / #_val.0);
        if (#_nbAll == 18446744073709551615) #_nbAll else if ((((#_nbAll * #_val.0) + #_val.1) != #_val.2) || core::types::range::stepBy!{i32, i32}::stepBy ((1 ..[false] 10).step_by (1), 9).contains) (#_nbAll + 1) else #_nbAll
    };
    core::types::range::reverse!{i32}::reverse (core::types::range::stepBy!{i32, i32}::stepBy ((1 ..[false] 10).step_by (1), 3));
    core::types::range::reverse!{i32}::reverse (core::types::range::stepBy!{i32, i32}::stepBy (core::types::range::reverse!{i32}::reverse ((1 ..[false] 10).step_by (1)), 3));
    <unit-value>
}
