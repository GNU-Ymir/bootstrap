frame : test8::main ()-> void {
    let mut a : mut [mut i32] = {
            let mut #_iter : usize = 0us;
            let mut #_value : mut [mut i32] = [<unit-value> ; new 10us];
            while (#_iter < 10us) {
                let i : i32;
                i = cast!{i32}(#_iter);
                #_value [#_iter] = i;
                #_iter = (#_iter + 1us)
            };
            #_value
        };
    let f : i32 = #{
            if (a.len <= 0us) panic;
            a [0us]
        #};
    let j : i32 = #{
            if (a.len <= 1us) panic;
            a [1us]
        #};
    a = alias (#{
            if (a.len < 2us) panic;
            {.len = (a.len - 2us), .ptr = (a.ptr + (2us * 4us)), .blk = a.blk_info}
        #});
    {
        let mut #_iter : usize = 0us;
        let mut #_nb_iter : usize = {
                let #_range : (i32, i32, i32) = (f, j, if (f <= j) 1 else -1);
                let #_val : (i32, i32, i32, i32) = if (#_range.2 < 0) (-#_range.2, #_range.1, #_range.0, (#_range.0 - #_range.1)) else (#_range.2, #_range.0, #_range.1, (#_range.1 - #_range.0));
                let #_nbAll : i32 = (#_val.3 / #_val.0);
                if (#_nbAll == 18446744073709551615) #_nbAll else if (((#_nbAll * #_val.0) + #_val.1) != #_val.2) (#_nbAll + 1) else #_nbAll
            };
        while (#_iter < #_nb_iter) {
            let z : i32;
            z = (f + cast!{i32}((#_iter * cast!{usize}(if (f <= j) 1 else -1))));
            {
                z;
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    }
}
