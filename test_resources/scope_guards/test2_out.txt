frame : test2::main ()-> void try {
    {
        let _ : i32 = try {
                let mut #_failed : bool = true
                {
                    test2::foo (0)
                }
            } finally {
                {
                    if #_failed {
                        test2::onFail ();
                        <unit-value>
                    } else {
                        test2::onSucc ();
                        <unit-value>
                    };
                    {
                        test2::onExit ();
                        <unit-value>
                    }
                }
            };
        <unit-value>
    }
} catch {
    let #_catch : &(core::exception::Exception)
    if (((#_catch of test2::A) && true) && #{
        true
    #}) {
        {
            test2::onA ();
            <unit-value>
        }
    } else if (((#_catch of test2::B) && true) && #{
        true
    #}) {
        {
            test2::onB ();
            <unit-value>
        }
    }
}
frame : test2::A::self (mut self : mut &(mut test2::A))-> void {
    {
        core::exception::Exception::self(self)
    };
    {
        <unit-value>
    }
}
frame : test2::B::self (mut self : mut &(mut test2::B))-> void {
    {
        core::exception::Exception::self(self)
    };
    {
        <unit-value>
    }
}
frame : test2::C::self (mut self : mut &(mut test2::C))-> void {
    {
        test2::B::self(self)
    };
    {
        <unit-value>
    }
}
