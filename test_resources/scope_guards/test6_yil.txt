frame :  _Y5test64mainFZv ()-> void {
    let YI_3 : i32;
    let YI_11 : i32;
    let _ : i32;
    try {
        let YI_1 : i32;
        let YI_2 : i32;
        YI_1 = _Y5test63fooFZi32();
        YI_2 = YI_1;
        YI_3 = YI_2;
    }
    catch{
        let #_catch : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
        let YI_5 : i32;
        let YI_6 : u8;
        let YI_9 : u8;
        let _ : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
        let YI_8 : u8;
        let YI_10 : i32;
        #_catch = _yrt_exc_begin_catch (ephtr (0));
    #IF 1
    #THEN_GOTO then(#1)
    #ELSE_GOTO else(#3);
    #LABEL then(#1);
        YI_6 = 1;
    #GOTO end(#2);
    #LABEL else(#3);
        YI_6 = 1;
    #LABEL end(#2);
    #IF YI_6
    #THEN_GOTO then(#4)
    #ELSE_GOTO else(#6);
    #LABEL then(#4);
        _ = #_catch;
        YI_8 = 1;
        YI_9 = YI_8;
    #GOTO end(#5);
    #LABEL else(#6);
        YI_9 = YI_6;
    #LABEL end(#5);
    #IF YI_9
    #THEN_GOTO then(#7)
    #ELSE_GOTO end(#8);
    #LABEL then(#7);
        return <unit-value>;
    #LABEL end(#8);
        YI_10 = YI_5;
        YI_3 = YI_10;
    };
    YI_11 = YI_3;
    _ = YI_11;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test64mainFZv);
    return 0;
}
