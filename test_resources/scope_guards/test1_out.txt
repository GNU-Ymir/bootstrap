frame : test1::A::self (mut self : mut &(mut test1::A))-> void {
    {
        core::exception::Exception::self(self)
    };
    {
        <unit-value>
    }
}
frame : test1::B::self (mut self : mut &(mut test1::B))-> void {
    {
        core::exception::Exception::self(self)
    };
    {
        <unit-value>
    }
}
frame : test1::C::self (mut self : mut &(mut test1::C))-> void {
    {
        test1::B::self(self)
    };
    {
        <unit-value>
    }
}
frame : test1::main ()-> void {
    let _ : i32 = try {
            let mut #_failed : bool = true
            try {
                {
                    test1::foo (0)
                }
            } catch {
                let #_catch : &(core::exception::Exception)
                if (((#_catch of test1::A) && true) && #{
                    true
                #}) {
                    {
                        test1::onA ();
                        3
                    }
                } else if (((#_catch of test1::B) && true) && #{
                    true
                #}) {
                    {
                        test1::onB ();
                        4
                    }
                }
            }
        } finally {
            {
                if #_failed {
                    test1::onFail ();
                    <unit-value>
                } else {
                    test1::onSucc ();
                    <unit-value>
                };
                {
                    test1::onExit ();
                    <unit-value>
                }
            }
        };
    <unit-value>
}
