frame : [weak] core::types::map::compareKeys!{[c8]}::compareKeys (a : *([c8]), b : *([c8]))-> bool {
    return core::types::array::opEquals (*(a), *(b));
    <unit-value>
}
frame : [weak] core::types::map::hashKey!{[c8]}::hashKey (a : *([c8]))-> u64 return core::types::hash::__hash!{c8, [c8]}::__hash (*(a))
frame : [weak] core::types::hash::__hash!{c8, [c8]}::__hash (a : [c8])-> u64 return {
    let p : u64 = 31u64;
    let m : u64 = 1000000009u64;
    let mut res : mut u64 = 0u64;
    let mut p_pow : mut u64 = 1u64;
    {
        let #_value : [c8] = a;
        let #_iter : usize = 0us;
        while (#_iter < #_value.len) {
            let c : c8 = #_value [#_iter];
            {
                res = ((res + ((core::types::hash::__hash (c) + 1u64) * p_pow)) % m);
                p_pow = ((p_pow * p) % m);
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    };
    res
}
frame : test9::main ()-> void {
    let mut a : mut [[c8] => mut [mut i32]] = [];
    a ["foo"s8] = copy ({.len = 1us, .ptr = &([0])});
    if (a ["foo"s8].hasValue && #{
        let mut z : mut [mut i32] = alias (a ["foo"s8].value);
        true
    #}) {
        #{
            if (z.len <= 0us) panic;
            z [0us]
        #} = 8;
        a ["foo"s8] = z ~ {.len = 3us, .ptr = &([1, 2, 3])};
        <unit-value>
    }
}
