pointer P_1 *(void);
pointer P_2 *(P_1);
tuple T_5 (minfo-> P_1, entries-> P_1, len-> u64, cap-> u64, loaded-> u64);
tuple T_7 (#_vtable-> P_2, #_monitor-> P_1);
pointer P_8 *(u8);
tuple T_9 (len-> u64, ptr-> P_8, blk_info-> P_1);
pointer P_10 *(T_9);
tuple T_11 (P_1, P_1, u64, u64);
pointer P_12 *(i32);
tuple T_13 (len-> u64, ptr-> P_12, blk_info-> P_1);
pointer P_14 *(T_5);
pointer P_15 *(P_14);
pointer P_16 *(T_13);
array A_17 [u8 ; 4];
array A_18 [i32 ; 2];
pointer P_19 *(T_7);
tuple T_20 (@union, error-> P_19, value-> T_13);
tuple T_21 (hasValue-> u8, content-> T_20);
tuple T_22 (len-> u64, ptr-> P_2, blk_info-> P_1);
tuple T_23 (#_vtable-> P_2, #_monitor-> P_1, trace-> T_22);
pointer P_24 *(T_23);
array A_25 [u8 ; 32];
array A_26 [u8 ; 12];
tuple T_27 (#_vtable-> P_2, #_monitor-> P_1, trace-> T_22, msg-> T_9);
pointer P_28 *(T_27);
const : [weak] _YMP10S2c8_S3i32MI (&_Y4core5types3map11compareKeysNS2c8FP4S2c8P4S2c8Zb, &_Y4core5types3map7hashKeyNS2c8FP4S2c8Zu64, 24, 24)
const : [weak] _YMP8S2c8_i32MI (&_Y4core5types3map11compareKeysNS2c8FP4S2c8P4S2c8Zb, &_Y4core5types3map7hashKeyNS2c8FP4S2c8Zu64, 24, 4)
frame :  [weak] _Y4core5types3map11compareKeysNS2c8FP4S2c8P4S2c8Zb (let a : P_10, let b : P_10)-> u8 {
    YI_1 = _Y4core5types5array8opEqualsFS2c8S2c8Zb(*a, *b);
    return YI_1;
}
frame :  [weak] _Y4core5types3map11deepCopyMapNS2c8NS3i32FMP10S2c8_S3i32ZxMP12S2c8_xS4xi32 (let a : P_14)-> P_14 {
    _yrt_map_empty(&__map_2, &_YMP10S2c8_S3i32MI);
    YI_1 = __map_2;
    res = YI_1;
    #_iter = _yrt_map_iter_begin(&a);
    try {
    #GOTO test(#3);
    #LABEL beg(#2);
        k = cast!{P_10} (_yrt_map_iter_key(#_iter));
        v = *_yrt_map_iter_val(#_iter);
        YI_2 = v;
        _yrt_dup_slice(&YI_3, &YI_2, 4);
        YI_4 = YI_3;
        _yrt_map_insert(&res, cast!{P_10} (k), &YI_4);
        _yrt_map_iter_next(#_iter);
    #LABEL test(#3);
    #IF _yrt_map_iter_end(#_iter)
    #THEN_GOTO beg(#2)
    #ELSE_GOTO end(#1);
    #LABEL end(#1);
    }
    finally{
        _yrt_map_iter_del(#_iter);
    };
    return res;
}
frame :  [weak] _Y4core5types3map7hashKeyNS2c8FP4S2c8Zu64 (let a : P_10)-> u64 {
    YI_1 = _Y4core5types4hash6__hashNc8NS2c8FS2c8Zu64(*a);
    return YI_1;
}
frame :  [weak] _Y4core5types4hash6__hashNc8NS2c8FS2c8Zu64 (let a : T_9)-> u64 {
    p = 31;
    m = 1000000009;
    res = 0;
    p_pow = 1;
    #_value = a;
    #_iter = 0;
#GOTO test(#3);
#LABEL beg(#2);
    YI_1 = 1 * #_iter;
    YI_2 = #_value.ptr + YI_1;
    YI_3 = cast!{P_8} (YI_2);
    c = *YI_3;
    YI_4 = _Y4core5types4hash6__hashFc8Zu64(c);
    YI_5 = YI_4 + 1;
    YI_6 = YI_5 * p_pow;
    YI_7 = res + YI_6;
    YI_8 = YI_7 % m;
    res = YI_8;
    YI_9 = p_pow * p;
    YI_10 = YI_9 % m;
    p_pow = YI_10;
    YI_11 = #_iter + 1;
    #_iter = YI_11;
#LABEL test(#3);
    YI_12 = #_iter < #_value.len;
#IF YI_12
#THEN_GOTO beg(#2)
#ELSE_GOTO end(#1);
#LABEL end(#1);
    YI_13 = res;
    return YI_13;
}
frame :  _Y5test64mainFZv ()-> void {
    _yrt_map_empty(&__map_1, &_YMP8S2c8_i32MI);
    YI_1 = (len-> 3, ptr-> "foo", blk_info-> 0);
    YI_2 = 1;
    _yrt_map_insert(&__map_1, &YI_1, &YI_2);
    YI_3 = (len-> 3, ptr-> "bar", blk_info-> 0);
    YI_4 = 2;
    _yrt_map_insert(&__map_1, &YI_3, &YI_4);
    YI_5 = __map_1;
    a = YI_5;
    _yrt_dup_map(&__map_8, &_YMP8S2c8_i32MI, &a);
    YI_6 = __map_8;
    _b_ = YI_6;
    _yrt_map_empty(&__map_11, &_YMP10S2c8_S3i32MI);
    YI_7 = (len-> 3, ptr-> "foo", blk_info-> 0);
    YI_8 = [1, 2];
    YI_9 = (len-> 2, ptr-> &YI_8, blk_info-> 0);
    YI_10 = YI_9;
    _yrt_dup_slice(&YI_11, &YI_10, 4);
    YI_12 = YI_11;
    _yrt_map_insert(&__map_11, &YI_7, &YI_12);
    YI_13 = __map_11;
    c = YI_13;
    YI_14 = _Y4core5types3map11deepCopyMapNS2c8NS3i32FMP10S2c8_S3i32ZxMP12S2c8_xS4xi32(c);
    d = YI_14;
    try {
        YI_15 = (len-> 3, ptr-> "foo", blk_info-> 0);
        YI_16 = _yrt_map_find(&d, &YI_15);
    #IF YI_16 == 0
    #THEN_GOTO then(#1)
    #ELSE_GOTO else(#3);
    #LABEL then(#1);
        YI_17 = (hasValue-> 0, content-> (error-> 0));
    #GOTO end(#2);
    #LABEL else(#3);
        YI_17 = (hasValue-> 1, content-> (value-> *YI_16));
    #LABEL end(#2);
        YI_18 = ! YI_17.hasValue;
    #IF YI_18
    #THEN_GOTO then(#4)
    #ELSE_GOTO end(#5);
    #LABEL then(#4);
        __self_26 = _yrt_alloc_class(&_Y4core9exception6option14EmptyValOptionVT);
        _Y4core9exception6option14EmptyValOption4selfCTxP39x4core9exception6option14EmptyValOptionZv(__self_26);
        YI_19 = __self_26;
        YI_20 = "test_resources/lit_map/test6.yr";
        YI_21 = "test6::main";
        _yrt_exc_throw(YI_20, YI_21, 9, YI_19);
    #LABEL end(#5);
        YI_22 = YI_17.content.value;
        YI_23 = YI_22.len <= 0;
    #IF YI_23
    #THEN_GOTO then(#6)
    #ELSE_GOTO end(#7);
    #LABEL then(#6);
        YI_24 = "test_resources/lit_map/test6.yr";
        YI_25 = "test6::main";
        _yrt_exc_panic(YI_24, YI_25, 9);
    #LABEL end(#7);
        YI_26 = 4 * 0;
        YI_27 = YI_22.ptr + YI_26;
        YI_28 = cast!{P_12} (YI_27);
        *YI_28 = 9;
        YI_29 = (len-> 3, ptr-> "foo", blk_info-> 0);
        YI_30 = _yrt_map_find(&c, &YI_29);
    #IF YI_30 == 0
    #THEN_GOTO then(#8)
    #ELSE_GOTO else(#a);
    #LABEL then(#8);
        YI_31 = (hasValue-> 0, content-> (error-> 0));
    #GOTO end(#9);
    #LABEL else(#a);
        YI_31 = (hasValue-> 1, content-> (value-> *YI_30));
    #LABEL end(#9);
        YI_32 = ! YI_31.hasValue;
    #IF YI_32
    #THEN_GOTO then(#b)
    #ELSE_GOTO end(#c);
    #LABEL then(#b);
        __self_41 = _yrt_alloc_class(&_Y4core9exception6option14EmptyValOptionVT);
        _Y4core9exception6option14EmptyValOption4selfCTxP39x4core9exception6option14EmptyValOptionZv(__self_41);
        YI_33 = __self_41;
        YI_34 = "test_resources/lit_map/test6.yr";
        YI_35 = "test6::main";
        _yrt_exc_throw(YI_34, YI_35, 10, YI_33);
    #LABEL end(#c);
        YI_36 = YI_31.content.value;
        YI_37 = YI_36.len <= 0;
    #IF YI_37
    #THEN_GOTO then(#d)
    #ELSE_GOTO end(#e);
    #LABEL then(#d);
        YI_38 = "test_resources/lit_map/test6.yr";
        YI_39 = "test6::main";
        _yrt_exc_panic(YI_38, YI_39, 10);
    #LABEL end(#e);
        YI_40 = 4 * 0;
        YI_41 = YI_36.ptr + YI_40;
        YI_42 = cast!{P_12} (YI_41);
        YI_43 = *YI_42;
        YI_44 = YI_43 == 1;
        YI_45 = ! YI_44;
    #IF YI_45
    #THEN_GOTO then(#f)
    #ELSE_GOTO end(#g);
    #LABEL then(#f);
        __self_55 = _yrt_alloc_class(&_Y4core9exception9assertion11AssertErrorVT);
        _Y4core9exception9assertion11AssertError4selfCTxP39x4core9exception9assertion11AssertErrorS2c8Zv(__self_55, (len-> 0, ptr-> 0, blk_info-> 0));
        YI_46 = __self_55;
        YI_47 = "test_resources/lit_map/test6.yr";
        YI_48 = "test6::main";
        _yrt_exc_throw(YI_47, YI_48, 10, YI_46);
    #LABEL end(#g);
    }
    catch{
        #_catch = _yrt_exc_begin_catch (ephtr (0));
    #IF 1
    #THEN_GOTO then(#h)
    #ELSE_GOTO else(#j);
    #LABEL then(#h);
        YI_49 = 1;
    #GOTO end(#i);
    #LABEL else(#j);
        YI_49 = 1;
    #LABEL end(#i);
    #IF YI_49
    #THEN_GOTO then(#k)
    #ELSE_GOTO else(#m);
    #LABEL then(#k);
        _ = #_catch;
        YI_50 = 1;
        YI_51 = YI_50;
    #GOTO end(#l);
    #LABEL else(#m);
        YI_51 = YI_49;
    #LABEL end(#l);
    #IF YI_51
    #THEN_GOTO then(#n)
    #ELSE_GOTO end(#o);
    #LABEL then(#n);
        YI_52 = "test_resources/lit_map/test6.yr";
        YI_53 = "test6::main";
        _yrt_exc_panic(YI_52, YI_53, 12);
    #LABEL end(#o);
    };
}
frame :  main (let argc : u32, let argv : P_1)-> i32 {
    _yrt_run_main(argc, argc, &_Y5test64mainFZv);
    return 0;
}
