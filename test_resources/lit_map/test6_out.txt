frame : [weak] core::types::hash::__hash!{c8, [c8]}::__hash (a : [c8])-> u64 return {
    let p : u64 = 31u64;
    let m : u64 = 1000000009u64;
    let mut res : mut u64 = 0u64;
    let mut p_pow : mut u64 = 1u64;
    {
        let #_value : [c8] = a;
        let #_iter : usize = 0us;
        while (#_iter < #_value.len) {
            let c : c8 = #_value [#_iter];
            {
                res = ((res + ((core::types::hash::__hash (c) + 1u64) * p_pow)) % m);
                p_pow = ((p_pow * p) % m);
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    };
    res
}
frame : [weak] core::types::map::hashKey!{[c8]}::hashKey (a : *([c8]))-> u64 return core::types::hash::__hash!{c8, [c8]}::__hash (*(a))
frame : [weak] core::types::map::compareKeys!{[c8]}::compareKeys (a : *([c8]), b : *([c8]))-> bool {
    return core::types::array::opEquals (*(a), *(b));
    <unit-value>
}
frame : [weak] core::types::map::deepCopyMap!{[c8], [i32]}::deepCopyMap (a : [[c8] => [i32]])-> mut [[c8] => mut [mut i32]] {
    let mut res : mut [[c8] => mut [mut i32]] = [];
    {
        let mut #_iter : #_iterator!{[[c8] => [i32]]} = #_begin (a);
        try {
            while #_is_end (#_iter) {
                let ref k : [c8] = ref (#_key (#_iter));
                let v : [i32] = #_value (#_iter);
                {
                    res [k] = copy (v);
                    <unit-value>
                };
                #_next (#_iter)
            }
        } finally {
            {
                #_del (#_iter)
            }
        }
    };
    return alias (res);
    <unit-value>
}
frame : test6::main ()-> void {
    let a : [[c8] => i32] = ["foo"s8 => 1, "bar"s8 => 2];
    let mut _b_ : mut [[c8] => mut i32] = copy (a);
    let c : [[c8] => [i32]] = ["foo"s8 => copy ({.len = 2us, .ptr = &([1, 2])})];
    let mut d : mut [[c8] => mut [mut i32]] = core::types::map::deepCopyMap!{[c8], [i32]}::deepCopyMap (c);
    try {
        {
            #{
                if (d ["foo"s8].len <= 0us) panic;
                d ["foo"s8] [0us]
            #} = 9;
            if !(#{
                if (c ["foo"s8].len <= 0us) panic;
                c ["foo"s8] [0us]
            #} == 1) throw core::exception::assertion::AssertError::self(new, ""s8);
            <unit-value>
        }
    } catch {
        let #_catch : &(core::exception::Exception)
        if ((true && true) && #{
            let _ : &(core::exception::Exception) = #_catch;
            true
        #}) {
            {
                panic;
                <unit-value>
            }
        }
    }
}
