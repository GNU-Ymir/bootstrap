frame : [weak] core::hash::__hash!{c8, [c8]}::__hash (a : [c8])-> u64 return {
    let p : u64 = 31u64;
    let m : u64 = 1000000009u64;
    let mut res : mut u64 = 0u64;
    let mut p_pow : mut u64 = 1u64;
    {
        let #_value : [c8] = a;
        let #_iter : usize = 0us;
        while (#_iter < a.len) {
            let c : c8 = #_value [#_iter];
            {
                res = ((res + ((core::hash::__hash (c) + 1u64) * p_pow)) % m);
                p_pow = ((p_pow * p) % m);
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    };
    res
}
frame : [weak] etc::runtime::map::hashKey!{[c8]}::hashKey (a : *([c8]))-> u64 return core::hash::__hash!{c8, [c8]}::__hash (*(a))
frame : [weak] etc::runtime::map::compareKeys!{[c8]}::compareKeys (a : *([c8]), b : *([c8]))-> bool {
    {
        return core::array::opEquals (*(a), *(b));
        <unit-value>
    }
}
frame : test2::main ()-> void {
    let mut a : mut [[c8] => mut [mut i32]] = ["foo"s8 => copy ({.len = 3us, .ptr = &([1, 2, 3])}), "bar"s8 => copy ({.len = 3us, .ptr = &([2, 3, 4])})];
    try {
        {
            #{
                if (a ["foo"s8].len <= 1us) panic;
                a ["foo"s8] [1us]
            #} = 9;
            if !(#{
                if (a ["foo"s8].len <= 1us) panic;
                a ["foo"s8] [1us]
            #} == 9) throw core::exception::AssertError::self(new, ""s8);
            <unit-value>
        }
    } catch {
        let #_catch : &(core::exception::Exception)
        if ((true && true) && #{
            let _ : &(core::exception::Exception) = #_catch;
            true
        #}) {
            {
                panic;
                <unit-value>
            }
        }
    }
}
