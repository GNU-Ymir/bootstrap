frame : [weak] core::hash::implem::__hash!{c8, [c8]}::__hash (a : [c8])-> u64 return {
    let p : u64 = 31u64;
    let m : u64 = 1000000009u64;
    let mut res : mut u64 = 0u64;
    let mut p_pow : mut u64 = 1u64;
    {
        let #_value : [c8] = a;
        let #_iter : usize = 0us;
        while (#_iter < a.len) {
            let c : c8 = #_value [#_iter];
            {
                res = ((res + ((core::hash::implem::__hash (c) + 1u64) * p_pow)) % m);
                p_pow = ((p_pow * p) % m);
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    };
    res
}
frame : [weak] core::hash::map::hashKey!{[c8]}::hashKey (a : *([c8]))-> u64 return core::hash::implem::__hash!{c8, [c8]}::__hash (*(a))
frame : [weak] core::hash::map::compareKeys!{[c8]}::compareKeys (a : *([c8]), b : *([c8]))-> bool {
    {
        return core::array::opEquals (*(a), *(b));
        <unit-value>
    }
}
frame : test7::main ()-> void {
    let b : [[c8] => &(test7::B)] = ["foo"s8 => test7::B::self(new)];
    let _ : [[c8] => &(test7::A)] = b;
    <unit-value>
}
frame : test7::A::self (mut self : mut &(mut test7::A))-> void {
    {
        <unit-value>
    }
}
frame : test7::B::self (mut self : mut &(mut test7::B))-> void {
    {
        test7::A::self(self)
    };
    {
        <unit-value>
    }
}
