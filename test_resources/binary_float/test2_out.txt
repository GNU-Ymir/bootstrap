frame : [weak] core::math::trunc!{fsize}::trunc (a : fsize)-> fsize {
    {
        core::math::internal::truncl (a)
    }
}
frame : [weak] core::math::ffmod!{fsize}::ffmod (a : fsize, b : fsize)-> fsize {
    (a - (core::math::trunc!{fsize}::trunc ((a / b)) * b))
}
frame : [weak] core::math::sqrt!{f32}::sqrt (a : f32)-> f32 {
    {
        core::math::internal::sqrtf (a)
    }
}
frame : [weak] core::math::ffpow!{f32}::ffpow (base : f32, exp : f32, prec : f64 = 1e-07d)-> f32 {
    if (exp < 0f) {
        return (1f / core::math::ffpow!{f32}::ffpow (base, -exp, prec-> prec));
        <unit-value>
    };
    if (exp >= 10f) {
        let r : f32 = core::math::ffpow!{f32}::ffpow (base, (exp / 2f), prec-> (prec / 2d));
        return (r * r);
        <unit-value>
    };
    if (exp >= 1f) {
        return (base * core::math::ffpow!{f32}::ffpow (base, (exp - 1f), prec-> prec));
        <unit-value>
    };
    if (prec >= 1d) {
        return core::math::sqrt!{f32}::sqrt (base);
        <unit-value>
    };
    return core::math::sqrt!{f32}::sqrt (core::math::ffpow!{f32}::ffpow (base, (exp * 2f), prec-> (prec * 2d)));
    <unit-value>
}
frame : test2::main ()-> void {
    (1f + 2f);
    3f;
    (1d - 2d);
    -1d;
    (3.14l * 2l);
    6.28l;
    (3.14r / 2r);
    1.57r;
    core::math::ffmod!{fsize}::ffmod (3.14r, 2r);
    1.14r;
    core::math::ffpow!{f32}::ffpow (3.14f, 4f, 1e-07d);
    97.2117f;
    (3.14f ..[false] 19f).step_by (1f);
    (3.14f ..[true] 19f).step_by (1f);
    (3.14l ..[true] 19l).step_by (1l);
    <unit-value>
}
