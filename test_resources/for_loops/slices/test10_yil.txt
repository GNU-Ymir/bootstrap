frame :  _Y6test104mainFZv ()-> void {
    let z : i32;
    let YI_2 : [i32;1];
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : (len-> u64, ptr-> *(i32));
    let YI_5 : *(void);
    let YI_6 : (len-> u64, ptr-> *(i32));
    let YI_7 : [i32;1];
    let YI_8 : (len-> u64, ptr-> *(i32));
    let YI_9 : (len-> u64, ptr-> *(i32));
    let YI_10 : *(void);
    let YI_11 : (len-> u64, ptr-> *(i32));
    let YI_12 : [i32;1];
    let YI_13 : (len-> u64, ptr-> *(i32));
    let YI_14 : (len-> u64, ptr-> *(i32));
    let YI_15 : *(void);
    let YI_16 : (len-> u64, ptr-> *(i32));
    let YI_17 : [i32;1];
    let YI_18 : (len-> u64, ptr-> *(i32));
    let YI_19 : (len-> u64, ptr-> *(i32));
    let YI_20 : *(void);
    let YI_21 : (len-> u64, ptr-> *(i32));
    let YI_22 : [(len-> u64, ptr-> *(i32));4];
    let YI_23 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_24 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_25 : *(void);
    let YI_26 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let a : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let #_iter : u64;
    let YI_31 : u64;
    let YI_32 : u64;
    let YI_33 : *((len-> u64, ptr-> *(i32)));
    let x : (len-> u64, ptr-> *(i32));
    let YI_35 : u8;
    let YI_36 : *(u8);
    let YI_37 : *(u8);
    let YI_38 : u64;
    let YI_39 : u64;
    let YI_40 : *(i32);
    let YI_41 : u64;
    let YI_30 : u8;
    z = 9;
    YI_2 = [1];
    YI_3 = (len-> 1, ptr-> &YI_2);
    YI_4 = YI_3;
    YI_5 = _yrt_dup_slice(YI_4.ptr, YI_4.len, 4);
    YI_6 = (len-> YI_4.len, ptr-> YI_5);
    YI_7 = [2];
    YI_8 = (len-> 1, ptr-> &YI_7);
    YI_9 = YI_8;
    YI_10 = _yrt_dup_slice(YI_9.ptr, YI_9.len, 4);
    YI_11 = (len-> YI_9.len, ptr-> YI_10);
    YI_12 = [3];
    YI_13 = (len-> 1, ptr-> &YI_12);
    YI_14 = YI_13;
    YI_15 = _yrt_dup_slice(YI_14.ptr, YI_14.len, 4);
    YI_16 = (len-> YI_14.len, ptr-> YI_15);
    YI_17 = [4];
    YI_18 = (len-> 1, ptr-> &YI_17);
    YI_19 = YI_18;
    YI_20 = _yrt_dup_slice(YI_19.ptr, YI_19.len, 4);
    YI_21 = (len-> YI_19.len, ptr-> YI_20);
    YI_22 = [YI_6, YI_11, YI_16, YI_21];
    YI_23 = (len-> 4, ptr-> &YI_22);
    YI_24 = YI_23;
    YI_25 = _yrt_dup_slice(YI_24.ptr, YI_24.len, 16);
    YI_26 = (len-> YI_24.len, ptr-> YI_25);
    a = YI_26;
    #_value = a;
    #_iter = 0;
#GOTO test(#5);
#LABEL beg(#4);
    YI_31 = 16 * #_iter;
    YI_32 = #_value.ptr + YI_31;
    YI_33 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_32);
    x = *YI_33;
    YI_35 = x.len <= 0;
#IF YI_35
#THEN_GOTO then(#2)
#ELSE_GOTO end(#3);
#LABEL then(#2);
    YI_36 = "/home/emile/ymir/bootstrap/gyc/gcc-src/gcc/ymir/bootstrap/test_resources/for_loops/slices/test10.yr";
    YI_37 = "test10::main";
    _yrt_exc_panic(YI_36, YI_37, 5);
#LABEL end(#3);
    YI_38 = 4 * 0;
    YI_39 = x.ptr + YI_38;
    YI_40 = cast!{*(i32)} (YI_39);
    *YI_40 = z;
    YI_41 = #_iter + 1;
    #_iter = YI_41;
#LABEL test(#5);
    YI_30 = #_iter < #_value.len;
#IF YI_30
#THEN_GOTO beg(#4)
#ELSE_GOTO end(#1);
#LABEL end(#1);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test104mainFZv);
    return 0;
}
