frame : test1::baz (_ : i32)-> void {
    <unit-value>
}
frame : [weak] test1::CIterator::get!{0us, 1us}::get (mut self : mut &(mut test1::CIterator))-> i32 return #{
    if (test1::A::values(self._x).len <= self._index) panic;
    test1::A::values(self._x) [self._index]
#}
frame : test1::main ()-> void {
    let a : &(test1::A) = test1::A::self(new);
    let _ : [i32] = {
            let mut #_index : usize = 0us;
            let mut #_iter : mut &(mut test1::CIterator) = test1::A::begin(a);
            let #_end : usize = test1::A::end(a);
            let mut #_value : mut [mut i32] = [<unit-value> ; new test1::A::len(a)];
            while (!test1::CIterator::opEquals(#_iter, #_end) && (#_index < test1::A::len(a))) {
                let i : i32 = test1::CIterator::get!{0us, 1us}::get(#_iter:);
                #_value [#_index] = (i * 2);
                {
                    impl::next(#_iter:);
                    #_index = (#_index + 1us)
                }
            };
            {.len = #_index, .ptr = #_value.ptr}
        };
    <unit-value>
}
frame : test1::A::begin (self : &(test1::A))-> mut &(mut test1::CIterator) return test1::CIterator::self(new, 0us, self)
frame : test1::A::len (self : &(test1::A))-> usize return self._items.len
frame : test1::A::end (self : &(test1::A))-> usize return self._items.len
frame : test1::A::values (self : &(test1::A))-> [i32] return self._items
frame : test1::A::self (mut self : mut &(mut test1::A))-> void {
    {
        {
            self._items = copy ({.len = 3us, .ptr = &([1, 2, 3])})
        }
    };
    {
        <unit-value>
    }
}
frame : impl::next (mut self : mut &(mut test1::CIterator))-> void {
    self._index = (self._index + 1us);
    <unit-value>
}
frame : test1::CIterator::opEquals (self : &(test1::CIterator), o : usize)-> bool return (self._index == o)
frame : test1::CIterator::self (mut self : mut &(mut test1::CIterator), index : usize, x : &(test1::A))-> void {
    {
        {
            self._index = index;
            self._x = x
        }
    };
    {
        <unit-value>
    }
}
