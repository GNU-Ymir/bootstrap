frame : impl::next (mut self : mut &(mut test12::CIterator))-> void {
    self._index = (self._index + 1us);
    <unit-value>
}
frame : test12::A::end (ref self : test12::A)-> usize return self._items.len
frame : test12::A::self (mut ref self : mut test12::A)-> void {
    {
        {
            self._items = copy ({.len = 3us, .ptr = &([1, 2, 3])})
        }
    };
    {
        <unit-value>
    }
}
frame : test12::A::begin (ref self : test12::A)-> mut &(mut test12::CIterator) return test12::CIterator::self(new, 0us, self._items)
frame : test12::A::__dtor (mut ref self : mut test12::A)-> void {
    test12::end ();
    <unit-value>
}
frame : test12::A::values (ref self : test12::A)-> [i32] return self._items
frame : test12::baz (_ : i32)-> i32 return 1
frame : test12::end ()-> void {
    <unit-value>
}
frame : test12::main ()-> void try {
    {
        try {
            {
                let a : test12::A = test12::A::self(new);
                test12::A::values(a);
                let _ : [i32] = {
                        let mut #_iter : mut &(mut test12::CIterator) = test12::A::begin(a);
                        let #_end : usize = test12::A::end(a);
                        let mut #_value : mut [mut i32] = [<unit-value> ; new 0us];
                        while !test12::CIterator::opEquals(#_iter, #_end) {
                            let i : i32 = test12::CIterator::get!{0us, 1us}::get(#_iter:);
                            #_value ~= {.len = 1us, .ptr = &([test12::baz (i)])};
                            impl::next(#_iter:)
                        };
                        #_value
                    };
                throw core::exception::assertion::AssertError::self(new, ""s8);
                <unit-value>
            }
        } finally {
            {
                test12::exiting ();
                <unit-value>
            }
        }
    }
} catch {
    let #_catch : &(core::exception::assertion::AssertError)
    if ((true && true) && #{
        let _ : &(core::exception::assertion::AssertError) = #_catch;
        true
    #}) {
        {
            test12::caught ();
            <unit-value>
        }
    }
}
frame : test12::caught ()-> void {
    <unit-value>
}
frame : test12::exiting ()-> void {
    <unit-value>
}
frame : [weak] test12::CIterator::get!{0us, 1us}::get (mut self : mut &(mut test12::CIterator))-> i32 return #{
    if (self._x.len <= self._index) panic;
    self._x [self._index]
#}
frame :[pre] test12::CIterator::self (mut self : mut &(mut test12::CIterator), index : usize, x : [i32])-> void {
    {
        self._index = index;
        self._x = x
    }
}
frame :[post] test12::CIterator::self (mut self : mut &(mut test12::CIterator), index : usize, x : [i32])-> void {
    <unit-value>
}
frame : test12::CIterator::self (mut self : mut &(mut test12::CIterator), index : usize, x : [i32])-> void {
    test12::CIterator::self[pre](self, index, x);
    test12::CIterator::self[post](self, index, x)
}
frame : test12::CIterator::opEquals (self : &(test12::CIterator), o : usize)-> bool return (self._index == o)
