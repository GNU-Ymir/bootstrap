frame : impl::next (mut self : mut &(mut test13::CIterator))-> void {
    self._index = (self._index + 1us);
    <unit-value>
}
frame : test13::A::end (ref self : test13::A)-> usize return self._items.len
frame : test13::A::self (mut ref self : mut test13::A)-> void {
    {
        {
            self._items = copy ({.len = 3us, .ptr = &([1, 2, 3])})
        }
    };
    {
        <unit-value>
    }
}
frame : test13::A::begin (ref self : test13::A)-> mut &(mut test13::CIterator) return test13::CIterator::self(new, 0us, self._items)
frame : test13::A::__dtor (mut ref self : mut test13::A)-> void {
    test13::end ();
    <unit-value>
}
frame : test13::A::values (ref self : test13::A)-> [i32] return self._items
frame : test13::baz (_ : i32)-> i32 return 1
frame : test13::end ()-> void {
    <unit-value>
}
frame : test13::main ()-> void {
    let a : test13::A = test13::A::self(new);
    test13::A::values(a);
    let _ : [i32] = {
            let mut #_iter : mut &(mut test13::CIterator) = test13::A::begin(a);
            let #_end : usize = test13::A::end(a);
            let mut #_value : mut [mut i32] = [<unit-value> ; new 0us];
            while !test13::CIterator::opEquals(#_iter, #_end) {
                let i : i32 = test13::CIterator::get!{0us, 1us}::get(#_iter:);
                #_value ~= {.len = 1us, .ptr = &([test13::baz (i)])};
                impl::next(#_iter:)
            };
            #_value
        };
    <unit-value>
}
frame : [weak] test13::CIterator::get!{0us, 1us}::get (mut self : mut &(mut test13::CIterator))-> i32 return #{
    if (self._x.len <= self._index) panic;
    self._x [self._index]
#}
frame : test13::CIterator::self (mut self : mut &(mut test13::CIterator), index : usize, x : [i32])-> void {
    {
        {
            self._index = index;
            self._x = x
        }
    };
    {
        <unit-value>
    }
}
frame : test13::CIterator::opEquals (self : &(test13::CIterator), o : usize)-> bool return (self._index == o)
