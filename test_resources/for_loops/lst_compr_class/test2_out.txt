frame : test2::baz (i : i32)-> i32 return (i + 1)
frame : test2::Z::self (mut self : mut &(mut test2::Z), i : i32)-> void {
    {
        {
            self.i = i
        }
    };
    {
        <unit-value>
    }
}
frame : [weak] test2::MIterator::get!{0us, 2us}::get (mut self : mut &(mut test2::MIterator))-> usize return self._index
frame : [weak] test2::MIterator::get!{1us, 2us}::get (mut self : mut &(mut test2::MIterator))-> mut &(mut test2::Z) return alias (#{
        if (test2::A::values(self._x:).len <= self._index) panic;
        test2::A::values(self._x:) [self._index]
    #})
frame : [weak] test2::CIterator::get!{0us, 1us}::get (mut self : mut &(mut test2::CIterator))-> &(test2::Z) return #{
    if (test2::A::values(self._x).len <= self._index) panic;
    test2::A::values(self._x) [self._index]
#}
frame : test2::main ()-> void {
    let mut a : mut &(mut test2::A) = test2::A::self(new);
    let mut _ : mut [mut i32] = {
            let mut #_index : usize = 0us;
            let mut #_iter : mut &(mut test2::MIterator) = test2::A::begin(alias (a):);
            let #_end : usize = test2::A::end(alias (a):);
            let mut #_value : mut [mut i32] = [<unit-value> ; new test2::A::len(alias (a):)];
            while (!test2::MIterator::opEquals(#_iter, #_end) && (#_index < test2::A::len(alias (a):))) {
                let i : usize = test2::MIterator::get!{0us, 2us}::get(#_iter:);
                let mut j : mut &(mut test2::Z) = test2::MIterator::get!{1us, 2us}::get(#_iter:);
                #_value [#_index] = {
                    j.i = (cast!{i32}(i) + 9);
                    j.i
                };
                {
                    impl::next(#_iter:);
                    #_index = (#_index + 1us)
                }
            };
            {.len = #_index, .ptr = #_value.ptr, .blk = #_value.blk_info}
        };
    let mut _ : mut [mut i32] = {
            let mut #_index : usize = 0us;
            let mut #_iter : mut &(mut test2::CIterator) = test2::A::begin(a);
            let #_end : usize = test2::A::end(a);
            let mut #_value : mut [mut i32] = [<unit-value> ; new test2::A::len(a)];
            while (!test2::CIterator::opEquals(#_iter, #_end) && (#_index < test2::A::len(a))) {
                let i : &(test2::Z) = test2::CIterator::get!{0us, 1us}::get(#_iter:);
                #_value [#_index] = test2::baz (i.i);
                {
                    impl::next(#_iter:);
                    #_index = (#_index + 1us)
                }
            };
            {.len = #_index, .ptr = #_value.ptr, .blk = #_value.blk_info}
        };
    <unit-value>
}
frame : test2::A::begin (self : &(test2::A))-> mut &(mut test2::CIterator) return test2::CIterator::self(new, 0us, self)
frame : test2::A::begin (mut self : mut &(mut test2::A))-> mut &(mut test2::MIterator) return test2::MIterator::self(new, 0us, alias (self))
frame : test2::A::len (self : &(test2::A))-> usize return self._items.len
frame : test2::A::end (self : &(test2::A))-> usize return self._items.len
frame : test2::A::values (self : &(test2::A))-> [&(test2::Z)] return self._items
frame : test2::A::values (mut self : mut &(mut test2::A))-> mut [mut &(mut test2::Z)] return alias (self._items)
frame : test2::A::self (mut self : mut &(mut test2::A))-> void {
    {
        {
            self._items = copy ({.len = 3us, .ptr = &([test2::Z::self(new, 1), test2::Z::self(new, 2), test2::Z::self(new, 3)])})
        }
    };
    {
        <unit-value>
    }
}
frame : impl::next (mut self : mut &(mut test2::CIterator))-> void {
    self._index = (self._index + 1us);
    <unit-value>
}
frame : test2::CIterator::opEquals (self : &(test2::CIterator), o : usize)-> bool return (self._index == o)
frame : test2::CIterator::self (mut self : mut &(mut test2::CIterator), index : usize, x : &(test2::A))-> void {
    {
        {
            self._index = index;
            self._x = x
        }
    };
    {
        <unit-value>
    }
}
frame : impl::next (mut self : mut &(mut test2::MIterator))-> void {
    self._index = (self._index + 1us);
    <unit-value>
}
frame : test2::MIterator::opEquals (self : &(test2::MIterator), o : usize)-> bool return (self._index == o)
frame : test2::MIterator::self (mut self : mut &(mut test2::MIterator), index : usize, mut x : mut &(mut test2::A))-> void {
    {
        {
            self._index = index;
            self._x = alias (x)
        }
    };
    {
        <unit-value>
    }
}
