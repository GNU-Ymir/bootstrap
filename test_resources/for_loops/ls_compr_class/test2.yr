class Z {
    pub let mut i : i32;
    pub self (i : i32) with i = i {}
}

class A {
    let dmut _items : [&Z] = copy [copy Z (1), copy Z (2), copy Z (3)];

    pub self () {}

    pub fn begin (self)-> dmut &CIterator {
        copy CIterator (0, self)
    }

    pub fn begin (mut self)-> dmut &MIterator {
        copy MIterator (0, alias self)
    }

    pub fn end (self)-> usize {
        self._items.len
    }

    pub fn len (self)-> usize {
        self._items.len
    }

    @field
    pub fn values (self)-> [&Z] {
        self._items
    }

    @field
    pub fn values (mut self)-> dmut [&Z] {
        alias self._items
    }

}

class CIterator {

    let _x : &A;
    let mut _index : usize;


    pub self (index : usize, x : &A)
        with _index = index
        , _x = x
    {}

    pub fn get {0us, 1us} (mut self)-> &Z {
        self._x.values [self._index]
    }

    pub fn get {1us, 2us} (mut self)-> &Z {
        self._x.values [self._index]
    }

    pub fn get {0us, 2us} (mut self)-> usize {
        self._index
    }

    pub fn opEquals (self, o : usize)-> bool {
        self._index == o
    }

    impl Iterable {
        pub over next (mut self) {
            self._index += 1;
        }
    }


}

class MIterator {

    let dmut _x : &A;
    let mut _index : usize;


    pub self (index : usize, dmut x : &A)
        with _index = index
        , _x = alias x
    {}


    pub fn get {0us, 1us} (mut self)-> dmut &Z {
        alias self._x:.values [self._index]
    }

    pub fn get {1us, 2us} (mut self)-> dmut &Z {
        alias self._x:.values [self._index]
    }

    pub fn get {0us, 2us} (mut self)-> usize {
        self._index
    }

    impl Iterable {
        pub over next (mut self) {
            self._index += 1;
        }
    }

    pub fn opEquals (self, o : usize)-> bool {
        self._index == o
    }

}

fn baz (i : i32)-> i32 { i + 1 }
fn main () {
    let dmut a = copy A ();
    let dmut _ = copy [{
        j.i = cast!i32 (i) + 9;
        i + 9
    } for i, dmut j in alias a];

    let dmut _ = [baz (i.i) for i in a];
}
