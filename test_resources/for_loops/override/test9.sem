frame : impl::next (mut self : mut &(mut test9::CIterator))-> void {
    self._index = (self._index + 1us);
    <unit-value>
}
frame : test9::A::end (self : &(test9::A))-> usize return self._items.len
frame : test9::A::self (mut self : mut &(mut test9::A))-> void {
    {
        {
            self._items = copy ({.len = 3us, .ptr = &([1, 2, 3])})
        }
    };
    {
        <unit-value>
    }
}
frame : test9::A::begin (self : &(test9::A))-> mut &(mut test9::CIterator) return test9::CIterator::self(new, 0us, self)
frame : test9::A::values (self : &(test9::A))-> [i32] return self._items
frame : test9::baz (_ : i32)-> void {
    <unit-value>
}
frame : test9::main ()-> void {
    let a : &(test9::A) = test9::A::self(new);
    test9::A::values(a);
    {
        let mut #_iter : mut &(mut test9::CIterator) = test9::A::begin(a);
        let #_end : usize = test9::A::end(a);
        while !test9::CIterator::opEquals(#_iter, #_end) {
            let i : i32 = test9::CIterator::get!{0us, 1us}::get(#_iter:);
            {
                test9::baz (i);
                <unit-value>
            };
            impl::next(#_iter:)
        }
    }
}
frame : [weak] test9::CIterator::get!{0us, 1us}::get (mut self : mut &(mut test9::CIterator))-> i32 return #{
    if (test9::A::values(self._x).len <= self._index) panic;
    test9::A::values(self._x) [self._index]
#}
frame : test9::CIterator::self (mut self : mut &(mut test9::CIterator), index : usize, x : &(test9::A))-> void {
    {
        {
            self._index = index;
            self._x = x
        }
    };
    {
        <unit-value>
    }
}
frame : test9::CIterator::opEquals (self : &(test9::CIterator), o : usize)-> bool return (self._index == o)
