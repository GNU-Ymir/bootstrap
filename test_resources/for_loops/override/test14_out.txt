frame : test14::baz (_ : i32)-> void {
    <unit-value>
}
frame : test14::exiting ()-> void {
    <unit-value>
}
frame : test14::end ()-> void {
    <unit-value>
}
frame : test14::caught ()-> void {
    <unit-value>
}
frame : [weak] test14::CIterator::get!{0us, 1us}::get (mut self : mut &(mut test14::CIterator))-> i32 return #{
    if (self._x.len <= self._index) panic;
    self._x [self._index]
#}
frame : test14::main ()-> void try {
    {
        try {
            {
                let a : test14::A = test14::A::self(new);
                test14::A::values(a);
                {
                    let mut #_iter : mut &(mut test14::CIterator) = test14::A::begin(a);
                    let #_end : usize = test14::A::end(a);
                    while !test14::CIterator::opEquals(#_iter, #_end) {
                        let i : i32 = test14::CIterator::get!{0us, 1us}::get(#_iter:);
                        {
                            test14::baz (i);
                            <unit-value>
                        };
                        impl::next(#_iter:)
                    }
                };
                throw core::exception::assertion::AssertError::self(new, ""s8);
                <unit-value>
            }
        } finally {
            {
                test14::exiting ();
                <unit-value>
            }
        }
    }
} catch {
    let #_catch : &(core::exception::assertion::AssertError)
    if ((true && true) && #{
        let _ : &(core::exception::assertion::AssertError) = #_catch;
        true
    #}) {
        {
            test14::caught ();
            <unit-value>
        }
    }
}
frame : test14::A::begin (ref self : test14::A)-> mut &(mut test14::CIterator) return test14::CIterator::self(new, 0us, self._items)
frame : test14::A::end (ref self : test14::A)-> usize return self._items.len
frame : test14::A::values (ref self : test14::A)-> [i32] return self._items
frame : test14::A::self (mut ref self : mut test14::A)-> void {
    {
        {
            self._items = copy ({.len = 3us, .ptr = &([1, 2, 3])})
        }
    };
    {
        <unit-value>
    }
}
frame : test14::A::__dtor (mut ref self : mut test14::A)-> void {
    test14::end ();
    <unit-value>
}
frame : impl::next (mut self : mut &(mut test14::CIterator))-> void {
    self._index = (self._index + 1us);
    <unit-value>
}
frame : test14::CIterator::opEquals (self : &(test14::CIterator), o : usize)-> bool return (self._index == o)
frame : test14::CIterator::self (mut self : mut &(mut test14::CIterator), index : usize, x : [i32])-> void {
    {
        {
            self._index = index;
            self._x = x
        }
    };
    {
        <unit-value>
    }
}
