frame : impl::next (mut ref self : mut test9::SIterator)-> void {
    self.index = (self.index + 1us);
    <unit-value>
}
frame : test9::A::end (self : &(test9::A))-> usize return self._values.len
frame : test9::A::self (mut self : mut &(mut test9::A))-> void {
    {
        {
            self._values = copy ({.len = 3us, .ptr = &([1, 2, 3])})
        }
    };
    {
        <unit-value>
    }
}
frame : test9::A::begin (self : &(test9::A))-> test9::SIterator return test9::SIterator::self(new, 0us, self)
frame : test9::A::values (self : &(test9::A))-> [i32] return self._values
frame : test9::main ()-> void {
    let a : &(test9::A) = test9::A::self(new);
    {
        let mut #_iter : mut test9::SIterator = test9::A::begin(a);
        let #_end : usize = test9::A::end(a);
        while !test9::SIterator::opEquals(#_iter, #_end) {
            let i : i32 = test9::SIterator::get!{0us, 1us}::get(#_iter:);
            {
                i;
                <unit-value>
            };
            impl::next(#_iter:)
        }
    }
}
frame : [weak] test9::SIterator::get!{0us, 1us}::get (ref self : test9::SIterator)-> i32 return #{
    if (test9::A::values(self.a).len <= self.index) panic;
    test9::A::values(self.a) [self.index]
#}
frame : test9::SIterator::self (mut ref self : mut test9::SIterator, index : usize, a : &(test9::A))-> void {
    {
        {
            self.index = index;
            self.a = a
        }
    };
    {
        <unit-value>
    }
}
frame : test9::SIterator::opEquals (ref self : test9::SIterator, i : usize)-> bool return (self.index == i)
