frame : test9::next (a : test9::Iterator)-> test9::Iterator return test9::Iterator ({(a.index + 1us), a.a})
frame : test9::opEquals (a : test9::Iterator, i : usize)-> bool return (a.index == i)
frame : [weak] test9::get!{0us, 1us}::get (a : test9::Iterator)-> i32 return #{
    if (test9::A::values(a.a).len <= a.index) panic;
    test9::A::values(a.a) [a.index]
#}
frame : test9::main ()-> void {
    let a : &(test9::A) = test9::A::self(new);
    {
        let mut #_iter : test9::Iterator = test9::A::begin(a);
        let #_end : usize = test9::A::end(a);
        while !test9::opEquals (#_iter, #_end) {
            let i : i32 = test9::get!{0us, 1us}::get (#_iter);
            {
                i;
                <unit-value>
            };
            #_iter = test9::next (#_iter)
        }
    }
}
frame : test9::A::begin (self : &(test9::A))-> test9::Iterator return test9::Iterator ({0us, self})
frame : test9::A::end (self : &(test9::A))-> usize return self._values.len
frame : test9::A::values (self : &(test9::A))-> [i32] return self._values
frame : test9::A::self (mut self : mut &(mut test9::A))-> void {
    {
        {
            self._values = copy ({.len = 3us, .ptr = &([1, 2, 3])})
        }
    };
    {
        <unit-value>
    }
}
