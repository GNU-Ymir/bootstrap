struct SIterator {
    let mut index : usize;
    let a : &A;

    pub self (index : usize, a : &A)
        with index = index
        , a = a
    {}

    pub fn get {0, 1} (self)-> i32 {
        self.a.values [self.index]
    }

    impl Iterator {
        pub over next (mut self) {
            self.index += 1;
        }
    }

    pub fn opEquals (self , i : usize)-> bool {
        self.index == i
    }
}

class A {
    let _values = copy [1, 2, 3];

    pub self () {}


    pub fn begin (self)-> SIterator {
        SIterator::init (0us, self)
    }

    pub fn end (self)-> usize {
        self._values.len
    }

    @field
    pub fn values (self)-> [i32] {
        self._values
    }

}

fn main () {
    let a = A::new ();
    for i in a {
        i;
    }
}
