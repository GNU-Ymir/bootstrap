struct
| index : usize
| a : &A
 -> Iterator;

fn get {0, 1} (a : Iterator)-> i32 {
    a.a.values [a.index]
}

fn next (a : Iterator)-> Iterator {
    Iterator (a.index + 1, a.a)
}

fn opEquals (a : Iterator, i : usize)-> bool {
    a.index == i
}

class A {
    let _values = copy [1, 2, 3];

    pub self () {}


    pub fn begin (self)-> Iterator {
        Iterator (0us, self)
    }

    pub fn end (self)-> usize {
        self._values.len
    }

    @field
    pub fn values (self)-> [i32] {
        self._values
    }

}

fn main () {
    let a = A::new ();
    for i in a {
        i;
    }
}
