frame : impl::next (mut ref self : mut test8::Iterator)-> void {
    self._i = (self._i + 1);
    <unit-value>
}
frame : test8::A::end (self : &(test8::A))-> i32 return self._len
frame : test8::A::self (mut self : mut &(mut test8::A), len : i32)-> void {
    {
        {
            self._len = len
        }
    };
    {
        <unit-value>
    }
}
frame : test8::A::begin (self : &(test8::A))-> test8::Iterator return test8::Iterator::self(new, 0)
frame : test8::bar ()-> void {
    <unit-value>
}
frame : test8::baz (_ : i32)-> void {
    <unit-value>
}
frame : test8::foo ()-> void {
    <unit-value>
}
frame : test8::main ()-> void {
    let x : &(test8::A) = test8::A::self(new, 10);
    {
        let mut #_iter : mut test8::Iterator = test8::A::begin(x);
        let #_end : i32 = test8::A::end(x);
        while !test8::Iterator::opEquals(#_iter, #_end) {
            let i : i32 = test8::Iterator::get!{0us, 1us}::get(#_iter:);
            {
                test8::baz (i);
                <unit-value>
            };
            impl::next(#_iter:)
        }
    };
    test8::foo ();
    <unit-value>
}
frame : [weak] test8::Iterator::get!{0us, 1us}::get (ref self : test8::Iterator)-> i32 return self._i
frame : test8::Iterator::self (mut ref self : mut test8::Iterator)-> void {
    {
        {
            self._i = 0
        }
    };
    {
        <unit-value>
    }
}
frame : test8::Iterator::self (mut ref self : mut test8::Iterator, i : i32)-> void {
    {
        {
            self._i = i
        }
    };
    {
        <unit-value>
    }
}
frame : test8::Iterator::__dtor (mut ref self : mut test8::Iterator)-> void {
    test8::bar ();
    <unit-value>
}
frame : test8::Iterator::opEquals (ref self : test8::Iterator, a : i32)-> bool return (self._i == a)
