frame : test8::Z::self (mut self : mut &(mut test8::Z), i : i32)-> void {
    {
        {
            self.i = i
        }
    };
    {
        <unit-value>
    }
}
frame : [weak] test8::CIterator::get!{0us, 2us}::get (self : &(test8::CIterator))-> usize return self._index
frame : [weak] test8::CIterator::get!{1us, 2us}::get (self : &(test8::CIterator))-> &(test8::Z) return #{
    if (test8::A::values(self._x).len <= self._index) panic;
    test8::A::values(self._x) [self._index]
#}
frame : test8::main ()-> void {
    let a : &(test8::A) = test8::A::self(new);
    {
        let mut #_iter : &(test8::CIterator) = test8::A::begin(a);
        let #_end : usize = test8::A::end(a);
        while !test8::CIterator::opEquals(#_iter, #_end) {
            let i : usize = test8::CIterator::get!{0us, 2us}::get(#_iter);
            let j : &(test8::Z) = test8::CIterator::get!{1us, 2us}::get(#_iter);
            {
                i;
                j;
                <unit-value>
            };
            #_iter = test8::CIterator::next(#_iter)
        }
    }
}
frame : test8::A::begin (self : &(test8::A))-> &(test8::CIterator) return test8::CIterator::self(new, 0us, self)
frame : test8::A::end (self : &(test8::A))-> usize return self._items.len
frame : test8::A::values (self : &(test8::A))-> [&(test8::Z)] return self._items
frame : test8::A::values (mut self : mut &(mut test8::A))-> mut [mut &(mut test8::Z)] return alias (self._items)
frame : test8::A::self (mut self : mut &(mut test8::A))-> void {
    {
        {
            self._items = copy ({.len = 3us, .ptr = &([test8::Z::self(new, 1), test8::Z::self(new, 2), test8::Z::self(new, 3)])})
        }
    };
    {
        <unit-value>
    }
}
frame : test8::CIterator::next (self : &(test8::CIterator))-> &(test8::CIterator) return test8::CIterator::self(new, (self._index + 1us), self._x)
frame : test8::CIterator::opEquals (self : &(test8::CIterator), o : usize)-> bool return (self._index == o)
frame : test8::CIterator::self (mut self : mut &(mut test8::CIterator), index : usize, x : &(test8::A))-> void {
    {
        {
            self._index = index;
            self._x = x
        }
    };
    {
        <unit-value>
    }
}
