pointer P_1 *(void);
pointer P_2 *(P_1);
pointer P_8 *(i32);
tuple T_9 (len-> u64, ptr-> P_8, blk_info-> P_1);
tuple T_10 (#_vtable-> P_2, #_monitor-> P_1, _values-> T_9);
pointer P_11 *(T_10);
tuple T_12 (index-> u64, a-> P_11);
pointer P_13 *(T_12);
tuple T_14 (len-> u64, ptr-> P_1, blk_info-> P_1);
pointer P_15 *(u8);
tuple T_16 (len-> u64, ptr-> P_15, blk_info-> P_1);
array A_17 [u8 ; 17];
tuple T_18 (typeid-> u32, size-> u64, inner-> T_14, name-> T_16);
array A_19 [i32 ; 3];
pointer P_20 *(T_9);
array A_21 [P_1 ; 5];
array A_22 [u8 ; 9];
array A_23 [u8 ; 43];
array A_24 [u8 ; 38];
const :  _Y5test71ATI (typeid-> 13, size-> 40, inner-> (len-> 0, ptr-> 0, blk_info-> 0), name-> (len-> 8, ptr-> "test7::A", blk_info-> 0))
const :  _Y5test71AVT [&_Y5test71ATI, 0, &_Y5test71A5beginMTP85test71AZ165test79SIterator, &_Y5test71A3endMTP85test71AZusize, &_Y5test71A6valuesMTP85test71AZS3i32]
const :  _Y5test79SIteratorTI (typeid-> 11, size-> 16, inner-> (len-> 0, ptr-> 0, blk_info-> 0), name-> (len-> 16, ptr-> "test7::SIterator", blk_info-> 0))
frame :  _Y4impl4nextMTRx165test79SIteratorZv (let self : P_13)-> void {
    YI_1 = self-> index + 1;
    self-> index = YI_1;
}
frame :  _Y5test71A3endMTP85test71AZusize (let self : P_11)-> u64 {
    return self-> _values.len;
}
frame :  _Y5test71A4selfCTxP9x5test71AZv (let self : P_11)-> void {
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1, blk_info-> 0);
    YI_3 = YI_2;
    _yrt_dup_slice(&YI_4, &YI_3, 4);
    YI_5 = YI_4;
    self-> _values = YI_5;
}
frame :  _Y5test71A5beginMTP85test71AZ165test79SIterator (let self : P_11)-> T_12 {
    _Y5test79SIterator4selfCTRx165test79SIteratorusizeP85test71AZv(&__self_2, 0, self);
    YI_1 = __self_2;
    return YI_1;
}
frame :  _Y5test71A6valuesMTP85test71AZS3i32 (let self : P_11)-> T_9 {
    return self-> _values;
}
frame :  _Y5test74mainFZv ()-> void {
    __self_1 = _yrt_alloc_class(&_Y5test71AVT);
    _Y5test71A4selfCTxP9x5test71AZv(__self_1);
    YI_1 = __self_1;
    a = YI_1;
    YI_2 = a;
    YI_3 = YI_2-> #_vtable;
    YI_4 = YI_3 + 16;
    YI_5 = (**YI_4)(a);
    #_iter = YI_5;
    YI_6 = a;
    YI_7 = YI_6-> #_vtable;
    YI_8 = YI_7 + 24;
    YI_9 = (**YI_8)(a);
    #_end = YI_9;
#GOTO test(#3);
#LABEL beg(#2);
    YI_10 = _Y5test79SIterator3getNi3_0usNi3_1usMTR165test79SIteratorZi32(&#_iter);
    i = YI_10;
    _Y4impl4nextMTRx165test79SIteratorZv(&#_iter);
#LABEL test(#3);
    YI_11 = _Y5test79SIterator8opEqualsMTR165test79SIteratorusizeZb(&#_iter, #_end);
#IF ! YI_11
#THEN_GOTO beg(#2)
#ELSE_GOTO end(#1);
#LABEL end(#1);
}
frame :  [weak] _Y5test79SIterator3getNi3_0usNi3_1usMTR165test79SIteratorZi32 (let self : P_13)-> i32 {
    YI_1 = self-> a;
    YI_2 = YI_1-> #_vtable;
    YI_3 = YI_2 + 32;
    YI_4 = (**YI_3)(self-> a);
    YI_5 = YI_4.len <= self-> index;
#IF YI_5
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_6 = "test_resources/for_loops/override/test7.yr";
    YI_7 = "test7::SIterator::get!{0us, 1us}::get";
    _yrt_exc_panic(YI_6, YI_7, 11);
#LABEL end(#2);
    YI_8 = 4 * self-> index;
    YI_9 = YI_4.ptr + YI_8;
    YI_10 = cast!{P_8} (YI_9);
    YI_11 = *YI_10;
    return YI_11;
}
frame :  _Y5test79SIterator4selfCTRx165test79SIteratorusizeP85test71AZv (let self : P_13, let index : u64, let a : P_11)-> void {
    self-> index = index;
    self-> a = a;
}
frame :  _Y5test79SIterator8opEqualsMTR165test79SIteratorusizeZb (let self : P_13, let i : u64)-> u8 {
    YI_1 = self-> index == i;
    return YI_1;
}
frame :  main (let argc : u32, let argv : P_1)-> i32 {
    _yrt_run_main(argc, argc, &_Y5test74mainFZv);
    return 0;
}
