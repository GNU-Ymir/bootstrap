frame : [weak] test1::Iterator::get!{0us, 1us}::get (mut self : mut &(mut test1::Iterator))-> i32 return #{
    if (test1::A::values(self._x).len <= self._index) panic;
    test1::A::values(self._x) [self._index]
#}
frame : [weak] std::io::println!{i32}::println (a : i32)-> void {
    std::io::print (a);
    std::io::putchar ('\n'c8);
    <unit-value>
}
frame : test1::main ()-> void {
    let a : &(test1::A) = test1::A::self(new);
    test1::A::values(a);
    {
        let mut #_iter : mut &(mut test1::Iterator) = test1::A::begin(a);
        let #_end : usize = test1::A::end(a);
        while !test1::Iterator::opEquals(#_iter, #_end) {
            let i : i32 = test1::Iterator::get!{0us, 1us}::get(alias (#_iter));
            {
                std::io::println!{i32}::println (i);
                <unit-value>
            };
            #_iter = test1::Iterator::next(alias (#_iter))
        }
    }
}
frame : test1::A::begin (self : &(test1::A))-> mut &(mut test1::Iterator) return test1::Iterator::self(new, 0us, self)
frame : test1::A::end (self : &(test1::A))-> usize return self._items.len
frame : test1::A::values (self : &(test1::A))-> [i32] return self._items
frame : test1::A::self (mut self : mut &(mut test1::A))-> void {
    {
        {
            self._items = copy ({.len = 3us, .ptr = &([1, 2, 3])})
        }
    };
    {
        <unit-value>
    }
}
frame : test1::Iterator::next (mut self : mut &(mut test1::Iterator))-> mut &(mut test1::Iterator) return {
    self._index = (self._index + 1us);
    alias (self)
}
frame : test1::Iterator::opEquals (self : &(test1::Iterator), o : usize)-> bool return (self._index == o)
frame : test1::Iterator::self (mut self : mut &(mut test1::Iterator), index : usize, x : &(test1::A))-> void {
    {
        {
            self._index = index;
            self._x = x
        }
    };
    {
        <unit-value>
    }
}
