class Z {
    pub let mut i : i32;
    pub self (i : i32) with i = i {}
}

class A {
    let dmut _items = copy [copy Z (1), copy Z (2), copy Z (3)];

    pub self () {}

    pub fn begin (self)-> dmut &CIterator {
        copy CIterator (0, self)
    }

    pub fn end (self)-> usize {
        self._items.len
    }

    @field
    pub fn values (self)-> [&Z] {
        self._items
    }

    @field
    pub fn values (mut self)-> dmut [&Z] {
        alias self._items
    }

}

class CIterator {

    let _x : &A;
    let mut _index : usize;


    pub self (index : usize, x : &A)
        with _index = index
        , _x = x
    {}

    pub fn get {0us, 1us} (self)-> &Z {
        self._x.values [self._index]
    }

    pub fn get {1us, 2us} (self)-> &Z {
        self._x.values [self._index]
    }

    pub fn get {0us, 2us} (self)-> usize {
        self._index
    }

    impl Iterator {
        pub over next (mut self) {
            self._index += 1;
        }
    }

    pub fn opEquals (self, o : usize)-> bool {
        self._index == o
    }

}

fn main () {
    let a = copy A ();
    for i, j in a {
        i;
        j;
    }
}
