frame : impl::next (mut self : mut &(mut test6::CIterator))-> void {
    self._index = (self._index + 1us);
    <unit-value>
}
frame : test6::A::end (self : &(test6::A))-> usize return self._items.len
frame : test6::A::self (mut self : mut &(mut test6::A))-> void {
    {
        {
            self._items = copy ({.len = 3us, .ptr = &([test6::Z::self(new, 1), test6::Z::self(new, 2), test6::Z::self(new, 3)])})
        }
    };
    {
        <unit-value>
    }
}
frame : test6::A::begin (self : &(test6::A))-> mut &(mut test6::CIterator) return test6::CIterator::self(new, 0us, self)
frame : test6::A::values (self : &(test6::A))-> [&(test6::Z)] return self._items
frame : test6::A::values (mut self : mut &(mut test6::A))-> mut [mut &(mut test6::Z)] return alias (self._items)
frame : test6::Z::self (mut self : mut &(mut test6::Z), i : i32)-> void {
    {
        {
            self.i = i
        }
    };
    {
        <unit-value>
    }
}
frame : test6::main ()-> void {
    let a : &(test6::A) = test6::A::self(new);
    {
        let mut #_iter : mut &(mut test6::CIterator) = test6::A::begin(a);
        let #_end : usize = test6::A::end(a);
        while !test6::CIterator::opEquals(#_iter, #_end) {
            let i : usize = test6::CIterator::get!{0us, 2us}::get(#_iter:);
            let j : &(test6::Z) = test6::CIterator::get!{1us, 2us}::get(#_iter:);
            {
                i;
                j;
                <unit-value>
            };
            impl::next(#_iter:)
        }
    }
}
frame : [weak] test6::CIterator::get!{0us, 2us}::get (self : &(test6::CIterator))-> usize return self._index
frame : [weak] test6::CIterator::get!{1us, 2us}::get (self : &(test6::CIterator))-> &(test6::Z) return #{
    if (test6::A::values(self._x).len <= self._index) panic;
    test6::A::values(self._x) [self._index]
#}
frame : test6::CIterator::self (mut self : mut &(mut test6::CIterator), index : usize, x : &(test6::A))-> void {
    {
        {
            self._index = index;
            self._x = x
        }
    };
    {
        <unit-value>
    }
}
frame : test6::CIterator::opEquals (self : &(test6::CIterator), o : usize)-> bool return (self._index == o)
