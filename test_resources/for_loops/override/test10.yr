fn foo () {}
fn bar () {}
fn baz (_ : i32) {}

entity Iterator {
    let mut _i = 0;

    pub self (i : i32)
        with _i = i
    {}

    pub fn opEquals (self, a : i32)-> bool {
        self._i == a
    }

    pub fn get {0, 1} (self)-> i32 {
        self._i
    }

    impl Iterable {
        pub over next (mut self) {
            self._i += 1;
        }
    }

    __dtor (mut self) {
        bar ();
    }

}

class A {
    let _len = 0;

    pub self (len : i32)
        with _len = len
    {}

    pub fn begin (self)-> Iterator {
        Iterator (0)
    }

    pub fn end (self)-> i32 {
        self._len
    }

}


fn main () {
    let x = copy A (10);
    for i in x {
        baz (i);
    }

    foo ();
}
