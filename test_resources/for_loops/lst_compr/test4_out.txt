frame : [weak] core::duplication::deepCopySlice!{[i32], [[i32]]}::deepCopySlice (a : [[i32]])-> mut [mut [mut i32]] {
    if (a.len == 0us) {
        return {.len = 0us, .ptr = null};
        <unit-value>
    };
    let mut res : mut [mut [mut i32]] = core::duplication::YRUNTIME!{[[i32]]}::YRUNTIME::_yrt_new_array (24us, a.len);
    {
        let #_value : [[i32]] = a;
        let i : usize = 0us;
        while (i < a.len) {
            let ti : [i32] = #_value [i];
            {
                #{
                    if (res.len <= i) panic;
                    res [i]
                #} = copy (ti);
                <unit-value>
            };
            i = (i + 1us)
        }
    };
    return alias (res);
    <unit-value>
}
frame : [weak] core::duplication::deepCopySlice!{[[i32]], [[[i32]]]}::deepCopySlice (a : [[[i32]]])-> mut [mut [mut [mut i32]]] {
    if (a.len == 0us) {
        return {.len = 0us, .ptr = null};
        <unit-value>
    };
    let mut res : mut [mut [mut [mut i32]]] = core::duplication::YRUNTIME!{[[[i32]]]}::YRUNTIME::_yrt_new_array (24us, a.len);
    {
        let #_value : [[[i32]]] = a;
        let i : usize = 0us;
        while (i < a.len) {
            let ti : [[i32]] = #_value [i];
            {
                #{
                    if (res.len <= i) panic;
                    res [i]
                #} = core::duplication::deepCopySlice!{[i32], [[i32]]}::deepCopySlice (ti);
                <unit-value>
            };
            i = (i + 1us)
        }
    };
    return alias (res);
    <unit-value>
}
frame : test4::main ()-> void {
    let mut a : mut [mut [i32]] = copy ({.len = 1us, .ptr = &([copy ({.len = 3us, .ptr = &([1, 2, 3])})])});
    let mut _ : mut [mut [mut [mut i32]]] = core::duplication::deepCopySlice!{[[i32]], [[[i32]]]}::deepCopySlice ({
                let mut #_iter : usize = 0us;
                let mut #_value : mut [mut [mut [i32]]] = [<unit-value> ; new 2us];
                while (#_iter < 2us) {
                    #_value [#_iter] = alias (a);
                    #_iter = (#_iter + 1us)
                };
                #_value
            });
    let mut _ : mut [mut [mut [mut i32]] ; 2us] = {
            let mut #_iter : usize = 0us;
            let mut #_value : mut [mut [mut [mut i32]] ; 2us];
            while (#_iter < 2us) {
                #_value [#_iter] = core::duplication::deepCopySlice!{[i32], [[i32]]}::deepCopySlice (a);
                #_iter = (#_iter + 1us)
            };
            #_value
        };
    <unit-value>
}
