pointer P_1 *(void);
pointer P_2 *(P_1);
pointer P_8 *(i32);
tuple T_9 (len-> u64, ptr-> P_8, blk_info-> P_1);
array A_10 [i32 ; 3];
pointer P_11 *(T_9);
array A_12 [T_9 ; 2];
tuple T_13 (len-> u64, ptr-> P_11, blk_info-> P_1);
pointer P_14 *(T_13);
frame :  _Y5test24mainFZv ()-> void {
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1, blk_info-> 0);
    YI_3 = YI_2;
    _yrt_dup_slice(&YI_4, &YI_3, 4);
    YI_5 = YI_4;
    a = YI_5;
    #_iter = 0;
#GOTO test(#3);
#LABEL beg(#2);
    #_value[#_iter] = a;
    YI_6 = #_iter + 1;
    #_iter = YI_6;
#LABEL test(#3);
    YI_7 = #_iter < 2;
#IF YI_7
#THEN_GOTO beg(#2)
#ELSE_GOTO end(#1);
#LABEL end(#1);
    YI_8 = #_value;
    _ = YI_8;
    #_iter = 0;
    _yrt_alloc_slice_no_set(&YI_9, 2, 24);
    YI_10 = YI_9;
    #_value = YI_10;
#GOTO test(#6);
#LABEL beg(#5);
    YI_11 = 24 * #_iter;
    YI_12 = #_value.ptr + YI_11;
    YI_13 = cast!{P_11} (YI_12);
    *YI_13 = a;
    YI_14 = #_iter + 1;
    #_iter = YI_14;
#LABEL test(#6);
    YI_15 = #_iter < 2;
#IF YI_15
#THEN_GOTO beg(#5)
#ELSE_GOTO end(#4);
#LABEL end(#4);
    YI_16 = #_value;
    _ = YI_16;
}
frame :  main (let argc : u32, let argv : P_1)-> i32 {
    _yrt_run_main(argc, argc, &_Y5test24mainFZv);
    return 0;
}
