frame :  [weak] _Y4core11duplication13deepCopySliceNS3i32NS5S3i32FS5S3i32ZS5S3i32 (let a : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))-> (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))) {
    let YI_2 : u8;
    let YI_3 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_4 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let res : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let i : u64;
    let YI_9 : u64;
    let YI_10 : u64;
    let YI_11 : *((len-> u64, ptr-> *(i32)));
    let ti : (len-> u64, ptr-> *(i32));
    let YI_13 : u8;
    let YI_14 : *(u8);
    let YI_15 : *(u8);
    let YI_16 : u64;
    let YI_17 : u64;
    let YI_18 : *((len-> u64, ptr-> *(i32)));
    let YI_19 : (len-> u64, ptr-> *(i32));
    let YI_20 : *(void);
    let YI_21 : (len-> u64, ptr-> *(i32));
    let YI_22 : u64;
    let YI_8 : u8;
    YI_2 = a.len == 0;
#IF YI_2
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_3 = (len-> 0, ptr-> 0);
    return YI_3;
#LABEL end(#2);
    YI_4 = _yrt_new_array(16, a.len);
    res = YI_4;
    #_value = a;
    i = 0;
#GOTO test(#7);
#LABEL beg(#6);
    YI_9 = 16 * i;
    YI_10 = #_value.ptr + YI_9;
    YI_11 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_10);
    ti = *YI_11;
    YI_13 = res.len <= i;
#IF YI_13
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    YI_14 = "/usr/include/ymir/core/duplication.yr";
    YI_15 = "core::duplication::deepCopySlice!{[i32], [[i32]]}::deepCopySlice";
    _yrt_exc_panic(YI_14, YI_15, 11);
#LABEL end(#5);
    YI_16 = 16 * i;
    YI_17 = res.ptr + YI_16;
    YI_18 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_17);
    YI_19 = ti;
    YI_20 = _yrt_dup_slice(YI_19.ptr, YI_19.len, 4);
    YI_21 = (len-> YI_19.len, ptr-> YI_20);
    *YI_18 = YI_21;
    YI_22 = i + 1;
    i = YI_22;
#LABEL test(#7);
    YI_8 = i < #_value.len;
#IF YI_8
#THEN_GOTO beg(#6)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    return res;
}
frame :  [weak] _Y4core11duplication13deepCopySliceNS5S3i32NS7S5S3i32FS7S5S3i32ZS7S5S3i32 (let a : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))))-> (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))) {
    let YI_2 : u8;
    let YI_3 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let YI_4 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let res : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let i : u64;
    let YI_9 : u64;
    let YI_10 : u64;
    let YI_11 : *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))));
    let ti : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_13 : u8;
    let YI_14 : *(u8);
    let YI_15 : *(u8);
    let YI_16 : u64;
    let YI_17 : u64;
    let YI_18 : *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))));
    let YI_19 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_20 : u64;
    let YI_8 : u8;
    YI_2 = a.len == 0;
#IF YI_2
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_3 = (len-> 0, ptr-> 0);
    return YI_3;
#LABEL end(#2);
    YI_4 = _yrt_new_array(16, a.len);
    res = YI_4;
    #_value = a;
    i = 0;
#GOTO test(#7);
#LABEL beg(#6);
    YI_9 = 16 * i;
    YI_10 = #_value.ptr + YI_9;
    YI_11 = cast!{*((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))} (YI_10);
    ti = *YI_11;
    YI_13 = res.len <= i;
#IF YI_13
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    YI_14 = "/usr/include/ymir/core/duplication.yr";
    YI_15 = "core::duplication::deepCopySlice!{[[i32]], [[[i32]]]}::deepCopySlice";
    _yrt_exc_panic(YI_14, YI_15, 11);
#LABEL end(#5);
    YI_16 = 16 * i;
    YI_17 = res.ptr + YI_16;
    YI_18 = cast!{*((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))} (YI_17);
    YI_19 = _Y4core11duplication13deepCopySliceNS3i32NS5S3i32FS5S3i32ZS5S3i32(ti);
    *YI_18 = YI_19;
    YI_20 = i + 1;
    i = YI_20;
#LABEL test(#7);
    YI_8 = i < #_value.len;
#IF YI_8
#THEN_GOTO beg(#6)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    return res;
}
frame :  _Y5test44mainFZv ()-> void {
    let YI_1 : [i32;3];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : *(void);
    let YI_5 : (len-> u64, ptr-> *(i32));
    let YI_6 : [(len-> u64, ptr-> *(i32));1];
    let YI_7 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_8 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_9 : *(void);
    let YI_10 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let a : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let #_iter : u64;
    let YI_13 : *(void);
    let YI_14 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let YI_17 : u64;
    let YI_18 : u64;
    let YI_19 : *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))));
    let YI_20 : u64;
    let YI_16 : u8;
    let YI_21 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let YI_22 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let _ : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let #_iter : u64;
    let #_value : [(len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));2];
    let YI_27 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_28 : u64;
    let YI_26 : u8;
    let YI_29 : [(len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));2];
    let _ : [(len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));2];
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    YI_6 = [YI_5];
    YI_7 = (len-> 1, ptr-> &YI_6);
    YI_8 = YI_7;
    YI_9 = _yrt_dup_slice(YI_8.ptr, YI_8.len, 16);
    YI_10 = (len-> YI_8.len, ptr-> YI_9);
    a = YI_10;
    #_iter = 0;
    YI_13 = _yrt_alloc_array_no_set(2, 16);
    YI_14 = (len-> 2, ptr-> YI_13);
    #_value = YI_14;
#GOTO test(#3);
#LABEL beg(#2);
    YI_17 = 16 * #_iter;
    YI_18 = #_value.ptr + YI_17;
    YI_19 = cast!{*((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))} (YI_18);
    *YI_19 = a;
    YI_20 = #_iter + 1;
    #_iter = YI_20;
#LABEL test(#3);
    YI_16 = #_iter < 2;
#IF YI_16
#THEN_GOTO beg(#2)
#ELSE_GOTO end(#1);
#LABEL end(#1);
    YI_21 = #_value;
    YI_22 = _Y4core11duplication13deepCopySliceNS5S3i32NS7S5S3i32FS7S5S3i32ZS7S5S3i32(YI_21);
    _ = YI_22;
    #_iter = 0;
#GOTO test(#6);
#LABEL beg(#5);
    YI_27 = _Y4core11duplication13deepCopySliceNS3i32NS5S3i32FS5S3i32ZS5S3i32(a);
    #_value[#_iter] = YI_27;
    YI_28 = #_iter + 1;
    #_iter = YI_28;
#LABEL test(#6);
    YI_26 = #_iter < 2;
#IF YI_26
#THEN_GOTO beg(#5)
#ELSE_GOTO end(#4);
#LABEL end(#4);
    YI_29 = #_value;
    _ = YI_29;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test44mainFZv);
    return 0;
}
