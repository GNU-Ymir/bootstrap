frame :  _Y5test24mainFZv ()-> void {
    let YI_1 : [i32;3];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : *(void);
    let YI_5 : (len-> u64, ptr-> *(i32));
    let a : (len-> u64, ptr-> *(i32));
    let #_iter : u64;
    let #_value : [(len-> u64, ptr-> *(i32));2];
    let YI_10 : u64;
    let YI_9 : u8;
    let YI_11 : [(len-> u64, ptr-> *(i32));2];
    let _ : [(len-> u64, ptr-> *(i32));2];
    let #_iter : u64;
    let YI_14 : *(void);
    let YI_15 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_18 : u64;
    let YI_19 : u64;
    let YI_20 : *((len-> u64, ptr-> *(i32)));
    let YI_21 : u64;
    let YI_17 : u8;
    let YI_22 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let _ : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    a = YI_5;
    #_iter = 0;
#GOTO test(#3);
#LABEL beg(#2);
    #_value[#_iter] = a;
    YI_10 = #_iter + 1;
    #_iter = YI_10;
#LABEL test(#3);
    YI_9 = #_iter < 2;
#IF YI_9
#THEN_GOTO beg(#2)
#ELSE_GOTO end(#1);
#LABEL end(#1);
    YI_11 = #_value;
    _ = YI_11;
    #_iter = 0;
    YI_14 = _yrt_alloc_array_no_set(2, 16);
    YI_15 = (len-> 2, ptr-> YI_14);
    #_value = YI_15;
#GOTO test(#6);
#LABEL beg(#5);
    YI_18 = 16 * #_iter;
    YI_19 = #_value.ptr + YI_18;
    YI_20 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_19);
    *YI_20 = a;
    YI_21 = #_iter + 1;
    #_iter = YI_21;
#LABEL test(#6);
    YI_17 = #_iter < 2;
#IF YI_17
#THEN_GOTO beg(#5)
#ELSE_GOTO end(#4);
#LABEL end(#4);
    YI_22 = #_value;
    _ = YI_22;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test24mainFZv);
    return 0;
}
