frame : [weak] core::types::map::compareKeys!{i32}::compareKeys (a : *i32, b : *i32)-> bool {
    return (*(a) == *(b));
    <unit-value>
}
frame : [weak] core::types::map::hashKey!{i32}::hashKey (a : *i32)-> u64 return core::types::hash::__hash (*(a))
frame :[pre] test20::A::self (mut self : mut &(mut test20::A))-> void {
    <unit-value>
}
frame :[post] test20::A::self (mut self : mut &(mut test20::A))-> void {
    <unit-value>
}
frame : test20::A::self (mut self : mut &(mut test20::A))-> void {
    test20::A::self[pre](self);
    test20::A::self[post](self)
}
frame : test20::main ()-> void {
    let mut a : mut [i32 => mut &(mut test20::A)] = [0 => test20::A::self(new), 1 => test20::A::self(new)];
    let mut _b_ : mut [mut &(mut test20::A)] = {
            let mut #_value : mut [mut &(mut test20::A)] = [<unit-value> ; new a.len];
            {
                let mut #_iter : #_iterator!{mut [i32 => mut &(mut test20::A)]} = #_begin (a);
                let mut #_index : usize = 0us;
                try {
                    while #_is_end (#_iter) {
                        let ref #_iter0 : i32 = ref (#_key (#_iter));
                        let mut i : mut &(mut test20::A) = alias (#_value (#_iter));
                        #_value [#_index] = alias (i);
                        #_index = (#_index + 1us);
                        #_next (#_iter);
                        <unit-value>
                    }
                } finally {
                    {
                        #_del (#_iter)
                    }
                }
            };
            #_value
        };
    <unit-value>
}
