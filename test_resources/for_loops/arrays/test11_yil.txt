frame :  _Y6test114mainFZv ()-> void {
    z = 9;
    YI_1 = [1];
    YI_2 = (len-> 1, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    YI_6 = [2];
    YI_7 = (len-> 1, ptr-> &YI_6);
    YI_8 = YI_7;
    YI_9 = _yrt_dup_slice(YI_8.ptr, YI_8.len, 4);
    YI_10 = (len-> YI_8.len, ptr-> YI_9);
    YI_11 = [3];
    YI_12 = (len-> 1, ptr-> &YI_11);
    YI_13 = YI_12;
    YI_14 = _yrt_dup_slice(YI_13.ptr, YI_13.len, 4);
    YI_15 = (len-> YI_13.len, ptr-> YI_14);
    YI_16 = [4];
    YI_17 = (len-> 1, ptr-> &YI_16);
    YI_18 = YI_17;
    YI_19 = _yrt_dup_slice(YI_18.ptr, YI_18.len, 4);
    YI_20 = (len-> YI_18.len, ptr-> YI_19);
    YI_21 = [YI_5, YI_10, YI_15, YI_20];
    a = YI_21;
    YI_22 = (len-> 4, ptr-> &a);
    #_value = YI_22;
    i = 0;
#GOTO test(#5);
#LABEL beg(#4);
    YI_23 = 16 * i;
    YI_24 = #_value.ptr + YI_23;
    YI_25 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_24);
    x = *YI_25;
    YI_26 = x.len <= 0;
#IF YI_26
#THEN_GOTO then(#2)
#ELSE_GOTO end(#3);
#LABEL then(#2);
    YI_27 = "test_resources/for_loops/arrays/test11.yr";
    YI_28 = "test11::main";
    _yrt_exc_panic(YI_27, YI_28, 5);
#LABEL end(#3);
    YI_29 = 4 * 0;
    YI_30 = x.ptr + YI_29;
    YI_31 = cast!{*(i32)} (YI_30);
    YI_32 = cast!{i32} (i);
    YI_33 = z + YI_32;
    *YI_31 = YI_33;
    YI_34 = i + 1;
    i = YI_34;
#LABEL test(#5);
    YI_35 = i < 4;
#IF YI_35
#THEN_GOTO beg(#4)
#ELSE_GOTO end(#1);
#LABEL end(#1);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test114mainFZv);
    return 0;
}
