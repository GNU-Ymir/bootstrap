frame : [weak] core::math::trunc!{f64}::trunc (a : f64)-> f64 return core::math::internal::trunc (a)
frame : [weak] core::math::ffmod!{f64}::ffmod (a : f64, b : f64)-> f64 return (a - (core::math::trunc!{f64}::trunc ((a / b)) * b))
frame : [weak] core::math::trunc!{f32}::trunc (a : f32)-> f32 return core::math::internal::truncf (a)
frame : [weak] core::math::ffmod!{f32}::ffmod (a : f32, b : f32)-> f32 return (a - (core::math::trunc!{f32}::trunc ((a / b)) * b))
frame : [weak] core::math::trunc!{f80}::trunc (a : f80)-> f80 return core::math::internal::truncl (a)
frame : [weak] core::math::ffmod!{f80}::ffmod (a : f80, b : f80)-> f80 return (a - (core::math::trunc!{f80}::trunc ((a / b)) * b))
frame : [weak] core::math::trunc!{fsize}::trunc (a : fsize)-> fsize return core::math::internal::truncl (a)
frame : [weak] core::math::ffmod!{fsize}::ffmod (a : fsize, b : fsize)-> fsize return (a - (core::math::trunc!{fsize}::trunc ((a / b)) * b))
frame : test1::main ()-> void {
    let _a1_ : f64 = 1.6d;
    let _a2_ : f64 = 1.6d;
    let _a3_ : f64 = -1.6d;
    let _a4_ : f64 = -1.6d;
    let _a5_ : f64 = -1.6d;
    let _a6_ : f64 = -1.6d;
    let _a7_ : f32 = 1.6f;
    let _a8_ : f32 = 1.6f;
    let _a9_ : f32 = -1.6f;
    let _a10_ : f32 = -1.6f;
    let _a11_ : f32 = -1.6f;
    let _a12_ : f32 = -1.6f;
    let _a13_ : f80 = 1.6l;
    let _a14_ : f80 = 1.6l;
    let _a15_ : f80 = -1.6l;
    let _a16_ : f80 = -1.6l;
    let _a17_ : f80 = -1.6l;
    let _a18_ : f80 = -1.6l;
    let _a19_ : fsize = 1.6r;
    let _a20_ : fsize = 1.6r;
    let _a21_ : fsize = -1.6r;
    let _a22_ : fsize = -1.6r;
    let _a23_ : fsize = -1.6r;
    let _a24_ : fsize = -1.6r;
    <unit-value>
}
