frame :  _Y6test174mainFZv ()-> void {
    let YI_1 : [i32;4];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let a : (len-> u64, ptr-> *(i32));
    let #_value : (len-> u64, ptr-> *(i32));
    let elem : i32;
    let i : u64;
    let YI_9 : *(i32);
    let YI_10 : u8;
    let YI_11 : *(i32);
    let YI_12 : i32;
    let YI_13 : u64;
    let YI_8 : u8;
    YI_1 = [1, 2, 3, 4];
    YI_2 = (len-> 4, ptr-> &YI_1);
    YI_3 = _yrt_dup_slice(YI_2, 4);
    a = YI_3;
    #_value = a;
    i = 0;
#GOTO test(#5);
#LABEL beg(#4);
    YI_9 = cast!{*(i32)} (#_value.ptr + 4 * i);
    elem = *YI_9;
    YI_10 = a.len <= i;
#IF YI_10
#THEN_GOTO then(#2)
#ELSE_GOTO end(#3);
#LABEL then(#2);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#3);
    YI_11 = cast!{*(i32)} (a.ptr + 4 * i);
    YI_12 = elem * 2;
    *YI_11 = YI_12;
    YI_13 = i + 1;
    i = YI_13;
#LABEL test(#5);
    YI_8 = i < #_value.len;
#IF YI_8
#THEN_GOTO beg(#4)
#ELSE_GOTO end(#1);
#LABEL end(#1);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test174mainFZv);
    return 0;
}
