frame :  [weak] _Y4core5array5opCmpNi32NSi32FSi32Si32Zi32 (let a : (len-> u64, ptr-> *(i32)), let b : (len-> u64, ptr-> *(i32)))-> i32 {
    let YI_3 : u64;
    let YI_9 : u8;
    let YI_5 : u64;
    let YI_7 : u64;
    let YI_11 : u64;
    let mi : u64;
    let YI_14 : (fst-> u64, scd-> u64, step-> i64, contain-> u8);
    let #_range : (fst-> u64, scd-> u64, step-> i64, contain-> u8);
    let i : u64;
    let YI_34 : u8;
    let YI_36 : *(i32);
    let YI_38 : i32;
    let YI_40 : u8;
    let YI_42 : *(i32);
    let YI_44 : i32;
    let YI_46 : u8;
    let YI_20 : u8;
    let YI_22 : *(i32);
    let YI_24 : i32;
    let YI_26 : u8;
    let YI_28 : *(i32);
    let YI_30 : i32;
    let YI_32 : u8;
    let YI_48 : u64;
    let YI_18 : u8;
    let YI_52 : u8;
    let YI_50 : u8;
    YI_9 = b.len > a.len;
#IF YI_9
#THEN_GOTO then
#ELSE_GOTO else;
#LABEL then(#1);
    YI_5 = a.len;
    YI_3 = YI_5;
#GOTO end(#2);
#LABEL else(#3);
    YI_7 = b.len;
    YI_3 = YI_7;
#LABEL end(#2);
    YI_11 = YI_3;
    mi = YI_11;
    YI_14 = (fst-> 0, scd-> mi, step-> 1, contain-> 0);
    #_range = YI_14;
    i = 0;
#GOTO test(#j);
#LABEL beg(#i);
    YI_34 = a.len <= i;
#IF YI_34
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#b);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#c);
    YI_36 = cast!{*(i32)} (a.ptr + 4 * i);
    YI_38 = *YI_36;
    YI_40 = b.len <= i;
#IF YI_40
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#d);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#e);
    YI_42 = cast!{*(i32)} (b.ptr + 4 * i);
    YI_44 = *YI_42;
    YI_46 = YI_38 < YI_44;
#IF YI_46
#THEN_GOTO then
#ELSE_GOTO else;
#LABEL then(#f);
    return -1;
#GOTO end(#g);
#LABEL else(#h);
    YI_20 = a.len <= i;
#IF YI_20
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#5);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#6);
    YI_22 = cast!{*(i32)} (a.ptr + 4 * i);
    YI_24 = *YI_22;
    YI_26 = b.len <= i;
#IF YI_26
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#7);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#8);
    YI_28 = cast!{*(i32)} (b.ptr + 4 * i);
    YI_30 = *YI_28;
    YI_32 = YI_24 > YI_30;
#IF YI_32
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#9);
    return 1;
#LABEL end(#a);
#LABEL end(#g);
    YI_48 = i + 1;
    i = YI_48;
#LABEL test(#j);
    YI_18 = i < #_range.scd;
#IF YI_18
#THEN_GOTO beg
#ELSE_GOTO end;
#LABEL end(#4);
    YI_52 = a.len > b.len;
#IF YI_52
#THEN_GOTO then
#ELSE_GOTO else;
#LABEL then(#n);
    return 1;
#GOTO end(#o);
#LABEL else(#p);
    YI_50 = a.len < b.len;
#IF YI_50
#THEN_GOTO then
#ELSE_GOTO else;
#LABEL then(#k);
    return -1;
#GOTO end(#l);
#LABEL else(#m);
    return 0;
#LABEL end(#l);
#LABEL end(#o);
}
frame :  [weak] _Y4core5array8opEqualsNi32NSi32FSi32Si32Zb (let a : (len-> u64, ptr-> *(i32)), let b : (len-> u64, ptr-> *(i32)))-> u8 {
    let YI_3 : u8;
    let YI_5 : (fst-> u64, scd-> u64, step-> i64, contain-> u8);
    let #_range : (fst-> u64, scd-> u64, step-> i64, contain-> u8);
    let i : u64;
    let YI_11 : u8;
    let YI_13 : *(i32);
    let YI_15 : i32;
    let YI_17 : u8;
    let YI_19 : *(i32);
    let YI_21 : i32;
    let YI_23 : u8;
    let YI_25 : u64;
    let YI_9 : u8;
    let YI_27 : u8;
    YI_3 = a.len != b.len;
#IF YI_3
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#1);
    return 0;
#LABEL end(#2);
    YI_5 = (fst-> 0, scd-> a.len, step-> 1, contain-> 0);
    #_range = YI_5;
    i = 0;
#GOTO test(#b);
#LABEL beg(#a);
    YI_11 = a.len <= i;
#IF YI_11
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#4);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#5);
    YI_13 = cast!{*(i32)} (a.ptr + 4 * i);
    YI_15 = *YI_13;
    YI_17 = b.len <= i;
#IF YI_17
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#6);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#7);
    YI_19 = cast!{*(i32)} (b.ptr + 4 * i);
    YI_21 = *YI_19;
    YI_23 = YI_15 != YI_21;
#IF YI_23
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#8);
    return 0;
#LABEL end(#9);
    YI_25 = i + 1;
    i = YI_25;
#LABEL test(#b);
    YI_9 = i < #_range.scd;
#IF YI_9
#THEN_GOTO beg
#ELSE_GOTO end;
#LABEL end(#3);
    YI_27 = 1;
    return YI_27;
}
frame :  _Y6test114mainFZv ()-> void {
    let YI_1 : [i32;3];
    let YI_3 : (len-> u64, ptr-> *(i32));
    let a : (len-> u64, ptr-> *(i32));
    let YI_6 : [i32;2];
    let b : [i32;2];
    let YI_9 : i32;
    let YI_11 : u8;
    let YI_13 : i32;
    let YI_15 : u8;
    let YI_17 : i32;
    let YI_19 : u8;
    let YI_21 : i32;
    let YI_23 : u8;
    let YI_25 : u8;
    let YI_27 : u8;
    let YI_29 : [i32;3];
    let YI_31 : (len-> u64, ptr-> *(i32));
    let c : (len-> u64, ptr-> *(i32));
    let YI_34 : i32;
    let YI_36 : u8;
    let YI_38 : i32;
    let YI_40 : u8;
    let YI_42 : i32;
    let YI_44 : u8;
    let YI_46 : i32;
    let YI_48 : u8;
    let YI_50 : u8;
    let YI_52 : u8;
    YI_1 = [1, 2, 3];
    YI_3 = _yrt_dup_slice((len-> 3, ptr-> &YI_1), 4);
    a = YI_3;
    YI_6 = [4, 5];
    b = YI_6;
    YI_9 = _Y4core5array5opCmpNi32NSi32FSi32Si32Zi32(a, (len-> 2, ptr-> &b));
    YI_11 = YI_9 < 0;
    YI_13 = _Y4core5array5opCmpNi32NSi32FSi32Si32Zi32(a, (len-> 2, ptr-> &b));
    YI_15 = YI_13 <= 0;
    YI_17 = _Y4core5array5opCmpNi32NSi32FSi32Si32Zi32(a, (len-> 2, ptr-> &b));
    YI_19 = YI_17 > 0;
    YI_21 = _Y4core5array5opCmpNi32NSi32FSi32Si32Zi32(a, (len-> 2, ptr-> &b));
    YI_23 = YI_21 >= 0;
    YI_25 = _Y4core5array8opEqualsNi32NSi32FSi32Si32Zb(a, (len-> 2, ptr-> &b));
    YI_27 = _Y4core5array8opEqualsNi32NSi32FSi32Si32Zb(a, (len-> 2, ptr-> &b));
    YI_29 = [4, 5, 6];
    YI_31 = _yrt_dup_slice((len-> 3, ptr-> &YI_29), 4);
    c = YI_31;
    YI_34 = _Y4core5array5opCmpNi32NSi32FSi32Si32Zi32(a, c);
    YI_36 = YI_34 < 0;
    YI_38 = _Y4core5array5opCmpNi32NSi32FSi32Si32Zi32(a, c);
    YI_40 = YI_38 <= 0;
    YI_42 = _Y4core5array5opCmpNi32NSi32FSi32Si32Zi32(a, c);
    YI_44 = YI_42 > 0;
    YI_46 = _Y4core5array5opCmpNi32NSi32FSi32Si32Zi32(a, c);
    YI_48 = YI_46 >= 0;
    YI_50 = _Y4core5array8opEqualsNi32NSi32FSi32Si32Zb(a, c);
    YI_52 = _Y4core5array8opEqualsNi32NSi32FSi32Si32Zb(a, c);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test114mainFZv);
    return 0;
}
