frame :  [weak] _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32 (let a : (len-> u64, ptr-> *(i32)), let b : (len-> u64, ptr-> *(i32)))-> i32 {
    let YI_3 : u64;
    let YI_4 : u8;
    let YI_5 : u64;
    let mi : u64;
    let #_iter : u64;
    let #_nb_iter : u64;
    let i : u64;
    let YI_11 : u8;
    let YI_12 : *(u8);
    let YI_13 : *(u8);
    let YI_14 : u64;
    let YI_15 : u64;
    let YI_16 : *(i32);
    let YI_17 : i32;
    let YI_18 : u8;
    let YI_19 : *(u8);
    let YI_20 : *(u8);
    let YI_21 : u64;
    let YI_22 : u64;
    let YI_23 : *(i32);
    let YI_24 : i32;
    let YI_25 : u8;
    let YI_26 : u8;
    let YI_27 : *(u8);
    let YI_28 : *(u8);
    let YI_29 : u64;
    let YI_30 : u64;
    let YI_31 : *(i32);
    let YI_32 : i32;
    let YI_33 : u8;
    let YI_34 : *(u8);
    let YI_35 : *(u8);
    let YI_36 : u64;
    let YI_37 : u64;
    let YI_38 : *(i32);
    let YI_39 : i32;
    let YI_40 : u8;
    let YI_41 : u64;
    let YI_9 : u8;
    let YI_42 : u8;
    let YI_43 : u8;
    YI_4 = b.len > a.len;
#IF YI_4
#THEN_GOTO then(#1)
#ELSE_GOTO else(#3);
#LABEL then(#1);
    YI_3 = a.len;
#GOTO end(#2);
#LABEL else(#3);
    YI_3 = b.len;
#LABEL end(#2);
    YI_5 = YI_3;
    mi = YI_5;
    #_iter = 0;
    #_nb_iter = YI_5;
#GOTO test(#j);
#LABEL beg(#i);
    i = #_iter;
    YI_11 = a.len <= i;
#IF YI_11
#THEN_GOTO then(#5)
#ELSE_GOTO end(#6);
#LABEL then(#5);
    YI_12 = "/usr/include/ymir/core/array.yr";
    YI_13 = "core::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_12, YI_13, 9);
#LABEL end(#6);
    YI_14 = 4 * i;
    YI_15 = a.ptr + YI_14;
    YI_16 = cast!{*(i32)} (YI_15);
    YI_17 = *YI_16;
    YI_18 = b.len <= i;
#IF YI_18
#THEN_GOTO then(#7)
#ELSE_GOTO end(#8);
#LABEL then(#7);
    YI_19 = "/usr/include/ymir/core/array.yr";
    YI_20 = "core::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_19, YI_20, 9);
#LABEL end(#8);
    YI_21 = 4 * i;
    YI_22 = b.ptr + YI_21;
    YI_23 = cast!{*(i32)} (YI_22);
    YI_24 = *YI_23;
    YI_25 = YI_17 < YI_24;
#IF YI_25
#THEN_GOTO then(#f)
#ELSE_GOTO else(#h);
#LABEL then(#f);
    return -1;
#GOTO end(#g);
#LABEL else(#h);
    YI_26 = a.len <= i;
#IF YI_26
#THEN_GOTO then(#9)
#ELSE_GOTO end(#a);
#LABEL then(#9);
    YI_27 = "/usr/include/ymir/core/array.yr";
    YI_28 = "core::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_27, YI_28, 10);
#LABEL end(#a);
    YI_29 = 4 * i;
    YI_30 = a.ptr + YI_29;
    YI_31 = cast!{*(i32)} (YI_30);
    YI_32 = *YI_31;
    YI_33 = b.len <= i;
#IF YI_33
#THEN_GOTO then(#b)
#ELSE_GOTO end(#c);
#LABEL then(#b);
    YI_34 = "/usr/include/ymir/core/array.yr";
    YI_35 = "core::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_34, YI_35, 10);
#LABEL end(#c);
    YI_36 = 4 * i;
    YI_37 = b.ptr + YI_36;
    YI_38 = cast!{*(i32)} (YI_37);
    YI_39 = *YI_38;
    YI_40 = YI_32 > YI_39;
#IF YI_40
#THEN_GOTO then(#d)
#ELSE_GOTO end(#e);
#LABEL then(#d);
    return 1;
#LABEL end(#e);
#LABEL end(#g);
    YI_41 = #_iter + 1;
    #_iter = YI_41;
#LABEL test(#j);
    YI_9 = #_iter < #_nb_iter;
#IF YI_9
#THEN_GOTO beg(#i)
#ELSE_GOTO end(#4);
#LABEL end(#4);
    YI_42 = a.len > b.len;
#IF YI_42
#THEN_GOTO then(#n)
#ELSE_GOTO else(#p);
#LABEL then(#n);
    return 1;
#GOTO end(#o);
#LABEL else(#p);
    YI_43 = a.len < b.len;
#IF YI_43
#THEN_GOTO then(#k)
#ELSE_GOTO else(#m);
#LABEL then(#k);
    return -1;
#GOTO end(#l);
#LABEL else(#m);
    return 0;
#LABEL end(#l);
#LABEL end(#o);
}
frame :  [weak] _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb (let a : (len-> u64, ptr-> *(i32)), let b : (len-> u64, ptr-> *(i32)))-> u8 {
    let YI_3 : u8;
    let #_iter : u64;
    let #_nb_iter : u64;
    let i : u64;
    let YI_8 : u8;
    let YI_9 : *(u8);
    let YI_10 : *(u8);
    let YI_11 : u64;
    let YI_12 : u64;
    let YI_13 : *(i32);
    let YI_14 : i32;
    let YI_15 : u8;
    let YI_16 : *(u8);
    let YI_17 : *(u8);
    let YI_18 : u64;
    let YI_19 : u64;
    let YI_20 : *(i32);
    let YI_21 : i32;
    let YI_22 : u8;
    let YI_23 : u64;
    let YI_6 : u8;
    let YI_24 : u8;
    YI_3 = a.len != b.len;
#IF YI_3
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    return 0;
#LABEL end(#2);
    #_iter = 0;
    #_nb_iter = a.len;
#GOTO test(#b);
#LABEL beg(#a);
    i = #_iter;
    YI_8 = a.len <= i;
#IF YI_8
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    YI_9 = "/usr/include/ymir/core/array.yr";
    YI_10 = "core::array::opEquals!{i32, [i32]}::opEquals";
    _yrt_exc_panic(YI_9, YI_10, 22);
#LABEL end(#5);
    YI_11 = 4 * i;
    YI_12 = a.ptr + YI_11;
    YI_13 = cast!{*(i32)} (YI_12);
    YI_14 = *YI_13;
    YI_15 = b.len <= i;
#IF YI_15
#THEN_GOTO then(#6)
#ELSE_GOTO end(#7);
#LABEL then(#6);
    YI_16 = "/usr/include/ymir/core/array.yr";
    YI_17 = "core::array::opEquals!{i32, [i32]}::opEquals";
    _yrt_exc_panic(YI_16, YI_17, 22);
#LABEL end(#7);
    YI_18 = 4 * i;
    YI_19 = b.ptr + YI_18;
    YI_20 = cast!{*(i32)} (YI_19);
    YI_21 = *YI_20;
    YI_22 = YI_14 != YI_21;
#IF YI_22
#THEN_GOTO then(#8)
#ELSE_GOTO end(#9);
#LABEL then(#8);
    return 0;
#LABEL end(#9);
    YI_23 = #_iter + 1;
    #_iter = YI_23;
#LABEL test(#b);
    YI_6 = #_iter < #_nb_iter;
#IF YI_6
#THEN_GOTO beg(#a)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    YI_24 = 1;
    return YI_24;
}
frame :  _Y6test114mainFZv ()-> void {
    let YI_1 : [i32;3];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : *(void);
    let YI_5 : (len-> u64, ptr-> *(i32));
    let a : (len-> u64, ptr-> *(i32));
    let YI_7 : [i32;2];
    let b : [i32;2];
    let YI_9 : (len-> u64, ptr-> *(i32));
    let YI_10 : i32;
    let YI_11 : u8;
    let YI_12 : (len-> u64, ptr-> *(i32));
    let YI_13 : i32;
    let YI_14 : u8;
    let YI_15 : (len-> u64, ptr-> *(i32));
    let YI_16 : i32;
    let YI_17 : u8;
    let YI_18 : (len-> u64, ptr-> *(i32));
    let YI_19 : i32;
    let YI_20 : u8;
    let YI_21 : (len-> u64, ptr-> *(i32));
    let YI_22 : u8;
    let YI_23 : (len-> u64, ptr-> *(i32));
    let YI_24 : u8;
    let YI_25 : [i32;3];
    let YI_26 : (len-> u64, ptr-> *(i32));
    let YI_27 : (len-> u64, ptr-> *(i32));
    let YI_28 : *(void);
    let YI_29 : (len-> u64, ptr-> *(i32));
    let c : (len-> u64, ptr-> *(i32));
    let YI_31 : i32;
    let YI_32 : u8;
    let YI_33 : i32;
    let YI_34 : u8;
    let YI_35 : i32;
    let YI_36 : u8;
    let YI_37 : i32;
    let YI_38 : u8;
    let YI_39 : u8;
    let YI_40 : u8;
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    a = YI_5;
    YI_7 = [4, 5];
    b = YI_7;
    YI_9 = (len-> 2, ptr-> &b);
    YI_10 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, YI_9);
    YI_11 = YI_10 < 0;
    YI_12 = (len-> 2, ptr-> &b);
    YI_13 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, YI_12);
    YI_14 = YI_13 <= 0;
    YI_15 = (len-> 2, ptr-> &b);
    YI_16 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, YI_15);
    YI_17 = YI_16 > 0;
    YI_18 = (len-> 2, ptr-> &b);
    YI_19 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, YI_18);
    YI_20 = YI_19 >= 0;
    YI_21 = (len-> 2, ptr-> &b);
    YI_22 = _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb(a, YI_21);
    YI_23 = (len-> 2, ptr-> &b);
    YI_24 = _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb(a, YI_23);
    YI_25 = [4, 5, 6];
    YI_26 = (len-> 3, ptr-> &YI_25);
    YI_27 = YI_26;
    YI_28 = _yrt_dup_slice(YI_27.ptr, YI_27.len, 4);
    YI_29 = (len-> YI_27.len, ptr-> YI_28);
    c = YI_29;
    YI_31 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, c);
    YI_32 = YI_31 < 0;
    YI_33 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, c);
    YI_34 = YI_33 <= 0;
    YI_35 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, c);
    YI_36 = YI_35 > 0;
    YI_37 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, c);
    YI_38 = YI_37 >= 0;
    YI_39 = _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb(a, c);
    YI_40 = _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb(a, c);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test114mainFZv);
    return 0;
}
