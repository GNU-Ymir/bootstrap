frame :[pre] test18::A::self (mut self : mut &(mut test18::A))-> void {
    <unit-value>
}
frame :[post] test18::A::self (mut self : mut &(mut test18::A))-> void {
    <unit-value>
}
frame : test18::A::self (mut self : mut &(mut test18::A))-> void {
    test18::A::self[pre](self);
    test18::A::self[post](self)
}
frame :[pre] test18::B::self (mut self : mut &(mut test18::B))-> void {
    test18::A::self[pre](self);
    {
        <unit-value>
    }
}
frame :[post] test18::B::self (mut self : mut &(mut test18::B))-> void {
    test18::A::self[post](self);
    {
        <unit-value>
    }
}
frame : test18::B::self (mut self : mut &(mut test18::B))-> void {
    test18::B::self[pre](self);
    test18::B::self[post](self)
}
frame : test18::main ()-> void {
    let b : [&(test18::B)] = copy ({.len = 2us, .ptr = &([test18::B::self(new), test18::B::self(new)])});
    let _a_ : [&(test18::A)] = b;
    <unit-value>
}
