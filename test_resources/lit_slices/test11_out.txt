frame : [weak] core::array::opCmp!{i32, [i32]}::opCmp (a : [i32], b : [i32])-> i32 {
    let mi : usize = if (b.len > a.len) {
            a.len
        } else {
            b.len
        };
    {
        let #_range : (..usize) = (0us ..[false] mi).step_by (1is);
        let i : usize = 0us;
        while (i < #_range.scd) {
            {
                if (#{
                    if (a.len <= i) core::array::outOfArray ();
                    a [i]
                #} < #{
                    if (b.len <= i) core::array::outOfArray ();
                    b [i]
                #}) {
                    return -1;
                    <unit-value>
                } else if (#{
                    if (a.len <= i) core::array::outOfArray ();
                    a [i]
                #} > #{
                    if (b.len <= i) core::array::outOfArray ();
                    b [i]
                #}) {
                    return 1;
                    <unit-value>
                }
            };
            i = (i + 1us)
        }
    };
    if (a.len > b.len) {
        return 1;
        <unit-value>
    } else if (a.len < b.len) {
        return -1;
        <unit-value>
    } else {
        return 0;
        <unit-value>
    }
}
frame : [weak] core::array::opEquals!{i32, [i32]}::opEquals (a : [i32], b : [i32])-> bool return {
    if (a.len != b.len) {
        return false
    };
    {
        let #_range : (..usize) = (0us ..[false] a.len).step_by (1is);
        let i : usize = 0us;
        while (i < #_range.scd) {
            {
                if (#{
                    if (a.len <= i) core::array::outOfArray ();
                    a [i]
                #} != #{
                    if (b.len <= i) core::array::outOfArray ();
                    b [i]
                #}) {
                    return false;
                    <unit-value>
                }
            };
            i = (i + 1us)
        }
    };
    true
}
frame : test11::main ()-> void {
    let a : [i32] = copy ({.len = 3us, .ptr = &([1, 2, 3])});
    let b : [i32 ; 2us] = [4, 5];
    (core::array::opCmp!{i32, [i32]}::opCmp (a, {.len = 2us, .ptr = &(b)}) < 0);
    (core::array::opCmp!{i32, [i32]}::opCmp (a, {.len = 2us, .ptr = &(b)}) <= 0);
    (core::array::opCmp!{i32, [i32]}::opCmp (a, {.len = 2us, .ptr = &(b)}) > 0);
    (core::array::opCmp!{i32, [i32]}::opCmp (a, {.len = 2us, .ptr = &(b)}) >= 0);
    core::array::opEquals!{i32, [i32]}::opEquals (a, {.len = 2us, .ptr = &(b)});
    !core::array::opEquals!{i32, [i32]}::opEquals (a, {.len = 2us, .ptr = &(b)});
    let c : [i32] = copy ({.len = 3us, .ptr = &([4, 5, 6])});
    (core::array::opCmp!{i32, [i32]}::opCmp (a, c) < 0);
    (core::array::opCmp!{i32, [i32]}::opCmp (a, c) <= 0);
    (core::array::opCmp!{i32, [i32]}::opCmp (a, c) > 0);
    (core::array::opCmp!{i32, [i32]}::opCmp (a, c) >= 0);
    core::array::opEquals!{i32, [i32]}::opEquals (a, c);
    !core::array::opEquals!{i32, [i32]}::opEquals (a, c);
    <unit-value>
}
