tuple T_6 (len-> u64, ptr-> *(i32), blk_info-> *(void));
tuple T_7 (len-> u64, ptr-> *(u8), blk_info-> *(void));
frame :  [weak] _Y4core5types5array5opCmpNi32NS3i32FS3i32S3i32Zi32 (let a : T_6, let b : T_6)-> i32 {
    YI_1 = b.len > a.len;
#IF YI_1
#THEN_GOTO then(#1)
#ELSE_GOTO else(#3);
#LABEL then(#1);
    YI_2 = a.len;
#GOTO end(#2);
#LABEL else(#3);
    YI_2 = b.len;
#LABEL end(#2);
    mi = YI_2;
    #_iter = 0;
    #_nb_iter = mi;
#GOTO test(#j);
#LABEL beg(#i);
    i = #_iter;
    YI_3 = a.len <= i;
#IF YI_3
#THEN_GOTO then(#5)
#ELSE_GOTO end(#6);
#LABEL then(#5);
    YI_4 = "/usr/include/ymir/core/types/array.yr";
    YI_5 = "core::types::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_4, YI_5, 19);
#LABEL end(#6);
    YI_6 = 4 * i;
    YI_7 = a.ptr + YI_6;
    YI_8 = cast!{*(i32)} (YI_7);
    YI_9 = *YI_8;
    YI_10 = b.len <= i;
#IF YI_10
#THEN_GOTO then(#7)
#ELSE_GOTO end(#8);
#LABEL then(#7);
    YI_11 = "/usr/include/ymir/core/types/array.yr";
    YI_12 = "core::types::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_11, YI_12, 19);
#LABEL end(#8);
    YI_13 = 4 * i;
    YI_14 = b.ptr + YI_13;
    YI_15 = cast!{*(i32)} (YI_14);
    YI_16 = *YI_15;
    YI_17 = YI_9 < YI_16;
#IF YI_17
#THEN_GOTO then(#f)
#ELSE_GOTO else(#h);
#LABEL then(#f);
    return -1;
#GOTO end(#g);
#LABEL else(#h);
    YI_18 = a.len <= i;
#IF YI_18
#THEN_GOTO then(#9)
#ELSE_GOTO end(#a);
#LABEL then(#9);
    YI_19 = "/usr/include/ymir/core/types/array.yr";
    YI_20 = "core::types::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_19, YI_20, 20);
#LABEL end(#a);
    YI_21 = 4 * i;
    YI_22 = a.ptr + YI_21;
    YI_23 = cast!{*(i32)} (YI_22);
    YI_24 = *YI_23;
    YI_25 = b.len <= i;
#IF YI_25
#THEN_GOTO then(#b)
#ELSE_GOTO end(#c);
#LABEL then(#b);
    YI_26 = "/usr/include/ymir/core/types/array.yr";
    YI_27 = "core::types::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_26, YI_27, 20);
#LABEL end(#c);
    YI_28 = 4 * i;
    YI_29 = b.ptr + YI_28;
    YI_30 = cast!{*(i32)} (YI_29);
    YI_31 = *YI_30;
    YI_32 = YI_24 > YI_31;
#IF YI_32
#THEN_GOTO then(#d)
#ELSE_GOTO end(#e);
#LABEL then(#d);
    return 1;
#LABEL end(#e);
#LABEL end(#g);
    YI_33 = #_iter + 1;
    #_iter = YI_33;
#LABEL test(#j);
    YI_34 = #_iter < #_nb_iter;
#IF YI_34
#THEN_GOTO beg(#i)
#ELSE_GOTO end(#4);
#LABEL end(#4);
    YI_35 = a.len > b.len;
#IF YI_35
#THEN_GOTO then(#n)
#ELSE_GOTO else(#p);
#LABEL then(#n);
    return 1;
#GOTO end(#o);
#LABEL else(#p);
    YI_36 = a.len < b.len;
#IF YI_36
#THEN_GOTO then(#k)
#ELSE_GOTO else(#m);
#LABEL then(#k);
    return -1;
#GOTO end(#l);
#LABEL else(#m);
    return 0;
#LABEL end(#l);
#LABEL end(#o);
}
frame :  [weak] _Y4core5types5array8opEqualsNi32NS3i32FS3i32S3i32Zb (let a : T_6, let b : T_6)-> u8 {
    YI_1 = a.len != b.len;
#IF YI_1
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    return 0;
#LABEL end(#2);
    #_iter = 0;
    #_nb_iter = a.len;
#GOTO test(#b);
#LABEL beg(#a);
    i = #_iter;
    YI_2 = a.len <= i;
#IF YI_2
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    YI_3 = "/usr/include/ymir/core/types/array.yr";
    YI_4 = "core::types::array::opEquals!{i32, [i32]}::opEquals";
    _yrt_exc_panic(YI_3, YI_4, 32);
#LABEL end(#5);
    YI_5 = 4 * i;
    YI_6 = a.ptr + YI_5;
    YI_7 = cast!{*(i32)} (YI_6);
    YI_8 = *YI_7;
    YI_9 = b.len <= i;
#IF YI_9
#THEN_GOTO then(#6)
#ELSE_GOTO end(#7);
#LABEL then(#6);
    YI_10 = "/usr/include/ymir/core/types/array.yr";
    YI_11 = "core::types::array::opEquals!{i32, [i32]}::opEquals";
    _yrt_exc_panic(YI_10, YI_11, 32);
#LABEL end(#7);
    YI_12 = 4 * i;
    YI_13 = b.ptr + YI_12;
    YI_14 = cast!{*(i32)} (YI_13);
    YI_15 = *YI_14;
    YI_16 = YI_8 != YI_15;
#IF YI_16
#THEN_GOTO then(#8)
#ELSE_GOTO end(#9);
#LABEL then(#8);
    return 0;
#LABEL end(#9);
    YI_17 = #_iter + 1;
    #_iter = YI_17;
#LABEL test(#b);
    YI_18 = #_iter < #_nb_iter;
#IF YI_18
#THEN_GOTO beg(#a)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    YI_19 = 1;
    return YI_19;
}
frame :  _Y6test114mainFZv ()-> void {
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1, blk_info-> 0);
    YI_3 = YI_2;
    _yrt_dup_slice(&YI_4, &YI_3, 4);
    YI_5 = YI_4;
    a = YI_5;
    YI_6 = [4, 5];
    b = YI_6;
    YI_7 = (len-> 2, ptr-> &b, blk_info-> 0);
    YI_8 = _Y4core5types5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, YI_7);
    YI_9 = YI_8 < 0;
    YI_10 = (len-> 2, ptr-> &b, blk_info-> 0);
    YI_11 = _Y4core5types5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, YI_10);
    YI_12 = YI_11 <= 0;
    YI_13 = (len-> 2, ptr-> &b, blk_info-> 0);
    YI_14 = _Y4core5types5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, YI_13);
    YI_15 = YI_14 > 0;
    YI_16 = (len-> 2, ptr-> &b, blk_info-> 0);
    YI_17 = _Y4core5types5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, YI_16);
    YI_18 = YI_17 >= 0;
    YI_19 = (len-> 2, ptr-> &b, blk_info-> 0);
    YI_20 = _Y4core5types5array8opEqualsNi32NS3i32FS3i32S3i32Zb(a, YI_19);
    YI_21 = (len-> 2, ptr-> &b, blk_info-> 0);
    YI_22 = _Y4core5types5array8opEqualsNi32NS3i32FS3i32S3i32Zb(a, YI_21);
    YI_23 = [4, 5, 6];
    YI_24 = (len-> 3, ptr-> &YI_23, blk_info-> 0);
    YI_25 = YI_24;
    _yrt_dup_slice(&YI_26, &YI_25, 4);
    YI_27 = YI_26;
    c = YI_27;
    YI_28 = _Y4core5types5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, c);
    YI_29 = YI_28 < 0;
    YI_30 = _Y4core5types5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, c);
    YI_31 = YI_30 <= 0;
    YI_32 = _Y4core5types5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, c);
    YI_33 = YI_32 > 0;
    YI_34 = _Y4core5types5array5opCmpNi32NS3i32FS3i32S3i32Zi32(a, c);
    YI_35 = YI_34 >= 0;
    YI_36 = _Y4core5types5array8opEqualsNi32NS3i32FS3i32S3i32Zb(a, c);
    YI_37 = _Y4core5types5array8opEqualsNi32NS3i32FS3i32S3i32Zb(a, c);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test114mainFZv);
    return 0;
}
