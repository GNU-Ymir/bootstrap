frame :  _Y5test14mainFZv ()-> void {
    let YI_1 : (len-> u64, ptr-> *(i32));
    let a : (len-> u64, ptr-> *(i32));
    let YI_4 : u8;
    let YI_6 : *(i32);
    let YI_8 : i32;
    let YI_10 : u8;
    let YI_12 : *(i32);
    let YI_14 : (len-> u64, ptr-> *(i32));
    YI_1 = _Y5test13fooFZSi32();
    a = YI_1;
    YI_4 = a.len <= 10;
#IF YI_4
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#1);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#2);
    YI_6 = cast!{*(i32)} (a.ptr + 4 * 10);
    YI_8 = *YI_6;
    YI_10 = a.len < 7;
#IF YI_10
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#3);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#4);
    YI_12 = a.ptr + 0;
    YI_14 = (len-> 7, ptr-> YI_12);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test14mainFZv);
    return 0;
}
frame :  _Y5test13fooFZSi32 ()-> (len-> u64, ptr-> *(i32)) {
    let YI_1 : [i32;3];
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_5 : (len-> u64, ptr-> *(i32));
    YI_1 = [1, 2, 3];
    YI_3 = _yrt_dup_slice((len-> 3, ptr-> &YI_1), 4);
    YI_5 = YI_3;
    return YI_5;
}
