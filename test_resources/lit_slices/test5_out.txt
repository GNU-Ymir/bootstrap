frame : [weak] core::duplication::deepCopySlice!{[i32], [[i32]]}::deepCopySlice (a : [[i32]])-> mut [mut [mut i32]] {
    if (a.len == 0us) {
        return {.len = 0us, .ptr = null};
        <unit-value>
    };
    let mut res : mut [mut [mut i32]] = core::duplication::YRUNTIME!{[[i32]]}::YRUNTIME::_yrt_new_array (16us, a.len);
    {
        let #_value : [[i32]] = a;
        let i : usize = 0us;
        while (i < #_value.len) {
            let ti : [i32] = #_value [i];
            {
                #{
                    if (res.len <= i) panic;
                    res [i]
                #} = copy (ti);
                <unit-value>
            };
            i = (i + 1us)
        }
    };
    return alias (res);
    <unit-value>
}
frame : [weak] core::duplication::deepCopySlice!{[[i32]], [[[i32]]]}::deepCopySlice (a : [[[i32]]])-> mut [mut [mut [mut i32]]] {
    if (a.len == 0us) {
        return {.len = 0us, .ptr = null};
        <unit-value>
    };
    let mut res : mut [mut [mut [mut i32]]] = core::duplication::YRUNTIME!{[[[i32]]]}::YRUNTIME::_yrt_new_array (16us, a.len);
    {
        let #_value : [[[i32]]] = a;
        let i : usize = 0us;
        while (i < #_value.len) {
            let ti : [[i32]] = #_value [i];
            {
                #{
                    if (res.len <= i) panic;
                    res [i]
                #} = core::duplication::deepCopySlice!{[i32], [[i32]]}::deepCopySlice (ti);
                <unit-value>
            };
            i = (i + 1us)
        }
    };
    return alias (res);
    <unit-value>
}
frame : test5::main ()-> void {
    let mut a : mut [mut [mut [mut i32]]] = {.len = 0us, .ptr = null};
    let mut b : mut [mut [mut [mut i32]]] = core::duplication::deepCopySlice!{[[i32]], [[[i32]]]}::deepCopySlice (a);
    b;
    <unit-value>
}
