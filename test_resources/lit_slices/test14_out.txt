frame : [weak] std::io::print!{c8, i32}::print (a : c8, b : i32)-> void {
    std::io::print (a);
    {
        std::io::print (b);
        <unit-value>
    }
}
frame : [weak] std::io::print!{[c8], i32}::print (a : [c8], b : i32)-> void {
    std::io::print (a);
    {
        std::io::print (b);
        <unit-value>
    }
}
frame : [weak] std::io::println!{c8}::println (a : c8)-> void {
    std::io::print (a);
    std::io::putchar ('\n'c8);
    <unit-value>
}
frame : [weak] test14::foo!{i32, (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32,...)}::foo (a : i32, b : (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32))-> void {
    std::io::print!{c8, i32}::print ('['c8, a);
    cte for {
        {
            let i : i32 = b.0;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.1;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.2;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.3;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.4;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.5;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.6;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.7;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.8;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.9;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.10;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.11;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.12;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.13;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.14;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.15;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.16;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.17;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        };
        {
            let i : i32 = b.18;
            {
                std::io::print!{[c8], i32}::print (", "s8, i);
                <unit-value>
            }
        }
    };
    std::io::println!{c8}::println (']'c8);
    <unit-value>
}
frame : test14::main ()-> void {
    let c : i32 = 20;
    let a : [i32] = [0 ; new c];
    test14::foo!{i32, (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32,...)}::foo (#{
            if (a.len < 20) panic;
            {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
        #} [0us], (#{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [1us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [2us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [3us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [4us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [5us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [6us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [7us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [8us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [9us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [10us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [11us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [12us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [13us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [14us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [15us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [16us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [17us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [18us], #{
                if (a.len < 20) panic;
                {.len = 20us, .ptr = (a.ptr + (0us * 4us))}
            #} [19us]));
    <unit-value>
}
frame : [weak] std::io::println!{c8, (i32, c8,...)}::println (a : c8, b : (i32, c8))-> void {
    std::io::print (a);
    cte for {
        {
            let i : i32 = b.0;
            {
                std::io::print (i);
                <unit-value>
            }
        };
        {
            let i : c8 = b.1;
            {
                std::io::print (i);
                <unit-value>
            }
        }
    };
    std::io::putchar ('\n'c8);
    <unit-value>
}
frame : test14::foo (a : i32)-> void {
    std::io::println!{c8, (i32, c8,...)}::println ('['c8, (a, ']'c8));
    <unit-value>
}
