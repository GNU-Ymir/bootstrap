frame :  [weak] _Y4core11duplication13deepCopySliceNS3i32NS5S3i32FS5S3i32ZS5S3i32 (let a : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))-> (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))) {
    let YI_3 : u8;
    let YI_2 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_4 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let res : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let ti : (len-> u64, ptr-> *(i32));
    let i : u64;
    let YI_10 : u64;
    let YI_11 : u64;
    let YI_12 : *((len-> u64, ptr-> *(i32)));
    let YI_15 : u8;
    let YI_13 : *(u8);
    let YI_14 : *(u8);
    let YI_16 : u64;
    let YI_17 : u64;
    let YI_18 : *((len-> u64, ptr-> *(i32)));
    let YI_19 : (len-> u64, ptr-> *(i32));
    let YI_20 : *(void);
    let YI_21 : (len-> u64, ptr-> *(i32));
    let YI_22 : u64;
    let YI_9 : u8;
    YI_3 = a.len == 0;
#IF YI_3
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_2 = (len-> 0, ptr-> 0);
    return YI_2;
#LABEL end(#2);
    YI_4 = _yrt_new_array(16, a.len);
    res = YI_4;
    #_value = a;
    i = 0;
#GOTO test(#7);
#LABEL beg(#6);
    YI_10 = 16 * i;
    YI_11 = #_value.ptr + YI_10;
    YI_12 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_11);
    ti = *YI_12;
    YI_15 = res.len <= i;
#IF YI_15
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    YI_13 = "/usr/include/ymir/core/duplication.yr";
    YI_14 = "core::duplication::deepCopySlice!{[i32], [[i32]]}::deepCopySlice";
    _yrt_exc_panic(YI_13, YI_14, 11);
#LABEL end(#5);
    YI_16 = 16 * i;
    YI_17 = res.ptr + YI_16;
    YI_18 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_17);
    YI_19 = ti;
    YI_20 = _yrt_dup_slice(YI_19.ptr, YI_19.len, 4);
    YI_21 = (len-> YI_19.len, ptr-> YI_20);
    *YI_18 = YI_21;
    YI_22 = i + 1;
    i = YI_22;
#LABEL test(#7);
    YI_9 = i < #_value.len;
#IF YI_9
#THEN_GOTO beg(#6)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    return res;
}
frame :  [weak] _Y4core11duplication13deepCopySliceNS5S3i32NS7S5S3i32FS7S5S3i32ZS7S5S3i32 (let a : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))))-> (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))) {
    let YI_3 : u8;
    let YI_2 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let YI_4 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let res : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let ti : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let i : u64;
    let YI_10 : u64;
    let YI_11 : u64;
    let YI_12 : *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))));
    let YI_15 : u8;
    let YI_13 : *(u8);
    let YI_14 : *(u8);
    let YI_16 : u64;
    let YI_17 : u64;
    let YI_18 : *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))));
    let YI_19 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_20 : u64;
    let YI_9 : u8;
    YI_3 = a.len == 0;
#IF YI_3
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_2 = (len-> 0, ptr-> 0);
    return YI_2;
#LABEL end(#2);
    YI_4 = _yrt_new_array(16, a.len);
    res = YI_4;
    #_value = a;
    i = 0;
#GOTO test(#7);
#LABEL beg(#6);
    YI_10 = 16 * i;
    YI_11 = #_value.ptr + YI_10;
    YI_12 = cast!{*((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))} (YI_11);
    ti = *YI_12;
    YI_15 = res.len <= i;
#IF YI_15
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    YI_13 = "/usr/include/ymir/core/duplication.yr";
    YI_14 = "core::duplication::deepCopySlice!{[[i32]], [[[i32]]]}::deepCopySlice";
    _yrt_exc_panic(YI_13, YI_14, 11);
#LABEL end(#5);
    YI_16 = 16 * i;
    YI_17 = res.ptr + YI_16;
    YI_18 = cast!{*((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))} (YI_17);
    YI_19 = _Y4core11duplication13deepCopySliceNS3i32NS5S3i32FS5S3i32ZS5S3i32(ti);
    *YI_18 = YI_19;
    YI_20 = i + 1;
    i = YI_20;
#LABEL test(#7);
    YI_9 = i < #_value.len;
#IF YI_9
#THEN_GOTO beg(#6)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    return res;
}
frame :  _Y5test54mainFZv ()-> void {
    let YI_1 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let a : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let YI_3 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let b : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    YI_1 = (len-> 0, ptr-> 0);
    a = YI_1;
    YI_3 = _Y4core11duplication13deepCopySliceNS5S3i32NS7S5S3i32FS7S5S3i32ZS7S5S3i32(a);
    b = YI_3;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test54mainFZv);
    return 0;
}
