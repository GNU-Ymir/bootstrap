frame :  [weak] _Y4core11duplication13deepCopySliceNS3i32NS5S3i32FS5S3i32ZS5S3i32 (let a : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))-> (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))) {
    let YI_3 : u8;
    let YI_2 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_4 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let res : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let ti : (len-> u64, ptr-> *(i32));
    let i : u64;
    let YI_10 : *((len-> u64, ptr-> *(i32)));
    let YI_11 : u8;
    let YI_12 : *((len-> u64, ptr-> *(i32)));
    let YI_13 : (len-> u64, ptr-> *(i32));
    let YI_14 : u64;
    let YI_9 : u8;
    YI_3 = a.len == 0;
#IF YI_3
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_2 = (len-> 0, ptr-> 0);
    return YI_2;
#LABEL end(#2);
    YI_4 = _yrt_new_array(16, a.len);
    res = YI_4;
    #_value = a;
    i = 0;
#GOTO test(#7);
#LABEL beg(#6);
    YI_10 = cast!{*((len-> u64, ptr-> *(i32)))} (#_value.ptr + 16 * i);
    ti = *YI_10;
    YI_11 = res.len <= i;
#IF YI_11
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    _yrt_exc_panic((len-> 37, ptr-> [47, 117, 115, 114, 47, 105, 110, 99, 108, 117, 100, 101, 47, 121, 109, 105, 114, 47, 99, 111, 114, 101, 47, 100, 117, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 121, 114, 0]).ptr, (len-> 64, ptr-> [99, 111, 114, 101, 58, 58, 100, 117, 112, 108, 105, 99, 97, 116, 105, 111, 110, 58, 58, 100, 101, 101, 112, 67, 111, 112, 121, 83, 108, 105, 99, 101, 33, 123, 91, 105, 51, 50, 93, 44, 32, 91, 91, 105, 51, 50, 93, 93, 125, 58, 58, 100, 101, 101, 112, 67, 111, 112, 121, 83, 108, 105, 99, 101, 0]).ptr, 14);
#LABEL end(#5);
    YI_12 = cast!{*((len-> u64, ptr-> *(i32)))} (res.ptr + 16 * i);
    YI_13 = _yrt_dup_slice(ti, 4);
    *YI_12 = YI_13;
    YI_14 = i + 1;
    i = YI_14;
#LABEL test(#7);
    YI_9 = i < #_value.len;
#IF YI_9
#THEN_GOTO beg(#6)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    return res;
}
frame :  [weak] _Y4core11duplication13deepCopySliceNS5S3i32NS7S5S3i32FS7S5S3i32ZS7S5S3i32 (let a : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))))-> (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))) {
    let YI_3 : u8;
    let YI_2 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let YI_4 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let res : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let ti : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let i : u64;
    let YI_10 : *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))));
    let YI_11 : u8;
    let YI_12 : *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))));
    let YI_13 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_14 : u64;
    let YI_9 : u8;
    YI_3 = a.len == 0;
#IF YI_3
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_2 = (len-> 0, ptr-> 0);
    return YI_2;
#LABEL end(#2);
    YI_4 = _yrt_new_array(16, a.len);
    res = YI_4;
    #_value = a;
    i = 0;
#GOTO test(#7);
#LABEL beg(#6);
    YI_10 = cast!{*((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))} (#_value.ptr + 16 * i);
    ti = *YI_10;
    YI_11 = res.len <= i;
#IF YI_11
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    _yrt_exc_panic((len-> 37, ptr-> [47, 117, 115, 114, 47, 105, 110, 99, 108, 117, 100, 101, 47, 121, 109, 105, 114, 47, 99, 111, 114, 101, 47, 100, 117, 112, 108, 105, 99, 97, 116, 105, 111, 110, 46, 121, 114, 0]).ptr, (len-> 68, ptr-> [99, 111, 114, 101, 58, 58, 100, 117, 112, 108, 105, 99, 97, 116, 105, 111, 110, 58, 58, 100, 101, 101, 112, 67, 111, 112, 121, 83, 108, 105, 99, 101, 33, 123, 91, 91, 105, 51, 50, 93, 93, 44, 32, 91, 91, 91, 105, 51, 50, 93, 93, 93, 125, 58, 58, 100, 101, 101, 112, 67, 111, 112, 121, 83, 108, 105, 99, 101, 0]).ptr, 14);
#LABEL end(#5);
    YI_12 = cast!{*((len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))} (res.ptr + 16 * i);
    YI_13 = _Y4core11duplication13deepCopySliceNS3i32NS5S3i32FS5S3i32ZS5S3i32(ti);
    *YI_12 = YI_13;
    YI_14 = i + 1;
    i = YI_14;
#LABEL test(#7);
    YI_9 = i < #_value.len;
#IF YI_9
#THEN_GOTO beg(#6)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    return res;
}
frame :  _Y5test54mainFZv ()-> void {
    let YI_1 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let a : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let YI_3 : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    let b : (len-> u64, ptr-> *((len-> u64, ptr-> *((len-> u64, ptr-> *(i32))))));
    YI_1 = (len-> 0, ptr-> 0);
    a = YI_1;
    YI_3 = _Y4core11duplication13deepCopySliceNS5S3i32NS7S5S3i32FS7S5S3i32ZS7S5S3i32(a);
    b = YI_3;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test54mainFZv);
    return 0;
}
