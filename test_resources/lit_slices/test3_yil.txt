frame :  [weak] _Y4core11duplication13deepCopySliceNS3i32NS5S3i32FS5S3i32ZxS7xS4xi32 (let a : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))-> (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))) {
    YI_1 = a.len == 0;
#IF YI_1
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_2 = (len-> 0, ptr-> 0);
    return YI_2;
#LABEL end(#2);
    YI_3 = _yrt_new_array(16, a.len);
    res = YI_3;
    #_value = a;
    i = 0;
#GOTO test(#7);
#LABEL beg(#6);
    YI_4 = 16 * i;
    YI_5 = #_value.ptr + YI_4;
    YI_6 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_5);
    ti = *YI_6;
    YI_7 = res.len <= i;
#IF YI_7
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    YI_8 = "/usr/include/ymir/core/duplication.yr";
    YI_9 = "core::duplication::deepCopySlice!{[i32], [[i32]]}::deepCopySlice";
    _yrt_exc_panic(YI_8, YI_9, 12);
#LABEL end(#5);
    YI_10 = 16 * i;
    YI_11 = res.ptr + YI_10;
    YI_12 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_11);
    YI_13 = ti;
    YI_14 = _yrt_dup_slice(YI_13.ptr, YI_13.len, 4);
    YI_15 = (len-> YI_13.len, ptr-> YI_14);
    *YI_12 = YI_15;
    YI_16 = i + 1;
    i = YI_16;
#LABEL test(#7);
    YI_17 = i < a.len;
#IF YI_17
#THEN_GOTO beg(#6)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    return res;
}
frame :  _Y5test34mainFZv ()-> void {
    YI_1 = [1, 2];
    YI_2 = (len-> 2, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    YI_6 = [2, 3];
    YI_7 = (len-> 2, ptr-> &YI_6);
    YI_8 = YI_7;
    YI_9 = _yrt_dup_slice(YI_8.ptr, YI_8.len, 4);
    YI_10 = (len-> YI_8.len, ptr-> YI_9);
    YI_11 = [YI_5, YI_10];
    YI_12 = (len-> 2, ptr-> &YI_11);
    YI_13 = YI_12;
    YI_14 = _yrt_dup_slice(YI_13.ptr, YI_13.len, 16);
    YI_15 = (len-> YI_13.len, ptr-> YI_14);
    a = YI_15;
    YI_16 = _Y4core11duplication13deepCopySliceNS3i32NS5S3i32FS5S3i32ZxS7xS4xi32(a);
    b = YI_16;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test34mainFZv);
    return 0;
}
