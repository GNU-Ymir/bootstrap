frame :  [weak] _Y4core11duplication13deepCopySliceNSi32NSSi32FSSi32ZSSi32 (let a : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))))-> (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))) {
    let YI_4 : u8;
    let YI_2 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_6 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let res : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let #_value : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let ti : (len-> u64, ptr-> *(i32));
    let i : u64;
    let YI_14 : *((len-> u64, ptr-> *(i32)));
    let YI_16 : u8;
    let YI_18 : *((len-> u64, ptr-> *(i32)));
    let YI_20 : (len-> u64, ptr-> *(i32));
    let YI_22 : u64;
    let YI_12 : u8;
    YI_4 = a.len == 0;
#IF YI_4
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#1);
    YI_2 = (len-> 0, ptr-> 0);
    return YI_2;
#LABEL end(#2);
    YI_6 = _yrt_new_array(16, a.len);
    res = YI_6;
    #_value = a;
    i = 0;
#GOTO test(#7);
#LABEL beg(#6);
    YI_14 = cast!{*((len-> u64, ptr-> *(i32)))} (#_value.ptr + 16 * i);
    ti = *YI_14;
    YI_16 = res.len <= i;
#IF YI_16
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#4);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#5);
    YI_18 = cast!{*((len-> u64, ptr-> *(i32)))} (res.ptr + 16 * i);
    YI_20 = _yrt_dup_slice(ti, 4);
    *YI_18 = YI_20;
    YI_22 = i + 1;
    i = YI_22;
#LABEL test(#7);
    YI_12 = i < #_value.len;
#IF YI_12
#THEN_GOTO beg
#ELSE_GOTO end;
#LABEL end(#3);
    return res;
}
frame :  _Y5test34mainFZv ()-> void {
    let YI_1 : [i32;2];
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_5 : [i32;2];
    let YI_7 : (len-> u64, ptr-> *(i32));
    let YI_9 : [(len-> u64, ptr-> *(i32));2];
    let YI_11 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let a : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_14 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let b : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    YI_1 = [1, 2];
    YI_3 = _yrt_dup_slice((len-> 2, ptr-> &YI_1), 4);
    YI_5 = [2, 3];
    YI_7 = _yrt_dup_slice((len-> 2, ptr-> &YI_5), 4);
    YI_9 = [YI_3, YI_7];
    YI_11 = _yrt_dup_slice((len-> 2, ptr-> &YI_9), 16);
    a = YI_11;
    YI_14 = _Y4core11duplication13deepCopySliceNSi32NSSi32FSSi32ZSSi32(a);
    b = YI_14;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test34mainFZv);
    return 0;
}
