frame :  _Y6test134mainFZv ()-> void {
    let YI_1 : [i32;2];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : *(void);
    let YI_5 : (len-> u64, ptr-> *(i32));
    let YI_6 : [i32;2];
    let YI_7 : (len-> u64, ptr-> *(i32));
    let YI_8 : (len-> u64, ptr-> *(i32));
    let YI_9 : *(void);
    let YI_10 : (len-> u64, ptr-> *(i32));
    let YI_11 : ((len-> u64, ptr-> *(i32)), (len-> u64, ptr-> *(i32)));
    let t : ((len-> u64, ptr-> *(i32)), (len-> u64, ptr-> *(i32)));
    let a : *((len-> u64, ptr-> *(i32)));
    let b : (len-> u64, ptr-> *(i32));
    let YI_15 : [i32;3];
    let YI_16 : (len-> u64, ptr-> *(i32));
    let YI_17 : (len-> u64, ptr-> *(i32));
    let YI_18 : *(void);
    let YI_19 : (len-> u64, ptr-> *(i32));
    let YI_20 : u8;
    let YI_21 : *(u8);
    let YI_22 : *(u8);
    let YI_23 : u64;
    let YI_24 : u64;
    let YI_25 : *(i32);
    YI_1 = [1, 2];
    YI_2 = (len-> 2, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    YI_6 = [2, 3];
    YI_7 = (len-> 2, ptr-> &YI_6);
    YI_8 = YI_7;
    YI_9 = _yrt_dup_slice(YI_8.ptr, YI_8.len, 4);
    YI_10 = (len-> YI_8.len, ptr-> YI_9);
    YI_11 = (YI_5, YI_10);
    t = YI_11;
    a = &t._0;
    b = t._1;
    YI_15 = [8, 7, 6];
    YI_16 = (len-> 3, ptr-> &YI_15);
    YI_17 = YI_16;
    YI_18 = _yrt_dup_slice(YI_17.ptr, YI_17.len, 4);
    YI_19 = (len-> YI_17.len, ptr-> YI_18);
    *a = YI_19;
    YI_20 = b.len <= 0;
#IF YI_20
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_21 = "test_resources/control_flow/test13.yr";
    YI_22 = "test13::main";
    _yrt_exc_panic(YI_21, YI_22, 6);
#LABEL end(#2);
    YI_23 = 4 * 0;
    YI_24 = b.ptr + YI_23;
    YI_25 = cast!{*(i32)} (YI_24);
    *YI_25 = 0;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test134mainFZv);
    return 0;
}
