frame : [weak] core::atom::atomicMonitorExit!{&(test24::A)}::atomicMonitorExit (object : &(test24::A))-> void {
    core::atom::YRTAtomic!{&(test24::A)}::YRTAtomic::_yrt_atomic_monitor_exit (object);
    <unit-value>
}
frame : [weak] core::atom::atomicMonitorEnter!{&(test24::A)}::atomicMonitorEnter (object : &(test24::A))-> void {
    core::atom::YRTAtomic!{&(test24::A)}::YRTAtomic::_yrt_atomic_monitor_enter (object);
    <unit-value>
}
frame : test24::A::foo (self : &(test24::A))-> void try {
    {
        core::atom::atomicMonitorEnter!{&(test24::A)}::atomicMonitorEnter (self);
        {
            test24::bar ();
            <unit-value>
        }
    }
} finally {
    {
        core::atom::atomicMonitorExit!{&(test24::A)}::atomicMonitorExit (self)
    }
}
frame : test24::A::self (mut self : mut &(mut test24::A))-> void {
    {
        <unit-value>
    }
}
frame : test24::baz ()-> void {
    let a : &(test24::A) = test24::A::self(new);
    try {
        {
            core::atom::atomicMonitorEnter!{&(test24::A)}::atomicMonitorEnter (a);
            {
                test24::bar ();
                <unit-value>
            }
        }
    } finally {
        {
            core::atom::atomicMonitorExit!{&(test24::A)}::atomicMonitorExit (a)
        }
    }
}
frame : test24::main ()-> void {
    let a : &(test24::A) = test24::A::self(new);
    try {
        {
            core::atom::atomicMonitorEnter!{&(test24::A)}::atomicMonitorEnter (a);
            {
                test24::foo ();
                <unit-value>
            }
        }
    } finally {
        {
            core::atom::atomicMonitorExit!{&(test24::A)}::atomicMonitorExit (a)
        }
    }
}
