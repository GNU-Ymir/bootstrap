frame :[pre] test11::A::self (mut self : mut &(mut test11::A))-> void {
    <unit-value>
}
frame :[post] test11::A::self (mut self : mut &(mut test11::A))-> void {
    <unit-value>
}
frame : test11::A::self (mut self : mut &(mut test11::A))-> void {
    test11::A::self[pre](self);
    test11::A::self[post](self)
}
frame :[pre] test11::B::self (mut self : mut &(mut test11::B))-> void {
    test11::A::self[pre](self);
    {
        <unit-value>
    }
}
frame :[post] test11::B::self (mut self : mut &(mut test11::B))-> void {
    test11::A::self[post](self);
    {
        <unit-value>
    }
}
frame : test11::B::self (mut self : mut &(mut test11::B))-> void {
    test11::B::self[pre](self);
    test11::B::self[post](self)
}
frame : test11::foo (a : [(&(test11::A))?])-> void {
    <unit-value>
}
frame : test11::main ()-> void {
    let a : (&(test11::B))? = (test11::B::self(new))?;
    test11::foo (copy ({.len = 1us, .ptr = &([a])}));
    <unit-value>
}
