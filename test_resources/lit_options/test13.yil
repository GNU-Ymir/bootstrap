tuple T_5 (#_vtable-> *(*(void)), #_monitor-> *(void));
tuple T_6 (len-> u64, ptr-> *(i32), blk_info-> *(void));
tuple T_7 (@union, error-> *(T_5), value-> T_6);
tuple T_8 (hasValue-> u8, content-> T_7);
tuple T_9 (len-> u64, ptr-> *(*(void)), blk_info-> *(void));
tuple T_10 (len-> u64, ptr-> *(u8), blk_info-> *(void));
tuple T_11 (#_vtable-> *(*(void)), #_monitor-> *(void), trace-> T_9, msg-> T_10);
tuple T_12 (#_vtable-> *(*(void)), #_monitor-> *(void), trace-> T_9);
frame :  _Y6test134mainFZv ()-> void {
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1, blk_info-> 0);
    YI_3 = YI_2;
    _yrt_dup_slice(&YI_4, &YI_3, 4);
    YI_5 = YI_4;
    a = YI_5;
    x = 0;
    try {
    #IF x
    #THEN_GOTO then(#1)
    #ELSE_GOTO end(#2);
    #LABEL then(#1);
        __self_10 = _yrt_alloc_class(&_Y4core9exception9assertion11AssertErrorVT);
        _Y4core9exception9assertion11AssertError4selfCTxP39x4core9exception9assertion11AssertErrorS2c8Zv(__self_10, (len-> 0, ptr-> 0, blk_info-> 0));
        YI_6 = __self_10;
        YI_7 = "test_resources/lit_options/test13.yr";
        YI_8 = "test13::main";
        _yrt_exc_throw(YI_7, YI_8, 6, YI_6);
    #LABEL end(#2);
        YI_9 = a;
        YI_10 = (hasValue-> 1, content-> (value-> YI_9));
        YI_11 = YI_10;
    }
    catch{
        #_catch = _yrt_exc_begin_catch (ephtr (0));
        YI_12 = (hasValue-> 0, content-> (error-> #_catch));
        YI_11 = YI_12;
    };
    b = YI_11;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test134mainFZv);
    return 0;
}
