frame : [weak] core::types::function::castToDG (#{CLOSURE-VARREF} : fn ()-> void)-> void (#{CLOSURE-VARREF})()
frame : [weak] core::types::function::castToDG (#{CLOSURE-VARREF} : fn (i32)-> void, v_0 : i32)-> void (#{CLOSURE-VARREF})(v_0)
frame : [weak] core::types::function::castToDG (#{CLOSURE-VARREF} : fn (bool, lazy i32)-> void, v_0 : bool, lazy v_1 : i32)-> void (#{CLOSURE-VARREF})(v_0, lazy (v_1))
frame : [weak] test14::main::_41_16 (#{CLOSURE-VARREF} : *(()), mut ref #_REF : mut i32)-> void #_REF = 12
frame : test14::main ()-> void {
    let _a_ : dg ()-> void = {fn test14::A::foo;(#{CLOSURE-VARREF} : fn ()-> void)-> void};
    let _b_ : dg (i32)-> void = {fn test14::A::bar;(#{CLOSURE-VARREF} : fn (i32)-> void, v_0 : i32)-> void};
    let _c_ : dg (bool, lazy i32)-> void = {fn test14::A::baz;(#{CLOSURE-VARREF} : fn (bool, lazy i32)-> void, v_0 : bool, lazy v_1 : i32)-> void};
    let _a2_ : dg ()-> void = {fn test14::A::foo;(#{CLOSURE-VARREF} : fn ()-> void)-> void};
    let _b2_ : dg (i32)-> void = {fn test14::A::bar;(#{CLOSURE-VARREF} : fn (i32)-> void, v_0 : i32)-> void};
    let _c2_ : dg (bool, lazy i32)-> void = {fn test14::A::baz;(#{CLOSURE-VARREF} : fn (bool, lazy i32)-> void, v_0 : bool, lazy v_1 : i32)-> void};
    if !((_a_.closure == _a2_.closure) && (_a_.func == _a2_.func)) throw core::exception::assertion::AssertError::self(new, ""s8);
    if !((_b_.closure == _b2_.closure) && (_b_.func == _b2_.func)) throw core::exception::assertion::AssertError::self(new, ""s8);
    let _a3_ : dg ()-> void = {fn test14::B::foo;(#{CLOSURE-VARREF} : fn ()-> void)-> void};
    let _b3_ : dg (i32)-> void = {fn test14::B::bar;(#{CLOSURE-VARREF} : fn (i32)-> void, v_0 : i32)-> void};
    let _c3_ : dg (bool, lazy i32)-> void = {fn test14::B::baz;(#{CLOSURE-VARREF} : fn (bool, lazy i32)-> void, v_0 : bool, lazy v_1 : i32)-> void};
    if !((_a_.closure != _a3_.closure) || (_a_.func != _a3_.func)) throw core::exception::assertion::AssertError::self(new, ""s8);
    if !((_b_.closure != _b3_.closure) || (_b_.func != _b3_.func)) throw core::exception::assertion::AssertError::self(new, ""s8);
    if !((_c_.closure != _c3_.closure) || (_c_.func != _c3_.func)) throw core::exception::assertion::AssertError::self(new, ""s8);
    (_c_.func)(_c_.closure, true, lazy (12));
    <unit-value>
}
frame : test14::A::baz (b : bool, lazy z : i32)-> void if b {
    z;
    <unit-value>
}
frame : test14::A::bar (i : i32)-> void {
    <unit-value>
}
frame : test14::A::foo ()-> void {
    <unit-value>
}
frame : test14::B::baz (b : bool, lazy z : i32)-> void if b {
    z;
    <unit-value>
}
frame : test14::B::bar (i : i32)-> void {
    <unit-value>
}
frame : test14::B::foo ()-> void {
    <unit-value>
}
