frame : [weak] core::types::range::stepBy!{u32, i32}::stepBy (x : (..u32), s : i32)-> (..u32) {
    let mut z : mut (..mut u32) = x;
    let step : i32 = s;
    let zero : i32 = 0;
    if (((z.fst > z.scd) && (step > zero)) || ((z.fst < z.scd) && (step < zero))) {
        z.step = -step;
        <unit-value>
    } else {
        z.step = step;
        <unit-value>
    };
    return z;
    <unit-value>
}
frame : test1::main ()-> void {
    let a : (..u32) = core::types::range::stepBy!{u32, i32}::stepBy ((2147483747u32 ..[true] 2147483657u32).step_by (-1), -10);
    {
        let mut #_iter : usize = 0us;
        let mut #_nb_iter : usize = {
                let #_range : (u32, u32, i32) = (a.fst, a.scd, a.step);
                let #_val : (u32, u32, u32, u32) = if (#_range.2 < 0) (-#_range.2, #_range.1, #_range.0, (#_range.0 - #_range.1)) else (#_range.2, #_range.0, #_range.1, (#_range.1 - #_range.0));
                let #_nbAll : u32 = (#_val.3 / #_val.0);
                if (#_nbAll == 18446744073709551615u32) #_nbAll else if ((((#_nbAll * #_val.0) + #_val.1) != #_val.2) || a.contains) (#_nbAll + 1u32) else #_nbAll
            };
        while (#_iter < #_nb_iter) {
            let i : u32;
            i = (a.fst + cast!{u32}((#_iter * cast!{usize}(a.step))));
            {
                i;
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    }
}
