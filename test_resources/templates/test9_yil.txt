frame :  [weak] _Y5test93fooNi32FS3i32Zi32 (let a : (len-> u64, ptr-> *(i32)))-> i32 {
    let YI_2 : u8;
    let YI_3 : *(i32);
    let YI_4 : i32;
    YI_2 = a.len <= 0;
#IF YI_2
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#1);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#2);
    YI_3 = cast!{*(i32)} (a.ptr + 4 * 0);
    YI_4 = *YI_3;
    return YI_4;
}
frame :  [weak] _Y5test93fooNf32FS3f32Zf32 (let a : (len-> u64, ptr-> *(f4)))-> f4 {
    let YI_2 : u8;
    let YI_3 : *(f4);
    let YI_4 : f4;
    YI_2 = a.len <= 0;
#IF YI_2
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#1);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#2);
    YI_3 = cast!{*(f4)} (a.ptr + 4 * 0);
    YI_4 = *YI_3;
    return YI_4;
}
frame :  _Y5test94mainFZv ()-> void {
    let YI_1 : [i32;3];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : i32;
    let YI_5 : [f4;3];
    let YI_6 : (len-> u64, ptr-> *(f4));
    let YI_7 : (len-> u64, ptr-> *(f4));
    let YI_8 : f4;
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1);
    YI_3 = _yrt_dup_slice(YI_2, 4);
    YI_4 = _Y5test93fooNi32FS3i32Zi32(YI_3);
    YI_5 = [1, 2, 3];
    YI_6 = (len-> 3, ptr-> &YI_5);
    YI_7 = _yrt_dup_slice(YI_6, 4);
    YI_8 = _Y5test93fooNf32FS3f32Zf32(YI_7);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test94mainFZv);
    return 0;
}
