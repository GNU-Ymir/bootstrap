class A {N : usize, T...} {
    let a : (T,);

    pub self (a : (T,)) with a = a {
        ;
    }

    pub fn foo (self)-> (T,) {
        self.a
    }
}


fn foo {J of B, B of &A!{2us, T}, T...} (dmut a : J) {
    a;
}


fn foo {J of dmut B, B of &A!{2us, T}, T...} (dmut a : J) {
    a;
}


fn main () {
    let dmut a = copy A!{2us, i32, i32, i32} ((1, 2, 3));
    foo!{dmut &A!{2us, i32, i32, i32}} (alias a);
    foo!{&A!{2us, i32, i32, i32}} (alias a);
}
