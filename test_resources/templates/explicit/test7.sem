frame : [weak] test7::A!{2us, (i32, i32, i32,...)}::A::foo (self : &(test7::A!{2us, (i32, i32, i32,...)}::A))-> (i32, i32, i32) return self.a
frame : [weak] test7::A!{2us, (i32, i32, i32,...)}::A::self (mut self : mut &(mut test7::A!{2us, (i32, i32, i32,...)}::A), a : (i32, i32, i32))-> void {
    {
        {
            self.a = a
        }
    };
    {
        <unit-value>
    }
}
frame : [weak] test7::foo!{2us, (i32, i32, i32,...), &(test7::A!{2us, (i32, i32, i32,...)}::A), &(test7::A!{2us, (i32, i32, i32,...)}::A)}::foo (mut a : mut &(mut test7::A!{2us, (i32, i32, i32,...)}::A))-> void {
    <unit-value>
}
frame : [weak] test7::foo!{2us, (i32, i32, i32,...), &(test7::A!{2us, (i32, i32, i32,...)}::A), dmut &(test7::A!{2us, (i32, i32, i32,...)}::A)}::foo (mut a : mut &(mut test7::A!{2us, (i32, i32, i32,...)}::A))-> void {
    <unit-value>
}
frame : test7::main ()-> void {
    let mut a : mut &(mut test7::A!{2us, (i32, i32, i32,...)}::A) = test7::A!{2us, (i32, i32, i32,...)}::A::self(new, (1, 2, 3));
    test7::foo!{2us, (i32, i32, i32,...), &(test7::A!{2us, (i32, i32, i32,...)}::A), dmut &(test7::A!{2us, (i32, i32, i32,...)}::A)}::foo (alias (a));
    test7::foo!{2us, (i32, i32, i32,...), &(test7::A!{2us, (i32, i32, i32,...)}::A), &(test7::A!{2us, (i32, i32, i32,...)}::A)}::foo (alias (a));
    <unit-value>
}
