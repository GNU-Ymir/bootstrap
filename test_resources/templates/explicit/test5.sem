frame :[pre] test5::A::self (mut self : mut &(mut test5::A))-> void {
    <unit-value>
}
frame :[post] test5::A::self (mut self : mut &(mut test5::A))-> void {
    <unit-value>
}
frame : test5::A::self (mut self : mut &(mut test5::A))-> void {
    test5::A::self[pre](self);
    test5::A::self[post](self)
}
frame :[pre] test5::B::self (mut self : mut &(mut test5::B))-> void {
    test5::A::self[pre](self);
    {
        <unit-value>
    }
}
frame :[post] test5::B::self (mut self : mut &(mut test5::B))-> void {
    test5::A::self[post](self);
    {
        <unit-value>
    }
}
frame : test5::B::self (mut self : mut &(mut test5::B))-> void {
    test5::B::self[pre](self);
    test5::B::self[post](self)
}
frame : [weak] test5::foo!{&(test5::A)}::foo (a : &(test5::A))-> void {
    <unit-value>
}
frame : [weak] test5::foo!{&(test5::A)}::foo ()-> void {
    <unit-value>
}
frame : [weak] test5::foo!{&(test5::B)}::foo (a : &(test5::B))-> void {
    <unit-value>
}
frame : [weak] test5::foo!{&(test5::B)}::foo ()-> void {
    <unit-value>
}
frame : test5::main ()-> void {
    let a : &(test5::A) = test5::A::self(new);
    let b : &(test5::B) = test5::B::self(new);
    test5::foo!{&(test5::A)}::foo (a);
    test5::foo!{&(test5::A)}::foo ();
    test5::foo!{&(test5::B)}::foo (b);
    test5::foo!{&(test5::B)}::foo ();
    <unit-value>
}
