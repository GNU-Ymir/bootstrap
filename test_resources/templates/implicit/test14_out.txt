frame : [weak] test14::FnTask!{(i32, i32,...)}::FnTask::execute (self : &(test14::FnTask!{(i32, i32,...)}::FnTask))-> void {
    (self._func)(self._data.0, self._data.1);
    <unit-value>
}
frame : [weak] test14::FnTask!{(i32, i32,...)}::FnTask::self (mut self : mut &(mut test14::FnTask!{(i32, i32,...)}::FnTask), func : fn (i32, i32)-> void, data : (i32, i32))-> void {
    {
        test14::Task::self(self);
        {
            self._func = func;
            self._data = data
        }
    };
    {
        <unit-value>
    }
}
frame : [weak] test14::submit!{(i32, i32,...)}::submit (a : fn (i32, i32)-> void, b : (i32, i32))-> mut &(mut test14::Task) return test14::FnTask!{(i32, i32,...)}::FnTask::self(new, a, (b.0, b.1))
frame : test14::main ()-> void {
    let mut b : mut &(mut test14::Task) = test14::submit!{(i32, i32,...)}::submit (fn test14::foo, (2, 3));
    test14::Task::execute(b);
    <unit-value>
}
frame : test14::Task::self (mut self : mut &(mut test14::Task))-> void {
    {
        <unit-value>
    }
}
frame : test14::foo (a : i32, b : i32)-> void {
    a;
    b;
    <unit-value>
}
