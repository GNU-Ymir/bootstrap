frame :[pre] test15::A::self (mut self : mut &(mut test15::A))-> void {
    <unit-value>
}
frame :[post] test15::A::self (mut self : mut &(mut test15::A))-> void {
    <unit-value>
}
frame : test15::A::self (mut self : mut &(mut test15::A))-> void {
    test15::A::self[pre](self);
    test15::A::self[post](self)
}
frame : [weak] test15::foo!{&(test15::A)}::foo (a : &(test15::A))-> void {
    <unit-value>
}
frame : [weak] test15::foo!{[i32]}::foo (a : [i32])-> void {
    <unit-value>
}
frame : [weak] test15::foo!{(i32, [i32])}::foo (a : (i32, [i32]))-> void {
    <unit-value>
}
frame : test15::main ()-> void {
    let mut a : mut &(mut test15::A) = test15::A::self(new);
    test15::foo!{&(test15::A)}::foo (a);
    test15::foo!{[i32]}::foo (copy ({.len = 3us, .ptr = &([1, 2, 3])}));
    test15::foo!{(i32, [i32])}::foo ((1, copy ({.len = 1us, .ptr = &([2])})));
    <unit-value>
}
