frame : [weak] recursive_slice::bar!{[[i32]]}::bar (a : [*([[i32]])])-> void {
    <unit-value>
}
frame : [weak] recursive_slice::bar!{i32}::bar (a : [*i32])-> void {
    <unit-value>
}
frame : [weak] recursive_slice::foo!{[i32]}::foo (a : [[[i32]]])-> void {
    <unit-value>
}
frame : [weak] recursive_slice::foo!{i32}::foo (a : [[i32]])-> void {
    <unit-value>
}
frame : recursive_slice::main ()-> void {
    let a : [[i32]] = copy ({.len = 2us, .ptr = &([copy ({.len = 2us, .ptr = &([1, 2])}), copy ({.len = 2us, .ptr = &([3, 4])})])});
    let b : [[[i32]]] = copy ({.len = 1us, .ptr = &([copy ({.len = 2us, .ptr = &([copy ({.len = 2us, .ptr = &([1, 2])}), copy ({.len = 2us, .ptr = &([3, 4])})])})])});
    let c : [*([[i32]])] = copy ({.len = 1us, .ptr = &([&(a)])});
    let d : i32 = 12;
    let e : [*i32] = copy ({.len = 1us, .ptr = &([&(d)])});
    recursive_slice::foo!{i32}::foo (a);
    recursive_slice::foo!{[i32]}::foo (b);
    recursive_slice::bar!{[[i32]]}::bar (c);
    recursive_slice::bar!{i32}::bar (e);
    <unit-value>
}
