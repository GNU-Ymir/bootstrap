frame : test10::A::foo (self : &(test10::A), x : i32, y : i32, b : i32)-> i32 return (((self.i + x) + y) + b)
frame : test10::A::self (mut self : mut &(mut test10::A), i : i32)-> void {
    {
        {
            self.i = i
        }
    };
    {
        <unit-value>
    }
}
frame : [weak] test10::foo!{(i32, i32,...), i32, i32}::foo (a : dg (i32, i32, i32)-> i32)-> i32 return (a.func)(a.closure, 19, 9, 2)
frame : test10::main ()-> void {
    let a : &(test10::A) = test10::A::self(new, 8);
    let _ : i32 = test10::foo!{(i32, i32,...), i32, i32}::foo (dg {.func = test10::A::foo, .closure = a});
    <unit-value>
}
