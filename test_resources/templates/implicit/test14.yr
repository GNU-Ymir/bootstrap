@abstract
pub class Task {
    pub self () {}
    pub fn execute (self)-> void;
}

@final
pub class FnTask {T...} over Task {
    let _data : (T,);
    let _func : fn (T)-> void;

    pub self (func : fn (T)-> void, data : T)
        with _func = func
        , _data = data
    {}

    pub over execute (self) {
        self._func (expand self._data);
    }
}

fn foo (a : i32, b : i32) {
    a;
    b;
}

fn submit {T...} (a : fn (T)-> void, b : T)-> dmut &Task {
    copy FnTask!{T} (a, expand b)
}

fn main () {
    let dmut b = submit (&foo, 2, 3);
    b.execute ();
}
