frame :  [weak] _Y5test44main1_6_14_20Fi32i32i32Zi32 (let x : i32, let y : i32, let z : i32)-> i32 {
    let YI_4 : i32;
    let YI_5 : i32;
    YI_4 = x + y;
    YI_5 = YI_4 + z;
    return YI_5;
}
frame :  [weak] _Y4core5range17countNbIterationsNusizeNisizeFusizeusizeisizebZusize (let fst : u64, let scd : u64, let step : i64, let contains : u8)-> u64 {
    let YI_5 : (u64, u64, u64, u64);
    let YI_18 : u8;
    let fstU : u64;
    let scdU : u64;
    let YI_8 : u64;
    let YI_9 : u64;
    let YI_10 : (u64, u64, u64, u64);
    let YI_11 : (u64, u64, u64, u64);
    let fstU : u64;
    let scdU : u64;
    let YI_14 : u64;
    let YI_15 : u64;
    let YI_16 : (u64, u64, u64, u64);
    let YI_17 : (u64, u64, u64, u64);
    let YI_19 : (u64, u64, u64, u64);
    let stepU : u64;
    let fstU : u64;
    let scdU : u64;
    let subU : u64;
    let YI_24 : u64;
    let nbAll : u64;
    let YI_26 : u8;
    let YI_27 : u64;
    let YI_28 : u64;
    let YI_29 : u64;
    let last : u64;
    let YI_32 : u8;
    let YI_31 : u64;
    let YI_33 : u64;
    YI_18 = step < 0;
#IF YI_18
#THEN_GOTO then
#ELSE_GOTO else;
#LABEL then(#1);
    fstU = scd;
    scdU = fst;
    YI_8 = cast!{u64} (- step);
    YI_9 = scdU - fstU;
    YI_10 = (YI_8, fstU, scdU, YI_9);
    YI_11 = YI_10;
    YI_5 = YI_11;
#GOTO end(#2);
#LABEL else(#3);
    fstU = fst;
    scdU = scd;
    YI_14 = cast!{u64} (step);
    YI_15 = scdU - fstU;
    YI_16 = (YI_14, fstU, scdU, YI_15);
    YI_17 = YI_16;
    YI_5 = YI_17;
#LABEL end(#2);
    YI_19 = YI_5;
    stepU = YI_19._0;
    fstU = YI_19._1;
    scdU = YI_19._2;
    subU = YI_19._3;
    YI_24 = subU / stepU;
    nbAll = YI_24;
    YI_26 = nbAll == 18446744073709551615;
#IF YI_26
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#4);
    return nbAll;
#LABEL end(#5);
#IF contains
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#6);
    YI_27 = nbAll + 1;
    return YI_27;
#LABEL end(#7);
    YI_28 = nbAll * stepU;
    YI_29 = YI_28 + fstU;
    last = YI_29;
    YI_32 = last != scdU;
#IF YI_32
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#8);
    YI_31 = nbAll + 1;
    return YI_31;
#LABEL end(#9);
    YI_33 = nbAll;
    return YI_33;
}
frame :  [weak] _Y5test43fooNi32NTP36__Y5test44main1_6_14_20Fi32i32i32Zi32L12NNi32Ni32Ni32FS15T123i323i323i32ZS3i32 (let a : (len-> u64, ptr-> *((i32, i32, i32))))-> (len-> u64, ptr-> *(i32)) {
    let YI_2 : i32;
    let YI_3 : (len-> u64, ptr-> *(i32));
    let res : (len-> u64, ptr-> *(i32));
    let #_iter : u64;
    let YI_6 : u64;
    let #_nb_iter : u64;
    let i : u64;
    let YI_10 : u64;
    let YI_11 : u64;
    let YI_12 : u64;
    let YI_13 : u64;
    let YI_14 : u8;
    let YI_15 : *(i32);
    let YI_16 : u8;
    let YI_17 : *((i32, i32, i32));
    let YI_18 : (i32, i32, i32);
    let YI_19 : i32;
    let YI_20 : u64;
    let YI_8 : u8;
    let YI_21 : (len-> u64, ptr-> *(i32));
    YI_2 = 0;
    YI_3 = _yrt_alloc_array(&YI_2, 4, a.len);
    res = YI_3;
    #_iter = 0;
    YI_6 = _Y4core5range17countNbIterationsNusizeNisizeFusizeusizeisizebZusize(0, a.len, 1, 0);
    #_nb_iter = YI_6;
#GOTO test(#7);
#LABEL beg(#6);
    YI_10 = cast!{u64} (1);
    YI_11 = #_iter * YI_10;
    YI_12 = cast!{u64} (YI_11);
    YI_13 = 0 + YI_12;
    i = YI_13;
    YI_14 = res.len <= i;
#IF YI_14
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#2);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#3);
    YI_15 = cast!{*(i32)} (res.ptr + 4 * i);
    YI_16 = a.len <= i;
#IF YI_16
#THEN_GOTO then
#ELSE_GOTO end;
#LABEL then(#4);
    _Y4core5array10outOfArrayFZv();
#LABEL end(#5);
    YI_17 = cast!{*((i32, i32, i32))} (a.ptr + 12 * i);
    YI_18 = *YI_17;
    YI_19 = _Y5test44main1_6_14_20Fi32i32i32Zi32(YI_18._0, YI_18._1, YI_18._2);
    *YI_15 = YI_19;
    YI_20 = #_iter + 1;
    #_iter = YI_20;
#LABEL test(#7);
    YI_8 = #_iter < #_nb_iter;
#IF YI_8
#THEN_GOTO beg
#ELSE_GOTO end;
#LABEL end(#1);
    YI_21 = res;
    return YI_21;
}
frame :  _Y5test44mainFZv ()-> void {
    let YI_1 : (i32, i32, i32);
    let YI_2 : (i32, i32, i32);
    let YI_3 : (i32, i32, i32);
    let YI_4 : [(i32, i32, i32);3];
    let YI_5 : (len-> u64, ptr-> *((i32, i32, i32)));
    let YI_6 : (len-> u64, ptr-> *((i32, i32, i32)));
    let z : (len-> u64, ptr-> *((i32, i32, i32)));
    let YI_8 : (len-> u64, ptr-> *(i32));
    let _ : (len-> u64, ptr-> *(i32));
    YI_1 = (1, 2, 3);
    YI_2 = (4, 5, 6);
    YI_3 = (7, 8, 9);
    YI_4 = [YI_1, YI_2, YI_3];
    YI_5 = (len-> 3, ptr-> &YI_4);
    YI_6 = _yrt_dup_slice(YI_5, 12);
    z = YI_6;
    YI_8 = _Y5test43fooNi32NTP36__Y5test44main1_6_14_20Fi32i32i32Zi32L12NNi32Ni32Ni32FS15T123i323i323i32ZS3i32(z);
    _ = YI_8;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test44mainFZv);
    return 0;
}
