frame : [weak] test4::main::_14_20 (x : i32, y : i32, z : i32)-> i32 return ((x + y) + z)
frame : [weak] test4::foo!{i32, test4::main::_14_20, (i32, i32, i32,...)}::foo (a : [(i32, i32, i32)])-> [i32] return {
    let mut res : mut [mut i32] = [0 ; new a.len];
    {
        let mut #_iter : usize = 0us;
        let mut #_nb_iter : usize = a.len;
        while (#_iter < #_nb_iter) {
            let i : usize;
            i = #_iter;
            {
                #{
                    if (res.len <= i) panic;
                    res [i]
                #} = (test4::main::_14_20)(#{
                        if (a.len <= i) panic;
                        a [i]
                    #}.0, #{
                        if (a.len <= i) panic;
                        a [i]
                    #}.1, #{
                        if (a.len <= i) panic;
                        a [i]
                    #}.2);
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    };
    res
}
frame : test4::main ()-> void {
    let z : [(i32, i32, i32)] = copy ({.len = 3us, .ptr = &([(1, 2, 3), (4, 5, 6), (7, 8, 9)])});
    let _ : [i32] = test4::foo!{i32, test4::main::_14_20, (i32, i32, i32,...)}::foo (z);
    <unit-value>
}
