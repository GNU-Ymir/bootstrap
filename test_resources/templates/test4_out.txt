frame : [weak] test4::main::_::_14_20 (x : i32, y : i32, z : i32)-> i32 return ((x + y) + z)
frame : [weak] core::range::countNbIterations!{usize, isize}::countNbIterations (fst : usize, scd : usize, step : isize, contains : bool)-> usize return {
    #{
        let stepU : usize = if (step < 0) {
                let fstU : usize = scd;
                let scdU : usize = fst;
                (cast!{usize}(-step), fstU, scdU, (scdU - fstU))
            } else {
                let fstU : usize = fst;
                let scdU : usize = scd;
                (cast!{usize}(step), fstU, scdU, (scdU - fstU))
            }.0;
        let fstU : usize = if (step < 0) {
                let fstU : usize = scd;
                let scdU : usize = fst;
                (cast!{usize}(-step), fstU, scdU, (scdU - fstU))
            } else {
                let fstU : usize = fst;
                let scdU : usize = scd;
                (cast!{usize}(step), fstU, scdU, (scdU - fstU))
            }.1;
        let scdU : usize = if (step < 0) {
                let fstU : usize = scd;
                let scdU : usize = fst;
                (cast!{usize}(-step), fstU, scdU, (scdU - fstU))
            } else {
                let fstU : usize = fst;
                let scdU : usize = scd;
                (cast!{usize}(step), fstU, scdU, (scdU - fstU))
            }.2;
        let mut subU : mut usize = if (step < 0) {
                let fstU : usize = scd;
                let scdU : usize = fst;
                (cast!{usize}(-step), fstU, scdU, (scdU - fstU))
            } else {
                let fstU : usize = fst;
                let scdU : usize = scd;
                (cast!{usize}(step), fstU, scdU, (scdU - fstU))
            }.3
    #};
    let nbAll : usize = (subU / stepU);
    if (nbAll == 18446744073709551615us) {
        return nbAll;
        <unit-value>
    };
    if contains {
        return (nbAll + 1us);
        <unit-value>
    };
    let last : usize = ((nbAll * stepU) + fstU);
    if (last != scdU) {
        return (nbAll + 1us);
        <unit-value>
    };
    nbAll
}
frame : [weak] test4::foo!{i32, test4::main::_::_14_20, (i32, i32, i32,...)}::foo (a : [(i32, i32, i32)])-> [i32] return {
    let mut res : mut [mut i32] = [0 ; new a.len];
    {
        let mut #_iter : usize = 0us;
        let mut #_nb_iter : usize = core::range::countNbIterations!{usize, isize}::countNbIterations (0us, a.len, 1is, false);
        while (#_iter < #_nb_iter) {
            let i : usize;
            i = (0us + cast!{usize}((#_iter * cast!{usize}(1is))));
            {
                #{
                    if (res.len <= i) core::array::outOfArray ();
                    res [i]
                #} = (test4::main::_::_14_20)(#{
                        if (a.len <= i) core::array::outOfArray ();
                        a [i]
                    #}.0, #{
                        if (a.len <= i) core::array::outOfArray ();
                        a [i]
                    #}.1, #{
                        if (a.len <= i) core::array::outOfArray ();
                        a [i]
                    #}.2);
                <unit-value>
            };
            #_iter = (#_iter + 1us)
        }
    };
    res
}
frame : test4::main ()-> void {
    let z : [(i32, i32, i32)] = copy ({.len = 3us, .ptr = &([(1, 2, 3), (4, 5, 6), (7, 8, 9)])});
    let _ : [i32] = test4::foo!{i32, test4::main::_::_14_20, (i32, i32, i32,...)}::foo (z);
    <unit-value>
}
