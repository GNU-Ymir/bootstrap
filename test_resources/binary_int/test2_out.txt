frame : [weak] core::math::ipow!{usize}::ipow (base : usize, exp : i32)-> usize return {
    let mut pow : mut usize = base;
    let mut v : mut usize = 1us;
    let mut expV : mut i32 = exp;
    if (exp < 0) {
        return if ((base * base) != 1us) 0us else if ((exp & 1) != 0) base else 1us;
        <unit-value>
    };
    while (expV > 0) {
        if ((expV & 1) != 0) {
            v = (v * pow);
            <unit-value>
        };
        pow = (pow * pow);
        expV = (expV >> 1);
        <unit-value>
    };
    v
}
frame : test2::main ()-> void {
    let _a1_ : u8 = 3u8;
    let _a2_ : u8 = 3u8;
    let _a3_ : u16 = 1u16;
    let _a4_ : u16 = 1u16;
    let _a5_ : u32 = 6u32;
    let _a6_ : u32 = 6u32;
    let _a7_ : u64 = 1u64;
    let _a8_ : u64 = 1u64;
    let _a9_ : usize = 1us;
    let _a10_ : usize = 1us;
    let _a11_ : usize = 81us;
    let _a12_ : usize = 81us;
    <unit-value>
}
