frame :  _Y6test164mainFZv ()-> void {
    let YI_1 : [i32;3];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : *(void);
    let YI_5 : (len-> u64, ptr-> *(i32));
    let i : (len-> u64, ptr-> *(i32));
    let YI_7 : [i32;3];
    let YI_8 : (len-> u64, ptr-> *(i32));
    let YI_9 : (len-> u64, ptr-> *(i32));
    let YI_10 : *(void);
    let YI_11 : (len-> u64, ptr-> *(i32));
    let j : (len-> u64, ptr-> *(i32));
    let YI_13 : u8;
    let YI_14 : *(u8);
    let YI_15 : *(u8);
    let YI_16 : u64;
    let YI_17 : u64;
    let YI_18 : *(i32);
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    i = YI_5;
    YI_7 = [1, 2, 3];
    YI_8 = (len-> 3, ptr-> &YI_7);
    YI_9 = YI_8;
    YI_10 = _yrt_dup_slice(YI_9.ptr, YI_9.len, 4);
    YI_11 = (len-> YI_9.len, ptr-> YI_10);
    j = YI_11;
    YI_13 = i.len <= 1;
#IF YI_13
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_14 = "test_resources/enumeration/test16.yr";
    YI_15 = "test16::main";
    _yrt_exc_panic(YI_14, YI_15, 9);
#LABEL end(#2);
    YI_16 = 4 * 1;
    YI_17 = i.ptr + YI_16;
    YI_18 = cast!{*(i32)} (YI_17);
    *YI_18 = 9;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test164mainFZv);
    return 0;
}
