frame : Streamable::toPut (self : &(test16::A))-> void {
    test16::put (typeinfo (self).name);
    test16::put ("("s8);
    cte for {
        {
            let j : i32 = self.a;
            let i : usize = 0us;
            {
                test16::put (j);
                <unit-value>
            }
        };
        {
            let j : [i32] = self.b;
            let i : usize = 1us;
            {
                {
                    test16::put (", "s8);
                    <unit-value>
                };
                test16::put (j);
                <unit-value>
            }
        }
    };
    test16::put (")"s8);
    <unit-value>
}
frame :[pre] test16::A::self (mut self : mut &(mut test16::A), a : i32)-> void {
    {
        self.b = copy ({.len = 3us, .ptr = &([9, 10, 11])});
        self.a = a
    }
}
frame :[post] test16::A::self (mut self : mut &(mut test16::A), a : i32)-> void {
    <unit-value>
}
frame : test16::A::self (mut self : mut &(mut test16::A), a : i32)-> void {
    test16::A::self[pre](self, a);
    test16::A::self[post](self, a)
}
frame : [weak] test16::put!{&(test16::A)}::put (a : &(test16::A))-> void {
    Streamable::toPut(a);
    <unit-value>
}
frame : test16::main ()-> void {
    let a : &(test16::A) = test16::A::self(new, 1);
    test16::put!{&(test16::A)}::put (a);
    <unit-value>
}
