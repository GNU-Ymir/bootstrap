trait Streamable {
    pub fn toPut (self) {
        print (self.__typeinfo__.name);
        put ("(");
        for i, j in (expand self,) {
            cte if (i != 0us) put (", ");
            put (j);
        }
        put (")");
    }
}

class A {
    pub let a : i32;
    let dmut b : [i32] = copy [9, 10, 11];

    pub self (a : i32)
        with a = a
    {}

    impl Streamable;
}

fn put (_ : [c8]);
fn put (_ : i32);

fn put {Z impl Streamable} (a : T) {
    a.toPut ();
}

fn main () {
    let a = A::new (1);
    put (a);
}
