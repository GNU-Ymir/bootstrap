frame :  _Y5test24mainFZv ()-> void {
    let YI_1 : [i32;3];
    let a : [i32;3];
    let YI_3 : [i32;3];
    let YI_4 : (len-> u64, ptr-> *(i32));
    let YI_5 : (len-> u64, ptr-> *(i32));
    let YI_6 : *(void);
    let YI_7 : (len-> u64, ptr-> *(i32));
    let b : (len-> u64, ptr-> *(i32));
    let YI_9 : u8;
    let YI_10 : *(u8);
    let YI_11 : *(u8);
    let YI_12 : u64;
    let YI_13 : *(i32);
    let YI_14 : (len-> u64, ptr-> *(i32));
    let YI_15 : (len-> u64, ptr-> *(i32));
    let YI_16 : u64;
    let YI_17 : u64;
    let YI_18 : *(i32);
    let YI_19 : u64;
    let YI_20 : u64;
    let YI_21 : *(i32);
    let YI_22 : u64;
    let YI_23 : u64;
    let YI_24 : *(i32);
    YI_1 = [1, 2, 3];
    a = YI_1;
    YI_3 = [1, 2, 3];
    YI_4 = (len-> 3, ptr-> &YI_3);
    YI_5 = YI_4;
    YI_6 = _yrt_dup_slice(YI_5.ptr, YI_5.len, 4);
    YI_7 = (len-> YI_5.len, ptr-> YI_6);
    b = YI_7;
    _Y5test23fooFi32i32i32Zv(a[0], a[1], a[2]);
    YI_9 = b.len < 3;
#IF YI_9
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_10 = "test_resources/expansion/test2.yr";
    YI_11 = "test2::main";
    _yrt_exc_panic(YI_10, YI_11, 11);
#LABEL end(#2);
    YI_12 = 0 * 4;
    YI_13 = b.ptr + YI_12;
    YI_14 = (len-> 3, ptr-> YI_13);
    YI_15 = YI_14;
    YI_16 = 4 * 0;
    YI_17 = YI_15.ptr + YI_16;
    YI_18 = cast!{*(i32)} (YI_17);
    YI_19 = 4 * 1;
    YI_20 = YI_15.ptr + YI_19;
    YI_21 = cast!{*(i32)} (YI_20);
    YI_22 = 4 * 2;
    YI_23 = YI_15.ptr + YI_22;
    YI_24 = cast!{*(i32)} (YI_23);
    _Y5test23fooFi32i32i32Zv(*YI_18, *YI_21, *YI_24);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test24mainFZv);
    return 0;
}
frame :  _Y5test23fooFi32i32i32Zv (let a : i32, let b : i32, let c : i32)-> void {
}
