frame :  _Y5test33barFxS4xi32xS4xi32ZT125S3i325S3i32 (let x : (len-> u64, ptr-> *(i32)), let y : (len-> u64, ptr-> *(i32)))-> ((len-> u64, ptr-> *(i32)), (len-> u64, ptr-> *(i32))) {
    let YI_3 : u8;
    let YI_4 : *(u8);
    let YI_5 : *(u8);
    let YI_6 : u64;
    let YI_7 : u64;
    let YI_8 : *(i32);
    let YI_9 : u8;
    let YI_10 : *(u8);
    let YI_11 : *(u8);
    let YI_12 : u64;
    let YI_13 : u64;
    let YI_14 : *(i32);
    let YI_15 : i32;
    let YI_16 : u8;
    let YI_17 : *(u8);
    let YI_18 : *(u8);
    let YI_19 : u64;
    let YI_20 : u64;
    let YI_21 : *(i32);
    let YI_22 : ((len-> u64, ptr-> *(i32)), (len-> u64, ptr-> *(i32)));
    let YI_23 : ((len-> u64, ptr-> *(i32)), (len-> u64, ptr-> *(i32)));
    YI_3 = x.len <= 0;
#IF YI_3
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_4 = "test_resources/expansion/test3.yr";
    YI_5 = "test3::bar";
    _yrt_exc_panic(YI_4, YI_5, 6);
#LABEL end(#2);
    YI_6 = 4 * 0;
    YI_7 = x.ptr + YI_6;
    YI_8 = cast!{*(i32)} (YI_7);
    YI_9 = y.len <= 0;
#IF YI_9
#THEN_GOTO then(#3)
#ELSE_GOTO end(#4);
#LABEL then(#3);
    YI_10 = "test_resources/expansion/test3.yr";
    YI_11 = "test3::bar";
    _yrt_exc_panic(YI_10, YI_11, 6);
#LABEL end(#4);
    YI_12 = 4 * 0;
    YI_13 = y.ptr + YI_12;
    YI_14 = cast!{*(i32)} (YI_13);
    YI_15 = *YI_14;
    *YI_8 = YI_15;
    YI_16 = y.len <= 0;
#IF YI_16
#THEN_GOTO then(#5)
#ELSE_GOTO end(#6);
#LABEL then(#5);
    YI_17 = "test_resources/expansion/test3.yr";
    YI_18 = "test3::bar";
    _yrt_exc_panic(YI_17, YI_18, 7);
#LABEL end(#6);
    YI_19 = 4 * 0;
    YI_20 = y.ptr + YI_19;
    YI_21 = cast!{*(i32)} (YI_20);
    *YI_21 = 9;
    YI_22 = (x, y);
    YI_23 = YI_22;
    return YI_23;
}
frame :  _Y5test34mainFZv ()-> void {
    let YI_1 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_2 : u8;
    let YI_3 : *(u8);
    let YI_4 : *(u8);
    let YI_5 : u64;
    let YI_6 : *((len-> u64, ptr-> *(i32)));
    let YI_7 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_8 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_9 : u64;
    let YI_10 : u64;
    let YI_11 : *((len-> u64, ptr-> *(i32)));
    let YI_12 : u64;
    let YI_13 : u64;
    let YI_14 : *((len-> u64, ptr-> *(i32)));
    let YI_15 : [(len-> u64, ptr-> *(i32));2];
    let z : [(len-> u64, ptr-> *(i32));2];
    let YI_17 : ((len-> u64, ptr-> *(i32)), (len-> u64, ptr-> *(i32)));
    let d : ((len-> u64, ptr-> *(i32)), (len-> u64, ptr-> *(i32)));
    YI_1 = _Y5test33fooFZxS7xS4xi32();
    YI_2 = YI_1.len < 2;
#IF YI_2
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_3 = "test_resources/expansion/test3.yr";
    YI_4 = "test3::main";
    _yrt_exc_panic(YI_3, YI_4, 12);
#LABEL end(#2);
    YI_5 = 0 * 16;
    YI_6 = YI_1.ptr + YI_5;
    YI_7 = (len-> 2, ptr-> YI_6);
    YI_8 = YI_7;
    YI_9 = 16 * 0;
    YI_10 = YI_8.ptr + YI_9;
    YI_11 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_10);
    YI_12 = 16 * 1;
    YI_13 = YI_8.ptr + YI_12;
    YI_14 = cast!{*((len-> u64, ptr-> *(i32)))} (YI_13);
    YI_15 = [*YI_11, *YI_14];
    z = YI_15;
    YI_17 = _Y5test33barFxS4xi32xS4xi32ZT125S3i325S3i32(z[0], z[1]);
    d = YI_17;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test34mainFZv);
    return 0;
}
frame :  _Y5test33fooFZxS7xS4xi32 ()-> (len-> u64, ptr-> *((len-> u64, ptr-> *(i32)))) {
    let YI_1 : [i32;3];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : *(void);
    let YI_5 : (len-> u64, ptr-> *(i32));
    let YI_6 : [i32;3];
    let YI_7 : (len-> u64, ptr-> *(i32));
    let YI_8 : (len-> u64, ptr-> *(i32));
    let YI_9 : *(void);
    let YI_10 : (len-> u64, ptr-> *(i32));
    let YI_11 : [(len-> u64, ptr-> *(i32));2];
    let YI_12 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_13 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    let YI_14 : *(void);
    let YI_15 : (len-> u64, ptr-> *((len-> u64, ptr-> *(i32))));
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    YI_6 = [2, 3, 4];
    YI_7 = (len-> 3, ptr-> &YI_6);
    YI_8 = YI_7;
    YI_9 = _yrt_dup_slice(YI_8.ptr, YI_8.len, 4);
    YI_10 = (len-> YI_8.len, ptr-> YI_9);
    YI_11 = [YI_5, YI_10];
    YI_12 = (len-> 2, ptr-> &YI_11);
    YI_13 = YI_12;
    YI_14 = _yrt_dup_slice(YI_13.ptr, YI_13.len, 16);
    YI_15 = (len-> YI_13.len, ptr-> YI_14);
    return YI_15;
}
