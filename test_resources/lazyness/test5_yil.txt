frame :  [weak] _Y5test54main5_3_23FP8T65S3i32RS3i32Zv (let #{CLOSURE-VARREF} : *(((len-> u64, ptr-> *(i32)))), let #_REF : *((len-> u64, ptr-> *(i32))))-> void {
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : *(void);
    let YI_5 : (len-> u64, ptr-> *(i32));
    YI_3 = #{CLOSURE-VARREF}-> _0;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    *#_REF = YI_5;
}
frame :  _Y5test54mainFZv ()-> void {
    let YI_1 : [i32;3];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : *(void);
    let YI_5 : (len-> u64, ptr-> *(i32));
    let i : (len-> u64, ptr-> *(i32));
    let YI_7 : ((len-> u64, ptr-> *(i32)));
    let YI_8 : *(((len-> u64, ptr-> *(i32))));
    let YI_9 : (closure-> *(void), func-> *(void));
    let a : (set-> u8, value-> *(void), size-> u32, func-> (closure-> *(void), func-> *(void)));
    let b : (len-> u64, ptr-> *(i32));
    let c : (len-> u64, ptr-> *(i32));
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    i = YI_5;
    YI_7 = (i);
    YI_8 = _yrt_dup_tuple(&YI_7, 16);
    YI_9 = (closure-> YI_8, func-> &_Y5test54main5_3_23FP8T65S3i32RS3i32Zv);
    a = (set-> 0, value-> 0, size-> 16, func-> YI_9);
    b = *_yrt_call_lazy(&a);
    c = *_yrt_call_lazy(&a);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test54mainFZv);
    return 0;
}
