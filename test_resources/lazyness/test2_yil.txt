frame :  [weak] _Y5test24main5_5_23FP8T65S3i32RxS3i32Zv (let #{CLOSURE-VARREF} : *(((len-> u64, ptr-> *(i32)))), let #_REF : *((len-> u64, ptr-> *(i32))))-> void {
    *#_REF = #{CLOSURE-VARREF}-> _0;
}
frame :  _Y5test24mainFZv ()-> void {
    let YI_1 : [i32;3];
    let YI_2 : (len-> u64, ptr-> *(i32));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : *(void);
    let YI_5 : (len-> u64, ptr-> *(i32));
    let i : (len-> u64, ptr-> *(i32));
    let YI_7 : ((len-> u64, ptr-> *(i32)));
    let YI_8 : *(((len-> u64, ptr-> *(i32))));
    let YI_9 : (closure-> *(void), func-> *(void));
    let a : (set-> u8, value-> *(void), size-> u32, func-> (closure-> *(void), func-> *(void)));
    let b : (len-> u64, ptr-> *(i32));
    let YI_12 : u8;
    let YI_13 : *(u8);
    let YI_14 : *(u8);
    let YI_15 : u64;
    let YI_16 : u64;
    let YI_17 : *(i32);
    let YI_18 : u8;
    let YI_19 : *(u8);
    let YI_20 : *(u8);
    let YI_21 : u64;
    let YI_22 : u64;
    let YI_23 : *(i32);
    let YI_24 : i32;
    let YI_25 : u8;
    let __self_26 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_27 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_28 : *(u8);
    let YI_29 : *(u8);
    let YI_30 : u8;
    let YI_31 : *(u8);
    let YI_32 : *(u8);
    let YI_33 : u64;
    let YI_34 : u64;
    let YI_35 : *(i32);
    let YI_36 : i32;
    let YI_37 : u8;
    let __self_38 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_39 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_40 : *(u8);
    let YI_41 : *(u8);
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1);
    YI_3 = YI_2;
    YI_4 = _yrt_dup_slice(YI_3.ptr, YI_3.len, 4);
    YI_5 = (len-> YI_3.len, ptr-> YI_4);
    i = YI_5;
    YI_7 = (i);
    YI_8 = _yrt_dup_tuple(&YI_7, 16);
    YI_9 = (closure-> YI_8, func-> &_Y5test24main5_5_23FP8T65S3i32RxS3i32Zv);
    a = (set-> 0, value-> 0, size-> 16, func-> YI_9);
    b = *_yrt_call_lazy(&a);
    YI_12 = _yrt_call_lazy(&a)-> len <= 0;
#IF YI_12
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_13 = "test_resources/lazyness/test2.yr";
    YI_14 = "test2::main";
    _yrt_exc_panic(YI_13, YI_14, 8);
#LABEL end(#2);
    YI_15 = 4 * 0;
    YI_16 = _yrt_call_lazy(&a)-> ptr + YI_15;
    YI_17 = cast!{*(i32)} (YI_16);
    *YI_17 = 9;
    YI_18 = b.len <= 0;
#IF YI_18
#THEN_GOTO then(#3)
#ELSE_GOTO end(#4);
#LABEL then(#3);
    YI_19 = "test_resources/lazyness/test2.yr";
    YI_20 = "test2::main";
    _yrt_exc_panic(YI_19, YI_20, 10);
#LABEL end(#4);
    YI_21 = 4 * 0;
    YI_22 = b.ptr + YI_21;
    YI_23 = cast!{*(i32)} (YI_22);
    YI_24 = *YI_23;
    YI_25 = YI_24 == 9;
#IF ! YI_25
#THEN_GOTO then(#5)
#ELSE_GOTO end(#6);
#LABEL then(#5);
    __self_26 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_26, (len-> 0, ptr-> 0));
    YI_27 = __self_26;
    YI_28 = "test_resources/lazyness/test2.yr";
    YI_29 = "test2::main";
    _yrt_exc_throw(YI_28, YI_29, 10, YI_27);
#LABEL end(#6);
    YI_30 = i.len <= 0;
#IF YI_30
#THEN_GOTO then(#7)
#ELSE_GOTO end(#8);
#LABEL then(#7);
    YI_31 = "test_resources/lazyness/test2.yr";
    YI_32 = "test2::main";
    _yrt_exc_panic(YI_31, YI_32, 11);
#LABEL end(#8);
    YI_33 = 4 * 0;
    YI_34 = i.ptr + YI_33;
    YI_35 = cast!{*(i32)} (YI_34);
    YI_36 = *YI_35;
    YI_37 = YI_36 == 9;
#IF ! YI_37
#THEN_GOTO then(#9)
#ELSE_GOTO end(#a);
#LABEL then(#9);
    __self_38 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_38, (len-> 0, ptr-> 0));
    YI_39 = __self_38;
    YI_40 = "test_resources/lazyness/test2.yr";
    YI_41 = "test2::main";
    _yrt_exc_throw(YI_40, YI_41, 11, YI_39);
#LABEL end(#a);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test24mainFZv);
    return 0;
}
