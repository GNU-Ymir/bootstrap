frame :  [weak] _Y5test94main5_7_23FP2T0RxS3i32Zv (let #{CLOSURE-VARREF} : *(()), let #_REF : *((len-> u64, ptr-> *(i32))))-> void {
    let YI_3 : [i32;3];
    let YI_4 : (len-> u64, ptr-> *(i32));
    let YI_5 : (len-> u64, ptr-> *(i32));
    let YI_6 : *(void);
    let YI_7 : (len-> u64, ptr-> *(i32));
    YI_3 = [1, 2, 3];
    YI_4 = (len-> 3, ptr-> &YI_3);
    YI_5 = YI_4;
    YI_6 = _yrt_dup_slice(YI_5.ptr, YI_5.len, 4);
    YI_7 = (len-> YI_5.len, ptr-> YI_6);
    *#_REF = YI_7;
}
frame :  _Y5test94mainFZv ()-> void {
    let YI_1 : *(());
    let YI_2 : (closure-> *(void), func-> *(void));
    let YI_3 : (len-> u64, ptr-> *(i32));
    let _ : (len-> u64, ptr-> *(i32));
    YI_1 = 0;
    YI_2 = (closure-> YI_1, func-> &_Y5test94main5_7_23FP2T0RxS3i32Zv);
    YI_3 = _Y5test93fooFLxS3i32ZS3i32((set-> 0, value-> 0, size-> 16, func-> YI_2));
    _ = YI_3;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test94mainFZv);
    return 0;
}
frame :  _Y5test93fooFLxS3i32ZS3i32 (let x : (set-> u8, value-> *(void), size-> u32, func-> (closure-> *(void), func-> *(void))))-> (len-> u64, ptr-> *(i32)) {
    let YI_2 : u8;
    let YI_3 : *(u8);
    let YI_4 : *(u8);
    let YI_5 : u64;
    let YI_6 : u64;
    let YI_7 : *(i32);
    let YI_8 : (len-> u64, ptr-> *(i32));
    YI_2 = _yrt_call_lazy(&x)-> len <= 0;
#IF YI_2
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_3 = "test_resources/lazyness/test9.yr";
    YI_4 = "test9::foo";
    _yrt_exc_panic(YI_3, YI_4, 2);
#LABEL end(#2);
    YI_5 = 4 * 0;
    YI_6 = _yrt_call_lazy(&x)-> ptr + YI_5;
    YI_7 = cast!{*(i32)} (YI_6);
    *YI_7 = 9;
    YI_8 = *_yrt_call_lazy(&x);
    return YI_8;
}
