tuple T_1 (closure-> *(void), func-> *(void));
tuple T_2 (set-> u8, value-> *(void), size-> u32, func-> T_1);
tuple T_6 (len-> u64, ptr-> *(i32), blk_info-> *(void));
tuple T_7 (len-> u64, ptr-> *(u8), blk_info-> *(void));
tuple T_8 ();
frame :  _Y5test93fooFLxS4xi32ZxS4xi32 (let x : T_2)-> T_6 {
    YI_1 = _yrt_call_lazy(&x);
    YI_2 = YI_1-> len <= 0;
#IF YI_2
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_3 = "test_resources/lazyness/test9.yr";
    YI_4 = "test9::foo";
    _yrt_exc_panic(YI_3, YI_4, 2);
#LABEL end(#2);
    YI_5 = 4 * 0;
    YI_6 = YI_1-> ptr + YI_5;
    YI_7 = cast!{*(i32)} (YI_6);
    *YI_7 = 9;
    YI_8 = _yrt_call_lazy(&x);
    YI_9 = *YI_8;
    return YI_9;
}
frame :  [weak] _Y5test94main5_7_23FP2T0RxS4xi32Zv (let #{CLOSURE-VARREF} : *(T_8), let #_REF : *(T_6))-> void {
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1, blk_info-> 0);
    YI_3 = YI_2;
    _yrt_dup_slice(&YI_4, &YI_3, 4);
    YI_5 = YI_4;
    *#_REF = YI_5;
}
frame :  _Y5test94mainFZv ()-> void {
    YI_1 = (closure-> 0, func-> &_Y5test94main5_7_23FP2T0RxS4xi32Zv);
    YI_2 = _Y5test93fooFLxS4xi32ZxS4xi32((set-> 0, value-> 0, size-> 24, func-> YI_1));
    _ = YI_2;
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y5test94mainFZv);
    return 0;
}
