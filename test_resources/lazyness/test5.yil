pointer P_1 *(void);
pointer P_2 *(P_1);
tuple T_3 (closure-> P_1, func-> P_1);
tuple T_4 (set-> u8, value-> P_1, size-> u32, func-> T_3);
pointer P_8 *(i32);
tuple T_9 (len-> u64, ptr-> P_8, blk_info-> P_1);
tuple T_10 (T_9);
pointer P_11 *(T_10);
pointer P_12 *(T_9);
array A_13 [i32 ; 3];
pointer P_14 *(P_11);
pointer P_15 *(T_4);
frame :  [weak] _Y5test54main5_3_23FP8T65S3i32RxS4xi32Zv (let #{CLOSURE-VARREF} : P_11, let #_REF : P_12)-> void {
    YI_1 = #{CLOSURE-VARREF}-> _0;
    _yrt_dup_slice(&YI_2, &YI_1, 4);
    YI_3 = YI_2;
    *#_REF = YI_3;
}
frame :  _Y5test54mainFZv ()-> void {
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1, blk_info-> 0);
    YI_3 = YI_2;
    _yrt_dup_slice(&YI_4, &YI_3, 4);
    YI_5 = YI_4;
    i = YI_5;
    YI_6 = (i);
    _yrt_dup_tuple(&YI_7, &YI_6, 24);
    YI_8 = YI_7;
    YI_9 = (closure-> YI_8, func-> &_Y5test54main5_3_23FP8T65S3i32RxS4xi32Zv);
    a = (set-> 0, value-> 0, size-> 24, func-> YI_9);
    YI_10 = _yrt_call_lazy(&a);
    b = *YI_10;
    YI_11 = _yrt_call_lazy(&a);
    c = *YI_11;
}
frame :  main (let argc : u32, let argv : P_1)-> i32 {
    _yrt_run_main(argc, argc, &_Y5test54mainFZv);
    return 0;
}
