pointer P_1 *(void);
pointer P_2 *(P_1);
tuple T_3 (closure-> P_1, func-> P_1);
tuple T_4 (set-> u8, value-> P_1, size-> u32, func-> T_3);
pointer P_8 *(i32);
tuple T_9 (len-> u64, ptr-> P_8, blk_info-> P_1);
pointer P_10 *(T_4);
pointer P_11 *(T_9);
pointer P_12 *(u8);
tuple T_13 (len-> u64, ptr-> P_12, blk_info-> P_1);
array A_14 [u8 ; 34];
array A_15 [u8 ; 12];
tuple T_16 ();
pointer P_17 *(T_16);
array A_18 [i32 ; 3];
frame :  _Y6test103barFZv ()-> void {
}
frame :  _Y6test103fooFbLxS4xi32ZxS4xi32 (let z : u8, let x : T_4)-> T_9 {
#IF z
#THEN_GOTO then(#3)
#ELSE_GOTO else(#5);
#LABEL then(#3);
    YI_1 = _yrt_call_lazy(&x);
    YI_2 = YI_1-> len <= 0;
#IF YI_2
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    YI_3 = "test_resources/lazyness/test10.yr";
    YI_4 = "test10::foo";
    _yrt_exc_panic(YI_3, YI_4, 3);
#LABEL end(#2);
    YI_5 = 4 * 0;
    YI_6 = YI_1-> ptr + YI_5;
    YI_7 = cast!{P_8} (YI_6);
    *YI_7 = 9;
    YI_8 = _yrt_call_lazy(&x);
    YI_9 = *YI_8;
    YI_10 = YI_9;
#GOTO end(#4);
#LABEL else(#5);
    YI_11 = (len-> 0, ptr-> 0, blk_info-> 0);
    YI_10 = YI_11;
#LABEL end(#4);
    return YI_10;
}
frame :  [weak] _Y6test104main6_13_30FP2T0RxS4xi32Zv (let #{CLOSURE-VARREF} : P_17, let #_REF : P_11)-> void {
    _Y6test103barFZv();
    YI_1 = [1, 2, 3];
    YI_2 = (len-> 3, ptr-> &YI_1, blk_info-> 0);
    YI_3 = YI_2;
    _yrt_dup_slice(&YI_4, &YI_3, 4);
    YI_5 = YI_4;
    YI_6 = YI_5;
    *#_REF = YI_6;
}
frame :  _Y6test104mainFZv ()-> void {
    YI_1 = (closure-> 0, func-> &_Y6test104main6_13_30FP2T0RxS4xi32Zv);
    YI_2 = _Y6test103fooFbLxS4xi32ZxS4xi32(0, (set-> 0, value-> 0, size-> 24, func-> YI_1));
    x = YI_2;
}
frame :  main (let argc : u32, let argv : P_1)-> i32 {
    _yrt_run_main(argc, argc, &_Y6test104mainFZv);
    return 0;
}
