frame :  [weak] _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb (let a : (len-> u64, ptr-> *(i32)), let b : (len-> u64, ptr-> *(i32)))-> u8 {
    let YI_3 : u8;
    let #_iter : u64;
    let #_nb_iter : u64;
    let i : u64;
    let YI_8 : u8;
    let YI_9 : *(u8);
    let YI_10 : *(u8);
    let YI_11 : u64;
    let YI_12 : u64;
    let YI_13 : *(i32);
    let YI_14 : i32;
    let YI_15 : u8;
    let YI_16 : *(u8);
    let YI_17 : *(u8);
    let YI_18 : u64;
    let YI_19 : u64;
    let YI_20 : *(i32);
    let YI_21 : i32;
    let YI_22 : u8;
    let YI_23 : u64;
    let YI_6 : u8;
    let YI_24 : u8;
    YI_3 = a.len != b.len;
#IF YI_3
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    return 0;
#LABEL end(#2);
    #_iter = 0;
    #_nb_iter = a.len;
#GOTO test(#b);
#LABEL beg(#a);
    i = #_iter;
    YI_8 = a.len <= i;
#IF YI_8
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    YI_9 = "/usr/include/ymir/core/array.yr";
    YI_10 = "core::array::opEquals!{i32, [i32]}::opEquals";
    _yrt_exc_panic(YI_9, YI_10, 22);
#LABEL end(#5);
    YI_11 = 4 * i;
    YI_12 = a.ptr + YI_11;
    YI_13 = cast!{*(i32)} (YI_12);
    YI_14 = *YI_13;
    YI_15 = b.len <= i;
#IF YI_15
#THEN_GOTO then(#6)
#ELSE_GOTO end(#7);
#LABEL then(#6);
    YI_16 = "/usr/include/ymir/core/array.yr";
    YI_17 = "core::array::opEquals!{i32, [i32]}::opEquals";
    _yrt_exc_panic(YI_16, YI_17, 22);
#LABEL end(#7);
    YI_18 = 4 * i;
    YI_19 = b.ptr + YI_18;
    YI_20 = cast!{*(i32)} (YI_19);
    YI_21 = *YI_20;
    YI_22 = YI_14 != YI_21;
#IF YI_22
#THEN_GOTO then(#8)
#ELSE_GOTO end(#9);
#LABEL then(#8);
    return 0;
#LABEL end(#9);
    YI_23 = #_iter + 1;
    #_iter = YI_23;
#LABEL test(#b);
    YI_6 = #_iter < #_nb_iter;
#IF YI_6
#THEN_GOTO beg(#a)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    YI_24 = 1;
    return YI_24;
}
frame :  [weak] _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32 (let a : (len-> u64, ptr-> *(i32)), let b : (len-> u64, ptr-> *(i32)))-> i32 {
    let YI_3 : u64;
    let YI_4 : u8;
    let YI_5 : u64;
    let mi : u64;
    let #_iter : u64;
    let #_nb_iter : u64;
    let i : u64;
    let YI_11 : u8;
    let YI_12 : *(u8);
    let YI_13 : *(u8);
    let YI_14 : u64;
    let YI_15 : u64;
    let YI_16 : *(i32);
    let YI_17 : i32;
    let YI_18 : u8;
    let YI_19 : *(u8);
    let YI_20 : *(u8);
    let YI_21 : u64;
    let YI_22 : u64;
    let YI_23 : *(i32);
    let YI_24 : i32;
    let YI_25 : u8;
    let YI_26 : u8;
    let YI_27 : *(u8);
    let YI_28 : *(u8);
    let YI_29 : u64;
    let YI_30 : u64;
    let YI_31 : *(i32);
    let YI_32 : i32;
    let YI_33 : u8;
    let YI_34 : *(u8);
    let YI_35 : *(u8);
    let YI_36 : u64;
    let YI_37 : u64;
    let YI_38 : *(i32);
    let YI_39 : i32;
    let YI_40 : u8;
    let YI_41 : u64;
    let YI_9 : u8;
    let YI_42 : u8;
    let YI_43 : u8;
    YI_4 = b.len > a.len;
#IF YI_4
#THEN_GOTO then(#1)
#ELSE_GOTO else(#3);
#LABEL then(#1);
    YI_3 = a.len;
#GOTO end(#2);
#LABEL else(#3);
    YI_3 = b.len;
#LABEL end(#2);
    YI_5 = YI_3;
    mi = YI_5;
    #_iter = 0;
    #_nb_iter = YI_5;
#GOTO test(#j);
#LABEL beg(#i);
    i = #_iter;
    YI_11 = a.len <= i;
#IF YI_11
#THEN_GOTO then(#5)
#ELSE_GOTO end(#6);
#LABEL then(#5);
    YI_12 = "/usr/include/ymir/core/array.yr";
    YI_13 = "core::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_12, YI_13, 9);
#LABEL end(#6);
    YI_14 = 4 * i;
    YI_15 = a.ptr + YI_14;
    YI_16 = cast!{*(i32)} (YI_15);
    YI_17 = *YI_16;
    YI_18 = b.len <= i;
#IF YI_18
#THEN_GOTO then(#7)
#ELSE_GOTO end(#8);
#LABEL then(#7);
    YI_19 = "/usr/include/ymir/core/array.yr";
    YI_20 = "core::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_19, YI_20, 9);
#LABEL end(#8);
    YI_21 = 4 * i;
    YI_22 = b.ptr + YI_21;
    YI_23 = cast!{*(i32)} (YI_22);
    YI_24 = *YI_23;
    YI_25 = YI_17 < YI_24;
#IF YI_25
#THEN_GOTO then(#f)
#ELSE_GOTO else(#h);
#LABEL then(#f);
    return -1;
#GOTO end(#g);
#LABEL else(#h);
    YI_26 = a.len <= i;
#IF YI_26
#THEN_GOTO then(#9)
#ELSE_GOTO end(#a);
#LABEL then(#9);
    YI_27 = "/usr/include/ymir/core/array.yr";
    YI_28 = "core::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_27, YI_28, 10);
#LABEL end(#a);
    YI_29 = 4 * i;
    YI_30 = a.ptr + YI_29;
    YI_31 = cast!{*(i32)} (YI_30);
    YI_32 = *YI_31;
    YI_33 = b.len <= i;
#IF YI_33
#THEN_GOTO then(#b)
#ELSE_GOTO end(#c);
#LABEL then(#b);
    YI_34 = "/usr/include/ymir/core/array.yr";
    YI_35 = "core::array::opCmp!{i32, [i32]}::opCmp";
    _yrt_exc_panic(YI_34, YI_35, 10);
#LABEL end(#c);
    YI_36 = 4 * i;
    YI_37 = b.ptr + YI_36;
    YI_38 = cast!{*(i32)} (YI_37);
    YI_39 = *YI_38;
    YI_40 = YI_32 > YI_39;
#IF YI_40
#THEN_GOTO then(#d)
#ELSE_GOTO end(#e);
#LABEL then(#d);
    return 1;
#LABEL end(#e);
#LABEL end(#g);
    YI_41 = #_iter + 1;
    #_iter = YI_41;
#LABEL test(#j);
    YI_9 = #_iter < #_nb_iter;
#IF YI_9
#THEN_GOTO beg(#i)
#ELSE_GOTO end(#4);
#LABEL end(#4);
    YI_42 = a.len > b.len;
#IF YI_42
#THEN_GOTO then(#n)
#ELSE_GOTO else(#p);
#LABEL then(#n);
    return 1;
#GOTO end(#o);
#LABEL else(#p);
    YI_43 = a.len < b.len;
#IF YI_43
#THEN_GOTO then(#k)
#ELSE_GOTO else(#m);
#LABEL then(#k);
    return -1;
#GOTO end(#l);
#LABEL else(#m);
    return 0;
#LABEL end(#l);
#LABEL end(#o);
}
frame :  _Y6test104mainFZv ()-> void {
    let YI_1 : [i32;5];
    let a : [i32;5];
    let YI_3 : (len-> u64, ptr-> *(i32));
    let YI_4 : [i32;5];
    let YI_5 : (len-> u64, ptr-> *(i32));
    let YI_6 : u8;
    let __self_7 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_8 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_9 : *(u8);
    let YI_10 : *(u8);
    let YI_11 : (len-> u64, ptr-> *(i32));
    let YI_12 : [i32;5];
    let YI_13 : (len-> u64, ptr-> *(i32));
    let YI_14 : i32;
    let YI_15 : u8;
    let __self_16 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_17 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_18 : *(u8);
    let YI_19 : *(u8);
    let YI_20 : (len-> u64, ptr-> *(i32));
    let YI_21 : [i32;5];
    let YI_22 : (len-> u64, ptr-> *(i32));
    let YI_23 : i32;
    let YI_24 : u8;
    let __self_25 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_26 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_27 : *(u8);
    let YI_28 : *(u8);
    let YI_29 : (len-> u64, ptr-> *(i32));
    let YI_30 : [i32;5];
    let YI_31 : (len-> u64, ptr-> *(i32));
    let YI_32 : i32;
    let YI_33 : u8;
    let __self_34 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_35 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_36 : *(u8);
    let YI_37 : *(u8);
    let YI_38 : (len-> u64, ptr-> *(i32));
    let YI_39 : [i32;5];
    let YI_40 : (len-> u64, ptr-> *(i32));
    let YI_41 : i32;
    let YI_42 : u8;
    let __self_43 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_44 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_45 : *(u8);
    let YI_46 : *(u8);
    let YI_47 : (len-> u64, ptr-> *(i32));
    let YI_48 : [i32;5];
    let YI_49 : (len-> u64, ptr-> *(i32));
    let YI_50 : u8;
    let __self_51 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_52 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_53 : *(u8);
    let YI_54 : *(u8);
    YI_1 = [1, 2, 3, 4, 5];
    a = YI_1;
    YI_3 = (len-> 5, ptr-> &a);
    YI_4 = [1, 2, 3, 4, 5];
    YI_5 = (len-> 5, ptr-> &YI_4);
    YI_6 = _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb(YI_3, YI_5);
#IF ! YI_6
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    __self_7 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_7, (len-> 0, ptr-> 0));
    YI_8 = __self_7;
    YI_9 = "test_resources/lit_arrays/test10.yr";
    YI_10 = "test10::main";
    _yrt_exc_throw(YI_9, YI_10, 8, YI_8);
#LABEL end(#2);
    YI_11 = (len-> 5, ptr-> &a);
    YI_12 = [2, 3, 4, 5, 6];
    YI_13 = (len-> 5, ptr-> &YI_12);
    YI_14 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(YI_11, YI_13);
    YI_15 = YI_14 < 0;
#IF ! YI_15
#THEN_GOTO then(#3)
#ELSE_GOTO end(#4);
#LABEL then(#3);
    __self_16 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_16, (len-> 0, ptr-> 0));
    YI_17 = __self_16;
    YI_18 = "test_resources/lit_arrays/test10.yr";
    YI_19 = "test10::main";
    _yrt_exc_throw(YI_18, YI_19, 10, YI_17);
#LABEL end(#4);
    YI_20 = (len-> 5, ptr-> &a);
    YI_21 = [0, 3, 4, 5, 6];
    YI_22 = (len-> 5, ptr-> &YI_21);
    YI_23 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(YI_20, YI_22);
    YI_24 = YI_23 > 0;
#IF ! YI_24
#THEN_GOTO then(#5)
#ELSE_GOTO end(#6);
#LABEL then(#5);
    __self_25 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_25, (len-> 0, ptr-> 0));
    YI_26 = __self_25;
    YI_27 = "test_resources/lit_arrays/test10.yr";
    YI_28 = "test10::main";
    _yrt_exc_throw(YI_27, YI_28, 11, YI_26);
#LABEL end(#6);
    YI_29 = (len-> 5, ptr-> &a);
    YI_30 = [1, 3, 4, 5, 6];
    YI_31 = (len-> 5, ptr-> &YI_30);
    YI_32 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(YI_29, YI_31);
    YI_33 = YI_32 <= 0;
#IF ! YI_33
#THEN_GOTO then(#7)
#ELSE_GOTO end(#8);
#LABEL then(#7);
    __self_34 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_34, (len-> 0, ptr-> 0));
    YI_35 = __self_34;
    YI_36 = "test_resources/lit_arrays/test10.yr";
    YI_37 = "test10::main";
    _yrt_exc_throw(YI_36, YI_37, 12, YI_35);
#LABEL end(#8);
    YI_38 = (len-> 5, ptr-> &a);
    YI_39 = [0, 3, 4, 5, 6];
    YI_40 = (len-> 5, ptr-> &YI_39);
    YI_41 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(YI_38, YI_40);
    YI_42 = YI_41 >= 0;
#IF ! YI_42
#THEN_GOTO then(#9)
#ELSE_GOTO end(#a);
#LABEL then(#9);
    __self_43 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_43, (len-> 0, ptr-> 0));
    YI_44 = __self_43;
    YI_45 = "test_resources/lit_arrays/test10.yr";
    YI_46 = "test10::main";
    _yrt_exc_throw(YI_45, YI_46, 13, YI_44);
#LABEL end(#a);
    YI_47 = (len-> 5, ptr-> &a);
    YI_48 = [0, 3, 4, 5, 6];
    YI_49 = (len-> 5, ptr-> &YI_48);
    YI_50 = _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb(YI_47, YI_49);
#IF ! ! YI_50
#THEN_GOTO then(#b)
#ELSE_GOTO end(#c);
#LABEL then(#b);
    __self_51 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_51, (len-> 0, ptr-> 0));
    YI_52 = __self_51;
    YI_53 = "test_resources/lit_arrays/test10.yr";
    YI_54 = "test10::main";
    _yrt_exc_throw(YI_53, YI_54, 14, YI_52);
#LABEL end(#c);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test104mainFZv);
    return 0;
}
