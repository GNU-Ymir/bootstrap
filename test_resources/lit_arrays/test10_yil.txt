frame :  [weak] _Y4core5range17countNbIterationsNusizeNisizeFusizeusizeisizebZusize (let fst : u64, let scd : u64, let step : i64, let contains : u8)-> u64 {
    let YI_5 : (u64, u64, u64, u64);
    let YI_18 : u8;
    let fstU : u64;
    let scdU : u64;
    let YI_8 : u64;
    let YI_9 : u64;
    let YI_10 : (u64, u64, u64, u64);
    let YI_11 : (u64, u64, u64, u64);
    let fstU : u64;
    let scdU : u64;
    let YI_14 : u64;
    let YI_15 : u64;
    let YI_16 : (u64, u64, u64, u64);
    let YI_17 : (u64, u64, u64, u64);
    let YI_19 : (u64, u64, u64, u64);
    let stepU : u64;
    let fstU : u64;
    let scdU : u64;
    let subU : u64;
    let YI_24 : u64;
    let nbAll : u64;
    let YI_26 : u8;
    let YI_27 : u64;
    let YI_28 : u64;
    let YI_29 : u64;
    let last : u64;
    let YI_32 : u8;
    let YI_31 : u64;
    let YI_33 : u64;
    YI_18 = step < 0;
#IF YI_18
#THEN_GOTO then(#1)
#ELSE_GOTO else(#3);
#LABEL then(#1);
    fstU = scd;
    scdU = fst;
    YI_8 = cast!{u64} (- step);
    YI_9 = scdU - fstU;
    YI_10 = (YI_8, fstU, scdU, YI_9);
    YI_11 = YI_10;
    YI_5 = YI_11;
#GOTO end(#2);
#LABEL else(#3);
    fstU = fst;
    scdU = scd;
    YI_14 = cast!{u64} (step);
    YI_15 = scdU - fstU;
    YI_16 = (YI_14, fstU, scdU, YI_15);
    YI_17 = YI_16;
    YI_5 = YI_17;
#LABEL end(#2);
    YI_19 = YI_5;
    stepU = YI_19._0;
    fstU = YI_19._1;
    scdU = YI_19._2;
    subU = YI_19._3;
    YI_24 = subU / stepU;
    nbAll = YI_24;
    YI_26 = nbAll == 18446744073709551615;
#IF YI_26
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    return nbAll;
#LABEL end(#5);
#IF contains
#THEN_GOTO then(#6)
#ELSE_GOTO end(#7);
#LABEL then(#6);
    YI_27 = nbAll + 1;
    return YI_27;
#LABEL end(#7);
    YI_28 = nbAll * stepU;
    YI_29 = YI_28 + fstU;
    last = YI_29;
    YI_32 = last != scdU;
#IF YI_32
#THEN_GOTO then(#8)
#ELSE_GOTO end(#9);
#LABEL then(#8);
    YI_31 = nbAll + 1;
    return YI_31;
#LABEL end(#9);
    YI_33 = nbAll;
    return YI_33;
}
frame :  [weak] _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb (let a : (len-> u64, ptr-> *(i32)), let b : (len-> u64, ptr-> *(i32)))-> u8 {
    let YI_3 : u8;
    let #_iter : u64;
    let YI_5 : u64;
    let #_nb_iter : u64;
    let i : u64;
    let YI_9 : u64;
    let YI_10 : u64;
    let YI_11 : u64;
    let YI_12 : u64;
    let YI_13 : u8;
    let YI_14 : *(i32);
    let YI_15 : i32;
    let YI_16 : u8;
    let YI_17 : *(i32);
    let YI_18 : i32;
    let YI_19 : u8;
    let YI_20 : u64;
    let YI_7 : u8;
    let YI_21 : u8;
    YI_3 = a.len != b.len;
#IF YI_3
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    return 0;
#LABEL end(#2);
    #_iter = 0;
    YI_5 = _Y4core5range17countNbIterationsNusizeNisizeFusizeusizeisizebZusize(0, a.len, 1, 0);
    #_nb_iter = YI_5;
#GOTO test(#b);
#LABEL beg(#a);
    YI_9 = cast!{u64} (1);
    YI_10 = #_iter * YI_9;
    YI_11 = cast!{u64} (YI_10);
    YI_12 = 0 + YI_11;
    i = YI_12;
    YI_13 = a.len <= i;
#IF YI_13
#THEN_GOTO then(#4)
#ELSE_GOTO end(#5);
#LABEL then(#4);
    _yrt_exc_panic((len-> 31, ptr-> [47, 117, 115, 114, 47, 105, 110, 99, 108, 117, 100, 101, 47, 121, 109, 105, 114, 47, 99, 111, 114, 101, 47, 97, 114, 114, 97, 121, 46, 121, 114, 0]).ptr, (len-> 44, ptr-> [99, 111, 114, 101, 58, 58, 97, 114, 114, 97, 121, 58, 58, 111, 112, 69, 113, 117, 97, 108, 115, 33, 123, 105, 51, 50, 44, 32, 91, 105, 51, 50, 93, 125, 58, 58, 111, 112, 69, 113, 117, 97, 108, 115, 0]).ptr, 9);
#LABEL end(#5);
    YI_14 = cast!{*(i32)} (a.ptr + 4 * i);
    YI_15 = *YI_14;
    YI_16 = b.len <= i;
#IF YI_16
#THEN_GOTO then(#6)
#ELSE_GOTO end(#7);
#LABEL then(#6);
    _yrt_exc_panic((len-> 31, ptr-> [47, 117, 115, 114, 47, 105, 110, 99, 108, 117, 100, 101, 47, 121, 109, 105, 114, 47, 99, 111, 114, 101, 47, 97, 114, 114, 97, 121, 46, 121, 114, 0]).ptr, (len-> 44, ptr-> [99, 111, 114, 101, 58, 58, 97, 114, 114, 97, 121, 58, 58, 111, 112, 69, 113, 117, 97, 108, 115, 33, 123, 105, 51, 50, 44, 32, 91, 105, 51, 50, 93, 125, 58, 58, 111, 112, 69, 113, 117, 97, 108, 115, 0]).ptr, 9);
#LABEL end(#7);
    YI_17 = cast!{*(i32)} (b.ptr + 4 * i);
    YI_18 = *YI_17;
    YI_19 = YI_15 != YI_18;
#IF YI_19
#THEN_GOTO then(#8)
#ELSE_GOTO end(#9);
#LABEL then(#8);
    return 0;
#LABEL end(#9);
    YI_20 = #_iter + 1;
    #_iter = YI_20;
#LABEL test(#b);
    YI_7 = #_iter < #_nb_iter;
#IF YI_7
#THEN_GOTO beg(#a)
#ELSE_GOTO end(#3);
#LABEL end(#3);
    YI_21 = 1;
    return YI_21;
}
frame :  [weak] _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32 (let a : (len-> u64, ptr-> *(i32)), let b : (len-> u64, ptr-> *(i32)))-> i32 {
    let YI_3 : u64;
    let YI_4 : u8;
    let YI_5 : u64;
    let mi : u64;
    let #_iter : u64;
    let YI_8 : u64;
    let #_nb_iter : u64;
    let i : u64;
    let YI_12 : u64;
    let YI_13 : u64;
    let YI_14 : u64;
    let YI_15 : u64;
    let YI_23 : u8;
    let YI_24 : *(i32);
    let YI_25 : i32;
    let YI_26 : u8;
    let YI_27 : *(i32);
    let YI_28 : i32;
    let YI_29 : u8;
    let YI_16 : u8;
    let YI_17 : *(i32);
    let YI_18 : i32;
    let YI_19 : u8;
    let YI_20 : *(i32);
    let YI_21 : i32;
    let YI_22 : u8;
    let YI_30 : u64;
    let YI_10 : u8;
    let YI_32 : u8;
    let YI_31 : u8;
    YI_4 = b.len > a.len;
#IF YI_4
#THEN_GOTO then(#1)
#ELSE_GOTO else(#3);
#LABEL then(#1);
    YI_3 = a.len;
#GOTO end(#2);
#LABEL else(#3);
    YI_3 = b.len;
#LABEL end(#2);
    YI_5 = YI_3;
    mi = YI_5;
    #_iter = 0;
    YI_8 = _Y4core5range17countNbIterationsNusizeNisizeFusizeusizeisizebZusize(0, YI_5, 1, 0);
    #_nb_iter = YI_8;
#GOTO test(#j);
#LABEL beg(#i);
    YI_12 = cast!{u64} (1);
    YI_13 = #_iter * YI_12;
    YI_14 = cast!{u64} (YI_13);
    YI_15 = 0 + YI_14;
    i = YI_15;
    YI_23 = a.len <= i;
#IF YI_23
#THEN_GOTO then(#b)
#ELSE_GOTO end(#c);
#LABEL then(#b);
    _yrt_exc_panic((len-> 31, ptr-> [47, 117, 115, 114, 47, 105, 110, 99, 108, 117, 100, 101, 47, 121, 109, 105, 114, 47, 99, 111, 114, 101, 47, 97, 114, 114, 97, 121, 46, 121, 114, 0]).ptr, (len-> 38, ptr-> [99, 111, 114, 101, 58, 58, 97, 114, 114, 97, 121, 58, 58, 111, 112, 67, 109, 112, 33, 123, 105, 51, 50, 44, 32, 91, 105, 51, 50, 93, 125, 58, 58, 111, 112, 67, 109, 112, 0]).ptr, 18);
#LABEL end(#c);
    YI_24 = cast!{*(i32)} (a.ptr + 4 * i);
    YI_25 = *YI_24;
    YI_26 = b.len <= i;
#IF YI_26
#THEN_GOTO then(#d)
#ELSE_GOTO end(#e);
#LABEL then(#d);
    _yrt_exc_panic((len-> 31, ptr-> [47, 117, 115, 114, 47, 105, 110, 99, 108, 117, 100, 101, 47, 121, 109, 105, 114, 47, 99, 111, 114, 101, 47, 97, 114, 114, 97, 121, 46, 121, 114, 0]).ptr, (len-> 38, ptr-> [99, 111, 114, 101, 58, 58, 97, 114, 114, 97, 121, 58, 58, 111, 112, 67, 109, 112, 33, 123, 105, 51, 50, 44, 32, 91, 105, 51, 50, 93, 125, 58, 58, 111, 112, 67, 109, 112, 0]).ptr, 18);
#LABEL end(#e);
    YI_27 = cast!{*(i32)} (b.ptr + 4 * i);
    YI_28 = *YI_27;
    YI_29 = YI_25 < YI_28;
#IF YI_29
#THEN_GOTO then(#f)
#ELSE_GOTO else(#h);
#LABEL then(#f);
    return -1;
#GOTO end(#g);
#LABEL else(#h);
    YI_16 = a.len <= i;
#IF YI_16
#THEN_GOTO then(#5)
#ELSE_GOTO end(#6);
#LABEL then(#5);
    _yrt_exc_panic((len-> 31, ptr-> [47, 117, 115, 114, 47, 105, 110, 99, 108, 117, 100, 101, 47, 121, 109, 105, 114, 47, 99, 111, 114, 101, 47, 97, 114, 114, 97, 121, 46, 121, 114, 0]).ptr, (len-> 38, ptr-> [99, 111, 114, 101, 58, 58, 97, 114, 114, 97, 121, 58, 58, 111, 112, 67, 109, 112, 33, 123, 105, 51, 50, 44, 32, 91, 105, 51, 50, 93, 125, 58, 58, 111, 112, 67, 109, 112, 0]).ptr, 19);
#LABEL end(#6);
    YI_17 = cast!{*(i32)} (a.ptr + 4 * i);
    YI_18 = *YI_17;
    YI_19 = b.len <= i;
#IF YI_19
#THEN_GOTO then(#7)
#ELSE_GOTO end(#8);
#LABEL then(#7);
    _yrt_exc_panic((len-> 31, ptr-> [47, 117, 115, 114, 47, 105, 110, 99, 108, 117, 100, 101, 47, 121, 109, 105, 114, 47, 99, 111, 114, 101, 47, 97, 114, 114, 97, 121, 46, 121, 114, 0]).ptr, (len-> 38, ptr-> [99, 111, 114, 101, 58, 58, 97, 114, 114, 97, 121, 58, 58, 111, 112, 67, 109, 112, 33, 123, 105, 51, 50, 44, 32, 91, 105, 51, 50, 93, 125, 58, 58, 111, 112, 67, 109, 112, 0]).ptr, 19);
#LABEL end(#8);
    YI_20 = cast!{*(i32)} (b.ptr + 4 * i);
    YI_21 = *YI_20;
    YI_22 = YI_18 > YI_21;
#IF YI_22
#THEN_GOTO then(#9)
#ELSE_GOTO end(#a);
#LABEL then(#9);
    return 1;
#LABEL end(#a);
#LABEL end(#g);
    YI_30 = #_iter + 1;
    #_iter = YI_30;
#LABEL test(#j);
    YI_10 = #_iter < #_nb_iter;
#IF YI_10
#THEN_GOTO beg(#i)
#ELSE_GOTO end(#4);
#LABEL end(#4);
    YI_32 = a.len > b.len;
#IF YI_32
#THEN_GOTO then(#n)
#ELSE_GOTO else(#p);
#LABEL then(#n);
    return 1;
#GOTO end(#o);
#LABEL else(#p);
    YI_31 = a.len < b.len;
#IF YI_31
#THEN_GOTO then(#k)
#ELSE_GOTO else(#m);
#LABEL then(#k);
    return -1;
#GOTO end(#l);
#LABEL else(#m);
    return 0;
#LABEL end(#l);
#LABEL end(#o);
}
frame :  _Y6test104mainFZv ()-> void {
    let YI_1 : [i32;5];
    let a : [i32;5];
    let YI_5 : (len-> u64, ptr-> *(i32));
    let YI_6 : [i32;5];
    let YI_7 : (len-> u64, ptr-> *(i32));
    let YI_8 : u8;
    let __self_3 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_4 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_11 : (len-> u64, ptr-> *(i32));
    let YI_12 : [i32;5];
    let YI_13 : (len-> u64, ptr-> *(i32));
    let YI_14 : i32;
    let YI_15 : u8;
    let __self_9 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_10 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_18 : (len-> u64, ptr-> *(i32));
    let YI_19 : [i32;5];
    let YI_20 : (len-> u64, ptr-> *(i32));
    let YI_21 : i32;
    let YI_22 : u8;
    let __self_16 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_17 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_25 : (len-> u64, ptr-> *(i32));
    let YI_26 : [i32;5];
    let YI_27 : (len-> u64, ptr-> *(i32));
    let YI_28 : i32;
    let YI_29 : u8;
    let __self_23 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_24 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_32 : (len-> u64, ptr-> *(i32));
    let YI_33 : [i32;5];
    let YI_34 : (len-> u64, ptr-> *(i32));
    let YI_35 : i32;
    let YI_36 : u8;
    let __self_30 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_31 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_39 : (len-> u64, ptr-> *(i32));
    let YI_40 : [i32;5];
    let YI_41 : (len-> u64, ptr-> *(i32));
    let YI_42 : u8;
    let __self_37 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    let YI_38 : *((#_vtable-> *(*(void)), #_monitor-> *(void), trace-> (len-> u64, ptr-> *(*(void))), msg-> (len-> u64, ptr-> *(u8))));
    YI_1 = [1, 2, 3, 4, 5];
    a = YI_1;
    YI_5 = (len-> 5, ptr-> &a);
    YI_6 = [1, 2, 3, 4, 5];
    YI_7 = (len-> 5, ptr-> &YI_6);
    YI_8 = _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb(YI_5, YI_7);
#IF ! YI_8
#THEN_GOTO then(#1)
#ELSE_GOTO end(#2);
#LABEL then(#1);
    __self_3 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_3, (len-> 0, ptr-> 0));
    YI_4 = __self_3;
    _yrt_exc_throw((len-> 93, ptr-> [47, 104, 111, 109, 101, 47, 101, 109, 105, 108, 101, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 103, 121, 99, 47, 103, 99, 99, 45, 115, 114, 99, 47, 103, 99, 99, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 116, 101, 115, 116, 95, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 108, 105, 116, 95, 97, 114, 114, 97, 121, 115, 47, 116, 101, 115, 116, 49, 48, 46, 121, 114, 0]).ptr, (len-> 12, ptr-> [116, 101, 115, 116, 49, 48, 58, 58, 109, 97, 105, 110, 0]).ptr, 8, YI_4);
#LABEL end(#2);
    YI_11 = (len-> 5, ptr-> &a);
    YI_12 = [2, 3, 4, 5, 6];
    YI_13 = (len-> 5, ptr-> &YI_12);
    YI_14 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(YI_11, YI_13);
    YI_15 = YI_14 < 0;
#IF ! YI_15
#THEN_GOTO then(#3)
#ELSE_GOTO end(#4);
#LABEL then(#3);
    __self_9 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_9, (len-> 0, ptr-> 0));
    YI_10 = __self_9;
    _yrt_exc_throw((len-> 93, ptr-> [47, 104, 111, 109, 101, 47, 101, 109, 105, 108, 101, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 103, 121, 99, 47, 103, 99, 99, 45, 115, 114, 99, 47, 103, 99, 99, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 116, 101, 115, 116, 95, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 108, 105, 116, 95, 97, 114, 114, 97, 121, 115, 47, 116, 101, 115, 116, 49, 48, 46, 121, 114, 0]).ptr, (len-> 12, ptr-> [116, 101, 115, 116, 49, 48, 58, 58, 109, 97, 105, 110, 0]).ptr, 10, YI_10);
#LABEL end(#4);
    YI_18 = (len-> 5, ptr-> &a);
    YI_19 = [0, 3, 4, 5, 6];
    YI_20 = (len-> 5, ptr-> &YI_19);
    YI_21 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(YI_18, YI_20);
    YI_22 = YI_21 > 0;
#IF ! YI_22
#THEN_GOTO then(#5)
#ELSE_GOTO end(#6);
#LABEL then(#5);
    __self_16 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_16, (len-> 0, ptr-> 0));
    YI_17 = __self_16;
    _yrt_exc_throw((len-> 93, ptr-> [47, 104, 111, 109, 101, 47, 101, 109, 105, 108, 101, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 103, 121, 99, 47, 103, 99, 99, 45, 115, 114, 99, 47, 103, 99, 99, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 116, 101, 115, 116, 95, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 108, 105, 116, 95, 97, 114, 114, 97, 121, 115, 47, 116, 101, 115, 116, 49, 48, 46, 121, 114, 0]).ptr, (len-> 12, ptr-> [116, 101, 115, 116, 49, 48, 58, 58, 109, 97, 105, 110, 0]).ptr, 11, YI_17);
#LABEL end(#6);
    YI_25 = (len-> 5, ptr-> &a);
    YI_26 = [1, 3, 4, 5, 6];
    YI_27 = (len-> 5, ptr-> &YI_26);
    YI_28 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(YI_25, YI_27);
    YI_29 = YI_28 <= 0;
#IF ! YI_29
#THEN_GOTO then(#7)
#ELSE_GOTO end(#8);
#LABEL then(#7);
    __self_23 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_23, (len-> 0, ptr-> 0));
    YI_24 = __self_23;
    _yrt_exc_throw((len-> 93, ptr-> [47, 104, 111, 109, 101, 47, 101, 109, 105, 108, 101, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 103, 121, 99, 47, 103, 99, 99, 45, 115, 114, 99, 47, 103, 99, 99, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 116, 101, 115, 116, 95, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 108, 105, 116, 95, 97, 114, 114, 97, 121, 115, 47, 116, 101, 115, 116, 49, 48, 46, 121, 114, 0]).ptr, (len-> 12, ptr-> [116, 101, 115, 116, 49, 48, 58, 58, 109, 97, 105, 110, 0]).ptr, 12, YI_24);
#LABEL end(#8);
    YI_32 = (len-> 5, ptr-> &a);
    YI_33 = [0, 3, 4, 5, 6];
    YI_34 = (len-> 5, ptr-> &YI_33);
    YI_35 = _Y4core5array5opCmpNi32NS3i32FS3i32S3i32Zi32(YI_32, YI_34);
    YI_36 = YI_35 >= 0;
#IF ! YI_36
#THEN_GOTO then(#9)
#ELSE_GOTO end(#a);
#LABEL then(#9);
    __self_30 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_30, (len-> 0, ptr-> 0));
    YI_31 = __self_30;
    _yrt_exc_throw((len-> 93, ptr-> [47, 104, 111, 109, 101, 47, 101, 109, 105, 108, 101, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 103, 121, 99, 47, 103, 99, 99, 45, 115, 114, 99, 47, 103, 99, 99, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 116, 101, 115, 116, 95, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 108, 105, 116, 95, 97, 114, 114, 97, 121, 115, 47, 116, 101, 115, 116, 49, 48, 46, 121, 114, 0]).ptr, (len-> 12, ptr-> [116, 101, 115, 116, 49, 48, 58, 58, 109, 97, 105, 110, 0]).ptr, 13, YI_31);
#LABEL end(#a);
    YI_39 = (len-> 5, ptr-> &a);
    YI_40 = [0, 3, 4, 5, 6];
    YI_41 = (len-> 5, ptr-> &YI_40);
    YI_42 = _Y4core5array8opEqualsNi32NS3i32FS3i32S3i32Zb(YI_39, YI_41);
#IF ! ! YI_42
#THEN_GOTO then(#b)
#ELSE_GOTO end(#c);
#LABEL then(#b);
    __self_37 = _yrt_alloc_class(&_Y4core9exception11AssertErrorVT);
    _Y4core9exception11AssertError4selfFP29x4core9exception11AssertErrorS2c8Zv(__self_37, (len-> 0, ptr-> 0));
    YI_38 = __self_37;
    _yrt_exc_throw((len-> 93, ptr-> [47, 104, 111, 109, 101, 47, 101, 109, 105, 108, 101, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 103, 121, 99, 47, 103, 99, 99, 45, 115, 114, 99, 47, 103, 99, 99, 47, 121, 109, 105, 114, 47, 98, 111, 111, 116, 115, 116, 114, 97, 112, 47, 116, 101, 115, 116, 95, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 108, 105, 116, 95, 97, 114, 114, 97, 121, 115, 47, 116, 101, 115, 116, 49, 48, 46, 121, 114, 0]).ptr, (len-> 12, ptr-> [116, 101, 115, 116, 49, 48, 58, 58, 109, 97, 105, 110, 0]).ptr, 14, YI_38);
#LABEL end(#c);
}
frame :  main (let argc : u32, let argv : *(void))-> i32 {
    _yrt_run_main(argc, argc, &_Y6test104mainFZv);
    return 0;
}
