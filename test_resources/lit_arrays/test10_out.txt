frame : [weak] core::array::opEquals!{i32, [i32]}::opEquals (a : [i32], b : [i32])-> bool return {
    if (a.len != b.len) {
        return false
    };
    {
        let #_range : (..usize) = (0us ..[false] a.len).step_by (1is);
        let i : usize = 0us;
        while (i < #_range.scd) {
            {
                if (#{
                    if (a.len <= i) core::array::outOfArray ();
                    a [i]
                #} != #{
                    if (b.len <= i) core::array::outOfArray ();
                    b [i]
                #}) {
                    return false;
                    <unit-value>
                }
            };
            i = (i + 1us)
        }
    };
    true
}
frame : [weak] core::array::opCmp!{i32, [i32]}::opCmp (a : [i32], b : [i32])-> i32 {
    let mi : usize = if (b.len > a.len) {
            a.len
        } else {
            b.len
        };
    {
        let #_range : (..usize) = (0us ..[false] mi).step_by (1is);
        let i : usize = 0us;
        while (i < #_range.scd) {
            {
                if (#{
                    if (a.len <= i) core::array::outOfArray ();
                    a [i]
                #} < #{
                    if (b.len <= i) core::array::outOfArray ();
                    b [i]
                #}) {
                    return -1;
                    <unit-value>
                } else if (#{
                    if (a.len <= i) core::array::outOfArray ();
                    a [i]
                #} > #{
                    if (b.len <= i) core::array::outOfArray ();
                    b [i]
                #}) {
                    return 1;
                    <unit-value>
                }
            };
            i = (i + 1us)
        }
    };
    if (a.len > b.len) {
        return 1;
        <unit-value>
    } else if (a.len < b.len) {
        return -1;
        <unit-value>
    } else {
        return 0;
        <unit-value>
    }
}
frame : test10::main ()-> void {
    let a : [i32 ; 5us] = [1, 2, 3, 4, 5];
    core::exception::abort (core::array::opEquals!{i32, [i32]}::opEquals ({.len = 5us, .ptr = &(a)}, {.len = 5us, .ptr = &([1, 2, 3, 4, 5])}), ""s8);
    core::exception::abort ((core::array::opCmp!{i32, [i32]}::opCmp ({.len = 5us, .ptr = &(a)}, {.len = 5us, .ptr = &([2, 3, 4, 5, 6])}) < 0), ""s8);
    core::exception::abort ((core::array::opCmp!{i32, [i32]}::opCmp ({.len = 5us, .ptr = &(a)}, {.len = 5us, .ptr = &([0, 3, 4, 5, 6])}) > 0), ""s8);
    core::exception::abort ((core::array::opCmp!{i32, [i32]}::opCmp ({.len = 5us, .ptr = &(a)}, {.len = 5us, .ptr = &([1, 3, 4, 5, 6])}) <= 0), ""s8);
    core::exception::abort ((core::array::opCmp!{i32, [i32]}::opCmp ({.len = 5us, .ptr = &(a)}, {.len = 5us, .ptr = &([0, 3, 4, 5, 6])}) >= 0), ""s8);
    core::exception::abort (!core::array::opEquals!{i32, [i32]}::opEquals ({.len = 5us, .ptr = &(a)}, {.len = 5us, .ptr = &([0, 3, 4, 5, 6])}), ""s8);
    <unit-value>
}
