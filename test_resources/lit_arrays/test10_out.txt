frame : [weak] core::array::opCmp!{i32, 5us, [i32 ; 5us]}::opCmp (a : [i32 ; 5us], b : [i32 ; 5us])-> i32 {
    {
        let i : usize = 0us;
        while (i < 5us) {
            {
                if ({
                    if (5us <= i) core::array::outOfArray ();
                    a [i]
                } < {
                    if (5us <= i) core::array::outOfArray ();
                    b [i]
                }) {
                    return -1;
                    <unit-value>
                } else if ({
                    if (5us <= i) core::array::outOfArray ();
                    a [i]
                } > {
                    if (5us <= i) core::array::outOfArray ();
                    b [i]
                }) {
                    return 1;
                    <unit-value>
                }
            };
            i = (i + cast!{usize}(1is))
        }
    };
    0
}
frame : test10::main ()-> void {
    let a : [i32 ; 5us] = [#UNIQ([1, 2, 3]) [0us], #UNIQ() [1us], #UNIQ() [2us], #UNIQ([4, 5]) [0us], #UNIQ() [1us]];
    core::exception::abort ((core::array::opCmp!{i32, 5us, [i32 ; 5us]}::opCmp (a, [1, 2, 3, 4, 5]) == cast!{i32}(0is)), (""s8)[]);
    core::exception::abort ((core::array::opCmp!{i32, 5us, [i32 ; 5us]}::opCmp (a, [2, 3, 4, 5, 6]) < cast!{i32}(0is)), (""s8)[]);
    core::exception::abort ((core::array::opCmp!{i32, 5us, [i32 ; 5us]}::opCmp (a, [0, 3, 4, 5, 6]) > cast!{i32}(0is)), (""s8)[]);
    core::exception::abort ((core::array::opCmp!{i32, 5us, [i32 ; 5us]}::opCmp (a, [1, 3, 4, 5, 6]) <= cast!{i32}(0is)), (""s8)[]);
    core::exception::abort ((core::array::opCmp!{i32, 5us, [i32 ; 5us]}::opCmp (a, [0, 3, 4, 5, 6]) >= cast!{i32}(0is)), (""s8)[]);
    core::exception::abort ((core::array::opCmp!{i32, 5us, [i32 ; 5us]}::opCmp (a, [0, 3, 4, 5, 6]) != cast!{i32}(0is)), (""s8)[]);
    <unit-value>
}
